// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/tektoncd/pipeline/pkg/apis/resolution/v1beta1

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	pipelinev1 "github.com/tektoncd/pipeline/pkg/apis/pipeline/v1"
	duckv1 "knative.dev/pkg/apis/duck/v1"
)

// ResolutionRequest is an object for requesting the content of
// a Tekton resource like a pipeline.yaml.
//
// +genclient
// +genreconciler
#ResolutionRequest: {
	metav1.#TypeMeta

	// +optional
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// Spec holds the information for the request part of the resource request.
	// +optional
	spec?: #ResolutionRequestSpec @go(Spec)

	// Status communicates the state of the request and, ultimately,
	// the content of the resolved resource.
	// +optional
	status?: #ResolutionRequestStatus @go(Status)
}

// ResolutionRequestList is a list of ResolutionRequests.
#ResolutionRequestList: {
	metav1.#TypeMeta

	// +optional
	metadata: metav1.#ListMeta @go(ListMeta)
	items: [...#ResolutionRequest] @go(Items,[]ResolutionRequest)
}

// ResolutionRequestSpec are all the fields in the spec of the
// ResolutionRequest CRD.
#ResolutionRequestSpec: {
	// Parameters are the runtime attributes passed to
	// the resolver to help it figure out how to resolve the
	// resource being requested. For example: repo URL, commit SHA,
	// path to file, the kind of authentication to leverage, etc.
	// +optional
	// +listType=atomic
	params?: [...pipelinev1.#Param] @go(Params,[]pipelinev1.Param)
}

// ResolutionRequestStatus are all the fields in a ResolutionRequest's
// status subresource.
#ResolutionRequestStatus: {
	duckv1.#Status

	#ResolutionRequestStatusFields
}

// ResolutionRequestStatusFields are the ResolutionRequest-specific fields
// for the status subresource.
#ResolutionRequestStatusFields: {
	// Data is a string representation of the resolved content
	// of the requested resource in-lined into the ResolutionRequest
	// object.
	data: string @go(Data)

	// Deprecated: Use RefSource instead
	source?: null | pipelinev1.#RefSource @go(Source,*pipelinev1.RefSource)

	// RefSource is the source reference of the remote data that records the url, digest
	// and the entrypoint.
	refSource?: null | pipelinev1.#RefSource @go(RefSource,*pipelinev1.RefSource)
}
