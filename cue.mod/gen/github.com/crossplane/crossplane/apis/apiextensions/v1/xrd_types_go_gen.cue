// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane/crossplane/apis/apiextensions/v1

package v1

import (
	extv1 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	"k8s.io/apimachinery/pkg/runtime"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// CompositeResourceDefinitionSpec specifies the desired state of the definition.
#CompositeResourceDefinitionSpec: {
	// Group specifies the API group of the defined composite resource.
	// Composite resources are served under `/apis/<group>/...`. Must match the
	// name of the XRD (in the form `<names.plural>.<group>`).
	// +immutable
	group: string @go(Group)

	// Names specifies the resource and kind names of the defined composite
	// resource.
	// +immutable
	names: extv1.#CustomResourceDefinitionNames @go(Names)

	// ClaimNames specifies the names of an optional composite resource claim.
	// When claim names are specified Crossplane will create a namespaced
	// 'composite resource claim' CRD that corresponds to the defined composite
	// resource. This composite resource claim acts as a namespaced proxy for
	// the composite resource; creating, updating, or deleting the claim will
	// create, update, or delete a corresponding composite resource. You may add
	// claim names to an existing CompositeResourceDefinition, but they cannot
	// be changed or removed once they have been set.
	// +immutable
	// +optional
	claimNames?: null | extv1.#CustomResourceDefinitionNames @go(ClaimNames,*extv1.CustomResourceDefinitionNames)

	// ConnectionSecretKeys is the list of keys that will be exposed to the end
	// user of the defined kind.
	// If the list is empty, all keys will be published.
	// +optional
	connectionSecretKeys?: [...string] @go(ConnectionSecretKeys,[]string)

	// DefaultCompositeDeletePolicy is the policy used when deleting the Composite
	// that is associated with the Claim if no policy has been specified.
	// +optional
	// +kubebuilder:default=Background
	defaultCompositeDeletePolicy?: null | xpv1.#CompositeDeletePolicy @go(DefaultCompositeDeletePolicy,*xpv1.CompositeDeletePolicy)

	// DefaultCompositionRef refers to the Composition resource that will be used
	// in case no composition selector is given.
	// +optional
	defaultCompositionRef?: null | #CompositionReference @go(DefaultCompositionRef,*CompositionReference)

	// EnforcedCompositionRef refers to the Composition resource that will be used
	// by all composite instances whose schema is defined by this definition.
	// +optional
	// +immutable
	enforcedCompositionRef?: null | #CompositionReference @go(EnforcedCompositionRef,*CompositionReference)

	// DefaultCompositionUpdatePolicy is the policy used when updating composites after a new
	// Composition Revision has been created if no policy has been specified on the composite.
	// +optional
	// +kubebuilder:default=Automatic
	defaultCompositionUpdatePolicy?: null | xpv1.#UpdatePolicy @go(DefaultCompositionUpdatePolicy,*xpv1.UpdatePolicy)

	// Versions is the list of all API versions of the defined composite
	// resource. Version names are used to compute the order in which served
	// versions are listed in API discovery. If the version string is
	// "kube-like", it will sort above non "kube-like" version strings, which
	// are ordered lexicographically. "Kube-like" versions start with a "v",
	// then are followed by a number (the major version), then optionally the
	// string "alpha" or "beta" and another number (the minor version). These
	// are sorted first by GA > beta > alpha (where GA is a version with no
	// suffix such as beta or alpha), and then by comparing major version, then
	// minor version. An example sorted list of versions: v10, v2, v1, v11beta2,
	// v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.
	versions: [...#CompositeResourceDefinitionVersion] @go(Versions,[]CompositeResourceDefinitionVersion)

	// Conversion defines all conversion settings for the defined Composite resource.
	// +optional
	conversion?: null | extv1.#CustomResourceConversion @go(Conversion,*extv1.CustomResourceConversion)

	// Metadata specifies the desired metadata for the defined composite resource and claim CRD's.
	// +optional
	metadata?: null | #CompositeResourceDefinitionSpecMetadata @go(Metadata,*CompositeResourceDefinitionSpecMetadata)
}

// A CompositionReference references a Composition.
#CompositionReference: {
	// Name of the Composition.
	name: string @go(Name)
}

// CompositeResourceDefinitionSpecMetadata specifies the desired metadata of the defined composite resource and claim CRD's.
#CompositeResourceDefinitionSpecMetadata: {
	// Map of string keys and values that can be used to organize and categorize
	// (scope and select) objects. May match selectors of replication controllers
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
	// and services.
	// These labels are added to the composite resource and claim CRD's in addition
	// to any labels defined by `CompositionResourceDefinition` `metadata.labels`.
	// +optional
	labels?: {[string]: string} @go(Labels,map[string]string)

	// Annotations is an unstructured key value map stored with a resource that may be
	// set by external tools to store and retrieve arbitrary metadata. They are not
	// queryable and should be preserved when modifying objects.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
	// +optional
	annotations?: {[string]: string} @go(Annotations,map[string]string)
}

// CompositeResourceDefinitionVersion describes a version of an XR.
#CompositeResourceDefinitionVersion: {
	// Name of this version, e.g. “v1”, “v2beta1”, etc. Composite resources are
	// served under this version at `/apis/<group>/<version>/...` if `served` is
	// true.
	name: string @go(Name)

	// Referenceable specifies that this version may be referenced by a
	// Composition in order to configure which resources an XR may be composed
	// of. Exactly one version must be marked as referenceable; all Compositions
	// must target only the referenceable version. The referenceable version
	// must be served. It's mapped to the CRD's `spec.versions[*].storage` field.
	referenceable: bool @go(Referenceable)

	// Served specifies that this version should be served via REST APIs.
	served: bool @go(Served)

	// The deprecated field specifies that this version is deprecated and should
	// not be used.
	// +optional
	deprecated?: null | bool @go(Deprecated,*bool)

	// DeprecationWarning specifies the message that should be shown to the user
	// when using this version.
	// +optional
	deprecationWarning?: null | string @go(DeprecationWarning,*string)

	// Schema describes the schema used for validation, pruning, and defaulting
	// of this version of the defined composite resource. Fields required by all
	// composite resources will be injected into this schema automatically, and
	// will override equivalently named fields in this schema. Omitting this
	// schema results in a schema that contains only the fields required by all
	// composite resources.
	// +optional
	schema?: null | #CompositeResourceValidation @go(Schema,*CompositeResourceValidation)

	// AdditionalPrinterColumns specifies additional columns returned in Table
	// output. If no columns are specified, a single column displaying the age
	// of the custom resource is used. See the following link for details:
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#receiving-resources-as-tables
	// +optional
	additionalPrinterColumns?: [...extv1.#CustomResourceColumnDefinition] @go(AdditionalPrinterColumns,[]extv1.CustomResourceColumnDefinition)
}

// CompositeResourceValidation is a list of validation methods for a composite
// resource.
#CompositeResourceValidation: {
	// OpenAPIV3Schema is the OpenAPI v3 schema to use for validation and
	// pruning.
	// +kubebuilder:pruning:PreserveUnknownFields
	openAPIV3Schema?: runtime.#RawExtension @go(OpenAPIV3Schema)
}

// CompositeResourceDefinitionStatus shows the observed state of the definition.
#CompositeResourceDefinitionStatus: {
	xpv1.#ConditionedStatus

	// Controllers represents the status of the controllers that power this
	// composite resource definition.
	controllers?: #CompositeResourceDefinitionControllerStatus @go(Controllers)
}

// CompositeResourceDefinitionControllerStatus shows the observed state of the
// controllers that power the definition.
#CompositeResourceDefinitionControllerStatus: {
	// The CompositeResourceTypeRef is the type of composite resource that
	// Crossplane is currently reconciling for this definition. Its version will
	// eventually become consistent with the definition's referenceable version.
	// Note that clients may interact with any served type; this is simply the
	// type that Crossplane interacts with.
	compositeResourceType?: #TypeReference @go(CompositeResourceTypeRef)

	// The CompositeResourceClaimTypeRef is the type of composite resource claim
	// that Crossplane is currently reconciling for this definition. Its version
	// will eventually become consistent with the definition's referenceable
	// version. Note that clients may interact with any served type; this is
	// simply the type that Crossplane interacts with.
	compositeResourceClaimType?: #TypeReference @go(CompositeResourceClaimTypeRef)
}

// A CompositeResourceDefinition defines a new kind of composite infrastructure
// resource. The new resource is composed of other composite or managed
// infrastructure resources.
// +kubebuilder:printcolumn:name="ESTABLISHED",type="string",JSONPath=".status.conditions[?(@.type=='Established')].status"
// +kubebuilder:printcolumn:name="OFFERED",type="string",JSONPath=".status.conditions[?(@.type=='Offered')].status"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories=crossplane,shortName=xrd;xrds
#CompositeResourceDefinition: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta                 @go(ObjectMeta)
	spec?:     #CompositeResourceDefinitionSpec   @go(Spec)
	status?:   #CompositeResourceDefinitionStatus @go(Status)
}

// CompositeResourceDefinitionList contains a list of CompositeResourceDefinitions.
#CompositeResourceDefinitionList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#CompositeResourceDefinition] @go(Items,[]CompositeResourceDefinition)
}
