// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane/crossplane/apis/apiextensions/fn/io/v1alpha1

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	corev1 "k8s.io/api/core/v1"
)

// A FunctionIO represents the I/O of an Composition Function.
#FunctionIO: {
	metav1.#TypeMeta

	// Config is an opaque Kubernetes object containing optional function
	// configuration.
	// +optional
	// +kubebuilder:validation:EmbeddedResource
	// +kubebuilder:pruning:PreserveUnknownFields
	config?: null | runtime.#RawExtension @go(Config,*runtime.RawExtension)

	// Observed state prior to the invocation of a function pipeline. Functions
	// must not mutate this state - any attempts to do so will be ignored. State
	// passed to each function is fresh as of the time the function pipeline was
	// invoked, not as of the time each function was invoked.
	observed: #Observed @go(Observed)

	// Desired state according to a function pipeline. The state passed to a
	// particular function may have been mutated by previous functions in the
	// pipeline. Functions may mutate any part of the desired state they are
	// concerned with, and must pass through any part of the desired state that
	// they are not concerned with.
	desired: #Desired @go(Desired)

	// Results is an optional list that can be used by function to emit results
	// for observability and debugging purposes. Functions may mutate any
	// results that they are concerned with, and must pass through any results
	// that that are not concerned with.
	// +optional
	results?: [...#Result] @go(Results,[]Result)
}

// Observed state at the beginning of a function pipeline invocation.
#Observed: {
	// Composite reflects the observed state of the XR this function reconciles.
	composite: #ObservedComposite @go(Composite)

	// Resources reflect the observed state of any extant composed resources
	// this function reconciles. Only composed resources that currently exist in
	// the API server (i.e. have been created and not yet deleted) are included.
	// +optional
	resources?: [...#ObservedResource] @go(Resources,[]ObservedResource)
}

// An ObservedComposite resource.
#ObservedComposite: {
	// Resource reflects the observed XR.
	// +kubebuilder:validation:EmbeddedResource
	// +kubebuilder:pruning:PreserveUnknownFields
	resource: runtime.#RawExtension @go(Resource)

	// ConnectionDetails reflects the observed connection details of the XR.
	// +optional
	connectionDetails?: [...#ExplicitConnectionDetail] @go(ConnectionDetails,[]ExplicitConnectionDetail)
}

// An ObservedResource represents an observed composed resource.
#ObservedResource: {
	// Name of the observed resource. Must be unique within the array of
	// observed resources. Corresponds to the name entry in a Composition's
	// resources array, and the name entry in the desired resources array.
	name: string @go(Name)

	// Resource reflects the observed composed resource.
	// +kubebuilder:validation:EmbeddedResource
	// +kubebuilder:pruning:PreserveUnknownFields
	resource: runtime.#RawExtension @go(Resource)

	// ConnectionDetails reflects the observed connection details of the
	// composed resource.
	connectionDetails: [...#ExplicitConnectionDetail] @go(ConnectionDetails,[]ExplicitConnectionDetail)
}

// Desired state of a function pipeline invocation.
#Desired: {
	// Composite reflects the desired state of the XR this function reconciles.
	composite: #DesiredComposite @go(Composite)

	// Resources reflect the desired state of composed resources, including
	// those that do not yet exist.
	// +optional
	resources?: [...#DesiredResource] @go(Resources,[]DesiredResource)
}

// A DesiredComposite resource.
#DesiredComposite: {
	// Resource reflects the desired XR. Functions may update the metadata,
	// spec, and status of an XR.
	// +kubebuilder:validation:EmbeddedResource
	// +kubebuilder:pruning:PreserveUnknownFields
	resource: runtime.#RawExtension @go(Resource)

	// ConnectionDetails reflects the desired connection details of the XR.
	// +optional
	connectionDetails: [...#ExplicitConnectionDetail] @go(ConnectionDetails,[]ExplicitConnectionDetail)
}

// A DesiredResource represents a desired composed resource.
#DesiredResource: {
	// Name of the desired resource. Must be unique within the array of
	// desired resources. Corresponds to the name entry in a Composition's
	// resources array, and the name entry in the observed resources array.
	name: string @go(Name)

	// Resource reflects the desired composed resource. Functions may update the
	// metadata and spec of a composed resource. Updates to status will be
	// discarded.
	// +kubebuilder:validation:EmbeddedResource
	// +kubebuilder:pruning:PreserveUnknownFields
	resource: runtime.#RawExtension @go(Resource)

	// ConnectionDetails reflects _XR_ connection details that should be derived
	// from this composed resource.
	// +optional
	connectionDetails?: [...#DerivedConnectionDetail] @go(ConnectionDetails,[]DerivedConnectionDetail)

	// ReadinessChecks configures how this composed resource will be determined
	// to be ready.
	// +optional
	readinessChecks?: [...#DesiredReadinessCheck] @go(ReadinessChecks,[]DesiredReadinessCheck)
}

// An ExplicitConnectionDetail is a simple map of name (key) to value.
#ExplicitConnectionDetail: {
	// Name of the connection detail.
	name: string @go(Name)

	// Value of the connection detail.
	value: string @go(Value)
}

// A ConnectionDetailType is a type of connection detail.
#ConnectionDetailType: string // #enumConnectionDetailType

#enumConnectionDetailType:
	#ConnectionDetailTypeUnknown |
	#ConnectionDetailTypeFromConnectionSecretKey |
	#ConnectionDetailTypeFromFieldPath |
	#ConnectionDetailTypeFromValue

#ConnectionDetailTypeUnknown:                 #ConnectionDetailType & "Unknown"
#ConnectionDetailTypeFromConnectionSecretKey: #ConnectionDetailType & "FromConnectionSecretKey"
#ConnectionDetailTypeFromFieldPath:           #ConnectionDetailType & "FromFieldPath"
#ConnectionDetailTypeFromValue:               #ConnectionDetailType & "FromValue"

// A DerivedConnectionDetail specifies how to derive an XR connection detail
// from a composed resource.
#DerivedConnectionDetail: {
	// Name of the connection detail that will be propagated to the
	// connection secret of the XR. Can be omitted for FromConnectionDetailKey,
	// in which case it will default to that key.
	// +optional
	name?: null | string @go(Name,*string)

	// Type sets the connection detail fetching behaviour to be used. Each
	// connection detail type may require its own fields to be set on the
	// ConnectionDetail object.
	// +kubebuilder:validation:Enum=FromConnectionDetailKey;FromFieldPath;FromValue
	type: #ConnectionDetailType @go(Type)

	// FromConnectionDetailKey sets an XR connection detail to the value of the
	// supplied connection detail of the composed resource.
	// +optional
	fromConnectionSecretKey?: null | string @go(FromConnectionSecretKey,*string)

	// FromFieldPath sets an XR connection detail to the value at the supplied
	// fieldpath within the composed resource.
	// +optional
	fromFieldPath?: null | string @go(FromFieldPath,*string)

	// Value that will be propagated to the connection detail of the XR.
	// +optional
	value?: null | string @go(Value,*string)
}

// ReadinessCheckType is used for readiness check types.
#ReadinessCheckType: string // #enumReadinessCheckType

#enumReadinessCheckType:
	#ReadinessCheckTypeNonEmpty |
	#ReadinessCheckTypeMatchString |
	#ReadinessCheckTypeMatchInteger |
	#ReadinessCheckTypeMatchCondition |
	#ReadinessCheckTypeNone

#ReadinessCheckTypeNonEmpty:       #ReadinessCheckType & "NonEmpty"
#ReadinessCheckTypeMatchString:    #ReadinessCheckType & "MatchString"
#ReadinessCheckTypeMatchInteger:   #ReadinessCheckType & "MatchInteger"
#ReadinessCheckTypeMatchCondition: #ReadinessCheckType & "MatchCondition"
#ReadinessCheckTypeNone:           #ReadinessCheckType & "None"

// A DesiredReadinessCheck is used to indicate how to tell whether a resource is
// ready for consumption
#DesiredReadinessCheck: {
	// Type indicates the type of probe you'd like to use.
	// +kubebuilder:validation:Enum="MatchString";"MatchInteger";"NonEmpty";"MatchCondition";"None"
	type: #ReadinessCheckType @go(Type)

	// FieldPath shows the path of the field whose value will be used.
	// +optional
	fieldPath?: null | string @go(FieldPath,*string)

	// MatchString is the value you'd like to match if you're using
	// "MatchString" type.
	// +optional
	matchString?: null | string @go(MatchString,*string)

	// MatchInt is the value you'd like to match if you're using "MatchInt"
	// type.
	// +optional
	matchInteger?: null | int64 @go(MatchInteger,*int64)

	// MatchCondition specifies the condition you'd like to match if you're using "MatchCondition" type.
	// +optional
	matchCondition?: null | #MatchConditionReadinessCheck @go(MatchCondition,*MatchConditionReadinessCheck)
}

// MatchConditionReadinessCheck is used to indicate how to tell whether a resource is ready
// for consumption
#MatchConditionReadinessCheck: {
	// Type indicates the type of condition you'd like to use.
	// +kubebuilder:default="Ready"
	type: xpv1.#ConditionType @go(Type)

	// Status is the status of the condition you'd like to match.
	// +kubebuilder:default="True"
	status: corev1.#ConditionStatus @go(Status)
}

// Result is an optional list that can be used by function to emit results for
// observability and debugging purposes.
#Result: {
	// Severity is the severity of a result.
	//
	// Fatal results are fatal; subsequent Composition Functions may run, but
	// the Composition Function pipeline run will be considered a failure and
	// the first error will be returned.
	//
	// Warning results are non-fatal; the entire Composition will run to
	// completion but warning events and debug logs associated with the
	// composite resource will be emitted.
	//
	// Normal results are emitted as normal events and debug logs associated
	// with the composite resource.
	// +kubebuilder:validation:Enum=Fatal;Warning;Normal
	severity: #Severity @go(Severity)

	// Message is a human readable message.
	message: string @go(Message)
}

// Severity is the severity of a result.
#Severity: string // #enumSeverity

#enumSeverity:
	#SeverityFatal |
	#SeverityWarning |
	#SeverityNormal

#SeverityFatal:   #Severity & "Fatal"
#SeverityWarning: #Severity & "Warning"
#SeverityNormal:  #Severity & "Normal"
