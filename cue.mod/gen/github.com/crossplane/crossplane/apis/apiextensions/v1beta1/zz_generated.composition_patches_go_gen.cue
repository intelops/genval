// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane/crossplane/apis/apiextensions/v1beta1

package v1beta1

import xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"

// A PatchType is a type of patch.
#PatchType: string // #enumPatchType

#enumPatchType:
	#PatchTypeFromCompositeFieldPath |
	#PatchTypeFromEnvironmentFieldPath |
	#PatchTypePatchSet |
	#PatchTypeToCompositeFieldPath |
	#PatchTypeToEnvironmentFieldPath |
	#PatchTypeCombineFromEnvironment |
	#PatchTypeCombineFromComposite |
	#PatchTypeCombineToComposite |
	#PatchTypeCombineToEnvironment

#PatchTypeFromCompositeFieldPath:   #PatchType & "FromCompositeFieldPath"
#PatchTypeFromEnvironmentFieldPath: #PatchType & "FromEnvironmentFieldPath"
#PatchTypePatchSet:                 #PatchType & "PatchSet"
#PatchTypeToCompositeFieldPath:     #PatchType & "ToCompositeFieldPath"
#PatchTypeToEnvironmentFieldPath:   #PatchType & "ToEnvironmentFieldPath"
#PatchTypeCombineFromEnvironment:   #PatchType & "CombineFromEnvironment"
#PatchTypeCombineFromComposite:     #PatchType & "CombineFromComposite"
#PatchTypeCombineToComposite:       #PatchType & "CombineToComposite"
#PatchTypeCombineToEnvironment:     #PatchType & "CombineToEnvironment"

// A FromFieldPathPolicy determines how to patch from a field path.
#FromFieldPathPolicy: string // #enumFromFieldPathPolicy

#enumFromFieldPathPolicy:
	#FromFieldPathPolicyOptional |
	#FromFieldPathPolicyRequired

#FromFieldPathPolicyOptional: #FromFieldPathPolicy & "Optional"
#FromFieldPathPolicyRequired: #FromFieldPathPolicy & "Required"

// A PatchPolicy configures the specifics of patching behaviour.
#PatchPolicy: {
	// FromFieldPath specifies how to patch from a field path. The default is
	// 'Optional', which means the patch will be a no-op if the specified
	// fromFieldPath does not exist. Use 'Required' if the patch should fail if
	// the specified path does not exist.
	// +kubebuilder:validation:Enum=Optional;Required
	// +optional
	fromFieldPath?: null | #FromFieldPathPolicy @go(FromFieldPath,*FromFieldPathPolicy)
	mergeOptions?:  null | xpv1.#MergeOptions   @go(MergeOptions,*xpv1.MergeOptions)
}

// Patch objects are applied between composite and composed resources. Their
// behaviour depends on the Type selected. The default Type,
// FromCompositeFieldPath, copies a value from the composite resource to
// the composed resource, applying any defined transformers.
#Patch: {
	// Type sets the patching behaviour to be used. Each patch type may require
	// its own fields to be set on the Patch object.
	// +optional
	// +kubebuilder:validation:Enum=FromCompositeFieldPath;FromEnvironmentFieldPath;PatchSet;ToCompositeFieldPath;ToEnvironmentFieldPath;CombineFromEnvironment;CombineFromComposite;CombineToComposite;CombineToEnvironment
	// +kubebuilder:default=FromCompositeFieldPath
	type?: #PatchType @go(Type)

	// FromFieldPath is the path of the field on the resource whose value is
	// to be used as input. Required when type is FromCompositeFieldPath,
	// FromEnvironmentFieldPath, ToCompositeFieldPath, ToEnvironmentFieldPath.
	// +optional
	fromFieldPath?: null | string @go(FromFieldPath,*string)

	// Combine is the patch configuration for a CombineFromComposite,
	// CombineFromEnvironment, CombineToComposite or CombineToEnvironment patch.
	// +optional
	combine?: null | #Combine @go(Combine,*Combine)

	// ToFieldPath is the path of the field on the resource whose value will
	// be changed with the result of transforms. Leave empty if you'd like to
	// propagate to the same path as fromFieldPath.
	// +optional
	toFieldPath?: null | string @go(ToFieldPath,*string)

	// PatchSetName to include patches from. Required when type is PatchSet.
	// +optional
	patchSetName?: null | string @go(PatchSetName,*string)

	// Transforms are the list of functions that are used as a FIFO pipe for the
	// input to be transformed.
	// +optional
	transforms?: [...#Transform] @go(Transforms,[]Transform)

	// Policy configures the specifics of patching behaviour.
	// +optional
	policy?: null | #PatchPolicy @go(Policy,*PatchPolicy)
}

// A CombineVariable defines the source of a value that is combined with
// others to form and patch an output value. Currently, this only supports
// retrieving values from a field path.
#CombineVariable: {
	// FromFieldPath is the path of the field on the source whose value is
	// to be used as input.
	fromFieldPath: string @go(FromFieldPath)
}

// A CombineStrategy determines what strategy will be applied to combine
// variables.
#CombineStrategy: string // #enumCombineStrategy

#enumCombineStrategy:
	#CombineStrategyString

#CombineStrategyString: #CombineStrategy & "string"

// A Combine configures a patch that combines more than
// one input field into a single output field.
#Combine: {
	// Variables are the list of variables whose values will be retrieved and
	// combined.
	// +kubebuilder:validation:MinItems=1
	variables: [...#CombineVariable] @go(Variables,[]CombineVariable)

	// Strategy defines the strategy to use to combine the input variable values.
	// Currently only string is supported.
	// +kubebuilder:validation:Enum=string
	strategy: #CombineStrategy @go(Strategy)

	// String declares that input variables should be combined into a single
	// string, using the relevant settings for formatting purposes.
	// +optional
	string?: null | #StringCombine @go(String,*StringCombine)
}

// A StringCombine combines multiple input values into a single string.
#StringCombine: {
	// Format the input using a Go format string. See
	// https://golang.org/pkg/fmt/ for details.
	fmt: string @go(Format)
}
