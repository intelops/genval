// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/directconnect/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#ConnectionAssociationInitParameters: {
}

#ConnectionAssociationObservation: {
	// The ID of the connection.
	connectionId?: null | string @go(ConnectionID,*string)
	id?:           null | string @go(ID,*string)

	// The ID of the LAG with which to associate the connection.
	lagId?: null | string @go(LagID,*string)
}

#ConnectionAssociationParameters: {
	// The ID of the connection.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/directconnect/v1beta1.Connection
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	connectionId?: null | string @go(ConnectionID,*string)

	// Reference to a Connection in directconnect to populate connectionId.
	// +kubebuilder:validation:Optional
	connectionIdRef?: null | v1.#Reference @go(ConnectionIDRef,*v1.Reference)

	// Selector for a Connection in directconnect to populate connectionId.
	// +kubebuilder:validation:Optional
	connectionIdSelector?: null | v1.#Selector @go(ConnectionIDSelector,*v1.Selector)

	// The ID of the LAG with which to associate the connection.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/directconnect/v1beta1.Lag
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	lagId?: null | string @go(LagID,*string)

	// Reference to a Lag in directconnect to populate lagId.
	// +kubebuilder:validation:Optional
	lagIdRef?: null | v1.#Reference @go(LagIDRef,*v1.Reference)

	// Selector for a Lag in directconnect to populate lagId.
	// +kubebuilder:validation:Optional
	lagIdSelector?: null | v1.#Selector @go(LagIDSelector,*v1.Selector)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)
}

// ConnectionAssociationSpec defines the desired state of ConnectionAssociation
#ConnectionAssociationSpec: {
	v1.#ResourceSpec
	forProvider: #ConnectionAssociationParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ConnectionAssociationInitParameters @go(InitProvider)
}

// ConnectionAssociationStatus defines the observed state of ConnectionAssociation.
#ConnectionAssociationStatus: {
	v1.#ResourceStatus
	atProvider?: #ConnectionAssociationObservation @go(AtProvider)
}

// ConnectionAssociation is the Schema for the ConnectionAssociations API. Associates a Direct Connect Connection with a LAG.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#ConnectionAssociation: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta           @go(ObjectMeta)
	spec:      #ConnectionAssociationSpec   @go(Spec)
	status?:   #ConnectionAssociationStatus @go(Status)
}

// ConnectionAssociationList contains a list of ConnectionAssociations
#ConnectionAssociationList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#ConnectionAssociation] @go(Items,[]ConnectionAssociation)
}
