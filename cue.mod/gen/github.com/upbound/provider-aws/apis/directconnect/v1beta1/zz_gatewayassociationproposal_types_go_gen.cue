// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/directconnect/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#GatewayAssociationProposalInitParameters: {
	// VPC prefixes (CIDRs) to advertise to the Direct Connect gateway. Defaults to the CIDR block of the VPC associated with the Virtual Gateway. To enable drift detection, must be configured.
	allowedPrefixes?: [...null | string] @go(AllowedPrefixes,[]*string)
}

#GatewayAssociationProposalObservation: {
	// VPC prefixes (CIDRs) to advertise to the Direct Connect gateway. Defaults to the CIDR block of the VPC associated with the Virtual Gateway. To enable drift detection, must be configured.
	allowedPrefixes?: [...null | string] @go(AllowedPrefixes,[]*string)

	// The ID of the VGW or transit gateway with which to associate the Direct Connect gateway.
	associatedGatewayId?: null | string @go(AssociatedGatewayID,*string)

	// The ID of the AWS account that owns the VGW or transit gateway with which to associate the Direct Connect gateway.
	associatedGatewayOwnerAccountId?: null | string @go(AssociatedGatewayOwnerAccountID,*string)

	// The type of the associated gateway, transitGateway or virtualPrivateGateway.
	associatedGatewayType?: null | string @go(AssociatedGatewayType,*string)

	// Direct Connect Gateway identifier.
	dxGatewayId?: null | string @go(DxGatewayID,*string)

	// AWS Account identifier of the Direct Connect Gateway's owner.
	dxGatewayOwnerAccountId?: null | string @go(DxGatewayOwnerAccountID,*string)

	// Direct Connect Gateway Association Proposal identifier.
	id?: null | string @go(ID,*string)
}

#GatewayAssociationProposalParameters: {
	// VPC prefixes (CIDRs) to advertise to the Direct Connect gateway. Defaults to the CIDR block of the VPC associated with the Virtual Gateway. To enable drift detection, must be configured.
	// +kubebuilder:validation:Optional
	allowedPrefixes?: [...null | string] @go(AllowedPrefixes,[]*string)

	// The ID of the VGW or transit gateway with which to associate the Direct Connect gateway.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.VPNGateway
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	associatedGatewayId?: null | string @go(AssociatedGatewayID,*string)

	// Reference to a VPNGateway in ec2 to populate associatedGatewayId.
	// +kubebuilder:validation:Optional
	associatedGatewayIdRef?: null | v1.#Reference @go(AssociatedGatewayIDRef,*v1.Reference)

	// Selector for a VPNGateway in ec2 to populate associatedGatewayId.
	// +kubebuilder:validation:Optional
	associatedGatewayIdSelector?: null | v1.#Selector @go(AssociatedGatewayIDSelector,*v1.Selector)

	// Direct Connect Gateway identifier.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/directconnect/v1beta1.Gateway
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	dxGatewayId?: null | string @go(DxGatewayID,*string)

	// Reference to a Gateway in directconnect to populate dxGatewayId.
	// +kubebuilder:validation:Optional
	dxGatewayIdRef?: null | v1.#Reference @go(DxGatewayIDRef,*v1.Reference)

	// Selector for a Gateway in directconnect to populate dxGatewayId.
	// +kubebuilder:validation:Optional
	dxGatewayIdSelector?: null | v1.#Selector @go(DxGatewayIDSelector,*v1.Selector)

	// AWS Account identifier of the Direct Connect Gateway's owner.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/directconnect/v1beta1.Gateway
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("owner_account_id",true)
	// +kubebuilder:validation:Optional
	dxGatewayOwnerAccountId?: null | string @go(DxGatewayOwnerAccountID,*string)

	// Reference to a Gateway in directconnect to populate dxGatewayOwnerAccountId.
	// +kubebuilder:validation:Optional
	dxGatewayOwnerAccountIdRef?: null | v1.#Reference @go(DxGatewayOwnerAccountIDRef,*v1.Reference)

	// Selector for a Gateway in directconnect to populate dxGatewayOwnerAccountId.
	// +kubebuilder:validation:Optional
	dxGatewayOwnerAccountIdSelector?: null | v1.#Selector @go(DxGatewayOwnerAccountIDSelector,*v1.Selector)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)
}

// GatewayAssociationProposalSpec defines the desired state of GatewayAssociationProposal
#GatewayAssociationProposalSpec: {
	v1.#ResourceSpec
	forProvider: #GatewayAssociationProposalParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #GatewayAssociationProposalInitParameters @go(InitProvider)
}

// GatewayAssociationProposalStatus defines the observed state of GatewayAssociationProposal.
#GatewayAssociationProposalStatus: {
	v1.#ResourceStatus
	atProvider?: #GatewayAssociationProposalObservation @go(AtProvider)
}

// GatewayAssociationProposal is the Schema for the GatewayAssociationProposals API. Manages a Direct Connect Gateway Association Proposal.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#GatewayAssociationProposal: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta                @go(ObjectMeta)
	spec:      #GatewayAssociationProposalSpec   @go(Spec)
	status?:   #GatewayAssociationProposalStatus @go(Status)
}

// GatewayAssociationProposalList contains a list of GatewayAssociationProposals
#GatewayAssociationProposalList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#GatewayAssociationProposal] @go(Items,[]GatewayAssociationProposal)
}
