// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/imagebuilder/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#BlockDeviceMappingInitParameters: {
	// Name of the device. For example, /dev/sda or /dev/xvdb.
	deviceName?: null | string @go(DeviceName,*string)

	// Configuration block with Elastic Block Storage (EBS) block device mapping settings. Detailed below.
	ebs?: [...#EBSInitParameters] @go(EBS,[]EBSInitParameters)

	// Set to true to remove a mapping from the parent image.
	noDevice?: null | bool @go(NoDevice,*bool)

	// Virtual device name. For example, ephemeral0. Instance store volumes are numbered starting from 0.
	virtualName?: null | string @go(VirtualName,*string)
}

#BlockDeviceMappingObservation: {
	// Name of the device. For example, /dev/sda or /dev/xvdb.
	deviceName?: null | string @go(DeviceName,*string)

	// Configuration block with Elastic Block Storage (EBS) block device mapping settings. Detailed below.
	ebs?: [...#EBSObservation] @go(EBS,[]EBSObservation)

	// Set to true to remove a mapping from the parent image.
	noDevice?: null | bool @go(NoDevice,*bool)

	// Virtual device name. For example, ephemeral0. Instance store volumes are numbered starting from 0.
	virtualName?: null | string @go(VirtualName,*string)
}

#BlockDeviceMappingParameters: {
	// Name of the device. For example, /dev/sda or /dev/xvdb.
	// +kubebuilder:validation:Optional
	deviceName?: null | string @go(DeviceName,*string)

	// Configuration block with Elastic Block Storage (EBS) block device mapping settings. Detailed below.
	// +kubebuilder:validation:Optional
	ebs?: [...#EBSParameters] @go(EBS,[]EBSParameters)

	// Set to true to remove a mapping from the parent image.
	// +kubebuilder:validation:Optional
	noDevice?: null | bool @go(NoDevice,*bool)

	// Virtual device name. For example, ephemeral0. Instance store volumes are numbered starting from 0.
	// +kubebuilder:validation:Optional
	virtualName?: null | string @go(VirtualName,*string)
}

#ContainerRecipeComponentInitParameters: {
	// Configuration block(s) for parameters to configure the component. Detailed below.
	parameter?: [...#ParameterInitParameters] @go(Parameter,[]ParameterInitParameters)
}

#ContainerRecipeComponentObservation: {
	// Amazon Resource Name (ARN) of the Image Builder Component to associate.
	componentArn?: null | string @go(ComponentArn,*string)

	// Configuration block(s) for parameters to configure the component. Detailed below.
	parameter?: [...#ParameterObservation] @go(Parameter,[]ParameterObservation)
}

#ContainerRecipeComponentParameters: {
	// Amazon Resource Name (ARN) of the Image Builder Component to associate.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/imagebuilder/v1beta1.Component
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	componentArn?: null | string @go(ComponentArn,*string)

	// Reference to a Component in imagebuilder to populate componentArn.
	// +kubebuilder:validation:Optional
	componentArnRef?: null | v1.#Reference @go(ComponentArnRef,*v1.Reference)

	// Selector for a Component in imagebuilder to populate componentArn.
	// +kubebuilder:validation:Optional
	componentArnSelector?: null | v1.#Selector @go(ComponentArnSelector,*v1.Selector)

	// Configuration block(s) for parameters to configure the component. Detailed below.
	// +kubebuilder:validation:Optional
	parameter?: [...#ParameterParameters] @go(Parameter,[]ParameterParameters)
}

#ContainerRecipeInitParameters: {
	// Ordered configuration block(s) with components for the container recipe. Detailed below.
	component?: [...#ContainerRecipeComponentInitParameters] @go(Component,[]ContainerRecipeComponentInitParameters)

	// The type of the container to create. Valid values: DOCKER.
	containerType?: null | string @go(ContainerType,*string)

	// The description of the container recipe.
	description?: null | string @go(Description,*string)

	// The Dockerfile template used to build the image as an inline data blob.
	dockerfileTemplateData?: null | string @go(DockerfileTemplateData,*string)

	// The Amazon S3 URI for the Dockerfile that will be used to build the container image.
	dockerfileTemplateUri?: null | string @go(DockerfileTemplateURI,*string)

	// Configuration block used to configure an instance for building and testing container images. Detailed below.
	instanceConfiguration?: [...#InstanceConfigurationInitParameters] @go(InstanceConfiguration,[]InstanceConfigurationInitParameters)

	// The name of the container recipe.
	name?: null | string @go(Name,*string)

	// The base image for the container recipe.
	parentImage?: null | string @go(ParentImage,*string)

	// Specifies the operating system platform when you use a custom base image.
	platformOverride?: null | string @go(PlatformOverride,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// The destination repository for the container image. Detailed below.
	targetRepository?: [...#TargetRepositoryInitParameters] @go(TargetRepository,[]TargetRepositoryInitParameters)

	// Version of the container recipe.
	version?: null | string @go(Version,*string)

	// The working directory to be used during build and test workflows.
	workingDirectory?: null | string @go(WorkingDirectory,*string)
}

#ContainerRecipeObservation: {
	// Amazon Resource Name (ARN) of the container recipe.
	arn?: null | string @go(Arn,*string)

	// Ordered configuration block(s) with components for the container recipe. Detailed below.
	component?: [...#ContainerRecipeComponentObservation] @go(Component,[]ContainerRecipeComponentObservation)

	// The type of the container to create. Valid values: DOCKER.
	containerType?: null | string @go(ContainerType,*string)

	// Date the container recipe was created.
	dateCreated?: null | string @go(DateCreated,*string)

	// The description of the container recipe.
	description?: null | string @go(Description,*string)

	// The Dockerfile template used to build the image as an inline data blob.
	dockerfileTemplateData?: null | string @go(DockerfileTemplateData,*string)

	// The Amazon S3 URI for the Dockerfile that will be used to build the container image.
	dockerfileTemplateUri?: null | string @go(DockerfileTemplateURI,*string)

	// A flag that indicates if the target container is encrypted.
	encrypted?: null | bool   @go(Encrypted,*bool)
	id?:        null | string @go(ID,*string)

	// Configuration block used to configure an instance for building and testing container images. Detailed below.
	instanceConfiguration?: [...#InstanceConfigurationObservation] @go(InstanceConfiguration,[]InstanceConfigurationObservation)

	// The KMS key used to encrypt the container image.
	kmsKeyId?: null | string @go(KMSKeyID,*string)

	// The name of the container recipe.
	name?: null | string @go(Name,*string)

	// Owner of the container recipe.
	owner?: null | string @go(Owner,*string)

	// The base image for the container recipe.
	parentImage?: null | string @go(ParentImage,*string)

	// Platform of the container recipe.
	platform?: null | string @go(Platform,*string)

	// Specifies the operating system platform when you use a custom base image.
	platformOverride?: null | string @go(PlatformOverride,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// The destination repository for the container image. Detailed below.
	targetRepository?: [...#TargetRepositoryObservation] @go(TargetRepository,[]TargetRepositoryObservation)

	// Version of the container recipe.
	version?: null | string @go(Version,*string)

	// The working directory to be used during build and test workflows.
	workingDirectory?: null | string @go(WorkingDirectory,*string)
}

#ContainerRecipeParameters: {
	// Ordered configuration block(s) with components for the container recipe. Detailed below.
	// +kubebuilder:validation:Optional
	component?: [...#ContainerRecipeComponentParameters] @go(Component,[]ContainerRecipeComponentParameters)

	// The type of the container to create. Valid values: DOCKER.
	// +kubebuilder:validation:Optional
	containerType?: null | string @go(ContainerType,*string)

	// The description of the container recipe.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// The Dockerfile template used to build the image as an inline data blob.
	// +kubebuilder:validation:Optional
	dockerfileTemplateData?: null | string @go(DockerfileTemplateData,*string)

	// The Amazon S3 URI for the Dockerfile that will be used to build the container image.
	// +kubebuilder:validation:Optional
	dockerfileTemplateUri?: null | string @go(DockerfileTemplateURI,*string)

	// Configuration block used to configure an instance for building and testing container images. Detailed below.
	// +kubebuilder:validation:Optional
	instanceConfiguration?: [...#InstanceConfigurationParameters] @go(InstanceConfiguration,[]InstanceConfigurationParameters)

	// The KMS key used to encrypt the container image.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/kms/v1beta1.Key
	// +kubebuilder:validation:Optional
	kmsKeyId?: null | string @go(KMSKeyID,*string)

	// Reference to a Key in kms to populate kmsKeyId.
	// +kubebuilder:validation:Optional
	kmsKeyIdRef?: null | v1.#Reference @go(KMSKeyIDRef,*v1.Reference)

	// Selector for a Key in kms to populate kmsKeyId.
	// +kubebuilder:validation:Optional
	kmsKeyIdSelector?: null | v1.#Selector @go(KMSKeyIDSelector,*v1.Selector)

	// The name of the container recipe.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The base image for the container recipe.
	// +kubebuilder:validation:Optional
	parentImage?: null | string @go(ParentImage,*string)

	// Specifies the operating system platform when you use a custom base image.
	// +kubebuilder:validation:Optional
	platformOverride?: null | string @go(PlatformOverride,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// The destination repository for the container image. Detailed below.
	// +kubebuilder:validation:Optional
	targetRepository?: [...#TargetRepositoryParameters] @go(TargetRepository,[]TargetRepositoryParameters)

	// Version of the container recipe.
	// +kubebuilder:validation:Optional
	version?: null | string @go(Version,*string)

	// The working directory to be used during build and test workflows.
	// +kubebuilder:validation:Optional
	workingDirectory?: null | string @go(WorkingDirectory,*string)
}

#EBSInitParameters: {
	// Whether to delete the volume on termination. Defaults to unset, which is the value inherited from the parent image.
	deleteOnTermination?: null | string @go(DeleteOnTermination,*string)

	// Whether to encrypt the volume. Defaults to unset, which is the value inherited from the parent image.
	encrypted?: null | string @go(Encrypted,*string)

	// Number of Input/Output (I/O) operations per second to provision for an io1 or io2 volume.
	iops?: null | float64 @go(Iops,*float64)

	// Amazon Resource Name (ARN) of the Key Management Service (KMS) Key for encryption.
	kmsKeyId?: null | string @go(KMSKeyID,*string)

	// Identifier of the EC2 Volume Snapshot.
	snapshotId?: null | string @go(SnapshotID,*string)

	// For GP3 volumes only. The throughput in MiB/s that the volume supports.
	throughput?: null | float64 @go(Throughput,*float64)

	// Size of the volume, in GiB.
	volumeSize?: null | float64 @go(VolumeSize,*float64)

	// Type of the volume. For example, gp2 or io2.
	volumeType?: null | string @go(VolumeType,*string)
}

#EBSObservation: {
	// Whether to delete the volume on termination. Defaults to unset, which is the value inherited from the parent image.
	deleteOnTermination?: null | string @go(DeleteOnTermination,*string)

	// Whether to encrypt the volume. Defaults to unset, which is the value inherited from the parent image.
	encrypted?: null | string @go(Encrypted,*string)

	// Number of Input/Output (I/O) operations per second to provision for an io1 or io2 volume.
	iops?: null | float64 @go(Iops,*float64)

	// Amazon Resource Name (ARN) of the Key Management Service (KMS) Key for encryption.
	kmsKeyId?: null | string @go(KMSKeyID,*string)

	// Identifier of the EC2 Volume Snapshot.
	snapshotId?: null | string @go(SnapshotID,*string)

	// For GP3 volumes only. The throughput in MiB/s that the volume supports.
	throughput?: null | float64 @go(Throughput,*float64)

	// Size of the volume, in GiB.
	volumeSize?: null | float64 @go(VolumeSize,*float64)

	// Type of the volume. For example, gp2 or io2.
	volumeType?: null | string @go(VolumeType,*string)
}

#EBSParameters: {
	// Whether to delete the volume on termination. Defaults to unset, which is the value inherited from the parent image.
	// +kubebuilder:validation:Optional
	deleteOnTermination?: null | string @go(DeleteOnTermination,*string)

	// Whether to encrypt the volume. Defaults to unset, which is the value inherited from the parent image.
	// +kubebuilder:validation:Optional
	encrypted?: null | string @go(Encrypted,*string)

	// Number of Input/Output (I/O) operations per second to provision for an io1 or io2 volume.
	// +kubebuilder:validation:Optional
	iops?: null | float64 @go(Iops,*float64)

	// Amazon Resource Name (ARN) of the Key Management Service (KMS) Key for encryption.
	// +kubebuilder:validation:Optional
	kmsKeyId?: null | string @go(KMSKeyID,*string)

	// Identifier of the EC2 Volume Snapshot.
	// +kubebuilder:validation:Optional
	snapshotId?: null | string @go(SnapshotID,*string)

	// For GP3 volumes only. The throughput in MiB/s that the volume supports.
	// +kubebuilder:validation:Optional
	throughput?: null | float64 @go(Throughput,*float64)

	// Size of the volume, in GiB.
	// +kubebuilder:validation:Optional
	volumeSize?: null | float64 @go(VolumeSize,*float64)

	// Type of the volume. For example, gp2 or io2.
	// +kubebuilder:validation:Optional
	volumeType?: null | string @go(VolumeType,*string)
}

#InstanceConfigurationInitParameters: {
	// Configuration block(s) with block device mappings for the container recipe. Detailed below.
	blockDeviceMapping?: [...#BlockDeviceMappingInitParameters] @go(BlockDeviceMapping,[]BlockDeviceMappingInitParameters)

	// The AMI ID to use as the base image for a container build and test instance. If not specified, Image Builder will use the appropriate ECS-optimized AMI as a base image.
	image?: null | string @go(Image,*string)
}

#InstanceConfigurationObservation: {
	// Configuration block(s) with block device mappings for the container recipe. Detailed below.
	blockDeviceMapping?: [...#BlockDeviceMappingObservation] @go(BlockDeviceMapping,[]BlockDeviceMappingObservation)

	// The AMI ID to use as the base image for a container build and test instance. If not specified, Image Builder will use the appropriate ECS-optimized AMI as a base image.
	image?: null | string @go(Image,*string)
}

#InstanceConfigurationParameters: {
	// Configuration block(s) with block device mappings for the container recipe. Detailed below.
	// +kubebuilder:validation:Optional
	blockDeviceMapping?: [...#BlockDeviceMappingParameters] @go(BlockDeviceMapping,[]BlockDeviceMappingParameters)

	// The AMI ID to use as the base image for a container build and test instance. If not specified, Image Builder will use the appropriate ECS-optimized AMI as a base image.
	// +kubebuilder:validation:Optional
	image?: null | string @go(Image,*string)
}

#ParameterInitParameters: {
	// The name of the component parameter.
	name?: null | string @go(Name,*string)

	// The value for the named component parameter.
	value?: null | string @go(Value,*string)
}

#ParameterObservation: {
	// The name of the component parameter.
	name?: null | string @go(Name,*string)

	// The value for the named component parameter.
	value?: null | string @go(Value,*string)
}

#ParameterParameters: {
	// The name of the component parameter.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The value for the named component parameter.
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

#TargetRepositoryInitParameters: {
	// The service in which this image is registered. Valid values: ECR.
	service?: null | string @go(Service,*string)
}

#TargetRepositoryObservation: {
	// The name of the container repository where the output container image is stored. This name is prefixed by the repository location.
	repositoryName?: null | string @go(RepositoryName,*string)

	// The service in which this image is registered. Valid values: ECR.
	service?: null | string @go(Service,*string)
}

#TargetRepositoryParameters: {
	// The name of the container repository where the output container image is stored. This name is prefixed by the repository location.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ecr/v1beta1.Repository
	// +kubebuilder:validation:Optional
	repositoryName?: null | string @go(RepositoryName,*string)

	// Reference to a Repository in ecr to populate repositoryName.
	// +kubebuilder:validation:Optional
	repositoryNameRef?: null | v1.#Reference @go(RepositoryNameRef,*v1.Reference)

	// Selector for a Repository in ecr to populate repositoryName.
	// +kubebuilder:validation:Optional
	repositoryNameSelector?: null | v1.#Selector @go(RepositoryNameSelector,*v1.Selector)

	// The service in which this image is registered. Valid values: ECR.
	// +kubebuilder:validation:Optional
	service?: null | string @go(Service,*string)
}

// ContainerRecipeSpec defines the desired state of ContainerRecipe
#ContainerRecipeSpec: {
	v1.#ResourceSpec
	forProvider: #ContainerRecipeParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ContainerRecipeInitParameters @go(InitProvider)
}

// ContainerRecipeStatus defines the observed state of ContainerRecipe.
#ContainerRecipeStatus: {
	v1.#ResourceStatus
	atProvider?: #ContainerRecipeObservation @go(AtProvider)
}

// ContainerRecipe is the Schema for the ContainerRecipes API. Manage an Image Builder Container Recipe
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#ContainerRecipe: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.component) || (has(self.initProvider) && has(self.initProvider.component))",message="spec.forProvider.component is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.containerType) || (has(self.initProvider) && has(self.initProvider.containerType))",message="spec.forProvider.containerType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.parentImage) || (has(self.initProvider) && has(self.initProvider.parentImage))",message="spec.forProvider.parentImage is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.targetRepository) || (has(self.initProvider) && has(self.initProvider.targetRepository))",message="spec.forProvider.targetRepository is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.version) || (has(self.initProvider) && has(self.initProvider.version))",message="spec.forProvider.version is a required parameter"
	spec:    #ContainerRecipeSpec   @go(Spec)
	status?: #ContainerRecipeStatus @go(Status)
}

// ContainerRecipeList contains a list of ContainerRecipes
#ContainerRecipeList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#ContainerRecipe] @go(Items,[]ContainerRecipe)
}
