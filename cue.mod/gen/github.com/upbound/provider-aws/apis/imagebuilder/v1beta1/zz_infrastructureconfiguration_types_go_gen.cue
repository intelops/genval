// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/imagebuilder/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#InfrastructureConfigurationInitParameters: {
	// Description for the configuration.
	description?: null | string @go(Description,*string)

	// Configuration block with instance metadata options for the HTTP requests that pipeline builds use to launch EC2 build and test instances. Detailed below.
	instanceMetadataOptions?: [...#InstanceMetadataOptionsInitParameters] @go(InstanceMetadataOptions,[]InstanceMetadataOptionsInitParameters)

	// Set of EC2 Instance Types.
	instanceTypes?: [...null | string] @go(InstanceTypes,[]*string)

	// Configuration block with logging settings. Detailed below.
	logging?: [...#LoggingInitParameters] @go(Logging,[]LoggingInitParameters)

	// Name for the configuration.
	name?: null | string @go(Name,*string)

	// Key-value map of resource tags to assign to infrastructure created by the configuration.
	resourceTags?: {[string]: null | string} @go(ResourceTags,map[string]*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Enable if the instance should be terminated when the pipeline fails. Defaults to false.
	terminateInstanceOnFailure?: null | bool @go(TerminateInstanceOnFailure,*bool)
}

#InfrastructureConfigurationObservation: {
	// Amazon Resource Name (ARN) of the configuration.
	arn?: null | string @go(Arn,*string)

	// Date when the configuration was created.
	dateCreated?: null | string @go(DateCreated,*string)

	// Date when the configuration was updated.
	dateUpdated?: null | string @go(DateUpdated,*string)

	// Description for the configuration.
	description?: null | string @go(Description,*string)

	// Amazon Resource Name (ARN) of the configuration.
	id?: null | string @go(ID,*string)

	// Configuration block with instance metadata options for the HTTP requests that pipeline builds use to launch EC2 build and test instances. Detailed below.
	instanceMetadataOptions?: [...#InstanceMetadataOptionsObservation] @go(InstanceMetadataOptions,[]InstanceMetadataOptionsObservation)

	// Name of IAM Instance Profile.
	instanceProfileName?: null | string @go(InstanceProfileName,*string)

	// Set of EC2 Instance Types.
	instanceTypes?: [...null | string] @go(InstanceTypes,[]*string)

	// Name of EC2 Key Pair.
	keyPair?: null | string @go(KeyPair,*string)

	// Configuration block with logging settings. Detailed below.
	logging?: [...#LoggingObservation] @go(Logging,[]LoggingObservation)

	// Name for the configuration.
	name?: null | string @go(Name,*string)

	// Key-value map of resource tags to assign to infrastructure created by the configuration.
	resourceTags?: {[string]: null | string} @go(ResourceTags,map[string]*string)

	// Set of EC2 Security Group identifiers.
	securityGroupIds?: [...null | string] @go(SecurityGroupIds,[]*string)

	// Amazon Resource Name (ARN) of SNS Topic.
	snsTopicArn?: null | string @go(SnsTopicArn,*string)

	// EC2 Subnet identifier. Also requires security_group_ids argument.
	subnetId?: null | string @go(SubnetID,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// Enable if the instance should be terminated when the pipeline fails. Defaults to false.
	terminateInstanceOnFailure?: null | bool @go(TerminateInstanceOnFailure,*bool)
}

#InfrastructureConfigurationParameters: {
	// Description for the configuration.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Configuration block with instance metadata options for the HTTP requests that pipeline builds use to launch EC2 build and test instances. Detailed below.
	// +kubebuilder:validation:Optional
	instanceMetadataOptions?: [...#InstanceMetadataOptionsParameters] @go(InstanceMetadataOptions,[]InstanceMetadataOptionsParameters)

	// Name of IAM Instance Profile.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.InstanceProfile
	// +kubebuilder:validation:Optional
	instanceProfileName?: null | string @go(InstanceProfileName,*string)

	// Reference to a InstanceProfile in iam to populate instanceProfileName.
	// +kubebuilder:validation:Optional
	instanceProfileNameRef?: null | v1.#Reference @go(InstanceProfileNameRef,*v1.Reference)

	// Selector for a InstanceProfile in iam to populate instanceProfileName.
	// +kubebuilder:validation:Optional
	instanceProfileNameSelector?: null | v1.#Selector @go(InstanceProfileNameSelector,*v1.Selector)

	// Set of EC2 Instance Types.
	// +kubebuilder:validation:Optional
	instanceTypes?: [...null | string] @go(InstanceTypes,[]*string)

	// Name of EC2 Key Pair.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.KeyPair
	// +kubebuilder:validation:Optional
	keyPair?: null | string @go(KeyPair,*string)

	// Reference to a KeyPair in ec2 to populate keyPair.
	// +kubebuilder:validation:Optional
	keyPairRef?: null | v1.#Reference @go(KeyPairRef,*v1.Reference)

	// Selector for a KeyPair in ec2 to populate keyPair.
	// +kubebuilder:validation:Optional
	keyPairSelector?: null | v1.#Selector @go(KeyPairSelector,*v1.Selector)

	// Configuration block with logging settings. Detailed below.
	// +kubebuilder:validation:Optional
	logging?: [...#LoggingParameters] @go(Logging,[]LoggingParameters)

	// Name for the configuration.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Key-value map of resource tags to assign to infrastructure created by the configuration.
	// +kubebuilder:validation:Optional
	resourceTags?: {[string]: null | string} @go(ResourceTags,map[string]*string)

	// References to SecurityGroup in ec2 to populate securityGroupIds.
	// +kubebuilder:validation:Optional
	securityGroupIdRefs?: [...v1.#Reference] @go(SecurityGroupIDRefs,[]v1.Reference)

	// Selector for a list of SecurityGroup in ec2 to populate securityGroupIds.
	// +kubebuilder:validation:Optional
	securityGroupIdSelector?: null | v1.#Selector @go(SecurityGroupIDSelector,*v1.Selector)

	// Set of EC2 Security Group identifiers.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.SecurityGroup
	// +crossplane:generate:reference:refFieldName=SecurityGroupIDRefs
	// +crossplane:generate:reference:selectorFieldName=SecurityGroupIDSelector
	// +kubebuilder:validation:Optional
	securityGroupIds?: [...null | string] @go(SecurityGroupIds,[]*string)

	// Amazon Resource Name (ARN) of SNS Topic.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/sns/v1beta1.Topic
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	snsTopicArn?: null | string @go(SnsTopicArn,*string)

	// Reference to a Topic in sns to populate snsTopicArn.
	// +kubebuilder:validation:Optional
	snsTopicArnRef?: null | v1.#Reference @go(SnsTopicArnRef,*v1.Reference)

	// Selector for a Topic in sns to populate snsTopicArn.
	// +kubebuilder:validation:Optional
	snsTopicArnSelector?: null | v1.#Selector @go(SnsTopicArnSelector,*v1.Selector)

	// EC2 Subnet identifier. Also requires security_group_ids argument.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.Subnet
	// +kubebuilder:validation:Optional
	subnetId?: null | string @go(SubnetID,*string)

	// Reference to a Subnet in ec2 to populate subnetId.
	// +kubebuilder:validation:Optional
	subnetIdRef?: null | v1.#Reference @go(SubnetIDRef,*v1.Reference)

	// Selector for a Subnet in ec2 to populate subnetId.
	// +kubebuilder:validation:Optional
	subnetIdSelector?: null | v1.#Selector @go(SubnetIDSelector,*v1.Selector)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Enable if the instance should be terminated when the pipeline fails. Defaults to false.
	// +kubebuilder:validation:Optional
	terminateInstanceOnFailure?: null | bool @go(TerminateInstanceOnFailure,*bool)
}

#InstanceMetadataOptionsInitParameters: {
	// The number of hops that an instance can traverse to reach its destonation.
	httpPutResponseHopLimit?: null | float64 @go(HTTPPutResponseHopLimit,*float64)

	// Whether a signed token is required for instance metadata retrieval requests. Valid values: required, optional.
	httpTokens?: null | string @go(HTTPTokens,*string)
}

#InstanceMetadataOptionsObservation: {
	// The number of hops that an instance can traverse to reach its destonation.
	httpPutResponseHopLimit?: null | float64 @go(HTTPPutResponseHopLimit,*float64)

	// Whether a signed token is required for instance metadata retrieval requests. Valid values: required, optional.
	httpTokens?: null | string @go(HTTPTokens,*string)
}

#InstanceMetadataOptionsParameters: {
	// The number of hops that an instance can traverse to reach its destonation.
	// +kubebuilder:validation:Optional
	httpPutResponseHopLimit?: null | float64 @go(HTTPPutResponseHopLimit,*float64)

	// Whether a signed token is required for instance metadata retrieval requests. Valid values: required, optional.
	// +kubebuilder:validation:Optional
	httpTokens?: null | string @go(HTTPTokens,*string)
}

#LoggingInitParameters: {
	// Configuration block with S3 logging settings. Detailed below.
	s3Logs?: [...#S3LogsInitParameters] @go(S3Logs,[]S3LogsInitParameters)
}

#LoggingObservation: {
	// Configuration block with S3 logging settings. Detailed below.
	s3Logs?: [...#S3LogsObservation] @go(S3Logs,[]S3LogsObservation)
}

#LoggingParameters: {
	// Configuration block with S3 logging settings. Detailed below.
	// +kubebuilder:validation:Optional
	s3Logs: [...#S3LogsParameters] @go(S3Logs,[]S3LogsParameters)
}

#S3LogsInitParameters: {
	// Prefix to use for S3 logs. Defaults to /.
	s3KeyPrefix?: null | string @go(S3KeyPrefix,*string)
}

#S3LogsObservation: {
	// Name of the S3 Bucket.
	s3BucketName?: null | string @go(S3BucketName,*string)

	// Prefix to use for S3 logs. Defaults to /.
	s3KeyPrefix?: null | string @go(S3KeyPrefix,*string)
}

#S3LogsParameters: {
	// Name of the S3 Bucket.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/s3/v1beta1.Bucket
	// +kubebuilder:validation:Optional
	s3BucketName?: null | string @go(S3BucketName,*string)

	// Reference to a Bucket in s3 to populate s3BucketName.
	// +kubebuilder:validation:Optional
	s3BucketNameRef?: null | v1.#Reference @go(S3BucketNameRef,*v1.Reference)

	// Selector for a Bucket in s3 to populate s3BucketName.
	// +kubebuilder:validation:Optional
	s3BucketNameSelector?: null | v1.#Selector @go(S3BucketNameSelector,*v1.Selector)

	// Prefix to use for S3 logs. Defaults to /.
	// +kubebuilder:validation:Optional
	s3KeyPrefix?: null | string @go(S3KeyPrefix,*string)
}

// InfrastructureConfigurationSpec defines the desired state of InfrastructureConfiguration
#InfrastructureConfigurationSpec: {
	v1.#ResourceSpec
	forProvider: #InfrastructureConfigurationParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #InfrastructureConfigurationInitParameters @go(InitProvider)
}

// InfrastructureConfigurationStatus defines the observed state of InfrastructureConfiguration.
#InfrastructureConfigurationStatus: {
	v1.#ResourceStatus
	atProvider?: #InfrastructureConfigurationObservation @go(AtProvider)
}

// InfrastructureConfiguration is the Schema for the InfrastructureConfigurations API. Manages an Image Builder Infrastructure Configuration
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#InfrastructureConfiguration: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	spec:    #InfrastructureConfigurationSpec   @go(Spec)
	status?: #InfrastructureConfigurationStatus @go(Status)
}

// InfrastructureConfigurationList contains a list of InfrastructureConfigurations
#InfrastructureConfigurationList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#InfrastructureConfiguration] @go(Items,[]InfrastructureConfiguration)
}
