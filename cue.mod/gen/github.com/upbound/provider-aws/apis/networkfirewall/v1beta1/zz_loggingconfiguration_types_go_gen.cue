// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/networkfirewall/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#LogDestinationConfigInitParameters: {
	// A map describing the logging destination for the chosen log_destination_type.
	logDestination?: {[string]: null | string} @go(LogDestination,map[string]*string)

	// The location to send logs to. Valid values: S3, CloudWatchLogs, KinesisDataFirehose.
	logDestinationType?: null | string @go(LogDestinationType,*string)

	// The type of log to send. Valid values: ALERT or FLOW. Alert logs report traffic that matches a StatefulRule with an action setting that sends a log message. Flow logs are standard network traffic flow logs.
	logType?: null | string @go(LogType,*string)
}

#LogDestinationConfigObservation: {
	// A map describing the logging destination for the chosen log_destination_type.
	logDestination?: {[string]: null | string} @go(LogDestination,map[string]*string)

	// The location to send logs to. Valid values: S3, CloudWatchLogs, KinesisDataFirehose.
	logDestinationType?: null | string @go(LogDestinationType,*string)

	// The type of log to send. Valid values: ALERT or FLOW. Alert logs report traffic that matches a StatefulRule with an action setting that sends a log message. Flow logs are standard network traffic flow logs.
	logType?: null | string @go(LogType,*string)
}

#LogDestinationConfigParameters: {
	// A map describing the logging destination for the chosen log_destination_type.
	// +kubebuilder:validation:Optional
	logDestination: {[string]: null | string} @go(LogDestination,map[string]*string)

	// The location to send logs to. Valid values: S3, CloudWatchLogs, KinesisDataFirehose.
	// +kubebuilder:validation:Optional
	logDestinationType?: null | string @go(LogDestinationType,*string)

	// The type of log to send. Valid values: ALERT or FLOW. Alert logs report traffic that matches a StatefulRule with an action setting that sends a log message. Flow logs are standard network traffic flow logs.
	// +kubebuilder:validation:Optional
	logType?: null | string @go(LogType,*string)
}

#LoggingConfigurationInitParameters: {
	// A configuration block describing how AWS Network Firewall performs logging for a firewall. See Logging Configuration below for details.
	loggingConfiguration?: [...#LoggingConfigurationLoggingConfigurationInitParameters] @go(LoggingConfiguration,[]LoggingConfigurationLoggingConfigurationInitParameters)
}

#LoggingConfigurationLoggingConfigurationInitParameters: {
	// Set of configuration blocks describing the logging details for a firewall. See Log Destination Config below for details. At most, only two blocks can be specified; one for FLOW logs and one for ALERT logs.
	logDestinationConfig?: [...#LogDestinationConfigInitParameters] @go(LogDestinationConfig,[]LogDestinationConfigInitParameters)
}

#LoggingConfigurationLoggingConfigurationObservation: {
	// Set of configuration blocks describing the logging details for a firewall. See Log Destination Config below for details. At most, only two blocks can be specified; one for FLOW logs and one for ALERT logs.
	logDestinationConfig?: [...#LogDestinationConfigObservation] @go(LogDestinationConfig,[]LogDestinationConfigObservation)
}

#LoggingConfigurationLoggingConfigurationParameters: {
	// Set of configuration blocks describing the logging details for a firewall. See Log Destination Config below for details. At most, only two blocks can be specified; one for FLOW logs and one for ALERT logs.
	// +kubebuilder:validation:Optional
	logDestinationConfig: [...#LogDestinationConfigParameters] @go(LogDestinationConfig,[]LogDestinationConfigParameters)
}

#LoggingConfigurationObservation: {
	// The Amazon Resource Name (ARN) of the Network Firewall firewall.
	firewallArn?: null | string @go(FirewallArn,*string)

	// The Amazon Resource Name (ARN) of the associated firewall.
	id?: null | string @go(ID,*string)

	// A configuration block describing how AWS Network Firewall performs logging for a firewall. See Logging Configuration below for details.
	loggingConfiguration?: [...#LoggingConfigurationLoggingConfigurationObservation] @go(LoggingConfiguration,[]LoggingConfigurationLoggingConfigurationObservation)
}

#LoggingConfigurationParameters: {
	// The Amazon Resource Name (ARN) of the Network Firewall firewall.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/networkfirewall/v1beta1.Firewall
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	firewallArn?: null | string @go(FirewallArn,*string)

	// Reference to a Firewall in networkfirewall to populate firewallArn.
	// +kubebuilder:validation:Optional
	firewallArnRef?: null | v1.#Reference @go(FirewallArnRef,*v1.Reference)

	// Selector for a Firewall in networkfirewall to populate firewallArn.
	// +kubebuilder:validation:Optional
	firewallArnSelector?: null | v1.#Selector @go(FirewallArnSelector,*v1.Selector)

	// A configuration block describing how AWS Network Firewall performs logging for a firewall. See Logging Configuration below for details.
	// +kubebuilder:validation:Optional
	loggingConfiguration?: [...#LoggingConfigurationLoggingConfigurationParameters] @go(LoggingConfiguration,[]LoggingConfigurationLoggingConfigurationParameters)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)
}

// LoggingConfigurationSpec defines the desired state of LoggingConfiguration
#LoggingConfigurationSpec: {
	v1.#ResourceSpec
	forProvider: #LoggingConfigurationParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #LoggingConfigurationInitParameters @go(InitProvider)
}

// LoggingConfigurationStatus defines the observed state of LoggingConfiguration.
#LoggingConfigurationStatus: {
	v1.#ResourceStatus
	atProvider?: #LoggingConfigurationObservation @go(AtProvider)
}

// LoggingConfiguration is the Schema for the LoggingConfigurations API. Provides an AWS Network Firewall Logging Configuration resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#LoggingConfiguration: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.loggingConfiguration) || (has(self.initProvider) && has(self.initProvider.loggingConfiguration))",message="spec.forProvider.loggingConfiguration is a required parameter"
	spec:    #LoggingConfigurationSpec   @go(Spec)
	status?: #LoggingConfigurationStatus @go(Status)
}

// LoggingConfigurationList contains a list of LoggingConfigurations
#LoggingConfigurationList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#LoggingConfiguration] @go(Items,[]LoggingConfiguration)
}
