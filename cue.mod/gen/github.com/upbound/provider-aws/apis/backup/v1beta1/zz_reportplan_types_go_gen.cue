// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/backup/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#ReportDeliveryChannelInitParameters: {
	// A list of the format of your reports: CSV, JSON, or both. If not specified, the default format is CSV.
	formats?: [...null | string] @go(Formats,[]*string)

	// The unique name of the S3 bucket that receives your reports.
	s3BucketName?: null | string @go(S3BucketName,*string)

	// The prefix for where Backup Audit Manager delivers your reports to Amazon S3. The prefix is this part of the following path: s3://your-bucket-name/prefix/Backup/us-west-2/year/month/day/report-name. If not specified, there is no prefix.
	s3KeyPrefix?: null | string @go(S3KeyPrefix,*string)
}

#ReportDeliveryChannelObservation: {
	// A list of the format of your reports: CSV, JSON, or both. If not specified, the default format is CSV.
	formats?: [...null | string] @go(Formats,[]*string)

	// The unique name of the S3 bucket that receives your reports.
	s3BucketName?: null | string @go(S3BucketName,*string)

	// The prefix for where Backup Audit Manager delivers your reports to Amazon S3. The prefix is this part of the following path: s3://your-bucket-name/prefix/Backup/us-west-2/year/month/day/report-name. If not specified, there is no prefix.
	s3KeyPrefix?: null | string @go(S3KeyPrefix,*string)
}

#ReportDeliveryChannelParameters: {
	// A list of the format of your reports: CSV, JSON, or both. If not specified, the default format is CSV.
	// +kubebuilder:validation:Optional
	formats?: [...null | string] @go(Formats,[]*string)

	// The unique name of the S3 bucket that receives your reports.
	// +kubebuilder:validation:Optional
	s3BucketName?: null | string @go(S3BucketName,*string)

	// The prefix for where Backup Audit Manager delivers your reports to Amazon S3. The prefix is this part of the following path: s3://your-bucket-name/prefix/Backup/us-west-2/year/month/day/report-name. If not specified, there is no prefix.
	// +kubebuilder:validation:Optional
	s3KeyPrefix?: null | string @go(S3KeyPrefix,*string)
}

#ReportPlanInitParameters: {
	// The description of the report plan with a maximum of 1,024 characters
	description?: null | string @go(Description,*string)

	// The unique name of the report plan. The name must be between 1 and 256 characters, starting with a letter, and consisting of letters, numbers, and underscores.
	name?: null | string @go(Name,*string)

	// An object that contains information about where and how to deliver your reports, specifically your Amazon S3 bucket name, S3 key prefix, and the formats of your reports. Detailed below.
	reportDeliveryChannel?: [...#ReportDeliveryChannelInitParameters] @go(ReportDeliveryChannel,[]ReportDeliveryChannelInitParameters)

	// An object that identifies the report template for the report. Reports are built using a report template. Detailed below.
	reportSetting?: [...#ReportSettingInitParameters] @go(ReportSetting,[]ReportSettingInitParameters)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#ReportPlanObservation: {
	// The ARN of the backup report plan.
	arn?: null | string @go(Arn,*string)

	// The date and time that a report plan is created, in Unix format and Coordinated Universal Time (UTC).
	creationTime?: null | string @go(CreationTime,*string)

	// The deployment status of a report plan. The statuses are: CREATE_IN_PROGRESS | UPDATE_IN_PROGRESS | DELETE_IN_PROGRESS | COMPLETED.
	deploymentStatus?: null | string @go(DeploymentStatus,*string)

	// The description of the report plan with a maximum of 1,024 characters
	description?: null | string @go(Description,*string)

	// The id of the backup report plan.
	id?: null | string @go(ID,*string)

	// The unique name of the report plan. The name must be between 1 and 256 characters, starting with a letter, and consisting of letters, numbers, and underscores.
	name?: null | string @go(Name,*string)

	// An object that contains information about where and how to deliver your reports, specifically your Amazon S3 bucket name, S3 key prefix, and the formats of your reports. Detailed below.
	reportDeliveryChannel?: [...#ReportDeliveryChannelObservation] @go(ReportDeliveryChannel,[]ReportDeliveryChannelObservation)

	// An object that identifies the report template for the report. Reports are built using a report template. Detailed below.
	reportSetting?: [...#ReportSettingObservation] @go(ReportSetting,[]ReportSettingObservation)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#ReportPlanParameters: {
	// The description of the report plan with a maximum of 1,024 characters
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// The unique name of the report plan. The name must be between 1 and 256 characters, starting with a letter, and consisting of letters, numbers, and underscores.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// An object that contains information about where and how to deliver your reports, specifically your Amazon S3 bucket name, S3 key prefix, and the formats of your reports. Detailed below.
	// +kubebuilder:validation:Optional
	reportDeliveryChannel?: [...#ReportDeliveryChannelParameters] @go(ReportDeliveryChannel,[]ReportDeliveryChannelParameters)

	// An object that identifies the report template for the report. Reports are built using a report template. Detailed below.
	// +kubebuilder:validation:Optional
	reportSetting?: [...#ReportSettingParameters] @go(ReportSetting,[]ReportSettingParameters)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#ReportSettingInitParameters: {
	// Specifies the list of accounts a report covers.
	accounts?: [...null | string] @go(Accounts,[]*string)

	// Specifies the Amazon Resource Names (ARNs) of the frameworks a report covers.
	frameworkArns?: [...null | string] @go(FrameworkArns,[]*string)

	// Specifies the number of frameworks a report covers.
	numberOfFrameworks?: null | float64 @go(NumberOfFrameworks,*float64)

	// Specifies the list of Organizational Units a report covers.
	organizationUnits?: [...null | string] @go(OrganizationUnits,[]*string)

	// Specifies the list of regions a report covers.
	regions?: [...null | string] @go(Regions,[]*string)

	// Identifies the report template for the report. Reports are built using a report template. The report templates are: RESOURCE_COMPLIANCE_REPORT | CONTROL_COMPLIANCE_REPORT | BACKUP_JOB_REPORT | COPY_JOB_REPORT | RESTORE_JOB_REPORT.
	reportTemplate?: null | string @go(ReportTemplate,*string)
}

#ReportSettingObservation: {
	// Specifies the list of accounts a report covers.
	accounts?: [...null | string] @go(Accounts,[]*string)

	// Specifies the Amazon Resource Names (ARNs) of the frameworks a report covers.
	frameworkArns?: [...null | string] @go(FrameworkArns,[]*string)

	// Specifies the number of frameworks a report covers.
	numberOfFrameworks?: null | float64 @go(NumberOfFrameworks,*float64)

	// Specifies the list of Organizational Units a report covers.
	organizationUnits?: [...null | string] @go(OrganizationUnits,[]*string)

	// Specifies the list of regions a report covers.
	regions?: [...null | string] @go(Regions,[]*string)

	// Identifies the report template for the report. Reports are built using a report template. The report templates are: RESOURCE_COMPLIANCE_REPORT | CONTROL_COMPLIANCE_REPORT | BACKUP_JOB_REPORT | COPY_JOB_REPORT | RESTORE_JOB_REPORT.
	reportTemplate?: null | string @go(ReportTemplate,*string)
}

#ReportSettingParameters: {
	// Specifies the list of accounts a report covers.
	// +kubebuilder:validation:Optional
	accounts?: [...null | string] @go(Accounts,[]*string)

	// Specifies the Amazon Resource Names (ARNs) of the frameworks a report covers.
	// +kubebuilder:validation:Optional
	frameworkArns?: [...null | string] @go(FrameworkArns,[]*string)

	// Specifies the number of frameworks a report covers.
	// +kubebuilder:validation:Optional
	numberOfFrameworks?: null | float64 @go(NumberOfFrameworks,*float64)

	// Specifies the list of Organizational Units a report covers.
	// +kubebuilder:validation:Optional
	organizationUnits?: [...null | string] @go(OrganizationUnits,[]*string)

	// Specifies the list of regions a report covers.
	// +kubebuilder:validation:Optional
	regions?: [...null | string] @go(Regions,[]*string)

	// Identifies the report template for the report. Reports are built using a report template. The report templates are: RESOURCE_COMPLIANCE_REPORT | CONTROL_COMPLIANCE_REPORT | BACKUP_JOB_REPORT | COPY_JOB_REPORT | RESTORE_JOB_REPORT.
	// +kubebuilder:validation:Optional
	reportTemplate?: null | string @go(ReportTemplate,*string)
}

// ReportPlanSpec defines the desired state of ReportPlan
#ReportPlanSpec: {
	v1.#ResourceSpec
	forProvider: #ReportPlanParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ReportPlanInitParameters @go(InitProvider)
}

// ReportPlanStatus defines the observed state of ReportPlan.
#ReportPlanStatus: {
	v1.#ResourceStatus
	atProvider?: #ReportPlanObservation @go(AtProvider)
}

// ReportPlan is the Schema for the ReportPlans API. Provides an AWS Backup Report Plan resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#ReportPlan: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.reportDeliveryChannel) || (has(self.initProvider) && has(self.initProvider.reportDeliveryChannel))",message="spec.forProvider.reportDeliveryChannel is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.reportSetting) || (has(self.initProvider) && has(self.initProvider.reportSetting))",message="spec.forProvider.reportSetting is a required parameter"
	spec:    #ReportPlanSpec   @go(Spec)
	status?: #ReportPlanStatus @go(Status)
}

// ReportPlanList contains a list of ReportPlans
#ReportPlanList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#ReportPlan] @go(Items,[]ReportPlan)
}
