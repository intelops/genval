// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/backup/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#VaultNotificationsInitParameters: {
	// An array of events that indicate the status of jobs to back up resources to the backup vault.
	backupVaultEvents?: [...null | string] @go(BackupVaultEvents,[]*string)
}

#VaultNotificationsObservation: {
	// The ARN of the vault.
	backupVaultArn?: null | string @go(BackupVaultArn,*string)

	// An array of events that indicate the status of jobs to back up resources to the backup vault.
	backupVaultEvents?: [...null | string] @go(BackupVaultEvents,[]*string)

	// Name of the backup vault to add notifications for.
	backupVaultName?: null | string @go(BackupVaultName,*string)

	// The name of the vault.
	id?: null | string @go(ID,*string)

	// The Amazon Resource Name (ARN) that specifies the topic for a backup vault’s events
	snsTopicArn?: null | string @go(SnsTopicArn,*string)
}

#VaultNotificationsParameters: {
	// An array of events that indicate the status of jobs to back up resources to the backup vault.
	// +kubebuilder:validation:Optional
	backupVaultEvents?: [...null | string] @go(BackupVaultEvents,[]*string)

	// Name of the backup vault to add notifications for.
	// +crossplane:generate:reference:type=Vault
	// +kubebuilder:validation:Optional
	backupVaultName?: null | string @go(BackupVaultName,*string)

	// Reference to a Vault to populate backupVaultName.
	// +kubebuilder:validation:Optional
	backupVaultNameRef?: null | v1.#Reference @go(BackupVaultNameRef,*v1.Reference)

	// Selector for a Vault to populate backupVaultName.
	// +kubebuilder:validation:Optional
	backupVaultNameSelector?: null | v1.#Selector @go(BackupVaultNameSelector,*v1.Selector)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The Amazon Resource Name (ARN) that specifies the topic for a backup vault’s events
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/sns/v1beta1.Topic
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	snsTopicArn?: null | string @go(SnsTopicArn,*string)

	// Reference to a Topic in sns to populate snsTopicArn.
	// +kubebuilder:validation:Optional
	snsTopicArnRef?: null | v1.#Reference @go(SnsTopicArnRef,*v1.Reference)

	// Selector for a Topic in sns to populate snsTopicArn.
	// +kubebuilder:validation:Optional
	snsTopicArnSelector?: null | v1.#Selector @go(SnsTopicArnSelector,*v1.Selector)
}

// VaultNotificationsSpec defines the desired state of VaultNotifications
#VaultNotificationsSpec: {
	v1.#ResourceSpec
	forProvider: #VaultNotificationsParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #VaultNotificationsInitParameters @go(InitProvider)
}

// VaultNotificationsStatus defines the observed state of VaultNotifications.
#VaultNotificationsStatus: {
	v1.#ResourceStatus
	atProvider?: #VaultNotificationsObservation @go(AtProvider)
}

// VaultNotifications is the Schema for the VaultNotificationss API. Provides an AWS Backup vault notifications resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#VaultNotifications: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.backupVaultEvents) || (has(self.initProvider) && has(self.initProvider.backupVaultEvents))",message="spec.forProvider.backupVaultEvents is a required parameter"
	spec:    #VaultNotificationsSpec   @go(Spec)
	status?: #VaultNotificationsStatus @go(Status)
}

// VaultNotificationsList contains a list of VaultNotificationss
#VaultNotificationsList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#VaultNotifications] @go(Items,[]VaultNotifications)
}
