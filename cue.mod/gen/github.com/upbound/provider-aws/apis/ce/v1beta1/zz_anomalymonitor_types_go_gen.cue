// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/ce/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#AnomalyMonitorInitParameters: {
	// The dimensions to evaluate. Valid values: SERVICE.
	monitorDimension?: null | string @go(MonitorDimension,*string)

	// A valid JSON representation for the Expression object.
	monitorSpecification?: null | string @go(MonitorSpecification,*string)

	// The possible type values. Valid values: DIMENSIONAL | CUSTOM.
	monitorType?: null | string @go(MonitorType,*string)

	// The name of the monitor.
	name?: null | string @go(Name,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#AnomalyMonitorObservation: {
	// ARN of the anomaly monitor.
	arn?: null | string @go(Arn,*string)

	// Unique ID of the anomaly monitor. Same as arn.
	id?: null | string @go(ID,*string)

	// The dimensions to evaluate. Valid values: SERVICE.
	monitorDimension?: null | string @go(MonitorDimension,*string)

	// A valid JSON representation for the Expression object.
	monitorSpecification?: null | string @go(MonitorSpecification,*string)

	// The possible type values. Valid values: DIMENSIONAL | CUSTOM.
	monitorType?: null | string @go(MonitorType,*string)

	// The name of the monitor.
	name?: null | string @go(Name,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#AnomalyMonitorParameters: {
	// The dimensions to evaluate. Valid values: SERVICE.
	// +kubebuilder:validation:Optional
	monitorDimension?: null | string @go(MonitorDimension,*string)

	// A valid JSON representation for the Expression object.
	// +kubebuilder:validation:Optional
	monitorSpecification?: null | string @go(MonitorSpecification,*string)

	// The possible type values. Valid values: DIMENSIONAL | CUSTOM.
	// +kubebuilder:validation:Optional
	monitorType?: null | string @go(MonitorType,*string)

	// The name of the monitor.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// AnomalyMonitorSpec defines the desired state of AnomalyMonitor
#AnomalyMonitorSpec: {
	v1.#ResourceSpec
	forProvider: #AnomalyMonitorParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #AnomalyMonitorInitParameters @go(InitProvider)
}

// AnomalyMonitorStatus defines the observed state of AnomalyMonitor.
#AnomalyMonitorStatus: {
	v1.#ResourceStatus
	atProvider?: #AnomalyMonitorObservation @go(AtProvider)
}

// AnomalyMonitor is the Schema for the AnomalyMonitors API. Provides a CE Cost Anomaly Monitor
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#AnomalyMonitor: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.monitorType) || (has(self.initProvider) && has(self.initProvider.monitorType))",message="spec.forProvider.monitorType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	spec:    #AnomalyMonitorSpec   @go(Spec)
	status?: #AnomalyMonitorStatus @go(Status)
}

// AnomalyMonitorList contains a list of AnomalyMonitors
#AnomalyMonitorList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#AnomalyMonitor] @go(Items,[]AnomalyMonitor)
}
