// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/appautoscaling/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#ScalableTargetActionInitParameters: {
	// Maximum capacity. At least one of max_capacity or min_capacity must be set.
	maxCapacity?: null | string @go(MaxCapacity,*string)

	// Minimum capacity. At least one of min_capacity or max_capacity must be set.
	minCapacity?: null | string @go(MinCapacity,*string)
}

#ScalableTargetActionObservation: {
	// Maximum capacity. At least one of max_capacity or min_capacity must be set.
	maxCapacity?: null | string @go(MaxCapacity,*string)

	// Minimum capacity. At least one of min_capacity or max_capacity must be set.
	minCapacity?: null | string @go(MinCapacity,*string)
}

#ScalableTargetActionParameters: {
	// Maximum capacity. At least one of max_capacity or min_capacity must be set.
	// +kubebuilder:validation:Optional
	maxCapacity?: null | string @go(MaxCapacity,*string)

	// Minimum capacity. At least one of min_capacity or max_capacity must be set.
	// +kubebuilder:validation:Optional
	minCapacity?: null | string @go(MinCapacity,*string)
}

#ScheduledActionInitParameters: {
	// Date and time for the scheduled action to end in RFC 3339 format. The timezone is not affected by the setting of timezone.
	endTime?: null | string @go(EndTime,*string)

	// Name of the scheduled action.
	name?: null | string @go(Name,*string)

	// New minimum and maximum capacity. You can set both values or just one. See below
	scalableTargetAction?: [...#ScalableTargetActionInitParameters] @go(ScalableTargetAction,[]ScalableTargetActionInitParameters)

	// Schedule for this action. The following formats are supported: At expressions - at(yyyy-mm-ddThh:mm:ss), Rate expressions - rate(valueunit), Cron expressions - cron(fields). Times for at expressions and cron expressions are evaluated using the time zone configured in timezone. Documentation can be found in the Timezone parameter at: AWS Application Auto Scaling API Reference
	schedule?: null | string @go(Schedule,*string)

	// Date and time for the scheduled action to start in RFC 3339 format. The timezone is not affected by the setting of timezone.
	startTime?: null | string @go(StartTime,*string)

	// Time zone used when setting a scheduled action by using an at or cron expression. Does not affect timezone for start_time and end_time. Valid values are the canonical names of the IANA time zones supported by Joda-Time, such as Etc/GMT+9 or Pacific/Tahiti. Default is UTC.
	timezone?: null | string @go(Timezone,*string)
}

#ScheduledActionObservation: {
	// ARN of the scheduled action.
	arn?: null | string @go(Arn,*string)

	// Date and time for the scheduled action to end in RFC 3339 format. The timezone is not affected by the setting of timezone.
	endTime?: null | string @go(EndTime,*string)
	id?:      null | string @go(ID,*string)

	// Name of the scheduled action.
	name?: null | string @go(Name,*string)

	// Identifier of the resource associated with the scheduled action. Documentation can be found in the ResourceId parameter at: AWS Application Auto Scaling API Reference
	resourceId?: null | string @go(ResourceID,*string)

	// Scalable dimension. Documentation can be found in the ScalableDimension parameter at: AWS Application Auto Scaling API Reference Example: ecs:service:DesiredCount
	scalableDimension?: null | string @go(ScalableDimension,*string)

	// New minimum and maximum capacity. You can set both values or just one. See below
	scalableTargetAction?: [...#ScalableTargetActionObservation] @go(ScalableTargetAction,[]ScalableTargetActionObservation)

	// Schedule for this action. The following formats are supported: At expressions - at(yyyy-mm-ddThh:mm:ss), Rate expressions - rate(valueunit), Cron expressions - cron(fields). Times for at expressions and cron expressions are evaluated using the time zone configured in timezone. Documentation can be found in the Timezone parameter at: AWS Application Auto Scaling API Reference
	schedule?: null | string @go(Schedule,*string)

	// Namespace of the AWS service. Documentation can be found in the ServiceNamespace parameter at: AWS Application Auto Scaling API Reference Example: ecs
	serviceNamespace?: null | string @go(ServiceNamespace,*string)

	// Date and time for the scheduled action to start in RFC 3339 format. The timezone is not affected by the setting of timezone.
	startTime?: null | string @go(StartTime,*string)

	// Time zone used when setting a scheduled action by using an at or cron expression. Does not affect timezone for start_time and end_time. Valid values are the canonical names of the IANA time zones supported by Joda-Time, such as Etc/GMT+9 or Pacific/Tahiti. Default is UTC.
	timezone?: null | string @go(Timezone,*string)
}

#ScheduledActionParameters: {
	// Date and time for the scheduled action to end in RFC 3339 format. The timezone is not affected by the setting of timezone.
	// +kubebuilder:validation:Optional
	endTime?: null | string @go(EndTime,*string)

	// Name of the scheduled action.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Identifier of the resource associated with the scheduled action. Documentation can be found in the ResourceId parameter at: AWS Application Auto Scaling API Reference
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/appautoscaling/v1beta1.Target
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("resource_id",false)
	// +kubebuilder:validation:Optional
	resourceId?: null | string @go(ResourceID,*string)

	// Reference to a Target in appautoscaling to populate resourceId.
	// +kubebuilder:validation:Optional
	resourceIdRef?: null | v1.#Reference @go(ResourceIDRef,*v1.Reference)

	// Selector for a Target in appautoscaling to populate resourceId.
	// +kubebuilder:validation:Optional
	resourceIdSelector?: null | v1.#Selector @go(ResourceIDSelector,*v1.Selector)

	// Scalable dimension. Documentation can be found in the ScalableDimension parameter at: AWS Application Auto Scaling API Reference Example: ecs:service:DesiredCount
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/appautoscaling/v1beta1.Target
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("scalable_dimension",false)
	// +kubebuilder:validation:Optional
	scalableDimension?: null | string @go(ScalableDimension,*string)

	// Reference to a Target in appautoscaling to populate scalableDimension.
	// +kubebuilder:validation:Optional
	scalableDimensionRef?: null | v1.#Reference @go(ScalableDimensionRef,*v1.Reference)

	// Selector for a Target in appautoscaling to populate scalableDimension.
	// +kubebuilder:validation:Optional
	scalableDimensionSelector?: null | v1.#Selector @go(ScalableDimensionSelector,*v1.Selector)

	// New minimum and maximum capacity. You can set both values or just one. See below
	// +kubebuilder:validation:Optional
	scalableTargetAction?: [...#ScalableTargetActionParameters] @go(ScalableTargetAction,[]ScalableTargetActionParameters)

	// Schedule for this action. The following formats are supported: At expressions - at(yyyy-mm-ddThh:mm:ss), Rate expressions - rate(valueunit), Cron expressions - cron(fields). Times for at expressions and cron expressions are evaluated using the time zone configured in timezone. Documentation can be found in the Timezone parameter at: AWS Application Auto Scaling API Reference
	// +kubebuilder:validation:Optional
	schedule?: null | string @go(Schedule,*string)

	// Namespace of the AWS service. Documentation can be found in the ServiceNamespace parameter at: AWS Application Auto Scaling API Reference Example: ecs
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/appautoscaling/v1beta1.Target
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("service_namespace",false)
	// +kubebuilder:validation:Optional
	serviceNamespace?: null | string @go(ServiceNamespace,*string)

	// Reference to a Target in appautoscaling to populate serviceNamespace.
	// +kubebuilder:validation:Optional
	serviceNamespaceRef?: null | v1.#Reference @go(ServiceNamespaceRef,*v1.Reference)

	// Selector for a Target in appautoscaling to populate serviceNamespace.
	// +kubebuilder:validation:Optional
	serviceNamespaceSelector?: null | v1.#Selector @go(ServiceNamespaceSelector,*v1.Selector)

	// Date and time for the scheduled action to start in RFC 3339 format. The timezone is not affected by the setting of timezone.
	// +kubebuilder:validation:Optional
	startTime?: null | string @go(StartTime,*string)

	// Time zone used when setting a scheduled action by using an at or cron expression. Does not affect timezone for start_time and end_time. Valid values are the canonical names of the IANA time zones supported by Joda-Time, such as Etc/GMT+9 or Pacific/Tahiti. Default is UTC.
	// +kubebuilder:validation:Optional
	timezone?: null | string @go(Timezone,*string)
}

// ScheduledActionSpec defines the desired state of ScheduledAction
#ScheduledActionSpec: {
	v1.#ResourceSpec
	forProvider: #ScheduledActionParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ScheduledActionInitParameters @go(InitProvider)
}

// ScheduledActionStatus defines the observed state of ScheduledAction.
#ScheduledActionStatus: {
	v1.#ResourceStatus
	atProvider?: #ScheduledActionObservation @go(AtProvider)
}

// ScheduledAction is the Schema for the ScheduledActions API. Provides an Application AutoScaling ScheduledAction resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#ScheduledAction: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.scalableTargetAction) || (has(self.initProvider) && has(self.initProvider.scalableTargetAction))",message="spec.forProvider.scalableTargetAction is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.schedule) || (has(self.initProvider) && has(self.initProvider.schedule))",message="spec.forProvider.schedule is a required parameter"
	spec:    #ScheduledActionSpec   @go(Spec)
	status?: #ScheduledActionStatus @go(Status)
}

// ScheduledActionList contains a list of ScheduledActions
#ScheduledActionList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#ScheduledAction] @go(Items,[]ScheduledAction)
}
