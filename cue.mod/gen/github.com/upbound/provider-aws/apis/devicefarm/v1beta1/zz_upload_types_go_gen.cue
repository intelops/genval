// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/devicefarm/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#UploadInitParameters: {
	// The upload's content type (for example, application/octet-stream).
	contentType?: null | string @go(ContentType,*string)

	// The upload's file name. The name should not contain any forward slashes (/). If you are uploading an iOS app, the file name must end with the .ipa extension. If you are uploading an Android app, the file name must end with the .apk extension. For all others, the file name must end with the .zip file extension.
	name?: null | string @go(Name,*string)

	// The upload's upload type. See AWS Docs for valid list of values.
	type?: null | string @go(Type,*string)
}

#UploadObservation: {
	// The Amazon Resource Name of this upload.
	arn?: null | string @go(Arn,*string)

	// The upload's category.
	category?: null | string @go(Category,*string)

	// The upload's content type (for example, application/octet-stream).
	contentType?: null | string @go(ContentType,*string)
	id?:          null | string @go(ID,*string)

	// The upload's metadata. For example, for Android, this contains information that is parsed from the manifest and is displayed in the AWS Device Farm console after the associated app is uploaded.
	metadata?: null | string @go(Metadata,*string)

	// The upload's file name. The name should not contain any forward slashes (/). If you are uploading an iOS app, the file name must end with the .ipa extension. If you are uploading an Android app, the file name must end with the .apk extension. For all others, the file name must end with the .zip file extension.
	name?: null | string @go(Name,*string)

	// The ARN of the project for the upload.
	projectArn?: null | string @go(ProjectArn,*string)

	// The upload's upload type. See AWS Docs for valid list of values.
	type?: null | string @go(Type,*string)

	// The presigned Amazon S3 URL that was used to store a file using a PUT request.
	url?: null | string @go(URL,*string)
}

#UploadParameters: {
	// The upload's content type (for example, application/octet-stream).
	// +kubebuilder:validation:Optional
	contentType?: null | string @go(ContentType,*string)

	// The upload's file name. The name should not contain any forward slashes (/). If you are uploading an iOS app, the file name must end with the .ipa extension. If you are uploading an Android app, the file name must end with the .apk extension. For all others, the file name must end with the .zip file extension.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The ARN of the project for the upload.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/devicefarm/v1beta1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	projectArn?: null | string @go(ProjectArn,*string)

	// Reference to a Project in devicefarm to populate projectArn.
	// +kubebuilder:validation:Optional
	projectArnRef?: null | v1.#Reference @go(ProjectArnRef,*v1.Reference)

	// Selector for a Project in devicefarm to populate projectArn.
	// +kubebuilder:validation:Optional
	projectArnSelector?: null | v1.#Selector @go(ProjectArnSelector,*v1.Selector)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The upload's upload type. See AWS Docs for valid list of values.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

// UploadSpec defines the desired state of Upload
#UploadSpec: {
	v1.#ResourceSpec
	forProvider: #UploadParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #UploadInitParameters @go(InitProvider)
}

// UploadStatus defines the observed state of Upload.
#UploadStatus: {
	v1.#ResourceStatus
	atProvider?: #UploadObservation @go(AtProvider)
}

// Upload is the Schema for the Uploads API. Provides a Devicefarm upload
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Upload: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	spec:    #UploadSpec   @go(Spec)
	status?: #UploadStatus @go(Status)
}

// UploadList contains a list of Uploads
#UploadList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Upload] @go(Items,[]Upload)
}
