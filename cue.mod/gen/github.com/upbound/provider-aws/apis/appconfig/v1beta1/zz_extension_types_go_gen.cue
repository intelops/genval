// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/appconfig/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#ActionInitParameters: {
	// Information about the action.
	description?: null | string @go(Description,*string)

	// The action name.
	name?: null | string @go(Name,*string)
}

#ActionObservation: {
	// Information about the action.
	description?: null | string @go(Description,*string)

	// The action name.
	name?: null | string @go(Name,*string)

	// An Amazon Resource Name (ARN) for an Identity and Access Management assume role.
	roleArn?: null | string @go(RoleArn,*string)

	// The extension URI associated to the action point in the extension definition. The URI can be an Amazon Resource Name (ARN) for one of the following: an Lambda function, an Amazon Simple Queue Service queue, an Amazon Simple Notification Service topic, or the Amazon EventBridge default event bus.
	uri?: null | string @go(URI,*string)
}

#ActionParameters: {
	// Information about the action.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// The action name.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// An Amazon Resource Name (ARN) for an Identity and Access Management assume role.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	roleArn?: null | string @go(RoleArn,*string)

	// Reference to a Role in iam to populate roleArn.
	// +kubebuilder:validation:Optional
	roleArnRef?: null | v1.#Reference @go(RoleArnRef,*v1.Reference)

	// Selector for a Role in iam to populate roleArn.
	// +kubebuilder:validation:Optional
	roleArnSelector?: null | v1.#Selector @go(RoleArnSelector,*v1.Selector)

	// The extension URI associated to the action point in the extension definition. The URI can be an Amazon Resource Name (ARN) for one of the following: an Lambda function, an Amazon Simple Queue Service queue, an Amazon Simple Notification Service topic, or the Amazon EventBridge default event bus.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/sns/v1beta1.Topic
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	uri?: null | string @go(URI,*string)

	// Reference to a Topic in sns to populate uri.
	// +kubebuilder:validation:Optional
	uriRef?: null | v1.#Reference @go(URIRef,*v1.Reference)

	// Selector for a Topic in sns to populate uri.
	// +kubebuilder:validation:Optional
	uriSelector?: null | v1.#Selector @go(URISelector,*v1.Selector)
}

#ActionPointInitParameters: {
	// An action defines the tasks the extension performs during the AppConfig workflow. Detailed below.
	action?: [...#ActionInitParameters] @go(Action,[]ActionInitParameters)

	// The point at which to perform the defined actions. Valid points are PRE_CREATE_HOSTED_CONFIGURATION_VERSION, PRE_START_DEPLOYMENT, ON_DEPLOYMENT_START, ON_DEPLOYMENT_STEP, ON_DEPLOYMENT_BAKING, ON_DEPLOYMENT_COMPLETE, ON_DEPLOYMENT_ROLLED_BACK.
	point?: null | string @go(Point,*string)
}

#ActionPointObservation: {
	// An action defines the tasks the extension performs during the AppConfig workflow. Detailed below.
	action?: [...#ActionObservation] @go(Action,[]ActionObservation)

	// The point at which to perform the defined actions. Valid points are PRE_CREATE_HOSTED_CONFIGURATION_VERSION, PRE_START_DEPLOYMENT, ON_DEPLOYMENT_START, ON_DEPLOYMENT_STEP, ON_DEPLOYMENT_BAKING, ON_DEPLOYMENT_COMPLETE, ON_DEPLOYMENT_ROLLED_BACK.
	point?: null | string @go(Point,*string)
}

#ActionPointParameters: {
	// An action defines the tasks the extension performs during the AppConfig workflow. Detailed below.
	// +kubebuilder:validation:Optional
	action: [...#ActionParameters] @go(Action,[]ActionParameters)

	// The point at which to perform the defined actions. Valid points are PRE_CREATE_HOSTED_CONFIGURATION_VERSION, PRE_START_DEPLOYMENT, ON_DEPLOYMENT_START, ON_DEPLOYMENT_STEP, ON_DEPLOYMENT_BAKING, ON_DEPLOYMENT_COMPLETE, ON_DEPLOYMENT_ROLLED_BACK.
	// +kubebuilder:validation:Optional
	point?: null | string @go(Point,*string)
}

#ExtensionInitParameters: {
	// The action points defined in the extension. Detailed below.
	actionPoint?: [...#ActionPointInitParameters] @go(ActionPoint,[]ActionPointInitParameters)

	// Information about the extension.
	description?: null | string @go(Description,*string)

	// A name for the extension. Each extension name in your account must be unique. Extension versions use the same name.
	name?: null | string @go(Name,*string)

	// The parameters accepted by the extension. You specify parameter values when you associate the extension to an AppConfig resource by using the CreateExtensionAssociation API action. For Lambda extension actions, these parameters are included in the Lambda request object. Detailed below.
	parameter?: [...#ParameterInitParameters] @go(Parameter,[]ParameterInitParameters)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#ExtensionObservation: {
	// The action points defined in the extension. Detailed below.
	actionPoint?: [...#ActionPointObservation] @go(ActionPoint,[]ActionPointObservation)

	// ARN of the AppConfig Extension.
	arn?: null | string @go(Arn,*string)

	// Information about the extension.
	description?: null | string @go(Description,*string)

	// AppConfig Extension ID.
	id?: null | string @go(ID,*string)

	// A name for the extension. Each extension name in your account must be unique. Extension versions use the same name.
	name?: null | string @go(Name,*string)

	// The parameters accepted by the extension. You specify parameter values when you associate the extension to an AppConfig resource by using the CreateExtensionAssociation API action. For Lambda extension actions, these parameters are included in the Lambda request object. Detailed below.
	parameter?: [...#ParameterObservation] @go(Parameter,[]ParameterObservation)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// The version number for the extension.
	version?: null | float64 @go(Version,*float64)
}

#ExtensionParameters: {
	// The action points defined in the extension. Detailed below.
	// +kubebuilder:validation:Optional
	actionPoint?: [...#ActionPointParameters] @go(ActionPoint,[]ActionPointParameters)

	// Information about the extension.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// A name for the extension. Each extension name in your account must be unique. Extension versions use the same name.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The parameters accepted by the extension. You specify parameter values when you associate the extension to an AppConfig resource by using the CreateExtensionAssociation API action. For Lambda extension actions, these parameters are included in the Lambda request object. Detailed below.
	// +kubebuilder:validation:Optional
	parameter?: [...#ParameterParameters] @go(Parameter,[]ParameterParameters)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#ParameterInitParameters: {
	// Information about the parameter.
	description?: null | string @go(Description,*string)

	// The parameter name.
	name?: null | string @go(Name,*string)

	// Determines if a parameter value must be specified in the extension association.
	required?: null | bool @go(Required,*bool)
}

#ParameterObservation: {
	// Information about the parameter.
	description?: null | string @go(Description,*string)

	// The parameter name.
	name?: null | string @go(Name,*string)

	// Determines if a parameter value must be specified in the extension association.
	required?: null | bool @go(Required,*bool)
}

#ParameterParameters: {
	// Information about the parameter.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// The parameter name.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Determines if a parameter value must be specified in the extension association.
	// +kubebuilder:validation:Optional
	required?: null | bool @go(Required,*bool)
}

// ExtensionSpec defines the desired state of Extension
#ExtensionSpec: {
	v1.#ResourceSpec
	forProvider: #ExtensionParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ExtensionInitParameters @go(InitProvider)
}

// ExtensionStatus defines the observed state of Extension.
#ExtensionStatus: {
	v1.#ResourceStatus
	atProvider?: #ExtensionObservation @go(AtProvider)
}

// Extension is the Schema for the Extensions API. Provides an AppConfig Extension resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Extension: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.actionPoint) || (has(self.initProvider) && has(self.initProvider.actionPoint))",message="spec.forProvider.actionPoint is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	spec:    #ExtensionSpec   @go(Spec)
	status?: #ExtensionStatus @go(Status)
}

// ExtensionList contains a list of Extensions
#ExtensionList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Extension] @go(Items,[]Extension)
}
