// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/appconfig/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#HostedConfigurationVersionInitParameters: {
	// Standard MIME type describing the format of the configuration content. For more information, see Content-Type.
	contentType?: null | string @go(ContentType,*string)

	// Description of the configuration.
	description?: null | string @go(Description,*string)
}

#HostedConfigurationVersionObservation: {
	// Application ID.
	applicationId?: null | string @go(ApplicationID,*string)

	// ARN of the AppConfig  hosted configuration version.
	arn?: null | string @go(Arn,*string)

	// Configuration profile ID.
	configurationProfileId?: null | string @go(ConfigurationProfileID,*string)

	// Standard MIME type describing the format of the configuration content. For more information, see Content-Type.
	contentType?: null | string @go(ContentType,*string)

	// Description of the configuration.
	description?: null | string @go(Description,*string)

	// AppConfig application ID, configuration profile ID, and version number separated by a slash (/).
	id?: null | string @go(ID,*string)

	// Version number of the hosted configuration.
	versionNumber?: null | float64 @go(VersionNumber,*float64)
}

#HostedConfigurationVersionParameters: {
	// Application ID.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/appconfig/v1beta1.Application
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	applicationId?: null | string @go(ApplicationID,*string)

	// Reference to a Application in appconfig to populate applicationId.
	// +kubebuilder:validation:Optional
	applicationIdRef?: null | v1.#Reference @go(ApplicationIDRef,*v1.Reference)

	// Selector for a Application in appconfig to populate applicationId.
	// +kubebuilder:validation:Optional
	applicationIdSelector?: null | v1.#Selector @go(ApplicationIDSelector,*v1.Selector)

	// Configuration profile ID.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/appconfig/v1beta1.ConfigurationProfile
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("configuration_profile_id",true)
	// +kubebuilder:validation:Optional
	configurationProfileId?: null | string @go(ConfigurationProfileID,*string)

	// Reference to a ConfigurationProfile in appconfig to populate configurationProfileId.
	// +kubebuilder:validation:Optional
	configurationProfileIdRef?: null | v1.#Reference @go(ConfigurationProfileIDRef,*v1.Reference)

	// Selector for a ConfigurationProfile in appconfig to populate configurationProfileId.
	// +kubebuilder:validation:Optional
	configurationProfileIdSelector?: null | v1.#Selector @go(ConfigurationProfileIDSelector,*v1.Selector)

	// Content of the configuration or the configuration data.
	// +kubebuilder:validation:Optional
	contentSecretRef: v1.#SecretKeySelector @go(ContentSecretRef)

	// Standard MIME type describing the format of the configuration content. For more information, see Content-Type.
	// +kubebuilder:validation:Optional
	contentType?: null | string @go(ContentType,*string)

	// Description of the configuration.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)
}

// HostedConfigurationVersionSpec defines the desired state of HostedConfigurationVersion
#HostedConfigurationVersionSpec: {
	v1.#ResourceSpec
	forProvider: #HostedConfigurationVersionParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #HostedConfigurationVersionInitParameters @go(InitProvider)
}

// HostedConfigurationVersionStatus defines the observed state of HostedConfigurationVersion.
#HostedConfigurationVersionStatus: {
	v1.#ResourceStatus
	atProvider?: #HostedConfigurationVersionObservation @go(AtProvider)
}

// HostedConfigurationVersion is the Schema for the HostedConfigurationVersions API. Provides an AppConfig Hosted Configuration Version resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#HostedConfigurationVersion: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.contentSecretRef)",message="spec.forProvider.contentSecretRef is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.contentType) || (has(self.initProvider) && has(self.initProvider.contentType))",message="spec.forProvider.contentType is a required parameter"
	spec:    #HostedConfigurationVersionSpec   @go(Spec)
	status?: #HostedConfigurationVersionStatus @go(Status)
}

// HostedConfigurationVersionList contains a list of HostedConfigurationVersions
#HostedConfigurationVersionList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#HostedConfigurationVersion] @go(Items,[]HostedConfigurationVersion)
}
