// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/organizations/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#PolicyAttachmentInitParameters: {
	// If set to true, destroy will not detach the policy and instead just remove the resource from state. This can be useful in situations where the attachment must be preserved to meet the AWS minimum requirement of 1 attached policy.
	skipDestroy?: null | bool @go(SkipDestroy,*bool)

	// The unique identifier (ID) of the root, organizational unit, or account number that you want to attach the policy to.
	targetId?: null | string @go(TargetID,*string)
}

#PolicyAttachmentObservation: {
	id?: null | string @go(ID,*string)

	// The unique identifier (ID) of the policy that you want to attach to the target.
	policyId?: null | string @go(PolicyID,*string)

	// If set to true, destroy will not detach the policy and instead just remove the resource from state. This can be useful in situations where the attachment must be preserved to meet the AWS minimum requirement of 1 attached policy.
	skipDestroy?: null | bool @go(SkipDestroy,*bool)

	// The unique identifier (ID) of the root, organizational unit, or account number that you want to attach the policy to.
	targetId?: null | string @go(TargetID,*string)
}

#PolicyAttachmentParameters: {
	// The unique identifier (ID) of the policy that you want to attach to the target.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/organizations/v1beta1.Policy
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	policyId?: null | string @go(PolicyID,*string)

	// Reference to a Policy in organizations to populate policyId.
	// +kubebuilder:validation:Optional
	policyIdRef?: null | v1.#Reference @go(PolicyIDRef,*v1.Reference)

	// Selector for a Policy in organizations to populate policyId.
	// +kubebuilder:validation:Optional
	policyIdSelector?: null | v1.#Selector @go(PolicyIDSelector,*v1.Selector)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// If set to true, destroy will not detach the policy and instead just remove the resource from state. This can be useful in situations where the attachment must be preserved to meet the AWS minimum requirement of 1 attached policy.
	// +kubebuilder:validation:Optional
	skipDestroy?: null | bool @go(SkipDestroy,*bool)

	// The unique identifier (ID) of the root, organizational unit, or account number that you want to attach the policy to.
	// +kubebuilder:validation:Optional
	targetId?: null | string @go(TargetID,*string)
}

// PolicyAttachmentSpec defines the desired state of PolicyAttachment
#PolicyAttachmentSpec: {
	v1.#ResourceSpec
	forProvider: #PolicyAttachmentParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #PolicyAttachmentInitParameters @go(InitProvider)
}

// PolicyAttachmentStatus defines the observed state of PolicyAttachment.
#PolicyAttachmentStatus: {
	v1.#ResourceStatus
	atProvider?: #PolicyAttachmentObservation @go(AtProvider)
}

// PolicyAttachment is the Schema for the PolicyAttachments API. Provides a resource to attach an AWS Organizations policy to an organization account, root, or unit.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#PolicyAttachment: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.targetId) || (has(self.initProvider) && has(self.initProvider.targetId))",message="spec.forProvider.targetId is a required parameter"
	spec:    #PolicyAttachmentSpec   @go(Spec)
	status?: #PolicyAttachmentStatus @go(Status)
}

// PolicyAttachmentList contains a list of PolicyAttachments
#PolicyAttachmentList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#PolicyAttachment] @go(Items,[]PolicyAttachment)
}
