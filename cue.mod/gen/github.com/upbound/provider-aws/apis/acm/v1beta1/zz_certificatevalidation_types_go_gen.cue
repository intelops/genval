// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/acm/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#CertificateValidationInitParameters: {
	// List of FQDNs that implement the validation. Only valid for DNS validation method ACM certificates. If this is set, the resource can implement additional sanity checks and has an explicit dependency on the resource that is implementing the validation
	validationRecordFqdns?: [...null | string] @go(ValidationRecordFqdns,[]*string)
}

#CertificateValidationObservation: {
	// ARN of the certificate that is being validated.
	certificateArn?: null | string @go(CertificateArn,*string)

	// Time at which the certificate was issued
	id?: null | string @go(ID,*string)

	// List of FQDNs that implement the validation. Only valid for DNS validation method ACM certificates. If this is set, the resource can implement additional sanity checks and has an explicit dependency on the resource that is implementing the validation
	validationRecordFqdns?: [...null | string] @go(ValidationRecordFqdns,[]*string)
}

#CertificateValidationParameters: {
	// ARN of the certificate that is being validated.
	// +crossplane:generate:reference:type=Certificate
	// +kubebuilder:validation:Optional
	certificateArn?: null | string @go(CertificateArn,*string)

	// Reference to a Certificate to populate certificateArn.
	// +kubebuilder:validation:Optional
	certificateArnRef?: null | v1.#Reference @go(CertificateArnRef,*v1.Reference)

	// Selector for a Certificate to populate certificateArn.
	// +kubebuilder:validation:Optional
	certificateArnSelector?: null | v1.#Selector @go(CertificateArnSelector,*v1.Selector)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// List of FQDNs that implement the validation. Only valid for DNS validation method ACM certificates. If this is set, the resource can implement additional sanity checks and has an explicit dependency on the resource that is implementing the validation
	// +kubebuilder:validation:Optional
	validationRecordFqdns?: [...null | string] @go(ValidationRecordFqdns,[]*string)
}

// CertificateValidationSpec defines the desired state of CertificateValidation
#CertificateValidationSpec: {
	v1.#ResourceSpec
	forProvider: #CertificateValidationParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #CertificateValidationInitParameters @go(InitProvider)
}

// CertificateValidationStatus defines the observed state of CertificateValidation.
#CertificateValidationStatus: {
	v1.#ResourceStatus
	atProvider?: #CertificateValidationObservation @go(AtProvider)
}

// CertificateValidation is the Schema for the CertificateValidations API. Waits for and checks successful validation of an ACM certificate.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#CertificateValidation: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta           @go(ObjectMeta)
	spec:      #CertificateValidationSpec   @go(Spec)
	status?:   #CertificateValidationStatus @go(Status)
}

// CertificateValidationList contains a list of CertificateValidations
#CertificateValidationList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#CertificateValidation] @go(Items,[]CertificateValidation)
}
