// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/lightsail/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#LBInitParameters: {
	// The health check path of the load balancer. Default value "/".
	healthCheckPath?: null | string @go(HealthCheckPath,*string)
	ipAddressType?:   null | string @go(IPAddressType,*string)

	// The instance port the load balancer will connect.
	instancePort?: null | float64 @go(InstancePort,*float64)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#LBObservation: {
	// The ARN of the Lightsail load balancer.
	arn?: null | string @go(Arn,*string)

	// The timestamp when the load balancer was created.
	createdAt?: null | string @go(CreatedAt,*string)

	// The DNS name of the load balancer.
	dnsName?: null | string @go(DNSName,*string)

	// The health check path of the load balancer. Default value "/".
	healthCheckPath?: null | string @go(HealthCheckPath,*string)

	// The name used for this load balancer (matches name).
	id?:            null | string @go(ID,*string)
	ipAddressType?: null | string @go(IPAddressType,*string)

	// The instance port the load balancer will connect.
	instancePort?: null | float64 @go(InstancePort,*float64)

	// The protocol of the load balancer.
	protocol?: null | string @go(Protocol,*string)

	// The public ports of the load balancer.
	publicPorts?: [...null | float64] @go(PublicPorts,[]*float64)

	// The support code for the database. Include this code in your email to support when you have questions about a database in Lightsail. This code enables our support team to look up your Lightsail information more easily.
	supportCode?: null | string @go(SupportCode,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#LBParameters: {
	// The health check path of the load balancer. Default value "/".
	// +kubebuilder:validation:Optional
	healthCheckPath?: null | string @go(HealthCheckPath,*string)

	// +kubebuilder:validation:Optional
	ipAddressType?: null | string @go(IPAddressType,*string)

	// The instance port the load balancer will connect.
	// +kubebuilder:validation:Optional
	instancePort?: null | float64 @go(InstancePort,*float64)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// LBSpec defines the desired state of LB
#LBSpec: {
	v1.#ResourceSpec
	forProvider: #LBParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #LBInitParameters @go(InitProvider)
}

// LBStatus defines the observed state of LB.
#LBStatus: {
	v1.#ResourceStatus
	atProvider?: #LBObservation @go(AtProvider)
}

// LB is the Schema for the LBs API. Provides a Lightsail Load Balancer
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#LB: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.instancePort) || (has(self.initProvider) && has(self.initProvider.instancePort))",message="spec.forProvider.instancePort is a required parameter"
	spec:    #LBSpec   @go(Spec)
	status?: #LBStatus @go(Status)
}

// LBList contains a list of LBs
#LBList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#LB] @go(Items,[]LB)
}
