// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/lightsail/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#InstancePublicPortsInitParameters: {
	// Configuration block with port information. AWS closes all currently open ports that are not included in the port_info. Detailed below.
	portInfo?: [...#PortInfoInitParameters] @go(PortInfo,[]PortInfoInitParameters)
}

#InstancePublicPortsObservation: {
	// ID of the resource.
	id?: null | string @go(ID,*string)

	// Name of the Lightsail Instance.
	instanceName?: null | string @go(InstanceName,*string)

	// Configuration block with port information. AWS closes all currently open ports that are not included in the port_info. Detailed below.
	portInfo?: [...#PortInfoObservation] @go(PortInfo,[]PortInfoObservation)
}

#InstancePublicPortsParameters: {
	// Name of the Lightsail Instance.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/lightsail/v1beta1.Instance
	// +kubebuilder:validation:Optional
	instanceName?: null | string @go(InstanceName,*string)

	// Reference to a Instance in lightsail to populate instanceName.
	// +kubebuilder:validation:Optional
	instanceNameRef?: null | v1.#Reference @go(InstanceNameRef,*v1.Reference)

	// Selector for a Instance in lightsail to populate instanceName.
	// +kubebuilder:validation:Optional
	instanceNameSelector?: null | v1.#Selector @go(InstanceNameSelector,*v1.Selector)

	// Configuration block with port information. AWS closes all currently open ports that are not included in the port_info. Detailed below.
	// +kubebuilder:validation:Optional
	portInfo?: [...#PortInfoParameters] @go(PortInfo,[]PortInfoParameters)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)
}

#PortInfoInitParameters: {
	// Set of CIDR aliases that define access for a preconfigured range of IP addresses.
	cidrListAliases?: [...null | string] @go(CidrListAliases,[]*string)

	// Set of CIDR blocks.
	cidrs?: [...null | string] @go(Cidrs,[]*string)

	// First port in a range of open ports on an instance.
	fromPort?: null | float64 @go(FromPort,*float64)
	ipv6Cidrs?: [...null | string] @go(IPv6Cidrs,[]*string)

	// IP protocol name. Valid values are tcp, all, udp, and icmp.
	protocol?: null | string @go(Protocol,*string)

	// Last port in a range of open ports on an instance.
	toPort?: null | float64 @go(ToPort,*float64)
}

#PortInfoObservation: {
	// Set of CIDR aliases that define access for a preconfigured range of IP addresses.
	cidrListAliases?: [...null | string] @go(CidrListAliases,[]*string)

	// Set of CIDR blocks.
	cidrs?: [...null | string] @go(Cidrs,[]*string)

	// First port in a range of open ports on an instance.
	fromPort?: null | float64 @go(FromPort,*float64)
	ipv6Cidrs?: [...null | string] @go(IPv6Cidrs,[]*string)

	// IP protocol name. Valid values are tcp, all, udp, and icmp.
	protocol?: null | string @go(Protocol,*string)

	// Last port in a range of open ports on an instance.
	toPort?: null | float64 @go(ToPort,*float64)
}

#PortInfoParameters: {
	// Set of CIDR aliases that define access for a preconfigured range of IP addresses.
	// +kubebuilder:validation:Optional
	cidrListAliases?: [...null | string] @go(CidrListAliases,[]*string)

	// Set of CIDR blocks.
	// +kubebuilder:validation:Optional
	cidrs?: [...null | string] @go(Cidrs,[]*string)

	// First port in a range of open ports on an instance.
	// +kubebuilder:validation:Optional
	fromPort?: null | float64 @go(FromPort,*float64)

	// +kubebuilder:validation:Optional
	ipv6Cidrs?: [...null | string] @go(IPv6Cidrs,[]*string)

	// IP protocol name. Valid values are tcp, all, udp, and icmp.
	// +kubebuilder:validation:Optional
	protocol?: null | string @go(Protocol,*string)

	// Last port in a range of open ports on an instance.
	// +kubebuilder:validation:Optional
	toPort?: null | float64 @go(ToPort,*float64)
}

// InstancePublicPortsSpec defines the desired state of InstancePublicPorts
#InstancePublicPortsSpec: {
	v1.#ResourceSpec
	forProvider: #InstancePublicPortsParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #InstancePublicPortsInitParameters @go(InitProvider)
}

// InstancePublicPortsStatus defines the observed state of InstancePublicPorts.
#InstancePublicPortsStatus: {
	v1.#ResourceStatus
	atProvider?: #InstancePublicPortsObservation @go(AtProvider)
}

// InstancePublicPorts is the Schema for the InstancePublicPortss API. Provides an Lightsail Instance
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#InstancePublicPorts: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.portInfo) || (has(self.initProvider) && has(self.initProvider.portInfo))",message="spec.forProvider.portInfo is a required parameter"
	spec:    #InstancePublicPortsSpec   @go(Spec)
	status?: #InstancePublicPortsStatus @go(Status)
}

// InstancePublicPortsList contains a list of InstancePublicPortss
#InstancePublicPortsList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#InstancePublicPorts] @go(Items,[]InstancePublicPorts)
}
