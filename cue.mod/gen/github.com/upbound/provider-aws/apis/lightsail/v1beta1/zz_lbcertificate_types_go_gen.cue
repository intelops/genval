// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/lightsail/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#DomainValidationRecordsInitParameters: {
}

#DomainValidationRecordsObservation: {
	// The domain name (e.g., example.com) for your SSL/TLS certificate.
	domainName?: null | string @go(DomainName,*string)

	// The SSL/TLS certificate name.
	resourceRecordName?:  null | string @go(ResourceRecordName,*string)
	resourceRecordType?:  null | string @go(ResourceRecordType,*string)
	resourceRecordValue?: null | string @go(ResourceRecordValue,*string)
}

#DomainValidationRecordsParameters: {
}

#LBCertificateInitParameters: {
	// The domain name (e.g., example.com) for your SSL/TLS certificate.
	domainName?: null | string @go(DomainName,*string)

	// Set of domains that should be SANs in the issued certificate. domain_name attribute is automatically added as a Subject Alternative Name.
	subjectAlternativeNames?: [...null | string] @go(SubjectAlternativeNames,[]*string)
}

#LBCertificateObservation: {
	// The ARN of the lightsail certificate.
	arn?: null | string @go(Arn,*string)

	// The timestamp when the instance was created.
	createdAt?: null | string @go(CreatedAt,*string)

	// The domain name (e.g., example.com) for your SSL/TLS certificate.
	domainName?: null | string @go(DomainName,*string)
	domainValidationRecords?: [...#DomainValidationRecordsObservation] @go(DomainValidationRecords,[]DomainValidationRecordsObservation)

	// A combination of attributes to create a unique id: lb_name,name
	id?: null | string @go(ID,*string)

	// The load balancer name where you want to create the SSL/TLS certificate.
	lbName?: null | string @go(LBName,*string)

	// Set of domains that should be SANs in the issued certificate. domain_name attribute is automatically added as a Subject Alternative Name.
	subjectAlternativeNames?: [...null | string] @go(SubjectAlternativeNames,[]*string)
	supportCode?: null | string @go(SupportCode,*string)
}

#LBCertificateParameters: {
	// The domain name (e.g., example.com) for your SSL/TLS certificate.
	// +kubebuilder:validation:Optional
	domainName?: null | string @go(DomainName,*string)

	// The load balancer name where you want to create the SSL/TLS certificate.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/lightsail/v1beta1.LB
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	lbName?: null | string @go(LBName,*string)

	// Reference to a LB in lightsail to populate lbName.
	// +kubebuilder:validation:Optional
	lbNameRef?: null | v1.#Reference @go(LBNameRef,*v1.Reference)

	// Selector for a LB in lightsail to populate lbName.
	// +kubebuilder:validation:Optional
	lbNameSelector?: null | v1.#Selector @go(LBNameSelector,*v1.Selector)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Set of domains that should be SANs in the issued certificate. domain_name attribute is automatically added as a Subject Alternative Name.
	// +kubebuilder:validation:Optional
	subjectAlternativeNames?: [...null | string] @go(SubjectAlternativeNames,[]*string)
}

// LBCertificateSpec defines the desired state of LBCertificate
#LBCertificateSpec: {
	v1.#ResourceSpec
	forProvider: #LBCertificateParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #LBCertificateInitParameters @go(InitProvider)
}

// LBCertificateStatus defines the observed state of LBCertificate.
#LBCertificateStatus: {
	v1.#ResourceStatus
	atProvider?: #LBCertificateObservation @go(AtProvider)
}

// LBCertificate is the Schema for the LBCertificates API. Provides a Lightsail Load Balancer
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#LBCertificate: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta   @go(ObjectMeta)
	spec:      #LBCertificateSpec   @go(Spec)
	status?:   #LBCertificateStatus @go(Status)
}

// LBCertificateList contains a list of LBCertificates
#LBCertificateList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#LBCertificate] @go(Items,[]LBCertificate)
}
