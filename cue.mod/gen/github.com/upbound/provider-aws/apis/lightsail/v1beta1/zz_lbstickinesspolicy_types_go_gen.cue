// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/lightsail/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#LBStickinessPolicyInitParameters: {
	// The cookie duration in seconds. This determines the length of the session stickiness.
	cookieDuration?: null | float64 @go(CookieDuration,*float64)

	// - The Session Stickiness state of the load balancer. true to activate session stickiness or false to deactivate session stickiness.
	enabled?: null | bool @go(Enabled,*bool)
}

#LBStickinessPolicyObservation: {
	// The cookie duration in seconds. This determines the length of the session stickiness.
	cookieDuration?: null | float64 @go(CookieDuration,*float64)

	// - The Session Stickiness state of the load balancer. true to activate session stickiness or false to deactivate session stickiness.
	enabled?: null | bool @go(Enabled,*bool)

	// The name used for this load balancer (matches lb_name).
	id?: null | string @go(ID,*string)
}

#LBStickinessPolicyParameters: {
	// The cookie duration in seconds. This determines the length of the session stickiness.
	// +kubebuilder:validation:Optional
	cookieDuration?: null | float64 @go(CookieDuration,*float64)

	// - The Session Stickiness state of the load balancer. true to activate session stickiness or false to deactivate session stickiness.
	// +kubebuilder:validation:Optional
	enabled?: null | bool @go(Enabled,*bool)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)
}

// LBStickinessPolicySpec defines the desired state of LBStickinessPolicy
#LBStickinessPolicySpec: {
	v1.#ResourceSpec
	forProvider: #LBStickinessPolicyParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #LBStickinessPolicyInitParameters @go(InitProvider)
}

// LBStickinessPolicyStatus defines the observed state of LBStickinessPolicy.
#LBStickinessPolicyStatus: {
	v1.#ResourceStatus
	atProvider?: #LBStickinessPolicyObservation @go(AtProvider)
}

// LBStickinessPolicy is the Schema for the LBStickinessPolicys API. Configures Session Stickiness for a Lightsail Load Balancer
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#LBStickinessPolicy: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.cookieDuration) || (has(self.initProvider) && has(self.initProvider.cookieDuration))",message="spec.forProvider.cookieDuration is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enabled) || (has(self.initProvider) && has(self.initProvider.enabled))",message="spec.forProvider.enabled is a required parameter"
	spec:    #LBStickinessPolicySpec   @go(Spec)
	status?: #LBStickinessPolicyStatus @go(Status)
}

// LBStickinessPolicyList contains a list of LBStickinessPolicys
#LBStickinessPolicyList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#LBStickinessPolicy] @go(Items,[]LBStickinessPolicy)
}
