// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/lightsail/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#DiskAttachmentInitParameters: {
	// The disk path to expose to the instance.
	diskPath?: null | string @go(DiskPath,*string)
}

#DiskAttachmentObservation: {
	// The name of the Lightsail Disk.
	diskName?: null | string @go(DiskName,*string)

	// The disk path to expose to the instance.
	diskPath?: null | string @go(DiskPath,*string)

	// A combination of attributes to create a unique id: disk_name,instance_name
	id?: null | string @go(ID,*string)

	// The name of the Lightsail Instance to attach to.
	instanceName?: null | string @go(InstanceName,*string)
}

#DiskAttachmentParameters: {
	// The name of the Lightsail Disk.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/lightsail/v1beta1.Disk
	// +kubebuilder:validation:Optional
	diskName?: null | string @go(DiskName,*string)

	// Reference to a Disk in lightsail to populate diskName.
	// +kubebuilder:validation:Optional
	diskNameRef?: null | v1.#Reference @go(DiskNameRef,*v1.Reference)

	// Selector for a Disk in lightsail to populate diskName.
	// +kubebuilder:validation:Optional
	diskNameSelector?: null | v1.#Selector @go(DiskNameSelector,*v1.Selector)

	// The disk path to expose to the instance.
	// +kubebuilder:validation:Optional
	diskPath?: null | string @go(DiskPath,*string)

	// The name of the Lightsail Instance to attach to.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/lightsail/v1beta1.Instance
	// +kubebuilder:validation:Optional
	instanceName?: null | string @go(InstanceName,*string)

	// Reference to a Instance in lightsail to populate instanceName.
	// +kubebuilder:validation:Optional
	instanceNameRef?: null | v1.#Reference @go(InstanceNameRef,*v1.Reference)

	// Selector for a Instance in lightsail to populate instanceName.
	// +kubebuilder:validation:Optional
	instanceNameSelector?: null | v1.#Selector @go(InstanceNameSelector,*v1.Selector)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)
}

// DiskAttachmentSpec defines the desired state of DiskAttachment
#DiskAttachmentSpec: {
	v1.#ResourceSpec
	forProvider: #DiskAttachmentParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #DiskAttachmentInitParameters @go(InitProvider)
}

// DiskAttachmentStatus defines the observed state of DiskAttachment.
#DiskAttachmentStatus: {
	v1.#ResourceStatus
	atProvider?: #DiskAttachmentObservation @go(AtProvider)
}

// DiskAttachment is the Schema for the DiskAttachments API. Attaches a Lightsail disk to a Lightsail Instance
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#DiskAttachment: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.diskPath) || (has(self.initProvider) && has(self.initProvider.diskPath))",message="spec.forProvider.diskPath is a required parameter"
	spec:    #DiskAttachmentSpec   @go(Spec)
	status?: #DiskAttachmentStatus @go(Status)
}

// DiskAttachmentList contains a list of DiskAttachments
#DiskAttachmentList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#DiskAttachment] @go(Items,[]DiskAttachment)
}
