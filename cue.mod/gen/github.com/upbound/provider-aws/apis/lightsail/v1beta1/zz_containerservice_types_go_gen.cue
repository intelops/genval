// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/lightsail/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#ContainerServiceInitParameters: {
	// A Boolean value indicating whether the container service is disabled. Defaults to false.
	isDisabled?: null | bool @go(IsDisabled,*bool)

	// The power specification for the container service. The power specifies the amount of memory,
	// the number of vCPUs, and the monthly price of each node of the container service.
	// Possible values: nano, micro, small, medium, large, xlarge.
	power?: null | string @go(Power,*string)

	// An object to describe the configuration for the container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories. See Private Registry Access below for more details.
	privateRegistryAccess?: [...#PrivateRegistryAccessInitParameters] @go(PrivateRegistryAccess,[]PrivateRegistryAccessInitParameters)

	// The public domain names to use with the container service, such as example.com
	// and www.example.com. You can specify up to four public domain names for a container service. The domain names that you
	// specify are used when you create a deployment with a container configured as the public endpoint of your container
	// service. If you don't specify public domain names, then you can use the default domain of the container service.
	// Defined below.
	publicDomainNames?: [...#PublicDomainNamesInitParameters] @go(PublicDomainNames,[]PublicDomainNamesInitParameters)

	// The scale specification for the container service. The scale specifies the allocated compute
	// nodes of the container service.
	scale?: null | float64 @go(Scale,*float64)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#ContainerServiceObservation: {
	// The Amazon Resource Name (ARN) of the container service.
	arn?: null | string @go(Arn,*string)

	// The Availability Zone. Follows the format us-east-2a (case-sensitive).
	availabilityZone?: null | string @go(AvailabilityZone,*string)
	createdAt?:        null | string @go(CreatedAt,*string)

	// Same as name.
	id?: null | string @go(ID,*string)

	// A Boolean value indicating whether the container service is disabled. Defaults to false.
	isDisabled?: null | bool @go(IsDisabled,*bool)

	// The power specification for the container service. The power specifies the amount of memory,
	// the number of vCPUs, and the monthly price of each node of the container service.
	// Possible values: nano, micro, small, medium, large, xlarge.
	power?: null | string @go(Power,*string)

	// The ID of the power of the container service.
	powerId?: null | string @go(PowerID,*string)

	// The principal ARN of the container service. The principal ARN can be used to create a trust
	// relationship between your standard AWS account and your Lightsail container service. This allows you to give your
	// service permission to access resources in your standard AWS account.
	principalArn?: null | string @go(PrincipalArn,*string)

	// The private domain name of the container service. The private domain name is accessible only
	// by other resources within the default virtual private cloud (VPC) of your Lightsail account.
	privateDomainName?: null | string @go(PrivateDomainName,*string)

	// An object to describe the configuration for the container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories. See Private Registry Access below for more details.
	privateRegistryAccess?: [...#PrivateRegistryAccessObservation] @go(PrivateRegistryAccess,[]PrivateRegistryAccessObservation)

	// The public domain names to use with the container service, such as example.com
	// and www.example.com. You can specify up to four public domain names for a container service. The domain names that you
	// specify are used when you create a deployment with a container configured as the public endpoint of your container
	// service. If you don't specify public domain names, then you can use the default domain of the container service.
	// Defined below.
	publicDomainNames?: [...#PublicDomainNamesObservation] @go(PublicDomainNames,[]PublicDomainNamesObservation)

	// The Lightsail resource type of the container service (i.e., ContainerService).
	resourceType?: null | string @go(ResourceType,*string)

	// The scale specification for the container service. The scale specifies the allocated compute
	// nodes of the container service.
	scale?: null | float64 @go(Scale,*float64)

	// The current state of the container service.
	state?: null | string @go(State,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider
	// default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// The publicly accessible URL of the container service. If no public endpoint is specified in the
	// currentDeployment, this URL returns a 404 response.
	url?: null | string @go(URL,*string)
}

#ContainerServiceParameters: {
	// A Boolean value indicating whether the container service is disabled. Defaults to false.
	// +kubebuilder:validation:Optional
	isDisabled?: null | bool @go(IsDisabled,*bool)

	// The power specification for the container service. The power specifies the amount of memory,
	// the number of vCPUs, and the monthly price of each node of the container service.
	// Possible values: nano, micro, small, medium, large, xlarge.
	// +kubebuilder:validation:Optional
	power?: null | string @go(Power,*string)

	// An object to describe the configuration for the container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories. See Private Registry Access below for more details.
	// +kubebuilder:validation:Optional
	privateRegistryAccess?: [...#PrivateRegistryAccessParameters] @go(PrivateRegistryAccess,[]PrivateRegistryAccessParameters)

	// The public domain names to use with the container service, such as example.com
	// and www.example.com. You can specify up to four public domain names for a container service. The domain names that you
	// specify are used when you create a deployment with a container configured as the public endpoint of your container
	// service. If you don't specify public domain names, then you can use the default domain of the container service.
	// Defined below.
	// +kubebuilder:validation:Optional
	publicDomainNames?: [...#PublicDomainNamesParameters] @go(PublicDomainNames,[]PublicDomainNamesParameters)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The scale specification for the container service. The scale specifies the allocated compute
	// nodes of the container service.
	// +kubebuilder:validation:Optional
	scale?: null | float64 @go(Scale,*float64)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#EcrImagePullerRoleInitParameters: {
	// A Boolean value that indicates whether to activate the role. The default is false.
	isActive?: null | bool @go(IsActive,*bool)
}

#EcrImagePullerRoleObservation: {
	// A Boolean value that indicates whether to activate the role. The default is false.
	isActive?: null | bool @go(IsActive,*bool)

	// The principal ARN of the container service. The principal ARN can be used to create a trust
	// relationship between your standard AWS account and your Lightsail container service. This allows you to give your
	// service permission to access resources in your standard AWS account.
	principalArn?: null | string @go(PrincipalArn,*string)
}

#EcrImagePullerRoleParameters: {
	// A Boolean value that indicates whether to activate the role. The default is false.
	// +kubebuilder:validation:Optional
	isActive?: null | bool @go(IsActive,*bool)
}

#PrivateRegistryAccessInitParameters: {
	// Describes a request to configure an Amazon Lightsail container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories. See ECR Image Puller Role below for more details.
	ecrImagePullerRole?: [...#EcrImagePullerRoleInitParameters] @go(EcrImagePullerRole,[]EcrImagePullerRoleInitParameters)
}

#PrivateRegistryAccessObservation: {
	// Describes a request to configure an Amazon Lightsail container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories. See ECR Image Puller Role below for more details.
	ecrImagePullerRole?: [...#EcrImagePullerRoleObservation] @go(EcrImagePullerRole,[]EcrImagePullerRoleObservation)
}

#PrivateRegistryAccessParameters: {
	// Describes a request to configure an Amazon Lightsail container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories. See ECR Image Puller Role below for more details.
	// +kubebuilder:validation:Optional
	ecrImagePullerRole?: [...#EcrImagePullerRoleParameters] @go(EcrImagePullerRole,[]EcrImagePullerRoleParameters)
}

#PublicDomainNamesCertificateInitParameters: {
	// The name for the container service. Names must be of length 1 to 63, and be
	// unique within each AWS Region in your Lightsail account.
	certificateName?: null | string @go(CertificateName,*string)
	domainNames?: [...null | string] @go(DomainNames,[]*string)
}

#PublicDomainNamesCertificateObservation: {
	// The name for the container service. Names must be of length 1 to 63, and be
	// unique within each AWS Region in your Lightsail account.
	certificateName?: null | string @go(CertificateName,*string)
	domainNames?: [...null | string] @go(DomainNames,[]*string)
}

#PublicDomainNamesCertificateParameters: {
	// The name for the container service. Names must be of length 1 to 63, and be
	// unique within each AWS Region in your Lightsail account.
	// +kubebuilder:validation:Optional
	certificateName?: null | string @go(CertificateName,*string)

	// +kubebuilder:validation:Optional
	domainNames: [...null | string] @go(DomainNames,[]*string)
}

#PublicDomainNamesInitParameters: {
	certificate?: [...#PublicDomainNamesCertificateInitParameters] @go(Certificate,[]PublicDomainNamesCertificateInitParameters)
}

#PublicDomainNamesObservation: {
	certificate?: [...#PublicDomainNamesCertificateObservation] @go(Certificate,[]PublicDomainNamesCertificateObservation)
}

#PublicDomainNamesParameters: {
	// +kubebuilder:validation:Optional
	certificate: [...#PublicDomainNamesCertificateParameters] @go(Certificate,[]PublicDomainNamesCertificateParameters)
}

// ContainerServiceSpec defines the desired state of ContainerService
#ContainerServiceSpec: {
	v1.#ResourceSpec
	forProvider: #ContainerServiceParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ContainerServiceInitParameters @go(InitProvider)
}

// ContainerServiceStatus defines the observed state of ContainerService.
#ContainerServiceStatus: {
	v1.#ResourceStatus
	atProvider?: #ContainerServiceObservation @go(AtProvider)
}

// ContainerService is the Schema for the ContainerServices API. Provides a resource to manage Lightsail container service
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#ContainerService: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.power) || (has(self.initProvider) && has(self.initProvider.power))",message="spec.forProvider.power is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.scale) || (has(self.initProvider) && has(self.initProvider.scale))",message="spec.forProvider.scale is a required parameter"
	spec:    #ContainerServiceSpec   @go(Spec)
	status?: #ContainerServiceStatus @go(Status)
}

// ContainerServiceList contains a list of ContainerServices
#ContainerServiceList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#ContainerService] @go(Items,[]ContainerService)
}
