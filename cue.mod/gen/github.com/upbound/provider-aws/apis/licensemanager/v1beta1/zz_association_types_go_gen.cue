// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/licensemanager/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#AssociationInitParameters: {
}

#AssociationObservation: {
	// The license configuration ARN.
	id?: null | string @go(ID,*string)

	// ARN of the license configuration.
	licenseConfigurationArn?: null | string @go(LicenseConfigurationArn,*string)

	// ARN of the resource associated with the license configuration.
	resourceArn?: null | string @go(ResourceArn,*string)
}

#AssociationParameters: {
	// ARN of the license configuration.
	// +crossplane:generate:reference:type=LicenseConfiguration
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	licenseConfigurationArn?: null | string @go(LicenseConfigurationArn,*string)

	// Reference to a LicenseConfiguration to populate licenseConfigurationArn.
	// +kubebuilder:validation:Optional
	licenseConfigurationArnRef?: null | v1.#Reference @go(LicenseConfigurationArnRef,*v1.Reference)

	// Selector for a LicenseConfiguration to populate licenseConfigurationArn.
	// +kubebuilder:validation:Optional
	licenseConfigurationArnSelector?: null | v1.#Selector @go(LicenseConfigurationArnSelector,*v1.Selector)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// ARN of the resource associated with the license configuration.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.Instance
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	resourceArn?: null | string @go(ResourceArn,*string)

	// Reference to a Instance in ec2 to populate resourceArn.
	// +kubebuilder:validation:Optional
	resourceArnRef?: null | v1.#Reference @go(ResourceArnRef,*v1.Reference)

	// Selector for a Instance in ec2 to populate resourceArn.
	// +kubebuilder:validation:Optional
	resourceArnSelector?: null | v1.#Selector @go(ResourceArnSelector,*v1.Selector)
}

// AssociationSpec defines the desired state of Association
#AssociationSpec: {
	v1.#ResourceSpec
	forProvider: #AssociationParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #AssociationInitParameters @go(InitProvider)
}

// AssociationStatus defines the observed state of Association.
#AssociationStatus: {
	v1.#ResourceStatus
	atProvider?: #AssociationObservation @go(AtProvider)
}

// Association is the Schema for the Associations API. Provides a License Manager association resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Association: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec:      #AssociationSpec   @go(Spec)
	status?:   #AssociationStatus @go(Status)
}

// AssociationList contains a list of Associations
#AssociationList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Association] @go(Items,[]Association)
}
