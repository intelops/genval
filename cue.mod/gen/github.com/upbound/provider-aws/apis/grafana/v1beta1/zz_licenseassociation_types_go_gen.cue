// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/grafana/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#LicenseAssociationInitParameters: {
	// The type of license for the workspace license association. Valid values are ENTERPRISE and ENTERPRISE_FREE_TRIAL.
	licenseType?: null | string @go(LicenseType,*string)
}

#LicenseAssociationObservation: {
	// If license_type is set to ENTERPRISE_FREE_TRIAL, this is the expiration date of the free trial.
	freeTrialExpiration?: null | string @go(FreeTrialExpiration,*string)
	id?:                  null | string @go(ID,*string)

	// If license_type is set to ENTERPRISE, this is the expiration date of the enterprise license.
	licenseExpiration?: null | string @go(LicenseExpiration,*string)

	// The type of license for the workspace license association. Valid values are ENTERPRISE and ENTERPRISE_FREE_TRIAL.
	licenseType?: null | string @go(LicenseType,*string)

	// The workspace id.
	workspaceId?: null | string @go(WorkspaceID,*string)
}

#LicenseAssociationParameters: {
	// The type of license for the workspace license association. Valid values are ENTERPRISE and ENTERPRISE_FREE_TRIAL.
	// +kubebuilder:validation:Optional
	licenseType?: null | string @go(LicenseType,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The workspace id.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/grafana/v1beta1.Workspace
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	workspaceId?: null | string @go(WorkspaceID,*string)

	// Reference to a Workspace in grafana to populate workspaceId.
	// +kubebuilder:validation:Optional
	workspaceIdRef?: null | v1.#Reference @go(WorkspaceIDRef,*v1.Reference)

	// Selector for a Workspace in grafana to populate workspaceId.
	// +kubebuilder:validation:Optional
	workspaceIdSelector?: null | v1.#Selector @go(WorkspaceIDSelector,*v1.Selector)
}

// LicenseAssociationSpec defines the desired state of LicenseAssociation
#LicenseAssociationSpec: {
	v1.#ResourceSpec
	forProvider: #LicenseAssociationParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #LicenseAssociationInitParameters @go(InitProvider)
}

// LicenseAssociationStatus defines the observed state of LicenseAssociation.
#LicenseAssociationStatus: {
	v1.#ResourceStatus
	atProvider?: #LicenseAssociationObservation @go(AtProvider)
}

// LicenseAssociation is the Schema for the LicenseAssociations API. Provides an Amazon Managed Grafana workspace license association resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#LicenseAssociation: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.licenseType) || (has(self.initProvider) && has(self.initProvider.licenseType))",message="spec.forProvider.licenseType is a required parameter"
	spec:    #LicenseAssociationSpec   @go(Spec)
	status?: #LicenseAssociationStatus @go(Status)
}

// LicenseAssociationList contains a list of LicenseAssociations
#LicenseAssociationList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#LicenseAssociation] @go(Items,[]LicenseAssociation)
}
