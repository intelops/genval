// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/elb/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#AppCookieStickinessPolicyInitParameters: {
	// Application cookie whose lifetime the ELB's cookie should follow.
	cookieName?: null | string @go(CookieName,*string)
}

#AppCookieStickinessPolicyObservation: {
	// Application cookie whose lifetime the ELB's cookie should follow.
	cookieName?: null | string @go(CookieName,*string)

	// ID of the policy.
	id?: null | string @go(ID,*string)

	// Load balancer port to which the policy
	// should be applied. This must be an active listener on the load
	// balancer.
	lbPort?: null | float64 @go(LBPort,*float64)

	// Name of load balancer to which the policy
	// should be attached.
	loadBalancer?: null | string @go(LoadBalancer,*string)
}

#AppCookieStickinessPolicyParameters: {
	// Application cookie whose lifetime the ELB's cookie should follow.
	// +kubebuilder:validation:Optional
	cookieName?: null | string @go(CookieName,*string)

	// Load balancer port to which the policy
	// should be applied. This must be an active listener on the load
	// balancer.
	// +kubebuilder:validation:Required
	lbPort?: null | float64 @go(LBPort,*float64)

	// Name of load balancer to which the policy
	// should be attached.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/elb/v1beta1.ELB
	// +kubebuilder:validation:Optional
	loadBalancer?: null | string @go(LoadBalancer,*string)

	// Reference to a ELB in elb to populate loadBalancer.
	// +kubebuilder:validation:Optional
	loadBalancerRef?: null | v1.#Reference @go(LoadBalancerRef,*v1.Reference)

	// Selector for a ELB in elb to populate loadBalancer.
	// +kubebuilder:validation:Optional
	loadBalancerSelector?: null | v1.#Selector @go(LoadBalancerSelector,*v1.Selector)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)
}

// AppCookieStickinessPolicySpec defines the desired state of AppCookieStickinessPolicy
#AppCookieStickinessPolicySpec: {
	v1.#ResourceSpec
	forProvider: #AppCookieStickinessPolicyParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #AppCookieStickinessPolicyInitParameters @go(InitProvider)
}

// AppCookieStickinessPolicyStatus defines the observed state of AppCookieStickinessPolicy.
#AppCookieStickinessPolicyStatus: {
	v1.#ResourceStatus
	atProvider?: #AppCookieStickinessPolicyObservation @go(AtProvider)
}

// AppCookieStickinessPolicy is the Schema for the AppCookieStickinessPolicys API. Provides an application cookie stickiness policy, which allows an ELB to wed its stickiness cookie to a cookie generated by your application.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#AppCookieStickinessPolicy: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.cookieName) || (has(self.initProvider) && has(self.initProvider.cookieName))",message="spec.forProvider.cookieName is a required parameter"
	spec:    #AppCookieStickinessPolicySpec   @go(Spec)
	status?: #AppCookieStickinessPolicyStatus @go(Status)
}

// AppCookieStickinessPolicyList contains a list of AppCookieStickinessPolicys
#AppCookieStickinessPolicyList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#AppCookieStickinessPolicy] @go(Items,[]AppCookieStickinessPolicy)
}
