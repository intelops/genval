// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/elb/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#LBCookieStickinessPolicyInitParameters: {
	// The time period after which
	// the session cookie should be considered stale, expressed in seconds.
	cookieExpirationPeriod?: null | float64 @go(CookieExpirationPeriod,*float64)

	// The load balancer port to which the policy
	// should be applied. This must be an active listener on the load
	// balancer.
	lbPort?: null | float64 @go(LBPort,*float64)

	// The name of the stickiness policy.
	name?: null | string @go(Name,*string)
}

#LBCookieStickinessPolicyObservation: {
	// The time period after which
	// the session cookie should be considered stale, expressed in seconds.
	cookieExpirationPeriod?: null | float64 @go(CookieExpirationPeriod,*float64)

	// The ID of the policy.
	id?: null | string @go(ID,*string)

	// The load balancer port to which the policy
	// should be applied. This must be an active listener on the load
	// balancer.
	lbPort?: null | float64 @go(LBPort,*float64)

	// The load balancer to which the policy
	// should be attached.
	loadBalancer?: null | string @go(LoadBalancer,*string)

	// The name of the stickiness policy.
	name?: null | string @go(Name,*string)
}

#LBCookieStickinessPolicyParameters: {
	// The time period after which
	// the session cookie should be considered stale, expressed in seconds.
	// +kubebuilder:validation:Optional
	cookieExpirationPeriod?: null | float64 @go(CookieExpirationPeriod,*float64)

	// The load balancer port to which the policy
	// should be applied. This must be an active listener on the load
	// balancer.
	// +kubebuilder:validation:Optional
	lbPort?: null | float64 @go(LBPort,*float64)

	// The load balancer to which the policy
	// should be attached.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/elb/v1beta1.ELB
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	loadBalancer?: null | string @go(LoadBalancer,*string)

	// Reference to a ELB in elb to populate loadBalancer.
	// +kubebuilder:validation:Optional
	loadBalancerRef?: null | v1.#Reference @go(LoadBalancerRef,*v1.Reference)

	// Selector for a ELB in elb to populate loadBalancer.
	// +kubebuilder:validation:Optional
	loadBalancerSelector?: null | v1.#Selector @go(LoadBalancerSelector,*v1.Selector)

	// The name of the stickiness policy.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)
}

// LBCookieStickinessPolicySpec defines the desired state of LBCookieStickinessPolicy
#LBCookieStickinessPolicySpec: {
	v1.#ResourceSpec
	forProvider: #LBCookieStickinessPolicyParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #LBCookieStickinessPolicyInitParameters @go(InitProvider)
}

// LBCookieStickinessPolicyStatus defines the observed state of LBCookieStickinessPolicy.
#LBCookieStickinessPolicyStatus: {
	v1.#ResourceStatus
	atProvider?: #LBCookieStickinessPolicyObservation @go(AtProvider)
}

// LBCookieStickinessPolicy is the Schema for the LBCookieStickinessPolicys API. Provides a load balancer cookie stickiness policy, which allows an ELB to control the sticky session lifetime of the browser.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#LBCookieStickinessPolicy: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.lbPort) || (has(self.initProvider) && has(self.initProvider.lbPort))",message="spec.forProvider.lbPort is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	spec:    #LBCookieStickinessPolicySpec   @go(Spec)
	status?: #LBCookieStickinessPolicyStatus @go(Status)
}

// LBCookieStickinessPolicyList contains a list of LBCookieStickinessPolicys
#LBCookieStickinessPolicyList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#LBCookieStickinessPolicy] @go(Items,[]LBCookieStickinessPolicy)
}
