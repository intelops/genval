// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/elb/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#BackendServerPolicyInitParameters: {
	// The instance port to apply the policy to.
	instancePort?: null | float64 @go(InstancePort,*float64)

	// List of Policy Names to apply to the backend server.
	policyNames?: [...null | string] @go(PolicyNames,[]*string)
}

#BackendServerPolicyObservation: {
	// The ID of the policy.
	id?: null | string @go(ID,*string)

	// The instance port to apply the policy to.
	instancePort?: null | float64 @go(InstancePort,*float64)

	// The load balancer to attach the policy to.
	loadBalancerName?: null | string @go(LoadBalancerName,*string)

	// List of Policy Names to apply to the backend server.
	policyNames?: [...null | string] @go(PolicyNames,[]*string)
}

#BackendServerPolicyParameters: {
	// The instance port to apply the policy to.
	// +kubebuilder:validation:Optional
	instancePort?: null | float64 @go(InstancePort,*float64)

	// The load balancer to attach the policy to.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/elb/v1beta1.ELB
	// +kubebuilder:validation:Optional
	loadBalancerName?: null | string @go(LoadBalancerName,*string)

	// Reference to a ELB in elb to populate loadBalancerName.
	// +kubebuilder:validation:Optional
	loadBalancerNameRef?: null | v1.#Reference @go(LoadBalancerNameRef,*v1.Reference)

	// Selector for a ELB in elb to populate loadBalancerName.
	// +kubebuilder:validation:Optional
	loadBalancerNameSelector?: null | v1.#Selector @go(LoadBalancerNameSelector,*v1.Selector)

	// List of Policy Names to apply to the backend server.
	// +kubebuilder:validation:Optional
	policyNames?: [...null | string] @go(PolicyNames,[]*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)
}

// BackendServerPolicySpec defines the desired state of BackendServerPolicy
#BackendServerPolicySpec: {
	v1.#ResourceSpec
	forProvider: #BackendServerPolicyParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #BackendServerPolicyInitParameters @go(InitProvider)
}

// BackendServerPolicyStatus defines the observed state of BackendServerPolicy.
#BackendServerPolicyStatus: {
	v1.#ResourceStatus
	atProvider?: #BackendServerPolicyObservation @go(AtProvider)
}

// BackendServerPolicy is the Schema for the BackendServerPolicys API. Attaches a load balancer policy to an ELB backend server.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#BackendServerPolicy: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.instancePort) || (has(self.initProvider) && has(self.initProvider.instancePort))",message="spec.forProvider.instancePort is a required parameter"
	spec:    #BackendServerPolicySpec   @go(Spec)
	status?: #BackendServerPolicyStatus @go(Status)
}

// BackendServerPolicyList contains a list of BackendServerPolicys
#BackendServerPolicyList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#BackendServerPolicy] @go(Items,[]BackendServerPolicy)
}
