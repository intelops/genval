// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/sns/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#TopicSubscriptionInitParameters: {
	// Integer indicating number of minutes to wait in retrying mode for fetching subscription arn before marking it as failure. Only applicable for http and https protocols. Default is 1.
	confirmationTimeoutInMinutes?: null | float64 @go(ConfirmationTimeoutInMinutes,*float64)

	// JSON String with the delivery policy (retries, backoff, etc.) that will be used in the subscription - this only applies to HTTP/S subscriptions. Refer to the SNS docs for more details.
	deliveryPolicy?: null | string @go(DeliveryPolicy,*string)

	// Whether the endpoint is capable of auto confirming subscription (e.g., PagerDuty). Default is false.
	endpointAutoConfirms?: null | bool @go(EndpointAutoConfirms,*bool)

	// JSON String with the filter policy that will be used in the subscription to filter messages seen by the target resource. Refer to the SNS docs for more details.
	filterPolicy?: null | string @go(FilterPolicy,*string)

	// Whether the filter_policy applies to MessageAttributes (default) or MessageBody.
	filterPolicyScope?: null | string @go(FilterPolicyScope,*string)

	// Protocol to use. Valid values are: sqs, sms, lambda, firehose, and application. Protocols email, email-json, http and https are also valid but partially supported. See details below.
	protocol?: null | string @go(Protocol,*string)

	// Whether to enable raw message delivery (the original message is directly passed, not wrapped in JSON with the original message in the message property). Default is false.
	rawMessageDelivery?: null | bool @go(RawMessageDelivery,*bool)

	// JSON String with the redrive policy that will be used in the subscription. Refer to the SNS docs for more details.
	redrivePolicy?: null | string @go(RedrivePolicy,*string)
}

#TopicSubscriptionObservation: {
	// ARN of the subscription.
	arn?: null | string @go(Arn,*string)

	// Integer indicating number of minutes to wait in retrying mode for fetching subscription arn before marking it as failure. Only applicable for http and https protocols. Default is 1.
	confirmationTimeoutInMinutes?: null | float64 @go(ConfirmationTimeoutInMinutes,*float64)

	// Whether the subscription confirmation request was authenticated.
	confirmationWasAuthenticated?: null | bool @go(ConfirmationWasAuthenticated,*bool)

	// JSON String with the delivery policy (retries, backoff, etc.) that will be used in the subscription - this only applies to HTTP/S subscriptions. Refer to the SNS docs for more details.
	deliveryPolicy?: null | string @go(DeliveryPolicy,*string)

	// Endpoint to send data to. The contents vary with the protocol. See details below.
	endpoint?: null | string @go(Endpoint,*string)

	// Whether the endpoint is capable of auto confirming subscription (e.g., PagerDuty). Default is false.
	endpointAutoConfirms?: null | bool @go(EndpointAutoConfirms,*bool)

	// JSON String with the filter policy that will be used in the subscription to filter messages seen by the target resource. Refer to the SNS docs for more details.
	filterPolicy?: null | string @go(FilterPolicy,*string)

	// Whether the filter_policy applies to MessageAttributes (default) or MessageBody.
	filterPolicyScope?: null | string @go(FilterPolicyScope,*string)

	// ARN of the subscription.
	id?: null | string @go(ID,*string)

	// AWS account ID of the subscription's owner.
	ownerId?: null | string @go(OwnerID,*string)

	// Whether the subscription has not been confirmed.
	pendingConfirmation?: null | bool @go(PendingConfirmation,*bool)

	// Protocol to use. Valid values are: sqs, sms, lambda, firehose, and application. Protocols email, email-json, http and https are also valid but partially supported. See details below.
	protocol?: null | string @go(Protocol,*string)

	// Whether to enable raw message delivery (the original message is directly passed, not wrapped in JSON with the original message in the message property). Default is false.
	rawMessageDelivery?: null | bool @go(RawMessageDelivery,*bool)

	// JSON String with the redrive policy that will be used in the subscription. Refer to the SNS docs for more details.
	redrivePolicy?: null | string @go(RedrivePolicy,*string)

	// ARN of the IAM role to publish to Kinesis Data Firehose delivery stream. Refer to SNS docs.
	subscriptionRoleArn?: null | string @go(SubscriptionRoleArn,*string)

	// ARN of the SNS topic to subscribe to.
	topicArn?: null | string @go(TopicArn,*string)
}

#TopicSubscriptionParameters: {
	// Integer indicating number of minutes to wait in retrying mode for fetching subscription arn before marking it as failure. Only applicable for http and https protocols. Default is 1.
	// +kubebuilder:validation:Optional
	confirmationTimeoutInMinutes?: null | float64 @go(ConfirmationTimeoutInMinutes,*float64)

	// JSON String with the delivery policy (retries, backoff, etc.) that will be used in the subscription - this only applies to HTTP/S subscriptions. Refer to the SNS docs for more details.
	// +kubebuilder:validation:Optional
	deliveryPolicy?: null | string @go(DeliveryPolicy,*string)

	// Endpoint to send data to. The contents vary with the protocol. See details below.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/sqs/v1beta1.Queue
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	endpoint?: null | string @go(Endpoint,*string)

	// Whether the endpoint is capable of auto confirming subscription (e.g., PagerDuty). Default is false.
	// +kubebuilder:validation:Optional
	endpointAutoConfirms?: null | bool @go(EndpointAutoConfirms,*bool)

	// Reference to a Queue in sqs to populate endpoint.
	// +kubebuilder:validation:Optional
	endpointRef?: null | v1.#Reference @go(EndpointRef,*v1.Reference)

	// Selector for a Queue in sqs to populate endpoint.
	// +kubebuilder:validation:Optional
	endpointSelector?: null | v1.#Selector @go(EndpointSelector,*v1.Selector)

	// JSON String with the filter policy that will be used in the subscription to filter messages seen by the target resource. Refer to the SNS docs for more details.
	// +kubebuilder:validation:Optional
	filterPolicy?: null | string @go(FilterPolicy,*string)

	// Whether the filter_policy applies to MessageAttributes (default) or MessageBody.
	// +kubebuilder:validation:Optional
	filterPolicyScope?: null | string @go(FilterPolicyScope,*string)

	// Protocol to use. Valid values are: sqs, sms, lambda, firehose, and application. Protocols email, email-json, http and https are also valid but partially supported. See details below.
	// +kubebuilder:validation:Optional
	protocol?: null | string @go(Protocol,*string)

	// Whether to enable raw message delivery (the original message is directly passed, not wrapped in JSON with the original message in the message property). Default is false.
	// +kubebuilder:validation:Optional
	rawMessageDelivery?: null | bool @go(RawMessageDelivery,*bool)

	// JSON String with the redrive policy that will be used in the subscription. Refer to the SNS docs for more details.
	// +kubebuilder:validation:Optional
	redrivePolicy?: null | string @go(RedrivePolicy,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// ARN of the IAM role to publish to Kinesis Data Firehose delivery stream. Refer to SNS docs.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	subscriptionRoleArn?: null | string @go(SubscriptionRoleArn,*string)

	// Reference to a Role in iam to populate subscriptionRoleArn.
	// +kubebuilder:validation:Optional
	subscriptionRoleArnRef?: null | v1.#Reference @go(SubscriptionRoleArnRef,*v1.Reference)

	// Selector for a Role in iam to populate subscriptionRoleArn.
	// +kubebuilder:validation:Optional
	subscriptionRoleArnSelector?: null | v1.#Selector @go(SubscriptionRoleArnSelector,*v1.Selector)

	// ARN of the SNS topic to subscribe to.
	// +crossplane:generate:reference:type=Topic
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	topicArn?: null | string @go(TopicArn,*string)

	// Reference to a Topic to populate topicArn.
	// +kubebuilder:validation:Optional
	topicArnRef?: null | v1.#Reference @go(TopicArnRef,*v1.Reference)

	// Selector for a Topic to populate topicArn.
	// +kubebuilder:validation:Optional
	topicArnSelector?: null | v1.#Selector @go(TopicArnSelector,*v1.Selector)
}

// TopicSubscriptionSpec defines the desired state of TopicSubscription
#TopicSubscriptionSpec: {
	v1.#ResourceSpec
	forProvider: #TopicSubscriptionParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #TopicSubscriptionInitParameters @go(InitProvider)
}

// TopicSubscriptionStatus defines the observed state of TopicSubscription.
#TopicSubscriptionStatus: {
	v1.#ResourceStatus
	atProvider?: #TopicSubscriptionObservation @go(AtProvider)
}

// TopicSubscription is the Schema for the TopicSubscriptions API. Provides a resource for subscribing to SNS topics.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#TopicSubscription: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.protocol) || (has(self.initProvider) && has(self.initProvider.protocol))",message="spec.forProvider.protocol is a required parameter"
	spec:    #TopicSubscriptionSpec   @go(Spec)
	status?: #TopicSubscriptionStatus @go(Status)
}

// TopicSubscriptionList contains a list of TopicSubscriptions
#TopicSubscriptionList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#TopicSubscription] @go(Items,[]TopicSubscription)
}
