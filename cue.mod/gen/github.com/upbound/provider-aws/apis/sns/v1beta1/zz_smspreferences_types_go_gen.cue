// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/sns/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#SMSPreferencesInitParameters: {
	// The type of SMS message that you will send by default. Possible values are: Promotional, Transactional
	defaultSmsType?: null | string @go(DefaultSMSType,*string)

	// A string, such as your business brand, that is displayed as the sender on the receiving device.
	defaultSenderId?: null | string @go(DefaultSenderID,*string)

	// The percentage of successful SMS deliveries for which Amazon SNS will write logs in CloudWatch Logs. The value must be between 0 and 100.
	deliveryStatusSuccessSamplingRate?: null | string @go(DeliveryStatusSuccessSamplingRate,*string)

	// The maximum amount in USD that you are willing to spend each month to send SMS messages.
	monthlySpendLimit?: null | float64 @go(MonthlySpendLimit,*float64)

	// The name of the Amazon S3 bucket to receive daily SMS usage reports from Amazon SNS.
	usageReportS3Bucket?: null | string @go(UsageReportS3Bucket,*string)
}

#SMSPreferencesObservation: {
	// The type of SMS message that you will send by default. Possible values are: Promotional, Transactional
	defaultSmsType?: null | string @go(DefaultSMSType,*string)

	// A string, such as your business brand, that is displayed as the sender on the receiving device.
	defaultSenderId?: null | string @go(DefaultSenderID,*string)

	// The ARN of the IAM role that allows Amazon SNS to write logs about SMS deliveries in CloudWatch Logs.
	deliveryStatusIamRoleArn?: null | string @go(DeliveryStatusIAMRoleArn,*string)

	// The percentage of successful SMS deliveries for which Amazon SNS will write logs in CloudWatch Logs. The value must be between 0 and 100.
	deliveryStatusSuccessSamplingRate?: null | string @go(DeliveryStatusSuccessSamplingRate,*string)
	id?:                                null | string @go(ID,*string)

	// The maximum amount in USD that you are willing to spend each month to send SMS messages.
	monthlySpendLimit?: null | float64 @go(MonthlySpendLimit,*float64)

	// The name of the Amazon S3 bucket to receive daily SMS usage reports from Amazon SNS.
	usageReportS3Bucket?: null | string @go(UsageReportS3Bucket,*string)
}

#SMSPreferencesParameters: {
	// The type of SMS message that you will send by default. Possible values are: Promotional, Transactional
	// +kubebuilder:validation:Optional
	defaultSmsType?: null | string @go(DefaultSMSType,*string)

	// A string, such as your business brand, that is displayed as the sender on the receiving device.
	// +kubebuilder:validation:Optional
	defaultSenderId?: null | string @go(DefaultSenderID,*string)

	// The ARN of the IAM role that allows Amazon SNS to write logs about SMS deliveries in CloudWatch Logs.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	deliveryStatusIamRoleArn?: null | string @go(DeliveryStatusIAMRoleArn,*string)

	// Reference to a Role in iam to populate deliveryStatusIamRoleArn.
	// +kubebuilder:validation:Optional
	deliveryStatusIamRoleArnRef?: null | v1.#Reference @go(DeliveryStatusIAMRoleArnRef,*v1.Reference)

	// Selector for a Role in iam to populate deliveryStatusIamRoleArn.
	// +kubebuilder:validation:Optional
	deliveryStatusIamRoleArnSelector?: null | v1.#Selector @go(DeliveryStatusIAMRoleArnSelector,*v1.Selector)

	// The percentage of successful SMS deliveries for which Amazon SNS will write logs in CloudWatch Logs. The value must be between 0 and 100.
	// +kubebuilder:validation:Optional
	deliveryStatusSuccessSamplingRate?: null | string @go(DeliveryStatusSuccessSamplingRate,*string)

	// The maximum amount in USD that you are willing to spend each month to send SMS messages.
	// +kubebuilder:validation:Optional
	monthlySpendLimit?: null | float64 @go(MonthlySpendLimit,*float64)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The name of the Amazon S3 bucket to receive daily SMS usage reports from Amazon SNS.
	// +kubebuilder:validation:Optional
	usageReportS3Bucket?: null | string @go(UsageReportS3Bucket,*string)
}

// SMSPreferencesSpec defines the desired state of SMSPreferences
#SMSPreferencesSpec: {
	v1.#ResourceSpec
	forProvider: #SMSPreferencesParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #SMSPreferencesInitParameters @go(InitProvider)
}

// SMSPreferencesStatus defines the observed state of SMSPreferences.
#SMSPreferencesStatus: {
	v1.#ResourceStatus
	atProvider?: #SMSPreferencesObservation @go(AtProvider)
}

// SMSPreferences is the Schema for the SMSPreferencess API. Provides a way to set SNS SMS preferences.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#SMSPreferences: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta    @go(ObjectMeta)
	spec:      #SMSPreferencesSpec   @go(Spec)
	status?:   #SMSPreferencesStatus @go(Status)
}

// SMSPreferencesList contains a list of SMSPreferencess
#SMSPreferencesList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#SMSPreferences] @go(Items,[]SMSPreferences)
}
