// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/dataexchange/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#RevisionInitParameters: {
	// An optional comment about the revision.
	comment?: null | string @go(Comment,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#RevisionObservation: {
	// The Amazon Resource Name of this data set.
	arn?: null | string @go(Arn,*string)

	// An optional comment about the revision.
	comment?: null | string @go(Comment,*string)

	// The dataset id.
	dataSetId?: null | string @go(DataSetID,*string)

	// The Id of the data set.
	id?: null | string @go(ID,*string)

	// The Id of the revision.
	revisionId?: null | string @go(RevisionID,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#RevisionParameters: {
	// An optional comment about the revision.
	// +kubebuilder:validation:Optional
	comment?: null | string @go(Comment,*string)

	// The dataset id.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/dataexchange/v1beta1.DataSet
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	dataSetId?: null | string @go(DataSetID,*string)

	// Reference to a DataSet in dataexchange to populate dataSetId.
	// +kubebuilder:validation:Optional
	dataSetIdRef?: null | v1.#Reference @go(DataSetIDRef,*v1.Reference)

	// Selector for a DataSet in dataexchange to populate dataSetId.
	// +kubebuilder:validation:Optional
	dataSetIdSelector?: null | v1.#Selector @go(DataSetIDSelector,*v1.Selector)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// RevisionSpec defines the desired state of Revision
#RevisionSpec: {
	v1.#ResourceSpec
	forProvider: #RevisionParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #RevisionInitParameters @go(InitProvider)
}

// RevisionStatus defines the observed state of Revision.
#RevisionStatus: {
	v1.#ResourceStatus
	atProvider?: #RevisionObservation @go(AtProvider)
}

// Revision is the Schema for the Revisions API. Provides a DataExchange Revision
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Revision: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec:      #RevisionSpec      @go(Spec)
	status?:   #RevisionStatus    @go(Status)
}

// RevisionList contains a list of Revisions
#RevisionList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Revision] @go(Items,[]Revision)
}
