// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/workspaces/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#IPGroupInitParameters: {
	// The description of the IP group.
	description?: null | string @go(Description,*string)

	// The name of the IP group.
	name?: null | string @go(Name,*string)

	// One or more pairs specifying the IP group rule (in CIDR format) from which web requests originate.
	rules?: [...#RulesInitParameters] @go(Rules,[]RulesInitParameters)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#IPGroupObservation: {
	// The description of the IP group.
	description?: null | string @go(Description,*string)

	// The IP group identifier.
	id?: null | string @go(ID,*string)

	// The name of the IP group.
	name?: null | string @go(Name,*string)

	// One or more pairs specifying the IP group rule (in CIDR format) from which web requests originate.
	rules?: [...#RulesObservation] @go(Rules,[]RulesObservation)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#IPGroupParameters: {
	// The description of the IP group.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// The name of the IP group.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// One or more pairs specifying the IP group rule (in CIDR format) from which web requests originate.
	// +kubebuilder:validation:Optional
	rules?: [...#RulesParameters] @go(Rules,[]RulesParameters)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#RulesInitParameters: {
	// The description of the IP group.
	description?: null | string @go(Description,*string)

	// The IP address range, in CIDR notation, e.g., 10.0.0.0/16
	source?: null | string @go(Source,*string)
}

#RulesObservation: {
	// The description of the IP group.
	description?: null | string @go(Description,*string)

	// The IP address range, in CIDR notation, e.g., 10.0.0.0/16
	source?: null | string @go(Source,*string)
}

#RulesParameters: {
	// The description of the IP group.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// The IP address range, in CIDR notation, e.g., 10.0.0.0/16
	// +kubebuilder:validation:Optional
	source?: null | string @go(Source,*string)
}

// IPGroupSpec defines the desired state of IPGroup
#IPGroupSpec: {
	v1.#ResourceSpec
	forProvider: #IPGroupParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #IPGroupInitParameters @go(InitProvider)
}

// IPGroupStatus defines the observed state of IPGroup.
#IPGroupStatus: {
	v1.#ResourceStatus
	atProvider?: #IPGroupObservation @go(AtProvider)
}

// IPGroup is the Schema for the IPGroups API. Provides an IP access control group in AWS WorkSpaces Service.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#IPGroup: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	spec:    #IPGroupSpec   @go(Spec)
	status?: #IPGroupStatus @go(Status)
}

// IPGroupList contains a list of IPGroups
#IPGroupList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#IPGroup] @go(Items,[]IPGroup)
}
