// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/vpc/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#NetworkPerformanceMetricSubscriptionInitParameters: {
	// The target Region or Availability Zone that the metric subscription is enabled for. For example, eu-west-1.
	destination?: null | string @go(Destination,*string)

	// The metric used for the enabled subscription. Valid values: aggregate-latency. Default: aggregate-latency.
	metric?: null | string @go(Metric,*string)

	// The source Region or Availability Zone that the metric subscription is enabled for. For example, us-east-1.
	source?: null | string @go(Source,*string)

	// The statistic used for the enabled subscription. Valid values: p50. Default: p50.
	statistic?: null | string @go(Statistic,*string)
}

#NetworkPerformanceMetricSubscriptionObservation: {
	// The target Region or Availability Zone that the metric subscription is enabled for. For example, eu-west-1.
	destination?: null | string @go(Destination,*string)
	id?:          null | string @go(ID,*string)

	// The metric used for the enabled subscription. Valid values: aggregate-latency. Default: aggregate-latency.
	metric?: null | string @go(Metric,*string)

	// The data aggregation time for the subscription.
	period?: null | string @go(Period,*string)

	// The source Region or Availability Zone that the metric subscription is enabled for. For example, us-east-1.
	source?: null | string @go(Source,*string)

	// The statistic used for the enabled subscription. Valid values: p50. Default: p50.
	statistic?: null | string @go(Statistic,*string)
}

#NetworkPerformanceMetricSubscriptionParameters: {
	// The target Region or Availability Zone that the metric subscription is enabled for. For example, eu-west-1.
	// +kubebuilder:validation:Optional
	destination?: null | string @go(Destination,*string)

	// The metric used for the enabled subscription. Valid values: aggregate-latency. Default: aggregate-latency.
	// +kubebuilder:validation:Optional
	metric?: null | string @go(Metric,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The source Region or Availability Zone that the metric subscription is enabled for. For example, us-east-1.
	// +kubebuilder:validation:Optional
	source?: null | string @go(Source,*string)

	// The statistic used for the enabled subscription. Valid values: p50. Default: p50.
	// +kubebuilder:validation:Optional
	statistic?: null | string @go(Statistic,*string)
}

// NetworkPerformanceMetricSubscriptionSpec defines the desired state of NetworkPerformanceMetricSubscription
#NetworkPerformanceMetricSubscriptionSpec: {
	v1.#ResourceSpec
	forProvider: #NetworkPerformanceMetricSubscriptionParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #NetworkPerformanceMetricSubscriptionInitParameters @go(InitProvider)
}

// NetworkPerformanceMetricSubscriptionStatus defines the observed state of NetworkPerformanceMetricSubscription.
#NetworkPerformanceMetricSubscriptionStatus: {
	v1.#ResourceStatus
	atProvider?: #NetworkPerformanceMetricSubscriptionObservation @go(AtProvider)
}

// NetworkPerformanceMetricSubscription is the Schema for the NetworkPerformanceMetricSubscriptions API. Provides a resource to manage an Infrastructure Performance subscription.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#NetworkPerformanceMetricSubscription: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.destination) || (has(self.initProvider) && has(self.initProvider.destination))",message="spec.forProvider.destination is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.source) || (has(self.initProvider) && has(self.initProvider.source))",message="spec.forProvider.source is a required parameter"
	spec:    #NetworkPerformanceMetricSubscriptionSpec   @go(Spec)
	status?: #NetworkPerformanceMetricSubscriptionStatus @go(Status)
}

// NetworkPerformanceMetricSubscriptionList contains a list of NetworkPerformanceMetricSubscriptions
#NetworkPerformanceMetricSubscriptionList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#NetworkPerformanceMetricSubscription] @go(Items,[]NetworkPerformanceMetricSubscription)
}
