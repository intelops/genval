// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/secretsmanager/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#SecretPolicyInitParameters: {
	// Makes an optional API call to Zelkova to validate the Resource Policy to prevent broad access to your secret.
	blockPublicPolicy?: null | bool @go(BlockPublicPolicy,*bool)

	// Valid JSON document representing a resource policy. Unlike aws_secretsmanager_secret, where policy can be set to "{}" to delete the policy, "{}" is not a valid policy since policy is required.
	policy?: null | string @go(Policy,*string)
}

#SecretPolicyObservation: {
	// Makes an optional API call to Zelkova to validate the Resource Policy to prevent broad access to your secret.
	blockPublicPolicy?: null | bool @go(BlockPublicPolicy,*bool)

	// Amazon Resource Name (ARN) of the secret.
	id?: null | string @go(ID,*string)

	// Valid JSON document representing a resource policy. Unlike aws_secretsmanager_secret, where policy can be set to "{}" to delete the policy, "{}" is not a valid policy since policy is required.
	policy?: null | string @go(Policy,*string)

	// Secret ARN.
	secretArn?: null | string @go(SecretArn,*string)
}

#SecretPolicyParameters: {
	// Makes an optional API call to Zelkova to validate the Resource Policy to prevent broad access to your secret.
	// +kubebuilder:validation:Optional
	blockPublicPolicy?: null | bool @go(BlockPublicPolicy,*bool)

	// Valid JSON document representing a resource policy. Unlike aws_secretsmanager_secret, where policy can be set to "{}" to delete the policy, "{}" is not a valid policy since policy is required.
	// +kubebuilder:validation:Optional
	policy?: null | string @go(Policy,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Secret ARN.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/secretsmanager/v1beta1.Secret
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	secretArn?: null | string @go(SecretArn,*string)

	// Reference to a Secret in secretsmanager to populate secretArn.
	// +kubebuilder:validation:Optional
	secretArnRef?: null | v1.#Reference @go(SecretArnRef,*v1.Reference)

	// Selector for a Secret in secretsmanager to populate secretArn.
	// +kubebuilder:validation:Optional
	secretArnSelector?: null | v1.#Selector @go(SecretArnSelector,*v1.Selector)
}

// SecretPolicySpec defines the desired state of SecretPolicy
#SecretPolicySpec: {
	v1.#ResourceSpec
	forProvider: #SecretPolicyParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #SecretPolicyInitParameters @go(InitProvider)
}

// SecretPolicyStatus defines the observed state of SecretPolicy.
#SecretPolicyStatus: {
	v1.#ResourceStatus
	atProvider?: #SecretPolicyObservation @go(AtProvider)
}

// SecretPolicy is the Schema for the SecretPolicys API. Provides a resource to manage AWS Secrets Manager secret policy
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#SecretPolicy: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.policy) || (has(self.initProvider) && has(self.initProvider.policy))",message="spec.forProvider.policy is a required parameter"
	spec:    #SecretPolicySpec   @go(Spec)
	status?: #SecretPolicyStatus @go(Status)
}

// SecretPolicyList contains a list of SecretPolicys
#SecretPolicyList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#SecretPolicy] @go(Items,[]SecretPolicy)
}
