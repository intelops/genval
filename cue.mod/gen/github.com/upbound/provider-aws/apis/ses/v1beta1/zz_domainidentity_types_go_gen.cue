// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/ses/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#DomainIdentityInitParameters: {
}

#DomainIdentityObservation: {
	// The ARN of the domain identity.
	arn?: null | string @go(Arn,*string)
	id?:  null | string @go(ID,*string)

	// A code which when added to the domain as a TXT record
	// will signal to SES that the owner of the domain has authorised SES to act on
	// their behalf. The domain identity will be in state "verification pending"
	// until this is done.  Find out more about verifying domains in Amazon
	// SES in the AWS SES
	// docs.
	verificationToken?: null | string @go(VerificationToken,*string)
}

#DomainIdentityParameters: {
	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)
}

// DomainIdentitySpec defines the desired state of DomainIdentity
#DomainIdentitySpec: {
	v1.#ResourceSpec
	forProvider: #DomainIdentityParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #DomainIdentityInitParameters @go(InitProvider)
}

// DomainIdentityStatus defines the observed state of DomainIdentity.
#DomainIdentityStatus: {
	v1.#ResourceStatus
	atProvider?: #DomainIdentityObservation @go(AtProvider)
}

// DomainIdentity is the Schema for the DomainIdentitys API. Provides an SES domain identity resource
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#DomainIdentity: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta    @go(ObjectMeta)
	spec:      #DomainIdentitySpec   @go(Spec)
	status?:   #DomainIdentityStatus @go(Status)
}

// DomainIdentityList contains a list of DomainIdentitys
#DomainIdentityList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#DomainIdentity] @go(Items,[]DomainIdentity)
}
