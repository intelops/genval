// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/rds/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#OptionGroupInitParameters: {
	// Specifies the name of the engine that this option group should be associated with.
	engineName?: null | string @go(EngineName,*string)

	// Specifies the major version of the engine that this option group should be associated with.
	majorEngineVersion?: null | string @go(MajorEngineVersion,*string)

	// A list of Options to apply.
	option?: [...#OptionInitParameters] @go(Option,[]OptionInitParameters)

	// The description of the option group.
	optionGroupDescription?: null | string @go(OptionGroupDescription,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#OptionGroupObservation: {
	// The ARN of the db option group.
	arn?: null | string @go(Arn,*string)

	// Specifies the name of the engine that this option group should be associated with.
	engineName?: null | string @go(EngineName,*string)

	// The db option group name.
	id?: null | string @go(ID,*string)

	// Specifies the major version of the engine that this option group should be associated with.
	majorEngineVersion?: null | string @go(MajorEngineVersion,*string)

	// A list of Options to apply.
	option?: [...#OptionObservation] @go(Option,[]OptionObservation)

	// The description of the option group.
	optionGroupDescription?: null | string @go(OptionGroupDescription,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#OptionGroupParameters: {
	// Specifies the name of the engine that this option group should be associated with.
	// +kubebuilder:validation:Optional
	engineName?: null | string @go(EngineName,*string)

	// Specifies the major version of the engine that this option group should be associated with.
	// +kubebuilder:validation:Optional
	majorEngineVersion?: null | string @go(MajorEngineVersion,*string)

	// A list of Options to apply.
	// +kubebuilder:validation:Optional
	option?: [...#OptionParameters] @go(Option,[]OptionParameters)

	// The description of the option group.
	// +kubebuilder:validation:Optional
	optionGroupDescription?: null | string @go(OptionGroupDescription,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#OptionInitParameters: {
	// A list of DB Security Groups for which the option is enabled.
	dbSecurityGroupMemberships?: [...null | string] @go(DBSecurityGroupMemberships,[]*string)

	// The Name of the Option (e.g., MEMCACHED).
	optionName?: null | string @go(OptionName,*string)

	// A list of option settings to apply.
	optionSettings?: [...#OptionSettingsInitParameters] @go(OptionSettings,[]OptionSettingsInitParameters)

	// The Port number when connecting to the Option (e.g., 11211).
	port?: null | float64 @go(Port,*float64)

	// A list of VPC Security Groups for which the option is enabled.
	vpcSecurityGroupMemberships?: [...null | string] @go(VPCSecurityGroupMemberships,[]*string)

	// The version of the option (e.g., 13.1.0.0).
	version?: null | string @go(Version,*string)
}

#OptionObservation: {
	// A list of DB Security Groups for which the option is enabled.
	dbSecurityGroupMemberships?: [...null | string] @go(DBSecurityGroupMemberships,[]*string)

	// The Name of the Option (e.g., MEMCACHED).
	optionName?: null | string @go(OptionName,*string)

	// A list of option settings to apply.
	optionSettings?: [...#OptionSettingsObservation] @go(OptionSettings,[]OptionSettingsObservation)

	// The Port number when connecting to the Option (e.g., 11211).
	port?: null | float64 @go(Port,*float64)

	// A list of VPC Security Groups for which the option is enabled.
	vpcSecurityGroupMemberships?: [...null | string] @go(VPCSecurityGroupMemberships,[]*string)

	// The version of the option (e.g., 13.1.0.0).
	version?: null | string @go(Version,*string)
}

#OptionParameters: {
	// A list of DB Security Groups for which the option is enabled.
	// +kubebuilder:validation:Optional
	dbSecurityGroupMemberships?: [...null | string] @go(DBSecurityGroupMemberships,[]*string)

	// The Name of the Option (e.g., MEMCACHED).
	// +kubebuilder:validation:Optional
	optionName?: null | string @go(OptionName,*string)

	// A list of option settings to apply.
	// +kubebuilder:validation:Optional
	optionSettings?: [...#OptionSettingsParameters] @go(OptionSettings,[]OptionSettingsParameters)

	// The Port number when connecting to the Option (e.g., 11211).
	// +kubebuilder:validation:Optional
	port?: null | float64 @go(Port,*float64)

	// A list of VPC Security Groups for which the option is enabled.
	// +kubebuilder:validation:Optional
	vpcSecurityGroupMemberships?: [...null | string] @go(VPCSecurityGroupMemberships,[]*string)

	// The version of the option (e.g., 13.1.0.0).
	// +kubebuilder:validation:Optional
	version?: null | string @go(Version,*string)
}

#OptionSettingsInitParameters: {
	// The name of the option group. Must be lowercase, to match as it is stored in AWS.
	name?: null | string @go(Name,*string)

	// The Value of the setting.
	value?: null | string @go(Value,*string)
}

#OptionSettingsObservation: {
	// The name of the option group. Must be lowercase, to match as it is stored in AWS.
	name?: null | string @go(Name,*string)

	// The Value of the setting.
	value?: null | string @go(Value,*string)
}

#OptionSettingsParameters: {
	// The name of the option group. Must be lowercase, to match as it is stored in AWS.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The Value of the setting.
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

// OptionGroupSpec defines the desired state of OptionGroup
#OptionGroupSpec: {
	v1.#ResourceSpec
	forProvider: #OptionGroupParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #OptionGroupInitParameters @go(InitProvider)
}

// OptionGroupStatus defines the observed state of OptionGroup.
#OptionGroupStatus: {
	v1.#ResourceStatus
	atProvider?: #OptionGroupObservation @go(AtProvider)
}

// OptionGroup is the Schema for the OptionGroups API. Provides an RDS DB option group resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#OptionGroup: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.engineName) || (has(self.initProvider) && has(self.initProvider.engineName))",message="spec.forProvider.engineName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.majorEngineVersion) || (has(self.initProvider) && has(self.initProvider.majorEngineVersion))",message="spec.forProvider.majorEngineVersion is a required parameter"
	spec:    #OptionGroupSpec   @go(Spec)
	status?: #OptionGroupStatus @go(Status)
}

// OptionGroupList contains a list of OptionGroups
#OptionGroupList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#OptionGroup] @go(Items,[]OptionGroup)
}
