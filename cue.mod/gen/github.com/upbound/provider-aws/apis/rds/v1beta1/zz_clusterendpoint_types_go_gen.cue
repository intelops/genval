// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/rds/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#ClusterEndpointInitParameters: {
	// The type of the endpoint. One of: READER , ANY .
	customEndpointType?: null | string @go(CustomEndpointType,*string)

	// List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty. Conflicts with static_members.
	excludedMembers?: [...null | string] @go(ExcludedMembers,[]*string)

	// List of DB instance identifiers that are part of the custom endpoint group. Conflicts with excluded_members.
	staticMembers?: [...null | string] @go(StaticMembers,[]*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#ClusterEndpointObservation: {
	// Amazon Resource Name (ARN) of cluster
	arn?: null | string @go(Arn,*string)

	// The cluster identifier.
	clusterIdentifier?: null | string @go(ClusterIdentifier,*string)

	// The type of the endpoint. One of: READER , ANY .
	customEndpointType?: null | string @go(CustomEndpointType,*string)

	// A custom endpoint for the Aurora cluster
	endpoint?: null | string @go(Endpoint,*string)

	// List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty. Conflicts with static_members.
	excludedMembers?: [...null | string] @go(ExcludedMembers,[]*string)

	// The RDS Cluster Endpoint Identifier
	id?: null | string @go(ID,*string)

	// List of DB instance identifiers that are part of the custom endpoint group. Conflicts with excluded_members.
	staticMembers?: [...null | string] @go(StaticMembers,[]*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#ClusterEndpointParameters: {
	// The cluster identifier.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/rds/v1beta1.Cluster
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	clusterIdentifier?: null | string @go(ClusterIdentifier,*string)

	// Reference to a Cluster in rds to populate clusterIdentifier.
	// +kubebuilder:validation:Optional
	clusterIdentifierRef?: null | v1.#Reference @go(ClusterIdentifierRef,*v1.Reference)

	// Selector for a Cluster in rds to populate clusterIdentifier.
	// +kubebuilder:validation:Optional
	clusterIdentifierSelector?: null | v1.#Selector @go(ClusterIdentifierSelector,*v1.Selector)

	// The type of the endpoint. One of: READER , ANY .
	// +kubebuilder:validation:Optional
	customEndpointType?: null | string @go(CustomEndpointType,*string)

	// List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty. Conflicts with static_members.
	// +kubebuilder:validation:Optional
	excludedMembers?: [...null | string] @go(ExcludedMembers,[]*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// List of DB instance identifiers that are part of the custom endpoint group. Conflicts with excluded_members.
	// +kubebuilder:validation:Optional
	staticMembers?: [...null | string] @go(StaticMembers,[]*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// ClusterEndpointSpec defines the desired state of ClusterEndpoint
#ClusterEndpointSpec: {
	v1.#ResourceSpec
	forProvider: #ClusterEndpointParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ClusterEndpointInitParameters @go(InitProvider)
}

// ClusterEndpointStatus defines the observed state of ClusterEndpoint.
#ClusterEndpointStatus: {
	v1.#ResourceStatus
	atProvider?: #ClusterEndpointObservation @go(AtProvider)
}

// ClusterEndpoint is the Schema for the ClusterEndpoints API. Manages an RDS Aurora Cluster Endpoint
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#ClusterEndpoint: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.customEndpointType) || (has(self.initProvider) && has(self.initProvider.customEndpointType))",message="spec.forProvider.customEndpointType is a required parameter"
	spec:    #ClusterEndpointSpec   @go(Spec)
	status?: #ClusterEndpointStatus @go(Status)
}

// ClusterEndpointList contains a list of ClusterEndpoints
#ClusterEndpointList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#ClusterEndpoint] @go(Items,[]ClusterEndpoint)
}
