// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/rds/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#ClusterInitParameters: {
	// The amount of storage in gibibytes (GiB) to allocate to each DB instance in the Multi-AZ DB cluster.
	allocatedStorage?: null | float64 @go(AllocatedStorage,*float64)

	// Enable to allow major engine version upgrades when changing engine versions. Defaults to false.
	allowMajorVersionUpgrade?: null | bool @go(AllowMajorVersionUpgrade,*bool)

	// Specifies whether any cluster modifications are applied immediately, or during the next maintenance window. Default is false. See Amazon RDS Documentation for more information.
	applyImmediately?: null | bool @go(ApplyImmediately,*bool)

	// List of EC2 Availability Zones for the DB cluster storage where DB cluster instances can be created. We recommend specifying 3 AZs or using the  if necessary. A maximum of 3 AZs can be configured.
	availabilityZones?: [...null | string] @go(AvailabilityZones,[]*string)

	// The target backtrack window, in seconds. Only available for aurora and aurora-mysql engines currently. To disable backtracking, set this value to 0. Defaults to 0. Must be between 0 and 259200 (72 hours)
	backtrackWindow?: null | float64 @go(BacktrackWindow,*float64)

	// The days to retain backups for. Default 1
	backupRetentionPeriod?: null | float64 @go(BackupRetentionPeriod,*float64)

	// – List of RDS Instances that are a part of this cluster
	clusterMembers?: [...null | string] @go(ClusterMembers,[]*string)

	// –  Copy all Cluster tags to snapshots. Default is false.
	copyTagsToSnapshot?: null | bool @go(CopyTagsToSnapshot,*bool)

	// The compute and memory capacity of each DB instance in the Multi-AZ DB cluster, for example db.m6g.xlarge. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes and availability for your engine, see DB instance class in the Amazon RDS User Guide.
	dbClusterInstanceClass?: null | string @go(DBClusterInstanceClass,*string)

	// A cluster parameter group to associate with the cluster.
	dbClusterParameterGroupName?: null | string @go(DBClusterParameterGroupName,*string)

	// Instance parameter group to associate with all instances of the DB cluster. The db_instance_parameter_group_name parameter is only valid in combination with the allow_major_version_upgrade parameter.
	dbInstanceParameterGroupName?: null | string @go(DBInstanceParameterGroupName,*string)

	// Name for an automatically created database on cluster creation. There are different naming restrictions per database engine: RDS Naming Constraints
	databaseName?: null | string @go(DatabaseName,*string)

	// If the DB instance should have deletion protection enabled. The database can't be deleted when this value is set to true. The default is false.
	deletionProtection?: null | bool @go(DeletionProtection,*bool)

	// Whether cluster should forward writes to an associated global cluster. Applied to secondary clusters to enable them to forward writes to an aws_rds_global_cluster's primary cluster. See the Aurora Userguide documentation for more information.
	enableGlobalWriteForwarding?: null | bool @go(EnableGlobalWriteForwarding,*bool)

	// Enable HTTP endpoint (data API). Only valid when engine_mode is set to serverless.
	enableHttpEndpoint?: null | bool @go(EnableHTTPEndpoint,*bool)

	// Set of log types to export to cloudwatch. If omitted, no logs will be exported. The following log types are supported: audit, error, general, slowquery, postgresql (PostgreSQL).
	enabledCloudwatchLogsExports?: [...null | string] @go(EnabledCloudwatchLogsExports,[]*string)

	// The name of the database engine to be used for this DB cluster. Defaults to aurora. Valid Values: aurora, aurora-mysql, aurora-postgresql, mysql, postgres. (Note that mysql and postgres are Multi-AZ RDS clusters).
	engine?: null | string @go(Engine,*string)

	// The database engine mode. Valid values: global (only valid for Aurora MySQL 1.21 and earlier), multimaster, parallelquery, provisioned, serverless. Defaults to: provisioned. See the RDS User Guide for limitations when using serverless.
	engineMode?: null | string @go(EngineMode,*string)

	// The database engine version. Updating this argument results in an outage. See the Aurora MySQL and Aurora Postgres documentation for your configured engine to determine this value, or by running aws rds describe-db-engine-versions. For example with Aurora MySQL 2, a potential value for this argument is 5.7.mysql_aurora.2.03.2. The value can contain a partial version where supported by the API. The actual engine version used is returned in the attribute engine_version_actual, , see Attributes Reference below.
	engineVersion?: null | string @go(EngineVersion,*string)

	// The name of your final DB snapshot when this DB cluster is deleted. If omitted, no final snapshot will be made.
	finalSnapshotIdentifier?: null | string @go(FinalSnapshotIdentifier,*string)

	// The global cluster identifier specified on aws_rds_global_cluster.
	globalClusterIdentifier?: null | string @go(GlobalClusterIdentifier,*string)

	// Specifies whether or not mappings of AWS Identity and Access Management (IAM) accounts to database accounts is enabled. Please see AWS Documentation for availability and limitations.
	iamDatabaseAuthenticationEnabled?: null | bool @go(IAMDatabaseAuthenticationEnabled,*bool)

	// The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for each DB instance in the Multi-AZ DB cluster. For information about valid Iops values, see Amazon RDS Provisioned IOPS storage to improve performance in the Amazon RDS User Guide. Must be a multiple between .5 and 50 of the storage amount for the DB cluster.
	iops?: null | float64 @go(Iops,*float64)

	// Set to true to allow RDS to manage the master user password in Secrets Manager. Cannot be set if master_password is provided.
	manageMasterUserPassword?: null | bool @go(ManageMasterUserPassword,*bool)

	// Username for the master DB user. Please refer to the RDS Naming Constraints. This argument does not support in-place updates and cannot be changed during a restore from snapshot.
	masterUsername?: null | string @go(MasterUsername,*string)

	// The network type of the cluster. Valid values: IPV4, DUAL.
	networkType?: null | string @go(NetworkType,*string)

	// The port on which the DB accepts connections
	port?: null | float64 @go(Port,*float64)

	// The daily time range during which automated backups are created if automated backups are enabled using the BackupRetentionPeriod parameter.Time in UTC. Default: A 30-minute window selected at random from an 8-hour block of time per regionE.g., 04:00-09:00
	preferredBackupWindow?: null | string @go(PreferredBackupWindow,*string)

	// The weekly time range during which system maintenance can occur, in (UTC) e.g., wed:04:00-wed:04:30
	preferredMaintenanceWindow?: null | string @go(PreferredMaintenanceWindow,*string)

	// ARN of a source DB cluster or DB instance if this DB cluster is to be created as a Read Replica.
	replicationSourceIdentifier?: null | string @go(ReplicationSourceIdentifier,*string)

	// Nested attribute for point in time restore. More details below.
	restoreToPointInTime?: [...#ClusterRestoreToPointInTimeInitParameters] @go(RestoreToPointInTime,[]ClusterRestoreToPointInTimeInitParameters)

	// The port on which the DB accepts connections
	s3Import?: [...#ClusterS3ImportInitParameters] @go(S3Import,[]ClusterS3ImportInitParameters)

	// Nested attribute with scaling properties. Only valid when engine_mode is set to serverless. More details below.
	scalingConfiguration?: [...#ScalingConfigurationInitParameters] @go(ScalingConfiguration,[]ScalingConfigurationInitParameters)

	// Nested attribute with scaling properties for ServerlessV2. Only valid when engine_mode is set to provisioned. More details below.
	serverlessv2ScalingConfiguration?: [...#Serverlessv2ScalingConfigurationInitParameters] @go(Serverlessv2ScalingConfiguration,[]Serverlessv2ScalingConfigurationInitParameters)

	// Determines whether a final DB snapshot is created before the DB cluster is deleted. If true is specified, no DB snapshot is created. If false is specified, a DB snapshot is created before the DB cluster is deleted, using the value from final_snapshot_identifier. Default is false.
	skipFinalSnapshot?: null | bool @go(SkipFinalSnapshot,*bool)

	// Specifies whether or not to create this cluster from a snapshot. You can use either the name or ARN when specifying a DB cluster snapshot, or the ARN when specifying a DB snapshot. Conflicts with global_cluster_identifier. Clusters cannot be restored from snapshot and joined to an existing global cluster in a single operation. See the AWS documentation or the Global Cluster Restored From Snapshot example for instructions on building a global cluster starting with a snapshot.
	snapshotIdentifier?: null | string @go(SnapshotIdentifier,*string)

	// The source region for an encrypted replica DB cluster.
	sourceRegion?: null | string @go(SourceRegion,*string)

	// Specifies whether the DB cluster is encrypted. The default is false for provisioned engine_mode and true for serverless engine_mode. When restoring an unencrypted snapshot_identifier, the kms_key_id argument must be provided to encrypt the restored cluster.
	storageEncrypted?: null | bool @go(StorageEncrypted,*bool)

	// (Forces new for Multi-AZ DB clusters) Specifies the storage type to be associated with the DB cluster. For Aurora DB clusters, storage_type modifications can be done in-place. For Multi-AZ DB Clusters, the iops argument must also be set. Valid values are: "", aurora-iopt1 (Aurora DB Clusters); io1 (Multi-AZ DB Clusters). Default: "" (Aurora DB Clusters); io1 (Multi-AZ DB Clusters).
	storageType?: null | string @go(StorageType,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#ClusterMasterUserSecretInitParameters: {
}

#ClusterMasterUserSecretObservation: {
	// The Amazon Web Services KMS key identifier that is used to encrypt the secret.
	kmsKeyId?: null | string @go(KMSKeyID,*string)

	// The Amazon Resource Name (ARN) of the secret.
	secretArn?: null | string @go(SecretArn,*string)

	// The status of the secret. Valid Values: creating | active | rotating | impaired.
	secretStatus?: null | string @go(SecretStatus,*string)
}

#ClusterMasterUserSecretParameters: {
}

#ClusterObservation: {
	// The amount of storage in gibibytes (GiB) to allocate to each DB instance in the Multi-AZ DB cluster.
	allocatedStorage?: null | float64 @go(AllocatedStorage,*float64)

	// Enable to allow major engine version upgrades when changing engine versions. Defaults to false.
	allowMajorVersionUpgrade?: null | bool @go(AllowMajorVersionUpgrade,*bool)

	// Specifies whether any cluster modifications are applied immediately, or during the next maintenance window. Default is false. See Amazon RDS Documentation for more information.
	applyImmediately?: null | bool @go(ApplyImmediately,*bool)

	// Amazon Resource Name (ARN) of cluster
	arn?: null | string @go(Arn,*string)

	// List of EC2 Availability Zones for the DB cluster storage where DB cluster instances can be created. We recommend specifying 3 AZs or using the  if necessary. A maximum of 3 AZs can be configured.
	availabilityZones?: [...null | string] @go(AvailabilityZones,[]*string)

	// The target backtrack window, in seconds. Only available for aurora and aurora-mysql engines currently. To disable backtracking, set this value to 0. Defaults to 0. Must be between 0 and 259200 (72 hours)
	backtrackWindow?: null | float64 @go(BacktrackWindow,*float64)

	// The days to retain backups for. Default 1
	backupRetentionPeriod?: null | float64 @go(BackupRetentionPeriod,*float64)

	// – List of RDS Instances that are a part of this cluster
	clusterMembers?: [...null | string] @go(ClusterMembers,[]*string)

	// The RDS Cluster Resource ID
	clusterResourceId?: null | string @go(ClusterResourceID,*string)

	// –  Copy all Cluster tags to snapshots. Default is false.
	copyTagsToSnapshot?: null | bool @go(CopyTagsToSnapshot,*bool)

	// The compute and memory capacity of each DB instance in the Multi-AZ DB cluster, for example db.m6g.xlarge. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes and availability for your engine, see DB instance class in the Amazon RDS User Guide.
	dbClusterInstanceClass?: null | string @go(DBClusterInstanceClass,*string)

	// A cluster parameter group to associate with the cluster.
	dbClusterParameterGroupName?: null | string @go(DBClusterParameterGroupName,*string)

	// Instance parameter group to associate with all instances of the DB cluster. The db_instance_parameter_group_name parameter is only valid in combination with the allow_major_version_upgrade parameter.
	dbInstanceParameterGroupName?: null | string @go(DBInstanceParameterGroupName,*string)

	// A DB subnet group to associate with this DB instance. NOTE: This must match the db_subnet_group_name specified on every aws_rds_cluster_instance in the cluster.
	dbSubnetGroupName?: null | string @go(DBSubnetGroupName,*string)

	// Name for an automatically created database on cluster creation. There are different naming restrictions per database engine: RDS Naming Constraints
	databaseName?: null | string @go(DatabaseName,*string)

	// If the DB instance should have deletion protection enabled. The database can't be deleted when this value is set to true. The default is false.
	deletionProtection?: null | bool @go(DeletionProtection,*bool)

	// Whether cluster should forward writes to an associated global cluster. Applied to secondary clusters to enable them to forward writes to an aws_rds_global_cluster's primary cluster. See the Aurora Userguide documentation for more information.
	enableGlobalWriteForwarding?: null | bool @go(EnableGlobalWriteForwarding,*bool)

	// Enable HTTP endpoint (data API). Only valid when engine_mode is set to serverless.
	enableHttpEndpoint?: null | bool @go(EnableHTTPEndpoint,*bool)

	// Set of log types to export to cloudwatch. If omitted, no logs will be exported. The following log types are supported: audit, error, general, slowquery, postgresql (PostgreSQL).
	enabledCloudwatchLogsExports?: [...null | string] @go(EnabledCloudwatchLogsExports,[]*string)

	// The DNS address of the RDS instance
	endpoint?: null | string @go(Endpoint,*string)

	// The name of the database engine to be used for this DB cluster. Defaults to aurora. Valid Values: aurora, aurora-mysql, aurora-postgresql, mysql, postgres. (Note that mysql and postgres are Multi-AZ RDS clusters).
	engine?: null | string @go(Engine,*string)

	// The database engine mode. Valid values: global (only valid for Aurora MySQL 1.21 and earlier), multimaster, parallelquery, provisioned, serverless. Defaults to: provisioned. See the RDS User Guide for limitations when using serverless.
	engineMode?: null | string @go(EngineMode,*string)

	// The database engine version. Updating this argument results in an outage. See the Aurora MySQL and Aurora Postgres documentation for your configured engine to determine this value, or by running aws rds describe-db-engine-versions. For example with Aurora MySQL 2, a potential value for this argument is 5.7.mysql_aurora.2.03.2. The value can contain a partial version where supported by the API. The actual engine version used is returned in the attribute engine_version_actual, , see Attributes Reference below.
	engineVersion?: null | string @go(EngineVersion,*string)

	// The running version of the database.
	engineVersionActual?: null | string @go(EngineVersionActual,*string)

	// The name of your final DB snapshot when this DB cluster is deleted. If omitted, no final snapshot will be made.
	finalSnapshotIdentifier?: null | string @go(FinalSnapshotIdentifier,*string)

	// The global cluster identifier specified on aws_rds_global_cluster.
	globalClusterIdentifier?: null | string @go(GlobalClusterIdentifier,*string)

	// The Route53 Hosted Zone ID of the endpoint
	hostedZoneId?: null | string @go(HostedZoneID,*string)

	// Specifies whether or not mappings of AWS Identity and Access Management (IAM) accounts to database accounts is enabled. Please see AWS Documentation for availability and limitations.
	iamDatabaseAuthenticationEnabled?: null | bool @go(IAMDatabaseAuthenticationEnabled,*bool)

	// A List of ARNs for the IAM roles to associate to the RDS Cluster.
	iamRoles?: [...null | string] @go(IAMRoles,[]*string)

	// The RDS Cluster Identifier
	id?: null | string @go(ID,*string)

	// The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for each DB instance in the Multi-AZ DB cluster. For information about valid Iops values, see Amazon RDS Provisioned IOPS storage to improve performance in the Amazon RDS User Guide. Must be a multiple between .5 and 50 of the storage amount for the DB cluster.
	iops?: null | float64 @go(Iops,*float64)

	// The ARN for the KMS encryption key. When specifying kms_key_id, storage_encrypted needs to be set to true.
	kmsKeyId?: null | string @go(KMSKeyID,*string)

	// Set to true to allow RDS to manage the master user password in Secrets Manager. Cannot be set if master_password is provided.
	manageMasterUserPassword?: null | bool @go(ManageMasterUserPassword,*bool)

	// A block that specifies the master user secret. Only available when manage_master_user_password is set to true. Documented below.
	masterUserSecret?: [...#ClusterMasterUserSecretObservation] @go(MasterUserSecret,[]ClusterMasterUserSecretObservation)

	// The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN. If not specified, the default KMS key for your Amazon Web Services account is used.
	masterUserSecretKmsKeyId?: null | string @go(MasterUserSecretKMSKeyID,*string)

	// Username for the master DB user. Please refer to the RDS Naming Constraints. This argument does not support in-place updates and cannot be changed during a restore from snapshot.
	masterUsername?: null | string @go(MasterUsername,*string)

	// The network type of the cluster. Valid values: IPV4, DUAL.
	networkType?: null | string @go(NetworkType,*string)

	// The port on which the DB accepts connections
	port?: null | float64 @go(Port,*float64)

	// The daily time range during which automated backups are created if automated backups are enabled using the BackupRetentionPeriod parameter.Time in UTC. Default: A 30-minute window selected at random from an 8-hour block of time per regionE.g., 04:00-09:00
	preferredBackupWindow?: null | string @go(PreferredBackupWindow,*string)

	// The weekly time range during which system maintenance can occur, in (UTC) e.g., wed:04:00-wed:04:30
	preferredMaintenanceWindow?: null | string @go(PreferredMaintenanceWindow,*string)

	// A read-only endpoint for the Aurora cluster, automatically
	// load-balanced across replicas
	readerEndpoint?: null | string @go(ReaderEndpoint,*string)

	// ARN of a source DB cluster or DB instance if this DB cluster is to be created as a Read Replica.
	replicationSourceIdentifier?: null | string @go(ReplicationSourceIdentifier,*string)

	// Nested attribute for point in time restore. More details below.
	restoreToPointInTime?: [...#ClusterRestoreToPointInTimeObservation] @go(RestoreToPointInTime,[]ClusterRestoreToPointInTimeObservation)

	// The port on which the DB accepts connections
	s3Import?: [...#ClusterS3ImportObservation] @go(S3Import,[]ClusterS3ImportObservation)

	// Nested attribute with scaling properties. Only valid when engine_mode is set to serverless. More details below.
	scalingConfiguration?: [...#ScalingConfigurationObservation] @go(ScalingConfiguration,[]ScalingConfigurationObservation)

	// Nested attribute with scaling properties for ServerlessV2. Only valid when engine_mode is set to provisioned. More details below.
	serverlessv2ScalingConfiguration?: [...#Serverlessv2ScalingConfigurationObservation] @go(Serverlessv2ScalingConfiguration,[]Serverlessv2ScalingConfigurationObservation)

	// Determines whether a final DB snapshot is created before the DB cluster is deleted. If true is specified, no DB snapshot is created. If false is specified, a DB snapshot is created before the DB cluster is deleted, using the value from final_snapshot_identifier. Default is false.
	skipFinalSnapshot?: null | bool @go(SkipFinalSnapshot,*bool)

	// Specifies whether or not to create this cluster from a snapshot. You can use either the name or ARN when specifying a DB cluster snapshot, or the ARN when specifying a DB snapshot. Conflicts with global_cluster_identifier. Clusters cannot be restored from snapshot and joined to an existing global cluster in a single operation. See the AWS documentation or the Global Cluster Restored From Snapshot example for instructions on building a global cluster starting with a snapshot.
	snapshotIdentifier?: null | string @go(SnapshotIdentifier,*string)

	// The source region for an encrypted replica DB cluster.
	sourceRegion?: null | string @go(SourceRegion,*string)

	// Specifies whether the DB cluster is encrypted. The default is false for provisioned engine_mode and true for serverless engine_mode. When restoring an unencrypted snapshot_identifier, the kms_key_id argument must be provided to encrypt the restored cluster.
	storageEncrypted?: null | bool @go(StorageEncrypted,*bool)

	// (Forces new for Multi-AZ DB clusters) Specifies the storage type to be associated with the DB cluster. For Aurora DB clusters, storage_type modifications can be done in-place. For Multi-AZ DB Clusters, the iops argument must also be set. Valid values are: "", aurora-iopt1 (Aurora DB Clusters); io1 (Multi-AZ DB Clusters). Default: "" (Aurora DB Clusters); io1 (Multi-AZ DB Clusters).
	storageType?: null | string @go(StorageType,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// List of VPC security groups to associate with the Cluster
	vpcSecurityGroupIds?: [...null | string] @go(VPCSecurityGroupIds,[]*string)
}

#ClusterParameters: {
	// The amount of storage in gibibytes (GiB) to allocate to each DB instance in the Multi-AZ DB cluster.
	// +kubebuilder:validation:Optional
	allocatedStorage?: null | float64 @go(AllocatedStorage,*float64)

	// Enable to allow major engine version upgrades when changing engine versions. Defaults to false.
	// +kubebuilder:validation:Optional
	allowMajorVersionUpgrade?: null | bool @go(AllowMajorVersionUpgrade,*bool)

	// Specifies whether any cluster modifications are applied immediately, or during the next maintenance window. Default is false. See Amazon RDS Documentation for more information.
	// +kubebuilder:validation:Optional
	applyImmediately?: null | bool @go(ApplyImmediately,*bool)

	// List of EC2 Availability Zones for the DB cluster storage where DB cluster instances can be created. We recommend specifying 3 AZs or using the  if necessary. A maximum of 3 AZs can be configured.
	// +kubebuilder:validation:Optional
	availabilityZones?: [...null | string] @go(AvailabilityZones,[]*string)

	// The target backtrack window, in seconds. Only available for aurora and aurora-mysql engines currently. To disable backtracking, set this value to 0. Defaults to 0. Must be between 0 and 259200 (72 hours)
	// +kubebuilder:validation:Optional
	backtrackWindow?: null | float64 @go(BacktrackWindow,*float64)

	// The days to retain backups for. Default 1
	// +kubebuilder:validation:Optional
	backupRetentionPeriod?: null | float64 @go(BackupRetentionPeriod,*float64)

	// – List of RDS Instances that are a part of this cluster
	// +kubebuilder:validation:Optional
	clusterMembers?: [...null | string] @go(ClusterMembers,[]*string)

	// –  Copy all Cluster tags to snapshots. Default is false.
	// +kubebuilder:validation:Optional
	copyTagsToSnapshot?: null | bool @go(CopyTagsToSnapshot,*bool)

	// The compute and memory capacity of each DB instance in the Multi-AZ DB cluster, for example db.m6g.xlarge. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes and availability for your engine, see DB instance class in the Amazon RDS User Guide.
	// +kubebuilder:validation:Optional
	dbClusterInstanceClass?: null | string @go(DBClusterInstanceClass,*string)

	// A cluster parameter group to associate with the cluster.
	// +kubebuilder:validation:Optional
	dbClusterParameterGroupName?: null | string @go(DBClusterParameterGroupName,*string)

	// Instance parameter group to associate with all instances of the DB cluster. The db_instance_parameter_group_name parameter is only valid in combination with the allow_major_version_upgrade parameter.
	// +kubebuilder:validation:Optional
	dbInstanceParameterGroupName?: null | string @go(DBInstanceParameterGroupName,*string)

	// A DB subnet group to associate with this DB instance. NOTE: This must match the db_subnet_group_name specified on every aws_rds_cluster_instance in the cluster.
	// +crossplane:generate:reference:type=SubnetGroup
	// +kubebuilder:validation:Optional
	dbSubnetGroupName?: null | string @go(DBSubnetGroupName,*string)

	// Reference to a SubnetGroup to populate dbSubnetGroupName.
	// +kubebuilder:validation:Optional
	dbSubnetGroupNameRef?: null | v1.#Reference @go(DBSubnetGroupNameRef,*v1.Reference)

	// Selector for a SubnetGroup to populate dbSubnetGroupName.
	// +kubebuilder:validation:Optional
	dbSubnetGroupNameSelector?: null | v1.#Selector @go(DBSubnetGroupNameSelector,*v1.Selector)

	// Name for an automatically created database on cluster creation. There are different naming restrictions per database engine: RDS Naming Constraints
	// +kubebuilder:validation:Optional
	databaseName?: null | string @go(DatabaseName,*string)

	// If the DB instance should have deletion protection enabled. The database can't be deleted when this value is set to true. The default is false.
	// +kubebuilder:validation:Optional
	deletionProtection?: null | bool @go(DeletionProtection,*bool)

	// Whether cluster should forward writes to an associated global cluster. Applied to secondary clusters to enable them to forward writes to an aws_rds_global_cluster's primary cluster. See the Aurora Userguide documentation for more information.
	// +kubebuilder:validation:Optional
	enableGlobalWriteForwarding?: null | bool @go(EnableGlobalWriteForwarding,*bool)

	// Enable HTTP endpoint (data API). Only valid when engine_mode is set to serverless.
	// +kubebuilder:validation:Optional
	enableHttpEndpoint?: null | bool @go(EnableHTTPEndpoint,*bool)

	// Set of log types to export to cloudwatch. If omitted, no logs will be exported. The following log types are supported: audit, error, general, slowquery, postgresql (PostgreSQL).
	// +kubebuilder:validation:Optional
	enabledCloudwatchLogsExports?: [...null | string] @go(EnabledCloudwatchLogsExports,[]*string)

	// The name of the database engine to be used for this DB cluster. Defaults to aurora. Valid Values: aurora, aurora-mysql, aurora-postgresql, mysql, postgres. (Note that mysql and postgres are Multi-AZ RDS clusters).
	// +kubebuilder:validation:Optional
	engine?: null | string @go(Engine,*string)

	// The database engine mode. Valid values: global (only valid for Aurora MySQL 1.21 and earlier), multimaster, parallelquery, provisioned, serverless. Defaults to: provisioned. See the RDS User Guide for limitations when using serverless.
	// +kubebuilder:validation:Optional
	engineMode?: null | string @go(EngineMode,*string)

	// The database engine version. Updating this argument results in an outage. See the Aurora MySQL and Aurora Postgres documentation for your configured engine to determine this value, or by running aws rds describe-db-engine-versions. For example with Aurora MySQL 2, a potential value for this argument is 5.7.mysql_aurora.2.03.2. The value can contain a partial version where supported by the API. The actual engine version used is returned in the attribute engine_version_actual, , see Attributes Reference below.
	// +kubebuilder:validation:Optional
	engineVersion?: null | string @go(EngineVersion,*string)

	// The name of your final DB snapshot when this DB cluster is deleted. If omitted, no final snapshot will be made.
	// +kubebuilder:validation:Optional
	finalSnapshotIdentifier?: null | string @go(FinalSnapshotIdentifier,*string)

	// The global cluster identifier specified on aws_rds_global_cluster.
	// +kubebuilder:validation:Optional
	globalClusterIdentifier?: null | string @go(GlobalClusterIdentifier,*string)

	// Specifies whether or not mappings of AWS Identity and Access Management (IAM) accounts to database accounts is enabled. Please see AWS Documentation for availability and limitations.
	// +kubebuilder:validation:Optional
	iamDatabaseAuthenticationEnabled?: null | bool @go(IAMDatabaseAuthenticationEnabled,*bool)

	// The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for each DB instance in the Multi-AZ DB cluster. For information about valid Iops values, see Amazon RDS Provisioned IOPS storage to improve performance in the Amazon RDS User Guide. Must be a multiple between .5 and 50 of the storage amount for the DB cluster.
	// +kubebuilder:validation:Optional
	iops?: null | float64 @go(Iops,*float64)

	// The ARN for the KMS encryption key. When specifying kms_key_id, storage_encrypted needs to be set to true.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/kms/v1beta1.Key
	// +kubebuilder:validation:Optional
	kmsKeyId?: null | string @go(KMSKeyID,*string)

	// Reference to a Key in kms to populate kmsKeyId.
	// +kubebuilder:validation:Optional
	kmsKeyIdRef?: null | v1.#Reference @go(KMSKeyIDRef,*v1.Reference)

	// Selector for a Key in kms to populate kmsKeyId.
	// +kubebuilder:validation:Optional
	kmsKeyIdSelector?: null | v1.#Selector @go(KMSKeyIDSelector,*v1.Selector)

	// Set to true to allow RDS to manage the master user password in Secrets Manager. Cannot be set if master_password is provided.
	// +kubebuilder:validation:Optional
	manageMasterUserPassword?: null | bool @go(ManageMasterUserPassword,*bool)

	// Password for the master DB user. Note that this may show up in logs, and it will be stored in the state file. Please refer to the RDS Naming Constraints. Cannot be set if manage_master_user_password is set to true.
	// +kubebuilder:validation:Optional
	masterPasswordSecretRef?: null | v1.#SecretKeySelector @go(MasterPasswordSecretRef,*v1.SecretKeySelector)

	// The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN. If not specified, the default KMS key for your Amazon Web Services account is used.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/kms/v1beta1.Key
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("key_id",true)
	// +kubebuilder:validation:Optional
	masterUserSecretKmsKeyId?: null | string @go(MasterUserSecretKMSKeyID,*string)

	// Reference to a Key in kms to populate masterUserSecretKmsKeyId.
	// +kubebuilder:validation:Optional
	masterUserSecretKmsKeyIdRef?: null | v1.#Reference @go(MasterUserSecretKMSKeyIDRef,*v1.Reference)

	// Selector for a Key in kms to populate masterUserSecretKmsKeyId.
	// +kubebuilder:validation:Optional
	masterUserSecretKmsKeyIdSelector?: null | v1.#Selector @go(MasterUserSecretKMSKeyIDSelector,*v1.Selector)

	// Username for the master DB user. Please refer to the RDS Naming Constraints. This argument does not support in-place updates and cannot be changed during a restore from snapshot.
	// +kubebuilder:validation:Optional
	masterUsername?: null | string @go(MasterUsername,*string)

	// The network type of the cluster. Valid values: IPV4, DUAL.
	// +kubebuilder:validation:Optional
	networkType?: null | string @go(NetworkType,*string)

	// The port on which the DB accepts connections
	// +kubebuilder:validation:Optional
	port?: null | float64 @go(Port,*float64)

	// The daily time range during which automated backups are created if automated backups are enabled using the BackupRetentionPeriod parameter.Time in UTC. Default: A 30-minute window selected at random from an 8-hour block of time per regionE.g., 04:00-09:00
	// +kubebuilder:validation:Optional
	preferredBackupWindow?: null | string @go(PreferredBackupWindow,*string)

	// The weekly time range during which system maintenance can occur, in (UTC) e.g., wed:04:00-wed:04:30
	// +kubebuilder:validation:Optional
	preferredMaintenanceWindow?: null | string @go(PreferredMaintenanceWindow,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// ARN of a source DB cluster or DB instance if this DB cluster is to be created as a Read Replica.
	// +kubebuilder:validation:Optional
	replicationSourceIdentifier?: null | string @go(ReplicationSourceIdentifier,*string)

	// Nested attribute for point in time restore. More details below.
	// +kubebuilder:validation:Optional
	restoreToPointInTime?: [...#ClusterRestoreToPointInTimeParameters] @go(RestoreToPointInTime,[]ClusterRestoreToPointInTimeParameters)

	// The port on which the DB accepts connections
	// +kubebuilder:validation:Optional
	s3Import?: [...#ClusterS3ImportParameters] @go(S3Import,[]ClusterS3ImportParameters)

	// Nested attribute with scaling properties. Only valid when engine_mode is set to serverless. More details below.
	// +kubebuilder:validation:Optional
	scalingConfiguration?: [...#ScalingConfigurationParameters] @go(ScalingConfiguration,[]ScalingConfigurationParameters)

	// Nested attribute with scaling properties for ServerlessV2. Only valid when engine_mode is set to provisioned. More details below.
	// +kubebuilder:validation:Optional
	serverlessv2ScalingConfiguration?: [...#Serverlessv2ScalingConfigurationParameters] @go(Serverlessv2ScalingConfiguration,[]Serverlessv2ScalingConfigurationParameters)

	// Determines whether a final DB snapshot is created before the DB cluster is deleted. If true is specified, no DB snapshot is created. If false is specified, a DB snapshot is created before the DB cluster is deleted, using the value from final_snapshot_identifier. Default is false.
	// +kubebuilder:validation:Optional
	skipFinalSnapshot?: null | bool @go(SkipFinalSnapshot,*bool)

	// Specifies whether or not to create this cluster from a snapshot. You can use either the name or ARN when specifying a DB cluster snapshot, or the ARN when specifying a DB snapshot. Conflicts with global_cluster_identifier. Clusters cannot be restored from snapshot and joined to an existing global cluster in a single operation. See the AWS documentation or the Global Cluster Restored From Snapshot example for instructions on building a global cluster starting with a snapshot.
	// +kubebuilder:validation:Optional
	snapshotIdentifier?: null | string @go(SnapshotIdentifier,*string)

	// The source region for an encrypted replica DB cluster.
	// +kubebuilder:validation:Optional
	sourceRegion?: null | string @go(SourceRegion,*string)

	// Specifies whether the DB cluster is encrypted. The default is false for provisioned engine_mode and true for serverless engine_mode. When restoring an unencrypted snapshot_identifier, the kms_key_id argument must be provided to encrypt the restored cluster.
	// +kubebuilder:validation:Optional
	storageEncrypted?: null | bool @go(StorageEncrypted,*bool)

	// (Forces new for Multi-AZ DB clusters) Specifies the storage type to be associated with the DB cluster. For Aurora DB clusters, storage_type modifications can be done in-place. For Multi-AZ DB Clusters, the iops argument must also be set. Valid values are: "", aurora-iopt1 (Aurora DB Clusters); io1 (Multi-AZ DB Clusters). Default: "" (Aurora DB Clusters); io1 (Multi-AZ DB Clusters).
	// +kubebuilder:validation:Optional
	storageType?: null | string @go(StorageType,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// References to SecurityGroup in ec2 to populate vpcSecurityGroupIds.
	// +kubebuilder:validation:Optional
	vpcSecurityGroupIdRefs?: [...v1.#Reference] @go(VPCSecurityGroupIDRefs,[]v1.Reference)

	// Selector for a list of SecurityGroup in ec2 to populate vpcSecurityGroupIds.
	// +kubebuilder:validation:Optional
	vpcSecurityGroupIdSelector?: null | v1.#Selector @go(VPCSecurityGroupIDSelector,*v1.Selector)

	// List of VPC security groups to associate with the Cluster
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.SecurityGroup
	// +crossplane:generate:reference:refFieldName=VPCSecurityGroupIDRefs
	// +crossplane:generate:reference:selectorFieldName=VPCSecurityGroupIDSelector
	// +kubebuilder:validation:Optional
	vpcSecurityGroupIds?: [...null | string] @go(VPCSecurityGroupIds,[]*string)
}

#ClusterRestoreToPointInTimeInitParameters: {
	// Date and time in UTC format to restore the database cluster to. Conflicts with use_latest_restorable_time.
	restoreToTime?: null | string @go(RestoreToTime,*string)

	// Type of restore to be performed.
	// Valid options are full-copy (default) and copy-on-write.
	restoreType?: null | string @go(RestoreType,*string)

	// Set to true to restore the database cluster to the latest restorable backup time. Defaults to false. Conflicts with restore_to_time.
	useLatestRestorableTime?: null | bool @go(UseLatestRestorableTime,*bool)
}

#ClusterRestoreToPointInTimeObservation: {
	// Date and time in UTC format to restore the database cluster to. Conflicts with use_latest_restorable_time.
	restoreToTime?: null | string @go(RestoreToTime,*string)

	// Type of restore to be performed.
	// Valid options are full-copy (default) and copy-on-write.
	restoreType?: null | string @go(RestoreType,*string)

	// The identifier of the source database cluster from which to restore.
	sourceClusterIdentifier?: null | string @go(SourceClusterIdentifier,*string)

	// Set to true to restore the database cluster to the latest restorable backup time. Defaults to false. Conflicts with restore_to_time.
	useLatestRestorableTime?: null | bool @go(UseLatestRestorableTime,*bool)
}

#ClusterRestoreToPointInTimeParameters: {
	// Date and time in UTC format to restore the database cluster to. Conflicts with use_latest_restorable_time.
	// +kubebuilder:validation:Optional
	restoreToTime?: null | string @go(RestoreToTime,*string)

	// Type of restore to be performed.
	// Valid options are full-copy (default) and copy-on-write.
	// +kubebuilder:validation:Optional
	restoreType?: null | string @go(RestoreType,*string)

	// The identifier of the source database cluster from which to restore.
	// +crossplane:generate:reference:type=Cluster
	// +kubebuilder:validation:Optional
	sourceClusterIdentifier?: null | string @go(SourceClusterIdentifier,*string)

	// Reference to a Cluster to populate sourceClusterIdentifier.
	// +kubebuilder:validation:Optional
	sourceClusterIdentifierRef?: null | v1.#Reference @go(SourceClusterIdentifierRef,*v1.Reference)

	// Selector for a Cluster to populate sourceClusterIdentifier.
	// +kubebuilder:validation:Optional
	sourceClusterIdentifierSelector?: null | v1.#Selector @go(SourceClusterIdentifierSelector,*v1.Selector)

	// Set to true to restore the database cluster to the latest restorable backup time. Defaults to false. Conflicts with restore_to_time.
	// +kubebuilder:validation:Optional
	useLatestRestorableTime?: null | bool @go(UseLatestRestorableTime,*bool)
}

#ClusterS3ImportInitParameters: {
	// Can be blank, but is the path to your backup
	bucketPrefix?: null | string @go(BucketPrefix,*string)

	// Role applied to load the data.
	ingestionRole?: null | string @go(IngestionRole,*string)

	// Source engine for the backup
	sourceEngine?: null | string @go(SourceEngine,*string)

	// Version of the source engine used to make the backup
	sourceEngineVersion?: null | string @go(SourceEngineVersion,*string)
}

#ClusterS3ImportObservation: {
	// The bucket name where your backup is stored
	bucketName?: null | string @go(BucketName,*string)

	// Can be blank, but is the path to your backup
	bucketPrefix?: null | string @go(BucketPrefix,*string)

	// Role applied to load the data.
	ingestionRole?: null | string @go(IngestionRole,*string)

	// Source engine for the backup
	sourceEngine?: null | string @go(SourceEngine,*string)

	// Version of the source engine used to make the backup
	sourceEngineVersion?: null | string @go(SourceEngineVersion,*string)
}

#ClusterS3ImportParameters: {
	// The bucket name where your backup is stored
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/s3/v1beta1.Bucket
	// +kubebuilder:validation:Optional
	bucketName?: null | string @go(BucketName,*string)

	// Reference to a Bucket in s3 to populate bucketName.
	// +kubebuilder:validation:Optional
	bucketNameRef?: null | v1.#Reference @go(BucketNameRef,*v1.Reference)

	// Selector for a Bucket in s3 to populate bucketName.
	// +kubebuilder:validation:Optional
	bucketNameSelector?: null | v1.#Selector @go(BucketNameSelector,*v1.Selector)

	// Can be blank, but is the path to your backup
	// +kubebuilder:validation:Optional
	bucketPrefix?: null | string @go(BucketPrefix,*string)

	// Role applied to load the data.
	// +kubebuilder:validation:Optional
	ingestionRole?: null | string @go(IngestionRole,*string)

	// Source engine for the backup
	// +kubebuilder:validation:Optional
	sourceEngine?: null | string @go(SourceEngine,*string)

	// Version of the source engine used to make the backup
	// +kubebuilder:validation:Optional
	sourceEngineVersion?: null | string @go(SourceEngineVersion,*string)
}

#ScalingConfigurationInitParameters: {
	// Whether to enable automatic pause. A DB cluster can be paused only when it's idle (it has no connections). If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. Defaults to true.
	autoPause?: null | bool @go(AutoPause,*bool)

	// The maximum capacity for an Aurora DB cluster in serverless DB engine mode. The maximum capacity must be greater than or equal to the minimum capacity. Valid Aurora MySQL capacity values are 1, 2, 4, 8, 16, 32, 64, 128, 256. Valid Aurora PostgreSQL capacity values are (2, 4, 8, 16, 32, 64, 192, and 384). Defaults to 16.
	maxCapacity?: null | float64 @go(MaxCapacity,*float64)

	// The minimum capacity for an Aurora DB cluster in serverless DB engine mode. The minimum capacity must be lesser than or equal to the maximum capacity. Valid Aurora MySQL capacity values are 1, 2, 4, 8, 16, 32, 64, 128, 256. Valid Aurora PostgreSQL capacity values are (2, 4, 8, 16, 32, 64, 192, and 384). Defaults to 1.
	minCapacity?: null | float64 @go(MinCapacity,*float64)

	// The time, in seconds, before an Aurora DB cluster in serverless mode is paused. Valid values are 300 through 86400. Defaults to 300.
	secondsUntilAutoPause?: null | float64 @go(SecondsUntilAutoPause,*float64)

	// The action to take when the timeout is reached. Valid values: ForceApplyCapacityChange, RollbackCapacityChange. Defaults to RollbackCapacityChange. See documentation.
	timeoutAction?: null | string @go(TimeoutAction,*string)
}

#ScalingConfigurationObservation: {
	// Whether to enable automatic pause. A DB cluster can be paused only when it's idle (it has no connections). If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. Defaults to true.
	autoPause?: null | bool @go(AutoPause,*bool)

	// The maximum capacity for an Aurora DB cluster in serverless DB engine mode. The maximum capacity must be greater than or equal to the minimum capacity. Valid Aurora MySQL capacity values are 1, 2, 4, 8, 16, 32, 64, 128, 256. Valid Aurora PostgreSQL capacity values are (2, 4, 8, 16, 32, 64, 192, and 384). Defaults to 16.
	maxCapacity?: null | float64 @go(MaxCapacity,*float64)

	// The minimum capacity for an Aurora DB cluster in serverless DB engine mode. The minimum capacity must be lesser than or equal to the maximum capacity. Valid Aurora MySQL capacity values are 1, 2, 4, 8, 16, 32, 64, 128, 256. Valid Aurora PostgreSQL capacity values are (2, 4, 8, 16, 32, 64, 192, and 384). Defaults to 1.
	minCapacity?: null | float64 @go(MinCapacity,*float64)

	// The time, in seconds, before an Aurora DB cluster in serverless mode is paused. Valid values are 300 through 86400. Defaults to 300.
	secondsUntilAutoPause?: null | float64 @go(SecondsUntilAutoPause,*float64)

	// The action to take when the timeout is reached. Valid values: ForceApplyCapacityChange, RollbackCapacityChange. Defaults to RollbackCapacityChange. See documentation.
	timeoutAction?: null | string @go(TimeoutAction,*string)
}

#ScalingConfigurationParameters: {
	// Whether to enable automatic pause. A DB cluster can be paused only when it's idle (it has no connections). If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. Defaults to true.
	// +kubebuilder:validation:Optional
	autoPause?: null | bool @go(AutoPause,*bool)

	// The maximum capacity for an Aurora DB cluster in serverless DB engine mode. The maximum capacity must be greater than or equal to the minimum capacity. Valid Aurora MySQL capacity values are 1, 2, 4, 8, 16, 32, 64, 128, 256. Valid Aurora PostgreSQL capacity values are (2, 4, 8, 16, 32, 64, 192, and 384). Defaults to 16.
	// +kubebuilder:validation:Optional
	maxCapacity?: null | float64 @go(MaxCapacity,*float64)

	// The minimum capacity for an Aurora DB cluster in serverless DB engine mode. The minimum capacity must be lesser than or equal to the maximum capacity. Valid Aurora MySQL capacity values are 1, 2, 4, 8, 16, 32, 64, 128, 256. Valid Aurora PostgreSQL capacity values are (2, 4, 8, 16, 32, 64, 192, and 384). Defaults to 1.
	// +kubebuilder:validation:Optional
	minCapacity?: null | float64 @go(MinCapacity,*float64)

	// The time, in seconds, before an Aurora DB cluster in serverless mode is paused. Valid values are 300 through 86400. Defaults to 300.
	// +kubebuilder:validation:Optional
	secondsUntilAutoPause?: null | float64 @go(SecondsUntilAutoPause,*float64)

	// The action to take when the timeout is reached. Valid values: ForceApplyCapacityChange, RollbackCapacityChange. Defaults to RollbackCapacityChange. See documentation.
	// +kubebuilder:validation:Optional
	timeoutAction?: null | string @go(TimeoutAction,*string)
}

#Serverlessv2ScalingConfigurationInitParameters: {
	// The maximum capacity for an Aurora DB cluster in serverless DB engine mode. The maximum capacity must be greater than or equal to the minimum capacity. Valid Aurora MySQL capacity values are 1, 2, 4, 8, 16, 32, 64, 128, 256. Valid Aurora PostgreSQL capacity values are (2, 4, 8, 16, 32, 64, 192, and 384). Defaults to 16.
	maxCapacity?: null | float64 @go(MaxCapacity,*float64)

	// The minimum capacity for an Aurora DB cluster in serverless DB engine mode. The minimum capacity must be lesser than or equal to the maximum capacity. Valid Aurora MySQL capacity values are 1, 2, 4, 8, 16, 32, 64, 128, 256. Valid Aurora PostgreSQL capacity values are (2, 4, 8, 16, 32, 64, 192, and 384). Defaults to 1.
	minCapacity?: null | float64 @go(MinCapacity,*float64)
}

#Serverlessv2ScalingConfigurationObservation: {
	// The maximum capacity for an Aurora DB cluster in serverless DB engine mode. The maximum capacity must be greater than or equal to the minimum capacity. Valid Aurora MySQL capacity values are 1, 2, 4, 8, 16, 32, 64, 128, 256. Valid Aurora PostgreSQL capacity values are (2, 4, 8, 16, 32, 64, 192, and 384). Defaults to 16.
	maxCapacity?: null | float64 @go(MaxCapacity,*float64)

	// The minimum capacity for an Aurora DB cluster in serverless DB engine mode. The minimum capacity must be lesser than or equal to the maximum capacity. Valid Aurora MySQL capacity values are 1, 2, 4, 8, 16, 32, 64, 128, 256. Valid Aurora PostgreSQL capacity values are (2, 4, 8, 16, 32, 64, 192, and 384). Defaults to 1.
	minCapacity?: null | float64 @go(MinCapacity,*float64)
}

#Serverlessv2ScalingConfigurationParameters: {
	// The maximum capacity for an Aurora DB cluster in serverless DB engine mode. The maximum capacity must be greater than or equal to the minimum capacity. Valid Aurora MySQL capacity values are 1, 2, 4, 8, 16, 32, 64, 128, 256. Valid Aurora PostgreSQL capacity values are (2, 4, 8, 16, 32, 64, 192, and 384). Defaults to 16.
	// +kubebuilder:validation:Optional
	maxCapacity?: null | float64 @go(MaxCapacity,*float64)

	// The minimum capacity for an Aurora DB cluster in serverless DB engine mode. The minimum capacity must be lesser than or equal to the maximum capacity. Valid Aurora MySQL capacity values are 1, 2, 4, 8, 16, 32, 64, 128, 256. Valid Aurora PostgreSQL capacity values are (2, 4, 8, 16, 32, 64, 192, and 384). Defaults to 1.
	// +kubebuilder:validation:Optional
	minCapacity?: null | float64 @go(MinCapacity,*float64)
}

// ClusterSpec defines the desired state of Cluster
#ClusterSpec: {
	v1.#ResourceSpec
	forProvider: #ClusterParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ClusterInitParameters @go(InitProvider)
}

// ClusterStatus defines the observed state of Cluster.
#ClusterStatus: {
	v1.#ResourceStatus
	atProvider?: #ClusterObservation @go(AtProvider)
}

// Cluster is the Schema for the Clusters API. Manages an RDS Aurora Cluster
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Cluster: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec:      #ClusterSpec       @go(Spec)
	status?:   #ClusterStatus     @go(Status)
}

// ClusterList contains a list of Clusters
#ClusterList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Cluster] @go(Items,[]Cluster)
}
