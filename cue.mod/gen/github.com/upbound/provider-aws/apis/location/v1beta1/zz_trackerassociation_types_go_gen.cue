// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/location/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#TrackerAssociationInitParameters: {
}

#TrackerAssociationObservation: {
	// The Amazon Resource Name (ARN) for the geofence collection to be associated to tracker resource. Used when you need to specify a resource across all AWS.
	consumerArn?: null | string @go(ConsumerArn,*string)
	id?:          null | string @go(ID,*string)

	// The name of the tracker resource to be associated with a geofence collection.
	trackerName?: null | string @go(TrackerName,*string)
}

#TrackerAssociationParameters: {
	// The Amazon Resource Name (ARN) for the geofence collection to be associated to tracker resource. Used when you need to specify a resource across all AWS.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/location/v1beta1.GeofenceCollection
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("collection_arn",true)
	// +kubebuilder:validation:Optional
	consumerArn?: null | string @go(ConsumerArn,*string)

	// Reference to a GeofenceCollection in location to populate consumerArn.
	// +kubebuilder:validation:Optional
	consumerArnRef?: null | v1.#Reference @go(ConsumerArnRef,*v1.Reference)

	// Selector for a GeofenceCollection in location to populate consumerArn.
	// +kubebuilder:validation:Optional
	consumerArnSelector?: null | v1.#Selector @go(ConsumerArnSelector,*v1.Selector)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The name of the tracker resource to be associated with a geofence collection.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/location/v1beta1.Tracker
	// +kubebuilder:validation:Optional
	trackerName?: null | string @go(TrackerName,*string)

	// Reference to a Tracker in location to populate trackerName.
	// +kubebuilder:validation:Optional
	trackerNameRef?: null | v1.#Reference @go(TrackerNameRef,*v1.Reference)

	// Selector for a Tracker in location to populate trackerName.
	// +kubebuilder:validation:Optional
	trackerNameSelector?: null | v1.#Selector @go(TrackerNameSelector,*v1.Selector)
}

// TrackerAssociationSpec defines the desired state of TrackerAssociation
#TrackerAssociationSpec: {
	v1.#ResourceSpec
	forProvider: #TrackerAssociationParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #TrackerAssociationInitParameters @go(InitProvider)
}

// TrackerAssociationStatus defines the observed state of TrackerAssociation.
#TrackerAssociationStatus: {
	v1.#ResourceStatus
	atProvider?: #TrackerAssociationObservation @go(AtProvider)
}

// TrackerAssociation is the Schema for the TrackerAssociations API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#TrackerAssociation: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta        @go(ObjectMeta)
	spec:      #TrackerAssociationSpec   @go(Spec)
	status?:   #TrackerAssociationStatus @go(Status)
}

// TrackerAssociationList contains a list of TrackerAssociations
#TrackerAssociationList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#TrackerAssociation] @go(Items,[]TrackerAssociation)
}
