// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/location/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#GeofenceCollectionInitParameters: {
	// The optional description for the geofence collection.
	description?: null | string @go(Description,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#GeofenceCollectionObservation: {
	// The Amazon Resource Name (ARN) for the geofence collection resource. Used when you need to specify a resource across all AWS.
	collectionArn?: null | string @go(CollectionArn,*string)

	// The timestamp for when the geofence collection resource was created in ISO 8601 format.
	createTime?: null | string @go(CreateTime,*string)

	// The optional description for the geofence collection.
	description?: null | string @go(Description,*string)
	id?:          null | string @go(ID,*string)

	// A key identifier for an AWS KMS customer managed key assigned to the Amazon Location resource.
	kmsKeyId?: null | string @go(KMSKeyID,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// The timestamp for when the geofence collection resource was last updated in ISO 8601 format.
	updateTime?: null | string @go(UpdateTime,*string)
}

#GeofenceCollectionParameters: {
	// The optional description for the geofence collection.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// A key identifier for an AWS KMS customer managed key assigned to the Amazon Location resource.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/kms/v1beta1.Key
	// +kubebuilder:validation:Optional
	kmsKeyId?: null | string @go(KMSKeyID,*string)

	// Reference to a Key in kms to populate kmsKeyId.
	// +kubebuilder:validation:Optional
	kmsKeyIdRef?: null | v1.#Reference @go(KMSKeyIDRef,*v1.Reference)

	// Selector for a Key in kms to populate kmsKeyId.
	// +kubebuilder:validation:Optional
	kmsKeyIdSelector?: null | v1.#Selector @go(KMSKeyIDSelector,*v1.Selector)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// GeofenceCollectionSpec defines the desired state of GeofenceCollection
#GeofenceCollectionSpec: {
	v1.#ResourceSpec
	forProvider: #GeofenceCollectionParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #GeofenceCollectionInitParameters @go(InitProvider)
}

// GeofenceCollectionStatus defines the observed state of GeofenceCollection.
#GeofenceCollectionStatus: {
	v1.#ResourceStatus
	atProvider?: #GeofenceCollectionObservation @go(AtProvider)
}

// GeofenceCollection is the Schema for the GeofenceCollections API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#GeofenceCollection: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta        @go(ObjectMeta)
	spec:      #GeofenceCollectionSpec   @go(Spec)
	status?:   #GeofenceCollectionStatus @go(Status)
}

// GeofenceCollectionList contains a list of GeofenceCollections
#GeofenceCollectionList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#GeofenceCollection] @go(Items,[]GeofenceCollection)
}
