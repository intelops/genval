// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/iot/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#CloudwatchAlarmInitParameters: {
	// The CloudWatch alarm name.
	alarmName?: null | string @go(AlarmName,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)

	// The reason for the alarm change.
	stateReason?: null | string @go(StateReason,*string)

	// The value of the alarm state. Acceptable values are: OK, ALARM, INSUFFICIENT_DATA.
	stateValue?: null | string @go(StateValue,*string)
}

#CloudwatchAlarmObservation: {
	// The CloudWatch alarm name.
	alarmName?: null | string @go(AlarmName,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)

	// The reason for the alarm change.
	stateReason?: null | string @go(StateReason,*string)

	// The value of the alarm state. Acceptable values are: OK, ALARM, INSUFFICIENT_DATA.
	stateValue?: null | string @go(StateValue,*string)
}

#CloudwatchAlarmParameters: {
	// The CloudWatch alarm name.
	// +kubebuilder:validation:Optional
	alarmName?: null | string @go(AlarmName,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Optional
	roleArn?: null | string @go(RoleArn,*string)

	// The reason for the alarm change.
	// +kubebuilder:validation:Optional
	stateReason?: null | string @go(StateReason,*string)

	// The value of the alarm state. Acceptable values are: OK, ALARM, INSUFFICIENT_DATA.
	// +kubebuilder:validation:Optional
	stateValue?: null | string @go(StateValue,*string)
}

#CloudwatchLogsInitParameters: {
	// The CloudWatch log group name.
	logGroupName?: null | string @go(LogGroupName,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)
}

#CloudwatchLogsObservation: {
	// The CloudWatch log group name.
	logGroupName?: null | string @go(LogGroupName,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)
}

#CloudwatchLogsParameters: {
	// The CloudWatch log group name.
	// +kubebuilder:validation:Optional
	logGroupName?: null | string @go(LogGroupName,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Optional
	roleArn?: null | string @go(RoleArn,*string)
}

#CloudwatchMetricInitParameters: {
	// The CloudWatch metric name.
	metricName?: null | string @go(MetricName,*string)

	// The CloudWatch metric namespace name.
	metricNamespace?: null | string @go(MetricNamespace,*string)

	// An optional Unix timestamp (http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#about_timestamp).
	metricTimestamp?: null | string @go(MetricTimestamp,*string)

	// The metric unit (supported units can be found here: http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#Unit)
	metricUnit?: null | string @go(MetricUnit,*string)

	// The CloudWatch metric value.
	metricValue?: null | string @go(MetricValue,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)
}

#CloudwatchMetricObservation: {
	// The CloudWatch metric name.
	metricName?: null | string @go(MetricName,*string)

	// The CloudWatch metric namespace name.
	metricNamespace?: null | string @go(MetricNamespace,*string)

	// An optional Unix timestamp (http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#about_timestamp).
	metricTimestamp?: null | string @go(MetricTimestamp,*string)

	// The metric unit (supported units can be found here: http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#Unit)
	metricUnit?: null | string @go(MetricUnit,*string)

	// The CloudWatch metric value.
	metricValue?: null | string @go(MetricValue,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)
}

#CloudwatchMetricParameters: {
	// The CloudWatch metric name.
	// +kubebuilder:validation:Optional
	metricName?: null | string @go(MetricName,*string)

	// The CloudWatch metric namespace name.
	// +kubebuilder:validation:Optional
	metricNamespace?: null | string @go(MetricNamespace,*string)

	// An optional Unix timestamp (http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#about_timestamp).
	// +kubebuilder:validation:Optional
	metricTimestamp?: null | string @go(MetricTimestamp,*string)

	// The metric unit (supported units can be found here: http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#Unit)
	// +kubebuilder:validation:Optional
	metricUnit?: null | string @go(MetricUnit,*string)

	// The CloudWatch metric value.
	// +kubebuilder:validation:Optional
	metricValue?: null | string @go(MetricValue,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Optional
	roleArn?: null | string @go(RoleArn,*string)
}

#DimensionInitParameters: {
	// The name of the rule.
	name?: null | string @go(Name,*string)

	// The value of the HTTP header.
	value?: null | string @go(Value,*string)
}

#DimensionObservation: {
	// The name of the rule.
	name?: null | string @go(Name,*string)

	// The value of the HTTP header.
	value?: null | string @go(Value,*string)
}

#DimensionParameters: {
	// The name of the rule.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The value of the HTTP header.
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

#DynamodbInitParameters: {
	// The hash key name.
	hashKeyField?: null | string @go(HashKeyField,*string)

	// The hash key type. Valid values are "STRING" or "NUMBER".
	hashKeyType?: null | string @go(HashKeyType,*string)

	// The hash key value.
	hashKeyValue?: null | string @go(HashKeyValue,*string)

	// The operation. Valid values are "INSERT", "UPDATE", or "DELETE".
	operation?: null | string @go(Operation,*string)

	// The action payload.
	payloadField?: null | string @go(PayloadField,*string)

	// The range key name.
	rangeKeyField?: null | string @go(RangeKeyField,*string)

	// The range key type. Valid values are "STRING" or "NUMBER".
	rangeKeyType?: null | string @go(RangeKeyType,*string)

	// The range key value.
	rangeKeyValue?: null | string @go(RangeKeyValue,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)

	// The name of the DynamoDB table.
	tableName?: null | string @go(TableName,*string)
}

#DynamodbObservation: {
	// The hash key name.
	hashKeyField?: null | string @go(HashKeyField,*string)

	// The hash key type. Valid values are "STRING" or "NUMBER".
	hashKeyType?: null | string @go(HashKeyType,*string)

	// The hash key value.
	hashKeyValue?: null | string @go(HashKeyValue,*string)

	// The operation. Valid values are "INSERT", "UPDATE", or "DELETE".
	operation?: null | string @go(Operation,*string)

	// The action payload.
	payloadField?: null | string @go(PayloadField,*string)

	// The range key name.
	rangeKeyField?: null | string @go(RangeKeyField,*string)

	// The range key type. Valid values are "STRING" or "NUMBER".
	rangeKeyType?: null | string @go(RangeKeyType,*string)

	// The range key value.
	rangeKeyValue?: null | string @go(RangeKeyValue,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)

	// The name of the DynamoDB table.
	tableName?: null | string @go(TableName,*string)
}

#DynamodbParameters: {
	// The hash key name.
	// +kubebuilder:validation:Optional
	hashKeyField?: null | string @go(HashKeyField,*string)

	// The hash key type. Valid values are "STRING" or "NUMBER".
	// +kubebuilder:validation:Optional
	hashKeyType?: null | string @go(HashKeyType,*string)

	// The hash key value.
	// +kubebuilder:validation:Optional
	hashKeyValue?: null | string @go(HashKeyValue,*string)

	// The operation. Valid values are "INSERT", "UPDATE", or "DELETE".
	// +kubebuilder:validation:Optional
	operation?: null | string @go(Operation,*string)

	// The action payload.
	// +kubebuilder:validation:Optional
	payloadField?: null | string @go(PayloadField,*string)

	// The range key name.
	// +kubebuilder:validation:Optional
	rangeKeyField?: null | string @go(RangeKeyField,*string)

	// The range key type. Valid values are "STRING" or "NUMBER".
	// +kubebuilder:validation:Optional
	rangeKeyType?: null | string @go(RangeKeyType,*string)

	// The range key value.
	// +kubebuilder:validation:Optional
	rangeKeyValue?: null | string @go(RangeKeyValue,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Optional
	roleArn?: null | string @go(RoleArn,*string)

	// The name of the DynamoDB table.
	// +kubebuilder:validation:Optional
	tableName?: null | string @go(TableName,*string)
}

#Dynamodbv2InitParameters: {
	// Configuration block with DynamoDB Table to which the message will be written. Nested arguments below.
	putItem?: [...#PutItemInitParameters] @go(PutItem,[]PutItemInitParameters)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)
}

#Dynamodbv2Observation: {
	// Configuration block with DynamoDB Table to which the message will be written. Nested arguments below.
	putItem?: [...#PutItemObservation] @go(PutItem,[]PutItemObservation)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)
}

#Dynamodbv2Parameters: {
	// Configuration block with DynamoDB Table to which the message will be written. Nested arguments below.
	// +kubebuilder:validation:Optional
	putItem?: [...#PutItemParameters] @go(PutItem,[]PutItemParameters)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Optional
	roleArn?: null | string @go(RoleArn,*string)
}

#Dynamodbv2PutItemInitParameters: {
	// The name of the DynamoDB table.
	tableName?: null | string @go(TableName,*string)
}

#Dynamodbv2PutItemObservation: {
	// The name of the DynamoDB table.
	tableName?: null | string @go(TableName,*string)
}

#Dynamodbv2PutItemParameters: {
	// The name of the DynamoDB table.
	// +kubebuilder:validation:Optional
	tableName?: null | string @go(TableName,*string)
}

#ElasticsearchInitParameters: {
	// The endpoint of your Elasticsearch domain.
	endpoint?: null | string @go(Endpoint,*string)

	// The unique identifier for the document you are storing.
	id?: null | string @go(ID,*string)

	// The Elasticsearch index where you want to store your data.
	index?: null | string @go(Index,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)

	// The type of document you are storing.
	type?: null | string @go(Type,*string)
}

#ElasticsearchObservation: {
	// The endpoint of your Elasticsearch domain.
	endpoint?: null | string @go(Endpoint,*string)

	// The unique identifier for the document you are storing.
	id?: null | string @go(ID,*string)

	// The Elasticsearch index where you want to store your data.
	index?: null | string @go(Index,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)

	// The type of document you are storing.
	type?: null | string @go(Type,*string)
}

#ElasticsearchParameters: {
	// The endpoint of your Elasticsearch domain.
	// +kubebuilder:validation:Optional
	endpoint?: null | string @go(Endpoint,*string)

	// The unique identifier for the document you are storing.
	// +kubebuilder:validation:Optional
	id?: null | string @go(ID,*string)

	// The Elasticsearch index where you want to store your data.
	// +kubebuilder:validation:Optional
	index?: null | string @go(Index,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Optional
	roleArn?: null | string @go(RoleArn,*string)

	// The type of document you are storing.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

#ErrorActionCloudwatchAlarmInitParameters: {
	// The CloudWatch alarm name.
	alarmName?: null | string @go(AlarmName,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)

	// The reason for the alarm change.
	stateReason?: null | string @go(StateReason,*string)

	// The value of the alarm state. Acceptable values are: OK, ALARM, INSUFFICIENT_DATA.
	stateValue?: null | string @go(StateValue,*string)
}

#ErrorActionCloudwatchAlarmObservation: {
	// The CloudWatch alarm name.
	alarmName?: null | string @go(AlarmName,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)

	// The reason for the alarm change.
	stateReason?: null | string @go(StateReason,*string)

	// The value of the alarm state. Acceptable values are: OK, ALARM, INSUFFICIENT_DATA.
	stateValue?: null | string @go(StateValue,*string)
}

#ErrorActionCloudwatchAlarmParameters: {
	// The CloudWatch alarm name.
	// +kubebuilder:validation:Optional
	alarmName?: null | string @go(AlarmName,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Optional
	roleArn?: null | string @go(RoleArn,*string)

	// The reason for the alarm change.
	// +kubebuilder:validation:Optional
	stateReason?: null | string @go(StateReason,*string)

	// The value of the alarm state. Acceptable values are: OK, ALARM, INSUFFICIENT_DATA.
	// +kubebuilder:validation:Optional
	stateValue?: null | string @go(StateValue,*string)
}

#ErrorActionCloudwatchLogsInitParameters: {
	// The CloudWatch log group name.
	logGroupName?: null | string @go(LogGroupName,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)
}

#ErrorActionCloudwatchLogsObservation: {
	// The CloudWatch log group name.
	logGroupName?: null | string @go(LogGroupName,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)
}

#ErrorActionCloudwatchLogsParameters: {
	// The CloudWatch log group name.
	// +kubebuilder:validation:Optional
	logGroupName?: null | string @go(LogGroupName,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Optional
	roleArn?: null | string @go(RoleArn,*string)
}

#ErrorActionCloudwatchMetricInitParameters: {
	// The CloudWatch metric name.
	metricName?: null | string @go(MetricName,*string)

	// The CloudWatch metric namespace name.
	metricNamespace?: null | string @go(MetricNamespace,*string)

	// An optional Unix timestamp (http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#about_timestamp).
	metricTimestamp?: null | string @go(MetricTimestamp,*string)

	// The metric unit (supported units can be found here: http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#Unit)
	metricUnit?: null | string @go(MetricUnit,*string)

	// The CloudWatch metric value.
	metricValue?: null | string @go(MetricValue,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)
}

#ErrorActionCloudwatchMetricObservation: {
	// The CloudWatch metric name.
	metricName?: null | string @go(MetricName,*string)

	// The CloudWatch metric namespace name.
	metricNamespace?: null | string @go(MetricNamespace,*string)

	// An optional Unix timestamp (http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#about_timestamp).
	metricTimestamp?: null | string @go(MetricTimestamp,*string)

	// The metric unit (supported units can be found here: http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#Unit)
	metricUnit?: null | string @go(MetricUnit,*string)

	// The CloudWatch metric value.
	metricValue?: null | string @go(MetricValue,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)
}

#ErrorActionCloudwatchMetricParameters: {
	// The CloudWatch metric name.
	// +kubebuilder:validation:Optional
	metricName?: null | string @go(MetricName,*string)

	// The CloudWatch metric namespace name.
	// +kubebuilder:validation:Optional
	metricNamespace?: null | string @go(MetricNamespace,*string)

	// An optional Unix timestamp (http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#about_timestamp).
	// +kubebuilder:validation:Optional
	metricTimestamp?: null | string @go(MetricTimestamp,*string)

	// The metric unit (supported units can be found here: http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#Unit)
	// +kubebuilder:validation:Optional
	metricUnit?: null | string @go(MetricUnit,*string)

	// The CloudWatch metric value.
	// +kubebuilder:validation:Optional
	metricValue?: null | string @go(MetricValue,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Optional
	roleArn?: null | string @go(RoleArn,*string)
}

#ErrorActionDynamodbInitParameters: {
	// The hash key name.
	hashKeyField?: null | string @go(HashKeyField,*string)

	// The hash key type. Valid values are "STRING" or "NUMBER".
	hashKeyType?: null | string @go(HashKeyType,*string)

	// The hash key value.
	hashKeyValue?: null | string @go(HashKeyValue,*string)

	// The operation. Valid values are "INSERT", "UPDATE", or "DELETE".
	operation?: null | string @go(Operation,*string)

	// The action payload.
	payloadField?: null | string @go(PayloadField,*string)

	// The range key name.
	rangeKeyField?: null | string @go(RangeKeyField,*string)

	// The range key type. Valid values are "STRING" or "NUMBER".
	rangeKeyType?: null | string @go(RangeKeyType,*string)

	// The range key value.
	rangeKeyValue?: null | string @go(RangeKeyValue,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)

	// The name of the DynamoDB table.
	tableName?: null | string @go(TableName,*string)
}

#ErrorActionDynamodbObservation: {
	// The hash key name.
	hashKeyField?: null | string @go(HashKeyField,*string)

	// The hash key type. Valid values are "STRING" or "NUMBER".
	hashKeyType?: null | string @go(HashKeyType,*string)

	// The hash key value.
	hashKeyValue?: null | string @go(HashKeyValue,*string)

	// The operation. Valid values are "INSERT", "UPDATE", or "DELETE".
	operation?: null | string @go(Operation,*string)

	// The action payload.
	payloadField?: null | string @go(PayloadField,*string)

	// The range key name.
	rangeKeyField?: null | string @go(RangeKeyField,*string)

	// The range key type. Valid values are "STRING" or "NUMBER".
	rangeKeyType?: null | string @go(RangeKeyType,*string)

	// The range key value.
	rangeKeyValue?: null | string @go(RangeKeyValue,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)

	// The name of the DynamoDB table.
	tableName?: null | string @go(TableName,*string)
}

#ErrorActionDynamodbParameters: {
	// The hash key name.
	// +kubebuilder:validation:Optional
	hashKeyField?: null | string @go(HashKeyField,*string)

	// The hash key type. Valid values are "STRING" or "NUMBER".
	// +kubebuilder:validation:Optional
	hashKeyType?: null | string @go(HashKeyType,*string)

	// The hash key value.
	// +kubebuilder:validation:Optional
	hashKeyValue?: null | string @go(HashKeyValue,*string)

	// The operation. Valid values are "INSERT", "UPDATE", or "DELETE".
	// +kubebuilder:validation:Optional
	operation?: null | string @go(Operation,*string)

	// The action payload.
	// +kubebuilder:validation:Optional
	payloadField?: null | string @go(PayloadField,*string)

	// The range key name.
	// +kubebuilder:validation:Optional
	rangeKeyField?: null | string @go(RangeKeyField,*string)

	// The range key type. Valid values are "STRING" or "NUMBER".
	// +kubebuilder:validation:Optional
	rangeKeyType?: null | string @go(RangeKeyType,*string)

	// The range key value.
	// +kubebuilder:validation:Optional
	rangeKeyValue?: null | string @go(RangeKeyValue,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Optional
	roleArn?: null | string @go(RoleArn,*string)

	// The name of the DynamoDB table.
	// +kubebuilder:validation:Optional
	tableName?: null | string @go(TableName,*string)
}

#ErrorActionDynamodbv2InitParameters: {
	// Configuration block with DynamoDB Table to which the message will be written. Nested arguments below.
	putItem?: [...#Dynamodbv2PutItemInitParameters] @go(PutItem,[]Dynamodbv2PutItemInitParameters)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)
}

#ErrorActionDynamodbv2Observation: {
	// Configuration block with DynamoDB Table to which the message will be written. Nested arguments below.
	putItem?: [...#Dynamodbv2PutItemObservation] @go(PutItem,[]Dynamodbv2PutItemObservation)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)
}

#ErrorActionDynamodbv2Parameters: {
	// Configuration block with DynamoDB Table to which the message will be written. Nested arguments below.
	// +kubebuilder:validation:Optional
	putItem?: [...#Dynamodbv2PutItemParameters] @go(PutItem,[]Dynamodbv2PutItemParameters)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Optional
	roleArn?: null | string @go(RoleArn,*string)
}

#ErrorActionElasticsearchInitParameters: {
	// The endpoint of your Elasticsearch domain.
	endpoint?: null | string @go(Endpoint,*string)

	// The unique identifier for the document you are storing.
	id?: null | string @go(ID,*string)

	// The Elasticsearch index where you want to store your data.
	index?: null | string @go(Index,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)

	// The type of document you are storing.
	type?: null | string @go(Type,*string)
}

#ErrorActionElasticsearchObservation: {
	// The endpoint of your Elasticsearch domain.
	endpoint?: null | string @go(Endpoint,*string)

	// The unique identifier for the document you are storing.
	id?: null | string @go(ID,*string)

	// The Elasticsearch index where you want to store your data.
	index?: null | string @go(Index,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)

	// The type of document you are storing.
	type?: null | string @go(Type,*string)
}

#ErrorActionElasticsearchParameters: {
	// The endpoint of your Elasticsearch domain.
	// +kubebuilder:validation:Optional
	endpoint?: null | string @go(Endpoint,*string)

	// The unique identifier for the document you are storing.
	// +kubebuilder:validation:Optional
	id?: null | string @go(ID,*string)

	// The Elasticsearch index where you want to store your data.
	// +kubebuilder:validation:Optional
	index?: null | string @go(Index,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Optional
	roleArn?: null | string @go(RoleArn,*string)

	// The type of document you are storing.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

#ErrorActionInitParameters: {
	cloudwatchAlarm?: [...#ErrorActionCloudwatchAlarmInitParameters] @go(CloudwatchAlarm,[]ErrorActionCloudwatchAlarmInitParameters)
	cloudwatchLogs?: [...#ErrorActionCloudwatchLogsInitParameters] @go(CloudwatchLogs,[]ErrorActionCloudwatchLogsInitParameters)
	cloudwatchMetric?: [...#ErrorActionCloudwatchMetricInitParameters] @go(CloudwatchMetric,[]ErrorActionCloudwatchMetricInitParameters)
	dynamodb?: [...#ErrorActionDynamodbInitParameters] @go(Dynamodb,[]ErrorActionDynamodbInitParameters)
	dynamodbv2?: [...#ErrorActionDynamodbv2InitParameters] @go(Dynamodbv2,[]ErrorActionDynamodbv2InitParameters)
	elasticsearch?: [...#ErrorActionElasticsearchInitParameters] @go(Elasticsearch,[]ErrorActionElasticsearchInitParameters)
	firehose?: [...#FirehoseInitParameters] @go(Firehose,[]FirehoseInitParameters)
	http?: [...#HTTPInitParameters] @go(HTTP,[]HTTPInitParameters)
	iotAnalytics?: [...#IotAnalyticsInitParameters] @go(IotAnalytics,[]IotAnalyticsInitParameters)
	iotEvents?: [...#IotEventsInitParameters] @go(IotEvents,[]IotEventsInitParameters)
	kafka?: [...#KafkaInitParameters] @go(Kafka,[]KafkaInitParameters)
	kinesis?: [...#KinesisInitParameters] @go(Kinesis,[]KinesisInitParameters)
	lambda?: [...#LambdaInitParameters] @go(Lambda,[]LambdaInitParameters)
	republish?: [...#RepublishInitParameters] @go(Republish,[]RepublishInitParameters)
	s3?: [...#S3InitParameters] @go(S3,[]S3InitParameters)
	sns?: [...#SnsInitParameters] @go(Sns,[]SnsInitParameters)
	sqs?: [...#SqsInitParameters] @go(Sqs,[]SqsInitParameters)
	stepFunctions?: [...#StepFunctionsInitParameters] @go(StepFunctions,[]StepFunctionsInitParameters)
	timestream?: [...#TimestreamInitParameters] @go(Timestream,[]TimestreamInitParameters)
}

#ErrorActionObservation: {
	cloudwatchAlarm?: [...#ErrorActionCloudwatchAlarmObservation] @go(CloudwatchAlarm,[]ErrorActionCloudwatchAlarmObservation)
	cloudwatchLogs?: [...#ErrorActionCloudwatchLogsObservation] @go(CloudwatchLogs,[]ErrorActionCloudwatchLogsObservation)
	cloudwatchMetric?: [...#ErrorActionCloudwatchMetricObservation] @go(CloudwatchMetric,[]ErrorActionCloudwatchMetricObservation)
	dynamodb?: [...#ErrorActionDynamodbObservation] @go(Dynamodb,[]ErrorActionDynamodbObservation)
	dynamodbv2?: [...#ErrorActionDynamodbv2Observation] @go(Dynamodbv2,[]ErrorActionDynamodbv2Observation)
	elasticsearch?: [...#ErrorActionElasticsearchObservation] @go(Elasticsearch,[]ErrorActionElasticsearchObservation)
	firehose?: [...#FirehoseObservation] @go(Firehose,[]FirehoseObservation)
	http?: [...#HTTPObservation] @go(HTTP,[]HTTPObservation)
	iotAnalytics?: [...#IotAnalyticsObservation] @go(IotAnalytics,[]IotAnalyticsObservation)
	iotEvents?: [...#IotEventsObservation] @go(IotEvents,[]IotEventsObservation)
	kafka?: [...#KafkaObservation] @go(Kafka,[]KafkaObservation)
	kinesis?: [...#KinesisObservation] @go(Kinesis,[]KinesisObservation)
	lambda?: [...#LambdaObservation] @go(Lambda,[]LambdaObservation)
	republish?: [...#RepublishObservation] @go(Republish,[]RepublishObservation)
	s3?: [...#S3Observation] @go(S3,[]S3Observation)
	sns?: [...#SnsObservation] @go(Sns,[]SnsObservation)
	sqs?: [...#SqsObservation] @go(Sqs,[]SqsObservation)
	stepFunctions?: [...#StepFunctionsObservation] @go(StepFunctions,[]StepFunctionsObservation)
	timestream?: [...#TimestreamObservation] @go(Timestream,[]TimestreamObservation)
}

#ErrorActionParameters: {
	// +kubebuilder:validation:Optional
	cloudwatchAlarm?: [...#ErrorActionCloudwatchAlarmParameters] @go(CloudwatchAlarm,[]ErrorActionCloudwatchAlarmParameters)

	// +kubebuilder:validation:Optional
	cloudwatchLogs?: [...#ErrorActionCloudwatchLogsParameters] @go(CloudwatchLogs,[]ErrorActionCloudwatchLogsParameters)

	// +kubebuilder:validation:Optional
	cloudwatchMetric?: [...#ErrorActionCloudwatchMetricParameters] @go(CloudwatchMetric,[]ErrorActionCloudwatchMetricParameters)

	// +kubebuilder:validation:Optional
	dynamodb?: [...#ErrorActionDynamodbParameters] @go(Dynamodb,[]ErrorActionDynamodbParameters)

	// +kubebuilder:validation:Optional
	dynamodbv2?: [...#ErrorActionDynamodbv2Parameters] @go(Dynamodbv2,[]ErrorActionDynamodbv2Parameters)

	// +kubebuilder:validation:Optional
	elasticsearch?: [...#ErrorActionElasticsearchParameters] @go(Elasticsearch,[]ErrorActionElasticsearchParameters)

	// +kubebuilder:validation:Optional
	firehose?: [...#FirehoseParameters] @go(Firehose,[]FirehoseParameters)

	// +kubebuilder:validation:Optional
	http?: [...#HTTPParameters] @go(HTTP,[]HTTPParameters)

	// +kubebuilder:validation:Optional
	iotAnalytics?: [...#IotAnalyticsParameters] @go(IotAnalytics,[]IotAnalyticsParameters)

	// +kubebuilder:validation:Optional
	iotEvents?: [...#IotEventsParameters] @go(IotEvents,[]IotEventsParameters)

	// +kubebuilder:validation:Optional
	kafka?: [...#KafkaParameters] @go(Kafka,[]KafkaParameters)

	// +kubebuilder:validation:Optional
	kinesis?: [...#KinesisParameters] @go(Kinesis,[]KinesisParameters)

	// +kubebuilder:validation:Optional
	lambda?: [...#LambdaParameters] @go(Lambda,[]LambdaParameters)

	// +kubebuilder:validation:Optional
	republish?: [...#RepublishParameters] @go(Republish,[]RepublishParameters)

	// +kubebuilder:validation:Optional
	s3?: [...#S3Parameters] @go(S3,[]S3Parameters)

	// +kubebuilder:validation:Optional
	sns?: [...#SnsParameters] @go(Sns,[]SnsParameters)

	// +kubebuilder:validation:Optional
	sqs?: [...#SqsParameters] @go(Sqs,[]SqsParameters)

	// +kubebuilder:validation:Optional
	stepFunctions?: [...#StepFunctionsParameters] @go(StepFunctions,[]StepFunctionsParameters)

	// +kubebuilder:validation:Optional
	timestream?: [...#TimestreamParameters] @go(Timestream,[]TimestreamParameters)
}

#FirehoseInitParameters: {
	// The payload that contains a JSON array of records will be sent to Kinesis Firehose via a batch call.
	batchMode?: null | bool @go(BatchMode,*bool)

	// The delivery stream name.
	deliveryStreamName?: null | string @go(DeliveryStreamName,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)

	// A character separator that is used to separate records written to the Firehose stream. Valid values are: '\n' (newline), '\t' (tab), '\r\n' (Windows newline), ',' (comma).
	separator?: null | string @go(Separator,*string)
}

#FirehoseObservation: {
	// The payload that contains a JSON array of records will be sent to Kinesis Firehose via a batch call.
	batchMode?: null | bool @go(BatchMode,*bool)

	// The delivery stream name.
	deliveryStreamName?: null | string @go(DeliveryStreamName,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)

	// A character separator that is used to separate records written to the Firehose stream. Valid values are: '\n' (newline), '\t' (tab), '\r\n' (Windows newline), ',' (comma).
	separator?: null | string @go(Separator,*string)
}

#FirehoseParameters: {
	// The payload that contains a JSON array of records will be sent to Kinesis Firehose via a batch call.
	// +kubebuilder:validation:Optional
	batchMode?: null | bool @go(BatchMode,*bool)

	// The delivery stream name.
	// +kubebuilder:validation:Optional
	deliveryStreamName?: null | string @go(DeliveryStreamName,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Optional
	roleArn?: null | string @go(RoleArn,*string)

	// A character separator that is used to separate records written to the Firehose stream. Valid values are: '\n' (newline), '\t' (tab), '\r\n' (Windows newline), ',' (comma).
	// +kubebuilder:validation:Optional
	separator?: null | string @go(Separator,*string)
}

#HTTPHTTPHeaderInitParameters: {
	// The name of the HTTP header.
	key?: null | string @go(Key,*string)

	// The value of the HTTP header.
	value?: null | string @go(Value,*string)
}

#HTTPHTTPHeaderObservation: {
	// The name of the HTTP header.
	key?: null | string @go(Key,*string)

	// The value of the HTTP header.
	value?: null | string @go(Value,*string)
}

#HTTPHTTPHeaderParameters: {
	// The name of the HTTP header.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)

	// The value of the HTTP header.
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

#HTTPHeaderInitParameters: {
	// The name of the HTTP header.
	key?: null | string @go(Key,*string)

	// The value of the HTTP header.
	value?: null | string @go(Value,*string)
}

#HTTPHeaderObservation: {
	// The name of the HTTP header.
	key?: null | string @go(Key,*string)

	// The value of the HTTP header.
	value?: null | string @go(Value,*string)
}

#HTTPHeaderParameters: {
	// The name of the HTTP header.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)

	// The value of the HTTP header.
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

#HTTPInitParameters: {
	// The HTTPS URL used to verify ownership of url.
	confirmationUrl?: null | string @go(ConfirmationURL,*string)

	// Custom HTTP header IoT Core should send. It is possible to define more than one custom header.
	httpHeader?: [...#HTTPHeaderInitParameters] @go(HTTPHeader,[]HTTPHeaderInitParameters)

	// The HTTPS URL.
	url?: null | string @go(URL,*string)
}

#HTTPObservation: {
	// The HTTPS URL used to verify ownership of url.
	confirmationUrl?: null | string @go(ConfirmationURL,*string)

	// Custom HTTP header IoT Core should send. It is possible to define more than one custom header.
	httpHeader?: [...#HTTPHeaderObservation] @go(HTTPHeader,[]HTTPHeaderObservation)

	// The HTTPS URL.
	url?: null | string @go(URL,*string)
}

#HTTPParameters: {
	// The HTTPS URL used to verify ownership of url.
	// +kubebuilder:validation:Optional
	confirmationUrl?: null | string @go(ConfirmationURL,*string)

	// Custom HTTP header IoT Core should send. It is possible to define more than one custom header.
	// +kubebuilder:validation:Optional
	httpHeader?: [...#HTTPHeaderParameters] @go(HTTPHeader,[]HTTPHeaderParameters)

	// The HTTPS URL.
	// +kubebuilder:validation:Optional
	url?: null | string @go(URL,*string)
}

#IotAnalyticsInitParameters: {
	// The payload that contains a JSON array of records will be sent to Kinesis Firehose via a batch call.
	batchMode?: null | bool @go(BatchMode,*bool)

	// Name of AWS IOT Analytics channel.
	channelName?: null | string @go(ChannelName,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)
}

#IotAnalyticsObservation: {
	// The payload that contains a JSON array of records will be sent to Kinesis Firehose via a batch call.
	batchMode?: null | bool @go(BatchMode,*bool)

	// Name of AWS IOT Analytics channel.
	channelName?: null | string @go(ChannelName,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)
}

#IotAnalyticsParameters: {
	// The payload that contains a JSON array of records will be sent to Kinesis Firehose via a batch call.
	// +kubebuilder:validation:Optional
	batchMode?: null | bool @go(BatchMode,*bool)

	// Name of AWS IOT Analytics channel.
	// +kubebuilder:validation:Optional
	channelName?: null | string @go(ChannelName,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Optional
	roleArn?: null | string @go(RoleArn,*string)
}

#IotEventsInitParameters: {
	// The payload that contains a JSON array of records will be sent to Kinesis Firehose via a batch call.
	batchMode?: null | bool @go(BatchMode,*bool)

	// The name of the AWS IoT Events input.
	inputName?: null | string @go(InputName,*string)

	// Use this to ensure that only one input (message) with a given messageId is processed by an AWS IoT Events detector.
	messageId?: null | string @go(MessageID,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)
}

#IotEventsObservation: {
	// The payload that contains a JSON array of records will be sent to Kinesis Firehose via a batch call.
	batchMode?: null | bool @go(BatchMode,*bool)

	// The name of the AWS IoT Events input.
	inputName?: null | string @go(InputName,*string)

	// Use this to ensure that only one input (message) with a given messageId is processed by an AWS IoT Events detector.
	messageId?: null | string @go(MessageID,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)
}

#IotEventsParameters: {
	// The payload that contains a JSON array of records will be sent to Kinesis Firehose via a batch call.
	// +kubebuilder:validation:Optional
	batchMode?: null | bool @go(BatchMode,*bool)

	// The name of the AWS IoT Events input.
	// +kubebuilder:validation:Optional
	inputName?: null | string @go(InputName,*string)

	// Use this to ensure that only one input (message) with a given messageId is processed by an AWS IoT Events detector.
	// +kubebuilder:validation:Optional
	messageId?: null | string @go(MessageID,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Optional
	roleArn?: null | string @go(RoleArn,*string)
}

#KafkaInitParameters: {
	// Properties of the Apache Kafka producer client. For more info, see the AWS documentation.
	clientProperties?: {[string]: null | string} @go(ClientProperties,map[string]*string)

	// The ARN of Kafka action's VPC aws_iot_topic_rule_destination .
	destinationArn?: null | string @go(DestinationArn,*string)

	// The name of the HTTP header.
	key?: null | string @go(Key,*string)

	// The Kafka message partition.
	partition?: null | string @go(Partition,*string)

	// The Kafka topic for messages to be sent to the Kafka broker.
	topic?: null | string @go(Topic,*string)
}

#KafkaObservation: {
	// Properties of the Apache Kafka producer client. For more info, see the AWS documentation.
	clientProperties?: {[string]: null | string} @go(ClientProperties,map[string]*string)

	// The ARN of Kafka action's VPC aws_iot_topic_rule_destination .
	destinationArn?: null | string @go(DestinationArn,*string)

	// The name of the HTTP header.
	key?: null | string @go(Key,*string)

	// The Kafka message partition.
	partition?: null | string @go(Partition,*string)

	// The Kafka topic for messages to be sent to the Kafka broker.
	topic?: null | string @go(Topic,*string)
}

#KafkaParameters: {
	// Properties of the Apache Kafka producer client. For more info, see the AWS documentation.
	// +kubebuilder:validation:Optional
	clientProperties: {[string]: null | string} @go(ClientProperties,map[string]*string)

	// The ARN of Kafka action's VPC aws_iot_topic_rule_destination .
	// +kubebuilder:validation:Optional
	destinationArn?: null | string @go(DestinationArn,*string)

	// The name of the HTTP header.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)

	// The Kafka message partition.
	// +kubebuilder:validation:Optional
	partition?: null | string @go(Partition,*string)

	// The Kafka topic for messages to be sent to the Kafka broker.
	// +kubebuilder:validation:Optional
	topic?: null | string @go(Topic,*string)
}

#KinesisInitParameters: {
	// The partition key.
	partitionKey?: null | string @go(PartitionKey,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)

	// The name of the Amazon Kinesis stream.
	streamName?: null | string @go(StreamName,*string)
}

#KinesisObservation: {
	// The partition key.
	partitionKey?: null | string @go(PartitionKey,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)

	// The name of the Amazon Kinesis stream.
	streamName?: null | string @go(StreamName,*string)
}

#KinesisParameters: {
	// The partition key.
	// +kubebuilder:validation:Optional
	partitionKey?: null | string @go(PartitionKey,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Optional
	roleArn?: null | string @go(RoleArn,*string)

	// The name of the Amazon Kinesis stream.
	// +kubebuilder:validation:Optional
	streamName?: null | string @go(StreamName,*string)
}

#LambdaInitParameters: {
	// The ARN of the Lambda function.
	functionArn?: null | string @go(FunctionArn,*string)
}

#LambdaObservation: {
	// The ARN of the Lambda function.
	functionArn?: null | string @go(FunctionArn,*string)
}

#LambdaParameters: {
	// The ARN of the Lambda function.
	// +kubebuilder:validation:Optional
	functionArn?: null | string @go(FunctionArn,*string)
}

#PutItemInitParameters: {
	// The name of the DynamoDB table.
	tableName?: null | string @go(TableName,*string)
}

#PutItemObservation: {
	// The name of the DynamoDB table.
	tableName?: null | string @go(TableName,*string)
}

#PutItemParameters: {
	// The name of the DynamoDB table.
	// +kubebuilder:validation:Optional
	tableName?: null | string @go(TableName,*string)
}

#RepublishInitParameters: {
	// The Quality of Service (QoS) level to use when republishing messages. Valid values are 0 or 1. The default value is 0.
	qos?: null | float64 @go(Qos,*float64)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)

	// The Kafka topic for messages to be sent to the Kafka broker.
	topic?: null | string @go(Topic,*string)
}

#RepublishObservation: {
	// The Quality of Service (QoS) level to use when republishing messages. Valid values are 0 or 1. The default value is 0.
	qos?: null | float64 @go(Qos,*float64)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)

	// The Kafka topic for messages to be sent to the Kafka broker.
	topic?: null | string @go(Topic,*string)
}

#RepublishParameters: {
	// The Quality of Service (QoS) level to use when republishing messages. Valid values are 0 or 1. The default value is 0.
	// +kubebuilder:validation:Optional
	qos?: null | float64 @go(Qos,*float64)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Optional
	roleArn?: null | string @go(RoleArn,*string)

	// The Kafka topic for messages to be sent to the Kafka broker.
	// +kubebuilder:validation:Optional
	topic?: null | string @go(Topic,*string)
}

#S3InitParameters: {
	// The Amazon S3 bucket name.
	bucketName?: null | string @go(BucketName,*string)

	// The Amazon S3 canned ACL that controls access to the object identified by the object key. Valid values.
	cannedAcl?: null | string @go(CannedACL,*string)

	// The name of the HTTP header.
	key?: null | string @go(Key,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)
}

#S3Observation: {
	// The Amazon S3 bucket name.
	bucketName?: null | string @go(BucketName,*string)

	// The Amazon S3 canned ACL that controls access to the object identified by the object key. Valid values.
	cannedAcl?: null | string @go(CannedACL,*string)

	// The name of the HTTP header.
	key?: null | string @go(Key,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)
}

#S3Parameters: {
	// The Amazon S3 bucket name.
	// +kubebuilder:validation:Optional
	bucketName?: null | string @go(BucketName,*string)

	// The Amazon S3 canned ACL that controls access to the object identified by the object key. Valid values.
	// +kubebuilder:validation:Optional
	cannedAcl?: null | string @go(CannedACL,*string)

	// The name of the HTTP header.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Optional
	roleArn?: null | string @go(RoleArn,*string)
}

#SnsInitParameters: {
	// The message format of the message to publish. Accepted values are "JSON" and "RAW".
	messageFormat?: null | string @go(MessageFormat,*string)
}

#SnsObservation: {
	// The message format of the message to publish. Accepted values are "JSON" and "RAW".
	messageFormat?: null | string @go(MessageFormat,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)

	// The ARN of the SNS topic.
	targetArn?: null | string @go(TargetArn,*string)
}

#SnsParameters: {
	// The message format of the message to publish. Accepted values are "JSON" and "RAW".
	// +kubebuilder:validation:Optional
	messageFormat?: null | string @go(MessageFormat,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	roleArn?: null | string @go(RoleArn,*string)

	// Reference to a Role in iam to populate roleArn.
	// +kubebuilder:validation:Optional
	roleArnRef?: null | v1.#Reference @go(RoleArnRef,*v1.Reference)

	// Selector for a Role in iam to populate roleArn.
	// +kubebuilder:validation:Optional
	roleArnSelector?: null | v1.#Selector @go(RoleArnSelector,*v1.Selector)

	// The ARN of the SNS topic.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/sns/v1beta1.Topic
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	targetArn?: null | string @go(TargetArn,*string)

	// Reference to a Topic in sns to populate targetArn.
	// +kubebuilder:validation:Optional
	targetArnRef?: null | v1.#Reference @go(TargetArnRef,*v1.Reference)

	// Selector for a Topic in sns to populate targetArn.
	// +kubebuilder:validation:Optional
	targetArnSelector?: null | v1.#Selector @go(TargetArnSelector,*v1.Selector)
}

#SqsInitParameters: {
	// The URL of the Amazon SQS queue.
	queueUrl?: null | string @go(QueueURL,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)

	// Specifies whether to use Base64 encoding.
	useBase64?: null | bool @go(UseBase64,*bool)
}

#SqsObservation: {
	// The URL of the Amazon SQS queue.
	queueUrl?: null | string @go(QueueURL,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)

	// Specifies whether to use Base64 encoding.
	useBase64?: null | bool @go(UseBase64,*bool)
}

#SqsParameters: {
	// The URL of the Amazon SQS queue.
	// +kubebuilder:validation:Optional
	queueUrl?: null | string @go(QueueURL,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Optional
	roleArn?: null | string @go(RoleArn,*string)

	// Specifies whether to use Base64 encoding.
	// +kubebuilder:validation:Optional
	useBase64?: null | bool @go(UseBase64,*bool)
}

#StepFunctionsInitParameters: {
	// The prefix used to generate, along with a UUID, the unique state machine execution name.
	executionNamePrefix?: null | string @go(ExecutionNamePrefix,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)

	// The name of the Step Functions state machine whose execution will be started.
	stateMachineName?: null | string @go(StateMachineName,*string)
}

#StepFunctionsObservation: {
	// The prefix used to generate, along with a UUID, the unique state machine execution name.
	executionNamePrefix?: null | string @go(ExecutionNamePrefix,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)

	// The name of the Step Functions state machine whose execution will be started.
	stateMachineName?: null | string @go(StateMachineName,*string)
}

#StepFunctionsParameters: {
	// The prefix used to generate, along with a UUID, the unique state machine execution name.
	// +kubebuilder:validation:Optional
	executionNamePrefix?: null | string @go(ExecutionNamePrefix,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Optional
	roleArn?: null | string @go(RoleArn,*string)

	// The name of the Step Functions state machine whose execution will be started.
	// +kubebuilder:validation:Optional
	stateMachineName?: null | string @go(StateMachineName,*string)
}

#TimestampInitParameters: {
	// The precision of the timestamp value that results from the expression described in value. Valid values: SECONDS, MILLISECONDS, MICROSECONDS, NANOSECONDS.
	unit?: null | string @go(Unit,*string)

	// The value of the HTTP header.
	value?: null | string @go(Value,*string)
}

#TimestampObservation: {
	// The precision of the timestamp value that results from the expression described in value. Valid values: SECONDS, MILLISECONDS, MICROSECONDS, NANOSECONDS.
	unit?: null | string @go(Unit,*string)

	// The value of the HTTP header.
	value?: null | string @go(Value,*string)
}

#TimestampParameters: {
	// The precision of the timestamp value that results from the expression described in value. Valid values: SECONDS, MILLISECONDS, MICROSECONDS, NANOSECONDS.
	// +kubebuilder:validation:Optional
	unit?: null | string @go(Unit,*string)

	// The value of the HTTP header.
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

#TimestreamDimensionInitParameters: {
	// The name of the rule.
	name?: null | string @go(Name,*string)

	// The value of the HTTP header.
	value?: null | string @go(Value,*string)
}

#TimestreamDimensionObservation: {
	// The name of the rule.
	name?: null | string @go(Name,*string)

	// The value of the HTTP header.
	value?: null | string @go(Value,*string)
}

#TimestreamDimensionParameters: {
	// The name of the rule.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The value of the HTTP header.
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

#TimestreamInitParameters: {
	// The name of an Amazon Timestream database.
	databaseName?: null | string @go(DatabaseName,*string)

	// Configuration blocks with metadata attributes of the time series that are written in each measure record. Nested arguments below.
	dimension?: [...#DimensionInitParameters] @go(Dimension,[]DimensionInitParameters)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)

	// The name of the DynamoDB table.
	tableName?: null | string @go(TableName,*string)

	// Configuration block specifying an application-defined value to replace the default value assigned to the Timestream record's timestamp in the time column. Nested arguments below.
	timestamp?: [...#TimestampInitParameters] @go(Timestamp,[]TimestampInitParameters)
}

#TimestreamObservation: {
	// The name of an Amazon Timestream database.
	databaseName?: null | string @go(DatabaseName,*string)

	// Configuration blocks with metadata attributes of the time series that are written in each measure record. Nested arguments below.
	dimension?: [...#DimensionObservation] @go(Dimension,[]DimensionObservation)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)

	// The name of the DynamoDB table.
	tableName?: null | string @go(TableName,*string)

	// Configuration block specifying an application-defined value to replace the default value assigned to the Timestream record's timestamp in the time column. Nested arguments below.
	timestamp?: [...#TimestampObservation] @go(Timestamp,[]TimestampObservation)
}

#TimestreamParameters: {
	// The name of an Amazon Timestream database.
	// +kubebuilder:validation:Optional
	databaseName?: null | string @go(DatabaseName,*string)

	// Configuration blocks with metadata attributes of the time series that are written in each measure record. Nested arguments below.
	// +kubebuilder:validation:Optional
	dimension: [...#DimensionParameters] @go(Dimension,[]DimensionParameters)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Optional
	roleArn?: null | string @go(RoleArn,*string)

	// The name of the DynamoDB table.
	// +kubebuilder:validation:Optional
	tableName?: null | string @go(TableName,*string)

	// Configuration block specifying an application-defined value to replace the default value assigned to the Timestream record's timestamp in the time column. Nested arguments below.
	// +kubebuilder:validation:Optional
	timestamp?: [...#TimestampParameters] @go(Timestamp,[]TimestampParameters)
}

#TimestreamTimestampInitParameters: {
	// The precision of the timestamp value that results from the expression described in value. Valid values: SECONDS, MILLISECONDS, MICROSECONDS, NANOSECONDS.
	unit?: null | string @go(Unit,*string)

	// The value of the HTTP header.
	value?: null | string @go(Value,*string)
}

#TimestreamTimestampObservation: {
	// The precision of the timestamp value that results from the expression described in value. Valid values: SECONDS, MILLISECONDS, MICROSECONDS, NANOSECONDS.
	unit?: null | string @go(Unit,*string)

	// The value of the HTTP header.
	value?: null | string @go(Value,*string)
}

#TimestreamTimestampParameters: {
	// The precision of the timestamp value that results from the expression described in value. Valid values: SECONDS, MILLISECONDS, MICROSECONDS, NANOSECONDS.
	// +kubebuilder:validation:Optional
	unit?: null | string @go(Unit,*string)

	// The value of the HTTP header.
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

#TopicRuleFirehoseInitParameters: {
	// The payload that contains a JSON array of records will be sent to Kinesis Firehose via a batch call.
	batchMode?: null | bool @go(BatchMode,*bool)

	// The delivery stream name.
	deliveryStreamName?: null | string @go(DeliveryStreamName,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)

	// A character separator that is used to separate records written to the Firehose stream. Valid values are: '\n' (newline), '\t' (tab), '\r\n' (Windows newline), ',' (comma).
	separator?: null | string @go(Separator,*string)
}

#TopicRuleFirehoseObservation: {
	// The payload that contains a JSON array of records will be sent to Kinesis Firehose via a batch call.
	batchMode?: null | bool @go(BatchMode,*bool)

	// The delivery stream name.
	deliveryStreamName?: null | string @go(DeliveryStreamName,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)

	// A character separator that is used to separate records written to the Firehose stream. Valid values are: '\n' (newline), '\t' (tab), '\r\n' (Windows newline), ',' (comma).
	separator?: null | string @go(Separator,*string)
}

#TopicRuleFirehoseParameters: {
	// The payload that contains a JSON array of records will be sent to Kinesis Firehose via a batch call.
	// +kubebuilder:validation:Optional
	batchMode?: null | bool @go(BatchMode,*bool)

	// The delivery stream name.
	// +kubebuilder:validation:Optional
	deliveryStreamName?: null | string @go(DeliveryStreamName,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Optional
	roleArn?: null | string @go(RoleArn,*string)

	// A character separator that is used to separate records written to the Firehose stream. Valid values are: '\n' (newline), '\t' (tab), '\r\n' (Windows newline), ',' (comma).
	// +kubebuilder:validation:Optional
	separator?: null | string @go(Separator,*string)
}

#TopicRuleHTTPInitParameters: {
	// The HTTPS URL used to verify ownership of url.
	confirmationUrl?: null | string @go(ConfirmationURL,*string)

	// Custom HTTP header IoT Core should send. It is possible to define more than one custom header.
	httpHeader?: [...#HTTPHTTPHeaderInitParameters] @go(HTTPHeader,[]HTTPHTTPHeaderInitParameters)

	// The HTTPS URL.
	url?: null | string @go(URL,*string)
}

#TopicRuleHTTPObservation: {
	// The HTTPS URL used to verify ownership of url.
	confirmationUrl?: null | string @go(ConfirmationURL,*string)

	// Custom HTTP header IoT Core should send. It is possible to define more than one custom header.
	httpHeader?: [...#HTTPHTTPHeaderObservation] @go(HTTPHeader,[]HTTPHTTPHeaderObservation)

	// The HTTPS URL.
	url?: null | string @go(URL,*string)
}

#TopicRuleHTTPParameters: {
	// The HTTPS URL used to verify ownership of url.
	// +kubebuilder:validation:Optional
	confirmationUrl?: null | string @go(ConfirmationURL,*string)

	// Custom HTTP header IoT Core should send. It is possible to define more than one custom header.
	// +kubebuilder:validation:Optional
	httpHeader?: [...#HTTPHTTPHeaderParameters] @go(HTTPHeader,[]HTTPHTTPHeaderParameters)

	// The HTTPS URL.
	// +kubebuilder:validation:Optional
	url?: null | string @go(URL,*string)
}

#TopicRuleInitParameters: {
	cloudwatchAlarm?: [...#CloudwatchAlarmInitParameters] @go(CloudwatchAlarm,[]CloudwatchAlarmInitParameters)
	cloudwatchLogs?: [...#CloudwatchLogsInitParameters] @go(CloudwatchLogs,[]CloudwatchLogsInitParameters)
	cloudwatchMetric?: [...#CloudwatchMetricInitParameters] @go(CloudwatchMetric,[]CloudwatchMetricInitParameters)

	// The description of the rule.
	description?: null | string @go(Description,*string)
	dynamodb?: [...#DynamodbInitParameters] @go(Dynamodb,[]DynamodbInitParameters)
	dynamodbv2?: [...#Dynamodbv2InitParameters] @go(Dynamodbv2,[]Dynamodbv2InitParameters)
	elasticsearch?: [...#ElasticsearchInitParameters] @go(Elasticsearch,[]ElasticsearchInitParameters)

	// Specifies whether the rule is enabled.
	enabled?: null | bool @go(Enabled,*bool)

	// Configuration block with error action to be associated with the rule. See the documentation for cloudwatch_alarm, cloudwatch_logs, cloudwatch_metric, dynamodb, dynamodbv2, elasticsearch, firehose, http, iot_analytics, iot_events, kafka, kinesis, lambda, republish, s3, sns, sqs, step_functions, timestream configuration blocks for further configuration details.
	errorAction?: [...#ErrorActionInitParameters] @go(ErrorAction,[]ErrorActionInitParameters)
	firehose?: [...#TopicRuleFirehoseInitParameters] @go(Firehose,[]TopicRuleFirehoseInitParameters)
	http?: [...#TopicRuleHTTPInitParameters] @go(HTTP,[]TopicRuleHTTPInitParameters)
	iotAnalytics?: [...#TopicRuleIotAnalyticsInitParameters] @go(IotAnalytics,[]TopicRuleIotAnalyticsInitParameters)
	iotEvents?: [...#TopicRuleIotEventsInitParameters] @go(IotEvents,[]TopicRuleIotEventsInitParameters)
	kafka?: [...#TopicRuleKafkaInitParameters] @go(Kafka,[]TopicRuleKafkaInitParameters)
	kinesis?: [...#TopicRuleKinesisInitParameters] @go(Kinesis,[]TopicRuleKinesisInitParameters)
	lambda?: [...#TopicRuleLambdaInitParameters] @go(Lambda,[]TopicRuleLambdaInitParameters)
	republish?: [...#TopicRuleRepublishInitParameters] @go(Republish,[]TopicRuleRepublishInitParameters)
	s3?: [...#TopicRuleS3InitParameters] @go(S3,[]TopicRuleS3InitParameters)

	// The SQL statement used to query the topic. For more information, see AWS IoT SQL Reference (http://docs.aws.amazon.com/iot/latest/developerguide/iot-rules.html#aws-iot-sql-reference) in the AWS IoT Developer Guide.
	sql?: null | string @go(SQL,*string)

	// The version of the SQL rules engine to use when evaluating the rule.
	sqlVersion?: null | string @go(SQLVersion,*string)
	sns?: [...#TopicRuleSnsInitParameters] @go(Sns,[]TopicRuleSnsInitParameters)
	sqs?: [...#TopicRuleSqsInitParameters] @go(Sqs,[]TopicRuleSqsInitParameters)
	stepFunctions?: [...#TopicRuleStepFunctionsInitParameters] @go(StepFunctions,[]TopicRuleStepFunctionsInitParameters)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
	timestream?: [...#TopicRuleTimestreamInitParameters] @go(Timestream,[]TopicRuleTimestreamInitParameters)
}

#TopicRuleIotAnalyticsInitParameters: {
	// The payload that contains a JSON array of records will be sent to Kinesis Firehose via a batch call.
	batchMode?: null | bool @go(BatchMode,*bool)

	// Name of AWS IOT Analytics channel.
	channelName?: null | string @go(ChannelName,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)
}

#TopicRuleIotAnalyticsObservation: {
	// The payload that contains a JSON array of records will be sent to Kinesis Firehose via a batch call.
	batchMode?: null | bool @go(BatchMode,*bool)

	// Name of AWS IOT Analytics channel.
	channelName?: null | string @go(ChannelName,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)
}

#TopicRuleIotAnalyticsParameters: {
	// The payload that contains a JSON array of records will be sent to Kinesis Firehose via a batch call.
	// +kubebuilder:validation:Optional
	batchMode?: null | bool @go(BatchMode,*bool)

	// Name of AWS IOT Analytics channel.
	// +kubebuilder:validation:Optional
	channelName?: null | string @go(ChannelName,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Optional
	roleArn?: null | string @go(RoleArn,*string)
}

#TopicRuleIotEventsInitParameters: {
	// The payload that contains a JSON array of records will be sent to Kinesis Firehose via a batch call.
	batchMode?: null | bool @go(BatchMode,*bool)

	// The name of the AWS IoT Events input.
	inputName?: null | string @go(InputName,*string)

	// Use this to ensure that only one input (message) with a given messageId is processed by an AWS IoT Events detector.
	messageId?: null | string @go(MessageID,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)
}

#TopicRuleIotEventsObservation: {
	// The payload that contains a JSON array of records will be sent to Kinesis Firehose via a batch call.
	batchMode?: null | bool @go(BatchMode,*bool)

	// The name of the AWS IoT Events input.
	inputName?: null | string @go(InputName,*string)

	// Use this to ensure that only one input (message) with a given messageId is processed by an AWS IoT Events detector.
	messageId?: null | string @go(MessageID,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)
}

#TopicRuleIotEventsParameters: {
	// The payload that contains a JSON array of records will be sent to Kinesis Firehose via a batch call.
	// +kubebuilder:validation:Optional
	batchMode?: null | bool @go(BatchMode,*bool)

	// The name of the AWS IoT Events input.
	// +kubebuilder:validation:Optional
	inputName?: null | string @go(InputName,*string)

	// Use this to ensure that only one input (message) with a given messageId is processed by an AWS IoT Events detector.
	// +kubebuilder:validation:Optional
	messageId?: null | string @go(MessageID,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Optional
	roleArn?: null | string @go(RoleArn,*string)
}

#TopicRuleKafkaInitParameters: {
	// Properties of the Apache Kafka producer client. For more info, see the AWS documentation.
	clientProperties?: {[string]: null | string} @go(ClientProperties,map[string]*string)

	// The ARN of Kafka action's VPC aws_iot_topic_rule_destination .
	destinationArn?: null | string @go(DestinationArn,*string)

	// The name of the HTTP header.
	key?: null | string @go(Key,*string)

	// The Kafka message partition.
	partition?: null | string @go(Partition,*string)

	// The Kafka topic for messages to be sent to the Kafka broker.
	topic?: null | string @go(Topic,*string)
}

#TopicRuleKafkaObservation: {
	// Properties of the Apache Kafka producer client. For more info, see the AWS documentation.
	clientProperties?: {[string]: null | string} @go(ClientProperties,map[string]*string)

	// The ARN of Kafka action's VPC aws_iot_topic_rule_destination .
	destinationArn?: null | string @go(DestinationArn,*string)

	// The name of the HTTP header.
	key?: null | string @go(Key,*string)

	// The Kafka message partition.
	partition?: null | string @go(Partition,*string)

	// The Kafka topic for messages to be sent to the Kafka broker.
	topic?: null | string @go(Topic,*string)
}

#TopicRuleKafkaParameters: {
	// Properties of the Apache Kafka producer client. For more info, see the AWS documentation.
	// +kubebuilder:validation:Optional
	clientProperties: {[string]: null | string} @go(ClientProperties,map[string]*string)

	// The ARN of Kafka action's VPC aws_iot_topic_rule_destination .
	// +kubebuilder:validation:Optional
	destinationArn?: null | string @go(DestinationArn,*string)

	// The name of the HTTP header.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)

	// The Kafka message partition.
	// +kubebuilder:validation:Optional
	partition?: null | string @go(Partition,*string)

	// The Kafka topic for messages to be sent to the Kafka broker.
	// +kubebuilder:validation:Optional
	topic?: null | string @go(Topic,*string)
}

#TopicRuleKinesisInitParameters: {
	// The partition key.
	partitionKey?: null | string @go(PartitionKey,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)

	// The name of the Amazon Kinesis stream.
	streamName?: null | string @go(StreamName,*string)
}

#TopicRuleKinesisObservation: {
	// The partition key.
	partitionKey?: null | string @go(PartitionKey,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)

	// The name of the Amazon Kinesis stream.
	streamName?: null | string @go(StreamName,*string)
}

#TopicRuleKinesisParameters: {
	// The partition key.
	// +kubebuilder:validation:Optional
	partitionKey?: null | string @go(PartitionKey,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Optional
	roleArn?: null | string @go(RoleArn,*string)

	// The name of the Amazon Kinesis stream.
	// +kubebuilder:validation:Optional
	streamName?: null | string @go(StreamName,*string)
}

#TopicRuleLambdaInitParameters: {
	// The ARN of the Lambda function.
	functionArn?: null | string @go(FunctionArn,*string)
}

#TopicRuleLambdaObservation: {
	// The ARN of the Lambda function.
	functionArn?: null | string @go(FunctionArn,*string)
}

#TopicRuleLambdaParameters: {
	// The ARN of the Lambda function.
	// +kubebuilder:validation:Optional
	functionArn?: null | string @go(FunctionArn,*string)
}

#TopicRuleObservation: {
	// The ARN of the topic rule
	arn?: null | string @go(Arn,*string)
	cloudwatchAlarm?: [...#CloudwatchAlarmObservation] @go(CloudwatchAlarm,[]CloudwatchAlarmObservation)
	cloudwatchLogs?: [...#CloudwatchLogsObservation] @go(CloudwatchLogs,[]CloudwatchLogsObservation)
	cloudwatchMetric?: [...#CloudwatchMetricObservation] @go(CloudwatchMetric,[]CloudwatchMetricObservation)

	// The description of the rule.
	description?: null | string @go(Description,*string)
	dynamodb?: [...#DynamodbObservation] @go(Dynamodb,[]DynamodbObservation)
	dynamodbv2?: [...#Dynamodbv2Observation] @go(Dynamodbv2,[]Dynamodbv2Observation)
	elasticsearch?: [...#ElasticsearchObservation] @go(Elasticsearch,[]ElasticsearchObservation)

	// Specifies whether the rule is enabled.
	enabled?: null | bool @go(Enabled,*bool)

	// Configuration block with error action to be associated with the rule. See the documentation for cloudwatch_alarm, cloudwatch_logs, cloudwatch_metric, dynamodb, dynamodbv2, elasticsearch, firehose, http, iot_analytics, iot_events, kafka, kinesis, lambda, republish, s3, sns, sqs, step_functions, timestream configuration blocks for further configuration details.
	errorAction?: [...#ErrorActionObservation] @go(ErrorAction,[]ErrorActionObservation)
	firehose?: [...#TopicRuleFirehoseObservation] @go(Firehose,[]TopicRuleFirehoseObservation)
	http?: [...#TopicRuleHTTPObservation] @go(HTTP,[]TopicRuleHTTPObservation)

	// The unique identifier for the document you are storing.
	id?: null | string @go(ID,*string)
	iotAnalytics?: [...#TopicRuleIotAnalyticsObservation] @go(IotAnalytics,[]TopicRuleIotAnalyticsObservation)
	iotEvents?: [...#TopicRuleIotEventsObservation] @go(IotEvents,[]TopicRuleIotEventsObservation)
	kafka?: [...#TopicRuleKafkaObservation] @go(Kafka,[]TopicRuleKafkaObservation)
	kinesis?: [...#TopicRuleKinesisObservation] @go(Kinesis,[]TopicRuleKinesisObservation)
	lambda?: [...#TopicRuleLambdaObservation] @go(Lambda,[]TopicRuleLambdaObservation)
	republish?: [...#TopicRuleRepublishObservation] @go(Republish,[]TopicRuleRepublishObservation)
	s3?: [...#TopicRuleS3Observation] @go(S3,[]TopicRuleS3Observation)

	// The SQL statement used to query the topic. For more information, see AWS IoT SQL Reference (http://docs.aws.amazon.com/iot/latest/developerguide/iot-rules.html#aws-iot-sql-reference) in the AWS IoT Developer Guide.
	sql?: null | string @go(SQL,*string)

	// The version of the SQL rules engine to use when evaluating the rule.
	sqlVersion?: null | string @go(SQLVersion,*string)
	sns?: [...#TopicRuleSnsObservation] @go(Sns,[]TopicRuleSnsObservation)
	sqs?: [...#TopicRuleSqsObservation] @go(Sqs,[]TopicRuleSqsObservation)
	stepFunctions?: [...#TopicRuleStepFunctionsObservation] @go(StepFunctions,[]TopicRuleStepFunctionsObservation)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
	timestream?: [...#TopicRuleTimestreamObservation] @go(Timestream,[]TopicRuleTimestreamObservation)
}

#TopicRuleParameters: {
	// +kubebuilder:validation:Optional
	cloudwatchAlarm?: [...#CloudwatchAlarmParameters] @go(CloudwatchAlarm,[]CloudwatchAlarmParameters)

	// +kubebuilder:validation:Optional
	cloudwatchLogs?: [...#CloudwatchLogsParameters] @go(CloudwatchLogs,[]CloudwatchLogsParameters)

	// +kubebuilder:validation:Optional
	cloudwatchMetric?: [...#CloudwatchMetricParameters] @go(CloudwatchMetric,[]CloudwatchMetricParameters)

	// The description of the rule.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// +kubebuilder:validation:Optional
	dynamodb?: [...#DynamodbParameters] @go(Dynamodb,[]DynamodbParameters)

	// +kubebuilder:validation:Optional
	dynamodbv2?: [...#Dynamodbv2Parameters] @go(Dynamodbv2,[]Dynamodbv2Parameters)

	// +kubebuilder:validation:Optional
	elasticsearch?: [...#ElasticsearchParameters] @go(Elasticsearch,[]ElasticsearchParameters)

	// Specifies whether the rule is enabled.
	// +kubebuilder:validation:Optional
	enabled?: null | bool @go(Enabled,*bool)

	// Configuration block with error action to be associated with the rule. See the documentation for cloudwatch_alarm, cloudwatch_logs, cloudwatch_metric, dynamodb, dynamodbv2, elasticsearch, firehose, http, iot_analytics, iot_events, kafka, kinesis, lambda, republish, s3, sns, sqs, step_functions, timestream configuration blocks for further configuration details.
	// +kubebuilder:validation:Optional
	errorAction?: [...#ErrorActionParameters] @go(ErrorAction,[]ErrorActionParameters)

	// +kubebuilder:validation:Optional
	firehose?: [...#TopicRuleFirehoseParameters] @go(Firehose,[]TopicRuleFirehoseParameters)

	// +kubebuilder:validation:Optional
	http?: [...#TopicRuleHTTPParameters] @go(HTTP,[]TopicRuleHTTPParameters)

	// +kubebuilder:validation:Optional
	iotAnalytics?: [...#TopicRuleIotAnalyticsParameters] @go(IotAnalytics,[]TopicRuleIotAnalyticsParameters)

	// +kubebuilder:validation:Optional
	iotEvents?: [...#TopicRuleIotEventsParameters] @go(IotEvents,[]TopicRuleIotEventsParameters)

	// +kubebuilder:validation:Optional
	kafka?: [...#TopicRuleKafkaParameters] @go(Kafka,[]TopicRuleKafkaParameters)

	// +kubebuilder:validation:Optional
	kinesis?: [...#TopicRuleKinesisParameters] @go(Kinesis,[]TopicRuleKinesisParameters)

	// +kubebuilder:validation:Optional
	lambda?: [...#TopicRuleLambdaParameters] @go(Lambda,[]TopicRuleLambdaParameters)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// +kubebuilder:validation:Optional
	republish?: [...#TopicRuleRepublishParameters] @go(Republish,[]TopicRuleRepublishParameters)

	// +kubebuilder:validation:Optional
	s3?: [...#TopicRuleS3Parameters] @go(S3,[]TopicRuleS3Parameters)

	// The SQL statement used to query the topic. For more information, see AWS IoT SQL Reference (http://docs.aws.amazon.com/iot/latest/developerguide/iot-rules.html#aws-iot-sql-reference) in the AWS IoT Developer Guide.
	// +kubebuilder:validation:Optional
	sql?: null | string @go(SQL,*string)

	// The version of the SQL rules engine to use when evaluating the rule.
	// +kubebuilder:validation:Optional
	sqlVersion?: null | string @go(SQLVersion,*string)

	// +kubebuilder:validation:Optional
	sns?: [...#TopicRuleSnsParameters] @go(Sns,[]TopicRuleSnsParameters)

	// +kubebuilder:validation:Optional
	sqs?: [...#TopicRuleSqsParameters] @go(Sqs,[]TopicRuleSqsParameters)

	// +kubebuilder:validation:Optional
	stepFunctions?: [...#TopicRuleStepFunctionsParameters] @go(StepFunctions,[]TopicRuleStepFunctionsParameters)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// +kubebuilder:validation:Optional
	timestream?: [...#TopicRuleTimestreamParameters] @go(Timestream,[]TopicRuleTimestreamParameters)
}

#TopicRuleRepublishInitParameters: {
	// The Quality of Service (QoS) level to use when republishing messages. Valid values are 0 or 1. The default value is 0.
	qos?: null | float64 @go(Qos,*float64)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)

	// The Kafka topic for messages to be sent to the Kafka broker.
	topic?: null | string @go(Topic,*string)
}

#TopicRuleRepublishObservation: {
	// The Quality of Service (QoS) level to use when republishing messages. Valid values are 0 or 1. The default value is 0.
	qos?: null | float64 @go(Qos,*float64)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)

	// The Kafka topic for messages to be sent to the Kafka broker.
	topic?: null | string @go(Topic,*string)
}

#TopicRuleRepublishParameters: {
	// The Quality of Service (QoS) level to use when republishing messages. Valid values are 0 or 1. The default value is 0.
	// +kubebuilder:validation:Optional
	qos?: null | float64 @go(Qos,*float64)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Optional
	roleArn?: null | string @go(RoleArn,*string)

	// The Kafka topic for messages to be sent to the Kafka broker.
	// +kubebuilder:validation:Optional
	topic?: null | string @go(Topic,*string)
}

#TopicRuleS3InitParameters: {
	// The Amazon S3 bucket name.
	bucketName?: null | string @go(BucketName,*string)

	// The Amazon S3 canned ACL that controls access to the object identified by the object key. Valid values.
	cannedAcl?: null | string @go(CannedACL,*string)

	// The name of the HTTP header.
	key?: null | string @go(Key,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)
}

#TopicRuleS3Observation: {
	// The Amazon S3 bucket name.
	bucketName?: null | string @go(BucketName,*string)

	// The Amazon S3 canned ACL that controls access to the object identified by the object key. Valid values.
	cannedAcl?: null | string @go(CannedACL,*string)

	// The name of the HTTP header.
	key?: null | string @go(Key,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)
}

#TopicRuleS3Parameters: {
	// The Amazon S3 bucket name.
	// +kubebuilder:validation:Optional
	bucketName?: null | string @go(BucketName,*string)

	// The Amazon S3 canned ACL that controls access to the object identified by the object key. Valid values.
	// +kubebuilder:validation:Optional
	cannedAcl?: null | string @go(CannedACL,*string)

	// The name of the HTTP header.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Optional
	roleArn?: null | string @go(RoleArn,*string)
}

#TopicRuleSnsInitParameters: {
	// The message format of the message to publish. Accepted values are "JSON" and "RAW".
	messageFormat?: null | string @go(MessageFormat,*string)
}

#TopicRuleSnsObservation: {
	// The message format of the message to publish. Accepted values are "JSON" and "RAW".
	messageFormat?: null | string @go(MessageFormat,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)

	// The ARN of the SNS topic.
	targetArn?: null | string @go(TargetArn,*string)
}

#TopicRuleSnsParameters: {
	// The message format of the message to publish. Accepted values are "JSON" and "RAW".
	// +kubebuilder:validation:Optional
	messageFormat?: null | string @go(MessageFormat,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	roleArn?: null | string @go(RoleArn,*string)

	// Reference to a Role in iam to populate roleArn.
	// +kubebuilder:validation:Optional
	roleArnRef?: null | v1.#Reference @go(RoleArnRef,*v1.Reference)

	// Selector for a Role in iam to populate roleArn.
	// +kubebuilder:validation:Optional
	roleArnSelector?: null | v1.#Selector @go(RoleArnSelector,*v1.Selector)

	// The ARN of the SNS topic.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/sns/v1beta1.Topic
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	targetArn?: null | string @go(TargetArn,*string)

	// Reference to a Topic in sns to populate targetArn.
	// +kubebuilder:validation:Optional
	targetArnRef?: null | v1.#Reference @go(TargetArnRef,*v1.Reference)

	// Selector for a Topic in sns to populate targetArn.
	// +kubebuilder:validation:Optional
	targetArnSelector?: null | v1.#Selector @go(TargetArnSelector,*v1.Selector)
}

#TopicRuleSqsInitParameters: {
	// The URL of the Amazon SQS queue.
	queueUrl?: null | string @go(QueueURL,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)

	// Specifies whether to use Base64 encoding.
	useBase64?: null | bool @go(UseBase64,*bool)
}

#TopicRuleSqsObservation: {
	// The URL of the Amazon SQS queue.
	queueUrl?: null | string @go(QueueURL,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)

	// Specifies whether to use Base64 encoding.
	useBase64?: null | bool @go(UseBase64,*bool)
}

#TopicRuleSqsParameters: {
	// The URL of the Amazon SQS queue.
	// +kubebuilder:validation:Optional
	queueUrl?: null | string @go(QueueURL,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Optional
	roleArn?: null | string @go(RoleArn,*string)

	// Specifies whether to use Base64 encoding.
	// +kubebuilder:validation:Optional
	useBase64?: null | bool @go(UseBase64,*bool)
}

#TopicRuleStepFunctionsInitParameters: {
	// The prefix used to generate, along with a UUID, the unique state machine execution name.
	executionNamePrefix?: null | string @go(ExecutionNamePrefix,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)

	// The name of the Step Functions state machine whose execution will be started.
	stateMachineName?: null | string @go(StateMachineName,*string)
}

#TopicRuleStepFunctionsObservation: {
	// The prefix used to generate, along with a UUID, the unique state machine execution name.
	executionNamePrefix?: null | string @go(ExecutionNamePrefix,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)

	// The name of the Step Functions state machine whose execution will be started.
	stateMachineName?: null | string @go(StateMachineName,*string)
}

#TopicRuleStepFunctionsParameters: {
	// The prefix used to generate, along with a UUID, the unique state machine execution name.
	// +kubebuilder:validation:Optional
	executionNamePrefix?: null | string @go(ExecutionNamePrefix,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Optional
	roleArn?: null | string @go(RoleArn,*string)

	// The name of the Step Functions state machine whose execution will be started.
	// +kubebuilder:validation:Optional
	stateMachineName?: null | string @go(StateMachineName,*string)
}

#TopicRuleTimestreamInitParameters: {
	// The name of an Amazon Timestream database.
	databaseName?: null | string @go(DatabaseName,*string)

	// Configuration blocks with metadata attributes of the time series that are written in each measure record. Nested arguments below.
	dimension?: [...#TimestreamDimensionInitParameters] @go(Dimension,[]TimestreamDimensionInitParameters)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)

	// The name of the DynamoDB table.
	tableName?: null | string @go(TableName,*string)

	// Configuration block specifying an application-defined value to replace the default value assigned to the Timestream record's timestamp in the time column. Nested arguments below.
	timestamp?: [...#TimestreamTimestampInitParameters] @go(Timestamp,[]TimestreamTimestampInitParameters)
}

#TopicRuleTimestreamObservation: {
	// The name of an Amazon Timestream database.
	databaseName?: null | string @go(DatabaseName,*string)

	// Configuration blocks with metadata attributes of the time series that are written in each measure record. Nested arguments below.
	dimension?: [...#TimestreamDimensionObservation] @go(Dimension,[]TimestreamDimensionObservation)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	roleArn?: null | string @go(RoleArn,*string)

	// The name of the DynamoDB table.
	tableName?: null | string @go(TableName,*string)

	// Configuration block specifying an application-defined value to replace the default value assigned to the Timestream record's timestamp in the time column. Nested arguments below.
	timestamp?: [...#TimestreamTimestampObservation] @go(Timestamp,[]TimestreamTimestampObservation)
}

#TopicRuleTimestreamParameters: {
	// The name of an Amazon Timestream database.
	// +kubebuilder:validation:Optional
	databaseName?: null | string @go(DatabaseName,*string)

	// Configuration blocks with metadata attributes of the time series that are written in each measure record. Nested arguments below.
	// +kubebuilder:validation:Optional
	dimension: [...#TimestreamDimensionParameters] @go(Dimension,[]TimestreamDimensionParameters)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Optional
	roleArn?: null | string @go(RoleArn,*string)

	// The name of the DynamoDB table.
	// +kubebuilder:validation:Optional
	tableName?: null | string @go(TableName,*string)

	// Configuration block specifying an application-defined value to replace the default value assigned to the Timestream record's timestamp in the time column. Nested arguments below.
	// +kubebuilder:validation:Optional
	timestamp?: [...#TimestreamTimestampParameters] @go(Timestamp,[]TimestreamTimestampParameters)
}

// TopicRuleSpec defines the desired state of TopicRule
#TopicRuleSpec: {
	v1.#ResourceSpec
	forProvider: #TopicRuleParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #TopicRuleInitParameters @go(InitProvider)
}

// TopicRuleStatus defines the observed state of TopicRule.
#TopicRuleStatus: {
	v1.#ResourceStatus
	atProvider?: #TopicRuleObservation @go(AtProvider)
}

// TopicRule is the Schema for the TopicRules API. Creates and manages an AWS IoT topic rule
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#TopicRule: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enabled) || (has(self.initProvider) && has(self.initProvider.enabled))",message="spec.forProvider.enabled is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.sql) || (has(self.initProvider) && has(self.initProvider.sql))",message="spec.forProvider.sql is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.sqlVersion) || (has(self.initProvider) && has(self.initProvider.sqlVersion))",message="spec.forProvider.sqlVersion is a required parameter"
	spec:    #TopicRuleSpec   @go(Spec)
	status?: #TopicRuleStatus @go(Status)
}

// TopicRuleList contains a list of TopicRules
#TopicRuleList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#TopicRule] @go(Items,[]TopicRule)
}
