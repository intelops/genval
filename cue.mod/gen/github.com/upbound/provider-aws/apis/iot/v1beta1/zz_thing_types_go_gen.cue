// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/iot/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#ThingInitParameters: {
	// Map of attributes of the thing.
	attributes?: {[string]: null | string} @go(Attributes,map[string]*string)

	// The thing type name.
	thingTypeName?: null | string @go(ThingTypeName,*string)
}

#ThingObservation: {
	// The ARN of the thing.
	arn?: null | string @go(Arn,*string)

	// Map of attributes of the thing.
	attributes?: {[string]: null | string} @go(Attributes,map[string]*string)

	// The default client ID.
	defaultClientId?: null | string @go(DefaultClientID,*string)
	id?:              null | string @go(ID,*string)

	// The thing type name.
	thingTypeName?: null | string @go(ThingTypeName,*string)

	// The current version of the thing record in the registry.
	version?: null | float64 @go(Version,*float64)
}

#ThingParameters: {
	// Map of attributes of the thing.
	// +kubebuilder:validation:Optional
	attributes?: {[string]: null | string} @go(Attributes,map[string]*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The thing type name.
	// +kubebuilder:validation:Optional
	thingTypeName?: null | string @go(ThingTypeName,*string)
}

// ThingSpec defines the desired state of Thing
#ThingSpec: {
	v1.#ResourceSpec
	forProvider: #ThingParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ThingInitParameters @go(InitProvider)
}

// ThingStatus defines the observed state of Thing.
#ThingStatus: {
	v1.#ResourceStatus
	atProvider?: #ThingObservation @go(AtProvider)
}

// Thing is the Schema for the Things API. Creates and manages an AWS IoT Thing.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Thing: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec:      #ThingSpec         @go(Spec)
	status?:   #ThingStatus       @go(Status)
}

// ThingList contains a list of Things
#ThingList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Thing] @go(Items,[]Thing)
}
