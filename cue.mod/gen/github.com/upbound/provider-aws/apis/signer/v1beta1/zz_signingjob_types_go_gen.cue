// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/signer/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#DestinationInitParameters: {
	// A configuration block describing the S3 Source object: See S3 Source below for details.
	s3?: [...#S3InitParameters] @go(S3,[]S3InitParameters)
}

#DestinationObservation: {
	// A configuration block describing the S3 Source object: See S3 Source below for details.
	s3?: [...#S3Observation] @go(S3,[]S3Observation)
}

#DestinationParameters: {
	// A configuration block describing the S3 Source object: See S3 Source below for details.
	// +kubebuilder:validation:Optional
	s3: [...#S3Parameters] @go(S3,[]S3Parameters)
}

#RevocationRecordInitParameters: {
}

#RevocationRecordObservation: {
	reason?:    null | string @go(Reason,*string)
	revokedAt?: null | string @go(RevokedAt,*string)
	revokedBy?: null | string @go(RevokedBy,*string)
}

#RevocationRecordParameters: {
}

#S3InitParameters: {
	// Name of the S3 bucket.
	bucket?: null | string @go(Bucket,*string)

	// An Amazon S3 object key prefix that you can use to limit signed objects keys to begin with the specified prefix.
	prefix?: null | string @go(Prefix,*string)
}

#S3Observation: {
	// Name of the S3 bucket.
	bucket?: null | string @go(Bucket,*string)

	// An Amazon S3 object key prefix that you can use to limit signed objects keys to begin with the specified prefix.
	prefix?: null | string @go(Prefix,*string)
}

#S3Parameters: {
	// Name of the S3 bucket.
	// +kubebuilder:validation:Optional
	bucket?: null | string @go(Bucket,*string)

	// An Amazon S3 object key prefix that you can use to limit signed objects keys to begin with the specified prefix.
	// +kubebuilder:validation:Optional
	prefix?: null | string @go(Prefix,*string)
}

#SignedObjectInitParameters: {
}

#SignedObjectObservation: {
	// A configuration block describing the S3 Source object: See S3 Source below for details.
	s3?: [...#SignedObjectS3Observation] @go(S3,[]SignedObjectS3Observation)
}

#SignedObjectParameters: {
}

#SignedObjectS3InitParameters: {
}

#SignedObjectS3Observation: {
	// Name of the S3 bucket.
	bucket?: null | string @go(Bucket,*string)

	// Key name of the object that contains your unsigned code.
	key?: null | string @go(Key,*string)
}

#SignedObjectS3Parameters: {
}

#SigningJobInitParameters: {
	// The S3 bucket in which to save your signed object. See Destination below for details.
	destination?: [...#DestinationInitParameters] @go(Destination,[]DestinationInitParameters)

	// Set this argument to true to ignore signing job failures and retrieve failed status and reason. Default false.
	ignoreSigningJobFailure?: null | bool @go(IgnoreSigningJobFailure,*bool)

	// The S3 bucket that contains the object to sign. See Source below for details.
	source?: [...#SourceInitParameters] @go(Source,[]SourceInitParameters)
}

#SigningJobObservation: {
	// Date and time in RFC3339 format that the signing job was completed.
	completedAt?: null | string @go(CompletedAt,*string)

	// Date and time in RFC3339 format that the signing job was created.
	createdAt?: null | string @go(CreatedAt,*string)

	// The S3 bucket in which to save your signed object. See Destination below for details.
	destination?: [...#DestinationObservation] @go(Destination,[]DestinationObservation)
	id?: null | string @go(ID,*string)

	// Set this argument to true to ignore signing job failures and retrieve failed status and reason. Default false.
	ignoreSigningJobFailure?: null | bool @go(IgnoreSigningJobFailure,*bool)

	// The ID of the signing job on output.
	jobId?: null | string @go(JobID,*string)

	// The IAM entity that initiated the signing job.
	jobInvoker?: null | string @go(JobInvoker,*string)

	// The AWS account ID of the job owner.
	jobOwner?: null | string @go(JobOwner,*string)

	// A human-readable name for the signing platform associated with the signing job.
	platformDisplayName?: null | string @go(PlatformDisplayName,*string)

	// The platform to which your signed code image will be distributed.
	platformId?: null | string @go(PlatformID,*string)

	// The name of the profile to initiate the signing operation.
	profileName?: null | string @go(ProfileName,*string)

	// The version of the signing profile used to initiate the signing job.
	profileVersion?: null | string @go(ProfileVersion,*string)

	// The IAM principal that requested the signing job.
	requestedBy?: null | string @go(RequestedBy,*string)

	// A revocation record if the signature generated by the signing job has been revoked. Contains a timestamp and the ID of the IAM entity that revoked the signature.
	revocationRecord?: [...#RevocationRecordObservation] @go(RevocationRecord,[]RevocationRecordObservation)

	// The time when the signature of a signing job expires.
	signatureExpiresAt?: null | string @go(SignatureExpiresAt,*string)

	// Name of the S3 bucket where the signed code image is saved by code signing.
	signedObject?: [...#SignedObjectObservation] @go(SignedObject,[]SignedObjectObservation)

	// The S3 bucket that contains the object to sign. See Source below for details.
	source?: [...#SourceObservation] @go(Source,[]SourceObservation)

	// Status of the signing job.
	status?: null | string @go(Status,*string)

	// String value that contains the status reason.
	statusReason?: null | string @go(StatusReason,*string)
}

#SigningJobParameters: {
	// The S3 bucket in which to save your signed object. See Destination below for details.
	// +kubebuilder:validation:Optional
	destination?: [...#DestinationParameters] @go(Destination,[]DestinationParameters)

	// Set this argument to true to ignore signing job failures and retrieve failed status and reason. Default false.
	// +kubebuilder:validation:Optional
	ignoreSigningJobFailure?: null | bool @go(IgnoreSigningJobFailure,*bool)

	// The name of the profile to initiate the signing operation.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/signer/v1beta1.SigningProfile
	// +kubebuilder:validation:Optional
	profileName?: null | string @go(ProfileName,*string)

	// Reference to a SigningProfile in signer to populate profileName.
	// +kubebuilder:validation:Optional
	profileNameRef?: null | v1.#Reference @go(ProfileNameRef,*v1.Reference)

	// Selector for a SigningProfile in signer to populate profileName.
	// +kubebuilder:validation:Optional
	profileNameSelector?: null | v1.#Selector @go(ProfileNameSelector,*v1.Selector)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The S3 bucket that contains the object to sign. See Source below for details.
	// +kubebuilder:validation:Optional
	source?: [...#SourceParameters] @go(Source,[]SourceParameters)
}

#SourceInitParameters: {
	// A configuration block describing the S3 Source object: See S3 Source below for details.
	s3?: [...#SourceS3InitParameters] @go(S3,[]SourceS3InitParameters)
}

#SourceObservation: {
	// A configuration block describing the S3 Source object: See S3 Source below for details.
	s3?: [...#SourceS3Observation] @go(S3,[]SourceS3Observation)
}

#SourceParameters: {
	// A configuration block describing the S3 Source object: See S3 Source below for details.
	// +kubebuilder:validation:Optional
	s3: [...#SourceS3Parameters] @go(S3,[]SourceS3Parameters)
}

#SourceS3InitParameters: {
	// Name of the S3 bucket.
	bucket?: null | string @go(Bucket,*string)

	// Key name of the object that contains your unsigned code.
	key?: null | string @go(Key,*string)

	// Version of your source image in your version enabled S3 bucket.
	version?: null | string @go(Version,*string)
}

#SourceS3Observation: {
	// Name of the S3 bucket.
	bucket?: null | string @go(Bucket,*string)

	// Key name of the object that contains your unsigned code.
	key?: null | string @go(Key,*string)

	// Version of your source image in your version enabled S3 bucket.
	version?: null | string @go(Version,*string)
}

#SourceS3Parameters: {
	// Name of the S3 bucket.
	// +kubebuilder:validation:Optional
	bucket?: null | string @go(Bucket,*string)

	// Key name of the object that contains your unsigned code.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)

	// Version of your source image in your version enabled S3 bucket.
	// +kubebuilder:validation:Optional
	version?: null | string @go(Version,*string)
}

// SigningJobSpec defines the desired state of SigningJob
#SigningJobSpec: {
	v1.#ResourceSpec
	forProvider: #SigningJobParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #SigningJobInitParameters @go(InitProvider)
}

// SigningJobStatus defines the observed state of SigningJob.
#SigningJobStatus: {
	v1.#ResourceStatus
	atProvider?: #SigningJobObservation @go(AtProvider)
}

// SigningJob is the Schema for the SigningJobs API. Creates a Signer Signing Job.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#SigningJob: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.destination) || (has(self.initProvider) && has(self.initProvider.destination))",message="spec.forProvider.destination is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.source) || (has(self.initProvider) && has(self.initProvider.source))",message="spec.forProvider.source is a required parameter"
	spec:    #SigningJobSpec   @go(Spec)
	status?: #SigningJobStatus @go(Status)
}

// SigningJobList contains a list of SigningJobs
#SigningJobList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#SigningJob] @go(Items,[]SigningJob)
}
