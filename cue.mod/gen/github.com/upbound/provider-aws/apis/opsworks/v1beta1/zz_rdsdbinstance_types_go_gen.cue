// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/opsworks/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#RDSDBInstanceInitParameters: {
	// A db username
	dbUser?: null | string @go(DBUser,*string)
}

#RDSDBInstanceObservation: {
	// A db username
	dbUser?: null | string @go(DBUser,*string)

	// The computed id. Please note that this is only used internally to identify the stack <-> instance relation. This value is not used in aws.
	id?: null | string @go(ID,*string)

	// The db instance to register for this stack. Changing this will force a new resource.
	rdsDbInstanceArn?: null | string @go(RDSDBInstanceArn,*string)

	// The stack to register a db instance for. Changing this will force a new resource.
	stackId?: null | string @go(StackID,*string)
}

#RDSDBInstanceParameters: {
	// A db password
	// +kubebuilder:validation:Optional
	dbPasswordSecretRef: v1.#SecretKeySelector @go(DBPasswordSecretRef)

	// A db username
	// +kubebuilder:validation:Optional
	dbUser?: null | string @go(DBUser,*string)

	// The db instance to register for this stack. Changing this will force a new resource.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/rds/v1beta1.Instance
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	rdsDbInstanceArn?: null | string @go(RDSDBInstanceArn,*string)

	// Reference to a Instance in rds to populate rdsDbInstanceArn.
	// +kubebuilder:validation:Optional
	rdsDbInstanceArnRef?: null | v1.#Reference @go(RDSDBInstanceArnRef,*v1.Reference)

	// Selector for a Instance in rds to populate rdsDbInstanceArn.
	// +kubebuilder:validation:Optional
	rdsDbInstanceArnSelector?: null | v1.#Selector @go(RDSDBInstanceArnSelector,*v1.Selector)

	// The stack to register a db instance for. Changing this will force a new resource.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/opsworks/v1beta1.Stack
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	stackId?: null | string @go(StackID,*string)

	// Reference to a Stack in opsworks to populate stackId.
	// +kubebuilder:validation:Optional
	stackIdRef?: null | v1.#Reference @go(StackIDRef,*v1.Reference)

	// Selector for a Stack in opsworks to populate stackId.
	// +kubebuilder:validation:Optional
	stackIdSelector?: null | v1.#Selector @go(StackIDSelector,*v1.Selector)
}

// RDSDBInstanceSpec defines the desired state of RDSDBInstance
#RDSDBInstanceSpec: {
	v1.#ResourceSpec
	forProvider: #RDSDBInstanceParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #RDSDBInstanceInitParameters @go(InitProvider)
}

// RDSDBInstanceStatus defines the observed state of RDSDBInstance.
#RDSDBInstanceStatus: {
	v1.#ResourceStatus
	atProvider?: #RDSDBInstanceObservation @go(AtProvider)
}

// RDSDBInstance is the Schema for the RDSDBInstances API. Provides an OpsWorks RDS DB Instance resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#RDSDBInstance: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.dbPasswordSecretRef)",message="spec.forProvider.dbPasswordSecretRef is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.dbUser) || (has(self.initProvider) && has(self.initProvider.dbUser))",message="spec.forProvider.dbUser is a required parameter"
	spec:    #RDSDBInstanceSpec   @go(Spec)
	status?: #RDSDBInstanceStatus @go(Status)
}

// RDSDBInstanceList contains a list of RDSDBInstances
#RDSDBInstanceList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#RDSDBInstance] @go(Items,[]RDSDBInstance)
}
