// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/opsworks/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#AppSourceInitParameters: {
	// For sources that are version-aware, the revision to use.
	revision?: null | string @go(Revision,*string)

	// The type of source to use. For example, "archive".
	type?: null | string @go(Type,*string)

	// The URL where the app resource can be found.
	url?: null | string @go(URL,*string)

	// Username to use when authenticating to the source.
	username?: null | string @go(Username,*string)
}

#AppSourceObservation: {
	// For sources that are version-aware, the revision to use.
	revision?: null | string @go(Revision,*string)

	// The type of source to use. For example, "archive".
	type?: null | string @go(Type,*string)

	// The URL where the app resource can be found.
	url?: null | string @go(URL,*string)

	// Username to use when authenticating to the source.
	username?: null | string @go(Username,*string)
}

#AppSourceParameters: {
	// Password to use when authenticating to the source.
	// +kubebuilder:validation:Optional
	passwordSecretRef?: null | v1.#SecretKeySelector @go(PasswordSecretRef,*v1.SecretKeySelector)

	// For sources that are version-aware, the revision to use.
	// +kubebuilder:validation:Optional
	revision?: null | string @go(Revision,*string)

	// SSH key to use when authenticating to the source.
	// +kubebuilder:validation:Optional
	sshKeySecretRef?: null | v1.#SecretKeySelector @go(SSHKeySecretRef,*v1.SecretKeySelector)

	// The type of source to use. For example, "archive".
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)

	// The URL where the app resource can be found.
	// +kubebuilder:validation:Optional
	url?: null | string @go(URL,*string)

	// Username to use when authenticating to the source.
	// +kubebuilder:validation:Optional
	username?: null | string @go(Username,*string)
}

#ApplicationInitParameters: {
	// SCM configuration of the app as described below.
	appSource?: [...#AppSourceInitParameters] @go(AppSource,[]AppSourceInitParameters)

	// Run bundle install when deploying for application of type rails.
	autoBundleOnDeploy?: null | string @go(AutoBundleOnDeploy,*string)

	// Specify activity and workflow workers for your app using the aws-flow gem.
	awsFlowRubySettings?: null | string @go(AwsFlowRubySettings,*string)

	// The data source's ARN.
	dataSourceArn?: null | string @go(DataSourceArn,*string)

	// The database name.
	dataSourceDatabaseName?: null | string @go(DataSourceDatabaseName,*string)

	// The data source's type one of AutoSelectOpsworksMysqlInstance, OpsworksMysqlInstance, or RdsDbInstance.
	dataSourceType?: null | string @go(DataSourceType,*string)

	// A description of the app.
	description?: null | string @go(Description,*string)

	// Subfolder for the document root for application of type rails.
	documentRoot?: null | string @go(DocumentRoot,*string)

	// A list of virtual host alias.
	domains?: [...null | string] @go(Domains,[]*string)

	// Whether to enable SSL for the app. This must be set in order to let ssl_configuration.private_key, ssl_configuration.certificate and ssl_configuration.chain take effect.
	enableSsl?: null | bool @go(EnableSSL,*bool)

	// Object to define environment variables.  Object is described below.
	environment?: [...#EnvironmentInitParameters] @go(Environment,[]EnvironmentInitParameters)

	// A human-readable name for the application.
	name?: null | string @go(Name,*string)

	// The name of the Rails environment for application of type rails.
	railsEnv?: null | string @go(RailsEnv,*string)

	// The SSL configuration of the app. Object is described below.
	sslConfiguration?: [...#SSLConfigurationInitParameters] @go(SSLConfiguration,[]SSLConfigurationInitParameters)

	// A short, machine-readable name for the application. This can only be defined on resource creation and ignored on resource update.
	shortName?: null | string @go(ShortName,*string)

	// Opsworks application type. One of aws-flow-ruby, java, rails, php, nodejs, static or other.
	type?: null | string @go(Type,*string)
}

#ApplicationObservation: {
	// SCM configuration of the app as described below.
	appSource?: [...#AppSourceObservation] @go(AppSource,[]AppSourceObservation)

	// Run bundle install when deploying for application of type rails.
	autoBundleOnDeploy?: null | string @go(AutoBundleOnDeploy,*string)

	// Specify activity and workflow workers for your app using the aws-flow gem.
	awsFlowRubySettings?: null | string @go(AwsFlowRubySettings,*string)

	// The data source's ARN.
	dataSourceArn?: null | string @go(DataSourceArn,*string)

	// The database name.
	dataSourceDatabaseName?: null | string @go(DataSourceDatabaseName,*string)

	// The data source's type one of AutoSelectOpsworksMysqlInstance, OpsworksMysqlInstance, or RdsDbInstance.
	dataSourceType?: null | string @go(DataSourceType,*string)

	// A description of the app.
	description?: null | string @go(Description,*string)

	// Subfolder for the document root for application of type rails.
	documentRoot?: null | string @go(DocumentRoot,*string)

	// A list of virtual host alias.
	domains?: [...null | string] @go(Domains,[]*string)

	// Whether to enable SSL for the app. This must be set in order to let ssl_configuration.private_key, ssl_configuration.certificate and ssl_configuration.chain take effect.
	enableSsl?: null | bool @go(EnableSSL,*bool)

	// Object to define environment variables.  Object is described below.
	environment?: [...#EnvironmentObservation] @go(Environment,[]EnvironmentObservation)

	// The id of the application.
	id?: null | string @go(ID,*string)

	// A human-readable name for the application.
	name?: null | string @go(Name,*string)

	// The name of the Rails environment for application of type rails.
	railsEnv?: null | string @go(RailsEnv,*string)

	// The SSL configuration of the app. Object is described below.
	sslConfiguration?: [...#SSLConfigurationObservation] @go(SSLConfiguration,[]SSLConfigurationObservation)

	// A short, machine-readable name for the application. This can only be defined on resource creation and ignored on resource update.
	shortName?: null | string @go(ShortName,*string)

	// ID of the stack the application will belong to.
	stackId?: null | string @go(StackID,*string)

	// Opsworks application type. One of aws-flow-ruby, java, rails, php, nodejs, static or other.
	type?: null | string @go(Type,*string)
}

#ApplicationParameters: {
	// SCM configuration of the app as described below.
	// +kubebuilder:validation:Optional
	appSource?: [...#AppSourceParameters] @go(AppSource,[]AppSourceParameters)

	// Run bundle install when deploying for application of type rails.
	// +kubebuilder:validation:Optional
	autoBundleOnDeploy?: null | string @go(AutoBundleOnDeploy,*string)

	// Specify activity and workflow workers for your app using the aws-flow gem.
	// +kubebuilder:validation:Optional
	awsFlowRubySettings?: null | string @go(AwsFlowRubySettings,*string)

	// The data source's ARN.
	// +kubebuilder:validation:Optional
	dataSourceArn?: null | string @go(DataSourceArn,*string)

	// The database name.
	// +kubebuilder:validation:Optional
	dataSourceDatabaseName?: null | string @go(DataSourceDatabaseName,*string)

	// The data source's type one of AutoSelectOpsworksMysqlInstance, OpsworksMysqlInstance, or RdsDbInstance.
	// +kubebuilder:validation:Optional
	dataSourceType?: null | string @go(DataSourceType,*string)

	// A description of the app.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Subfolder for the document root for application of type rails.
	// +kubebuilder:validation:Optional
	documentRoot?: null | string @go(DocumentRoot,*string)

	// A list of virtual host alias.
	// +kubebuilder:validation:Optional
	domains?: [...null | string] @go(Domains,[]*string)

	// Whether to enable SSL for the app. This must be set in order to let ssl_configuration.private_key, ssl_configuration.certificate and ssl_configuration.chain take effect.
	// +kubebuilder:validation:Optional
	enableSsl?: null | bool @go(EnableSSL,*bool)

	// Object to define environment variables.  Object is described below.
	// +kubebuilder:validation:Optional
	environment?: [...#EnvironmentParameters] @go(Environment,[]EnvironmentParameters)

	// A human-readable name for the application.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The name of the Rails environment for application of type rails.
	// +kubebuilder:validation:Optional
	railsEnv?: null | string @go(RailsEnv,*string)

	// The SSL configuration of the app. Object is described below.
	// +kubebuilder:validation:Optional
	sslConfiguration?: [...#SSLConfigurationParameters] @go(SSLConfiguration,[]SSLConfigurationParameters)

	// A short, machine-readable name for the application. This can only be defined on resource creation and ignored on resource update.
	// +kubebuilder:validation:Optional
	shortName?: null | string @go(ShortName,*string)

	// ID of the stack the application will belong to.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/opsworks/v1beta1.Stack
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	stackId?: null | string @go(StackID,*string)

	// Reference to a Stack in opsworks to populate stackId.
	// +kubebuilder:validation:Optional
	stackIdRef?: null | v1.#Reference @go(StackIDRef,*v1.Reference)

	// Selector for a Stack in opsworks to populate stackId.
	// +kubebuilder:validation:Optional
	stackIdSelector?: null | v1.#Selector @go(StackIDSelector,*v1.Selector)

	// Opsworks application type. One of aws-flow-ruby, java, rails, php, nodejs, static or other.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

#EnvironmentInitParameters: {
	// Variable name.
	key?: null | string @go(Key,*string)

	// Set visibility of the variable value to true or false.
	secure?: null | bool @go(Secure,*bool)

	// Variable value.
	value?: null | string @go(Value,*string)
}

#EnvironmentObservation: {
	// Variable name.
	key?: null | string @go(Key,*string)

	// Set visibility of the variable value to true or false.
	secure?: null | bool @go(Secure,*bool)

	// Variable value.
	value?: null | string @go(Value,*string)
}

#EnvironmentParameters: {
	// Variable name.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)

	// Set visibility of the variable value to true or false.
	// +kubebuilder:validation:Optional
	secure?: null | bool @go(Secure,*bool)

	// Variable value.
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

#SSLConfigurationInitParameters: {
	// The contents of the certificate's domain.crt file.
	certificate?: null | string @go(Certificate,*string)

	// Can be used to specify an intermediate certificate authority key or client authentication.
	chain?: null | string @go(Chain,*string)
}

#SSLConfigurationObservation: {
	// The contents of the certificate's domain.crt file.
	certificate?: null | string @go(Certificate,*string)

	// Can be used to specify an intermediate certificate authority key or client authentication.
	chain?: null | string @go(Chain,*string)
}

#SSLConfigurationParameters: {
	// The contents of the certificate's domain.crt file.
	// +kubebuilder:validation:Optional
	certificate?: null | string @go(Certificate,*string)

	// Can be used to specify an intermediate certificate authority key or client authentication.
	// +kubebuilder:validation:Optional
	chain?: null | string @go(Chain,*string)

	// The private key; the contents of the certificate's domain.key file.
	// +kubebuilder:validation:Required
	privateKeySecretRef: v1.#SecretKeySelector @go(PrivateKeySecretRef)
}

// ApplicationSpec defines the desired state of Application
#ApplicationSpec: {
	v1.#ResourceSpec
	forProvider: #ApplicationParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ApplicationInitParameters @go(InitProvider)
}

// ApplicationStatus defines the observed state of Application.
#ApplicationStatus: {
	v1.#ResourceStatus
	atProvider?: #ApplicationObservation @go(AtProvider)
}

// Application is the Schema for the Applications API. Provides an OpsWorks application resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Application: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	spec:    #ApplicationSpec   @go(Spec)
	status?: #ApplicationStatus @go(Status)
}

// ApplicationList contains a list of Applications
#ApplicationList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Application] @go(Items,[]Application)
}
