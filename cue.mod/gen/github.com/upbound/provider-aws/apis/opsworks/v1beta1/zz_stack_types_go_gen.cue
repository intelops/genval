// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/opsworks/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#CustomCookbooksSourceInitParameters: {
	// For sources that are version-aware, the revision to use.
	revision?: null | string @go(Revision,*string)

	// The type of source to use. For example, "archive".
	type?: null | string @go(Type,*string)

	// The URL where the cookbooks resource can be found.
	url?: null | string @go(URL,*string)

	// Username to use when authenticating to the source.
	username?: null | string @go(Username,*string)
}

#CustomCookbooksSourceObservation: {
	// For sources that are version-aware, the revision to use.
	revision?: null | string @go(Revision,*string)

	// The type of source to use. For example, "archive".
	type?: null | string @go(Type,*string)

	// The URL where the cookbooks resource can be found.
	url?: null | string @go(URL,*string)

	// Username to use when authenticating to the source.
	username?: null | string @go(Username,*string)
}

#CustomCookbooksSourceParameters: {
	// Password to use when authenticating to the source.
	// +kubebuilder:validation:Optional
	passwordSecretRef?: null | v1.#SecretKeySelector @go(PasswordSecretRef,*v1.SecretKeySelector)

	// For sources that are version-aware, the revision to use.
	// +kubebuilder:validation:Optional
	revision?: null | string @go(Revision,*string)

	// SSH key to use when authenticating to the source.
	// +kubebuilder:validation:Optional
	sshKeySecretRef?: null | v1.#SecretKeySelector @go(SSHKeySecretRef,*v1.SecretKeySelector)

	// The type of source to use. For example, "archive".
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)

	// The URL where the cookbooks resource can be found.
	// +kubebuilder:validation:Optional
	url?: null | string @go(URL,*string)

	// Username to use when authenticating to the source.
	// +kubebuilder:validation:Optional
	username?: null | string @go(Username,*string)
}

#StackInitParameters: {
	// If set to "LATEST", OpsWorks will automatically install the latest version.
	agentVersion?: null | string @go(AgentVersion,*string)

	// If manage_berkshelf is enabled, the version of Berkshelf to use.
	berkshelfVersion?: null | string @go(BerkshelfVersion,*string)

	// Color to paint next to the stack's resources in the OpsWorks console.
	color?: null | string @go(Color,*string)

	// Name of the configuration manager to use. Defaults to "Chef".
	configurationManagerName?: null | string @go(ConfigurationManagerName,*string)

	// Version of the configuration manager to use. Defaults to "11.4".
	configurationManagerVersion?: null | string @go(ConfigurationManagerVersion,*string)

	// When use_custom_cookbooks is set, provide this sub-object as described below.
	customCookbooksSource?: [...#CustomCookbooksSourceInitParameters] @go(CustomCookbooksSource,[]CustomCookbooksSourceInitParameters)

	// User defined JSON passed to "Chef". Use a "here doc" for multiline JSON.
	customJson?: null | string @go(CustomJSON,*string)

	// Name of the availability zone where instances will be created by default.
	// Cannot be set when vpc_id is set.
	defaultAvailabilityZone?: null | string @go(DefaultAvailabilityZone,*string)

	// Name of OS that will be installed on instances by default.
	defaultOs?: null | string @go(DefaultOs,*string)

	// Name of the type of root device instances will have by default.
	defaultRootDeviceType?: null | string @go(DefaultRootDeviceType,*string)

	// Name of the SSH keypair that instances will have by default.
	defaultSshKeyName?: null | string @go(DefaultSSHKeyName,*string)

	// Keyword representing the naming scheme that will be used for instance hostnames within this stack.
	hostnameTheme?: null | string @go(HostnameTheme,*string)

	// Boolean value controlling whether Opsworks will run Berkshelf for this stack.
	manageBerkshelf?: null | bool @go(ManageBerkshelf,*bool)

	// The name of the stack.
	name?: null | string @go(Name,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Boolean value controlling whether the custom cookbook settings are enabled.
	useCustomCookbooks?: null | bool @go(UseCustomCookbooks,*bool)

	// Boolean value controlling whether the standard OpsWorks security groups apply to created instances.
	useOpsworksSecurityGroups?: null | bool @go(UseOpsworksSecurityGroups,*bool)
}

#StackObservation: {
	// If set to "LATEST", OpsWorks will automatically install the latest version.
	agentVersion?: null | string @go(AgentVersion,*string)
	arn?:          null | string @go(Arn,*string)

	// If manage_berkshelf is enabled, the version of Berkshelf to use.
	berkshelfVersion?: null | string @go(BerkshelfVersion,*string)

	// Color to paint next to the stack's resources in the OpsWorks console.
	color?: null | string @go(Color,*string)

	// Name of the configuration manager to use. Defaults to "Chef".
	configurationManagerName?: null | string @go(ConfigurationManagerName,*string)

	// Version of the configuration manager to use. Defaults to "11.4".
	configurationManagerVersion?: null | string @go(ConfigurationManagerVersion,*string)

	// When use_custom_cookbooks is set, provide this sub-object as described below.
	customCookbooksSource?: [...#CustomCookbooksSourceObservation] @go(CustomCookbooksSource,[]CustomCookbooksSourceObservation)

	// User defined JSON passed to "Chef". Use a "here doc" for multiline JSON.
	customJson?: null | string @go(CustomJSON,*string)

	// Name of the availability zone where instances will be created by default.
	// Cannot be set when vpc_id is set.
	defaultAvailabilityZone?: null | string @go(DefaultAvailabilityZone,*string)

	// The ARN of an IAM Instance Profile that created instances will have by default.
	defaultInstanceProfileArn?: null | string @go(DefaultInstanceProfileArn,*string)

	// Name of OS that will be installed on instances by default.
	defaultOs?: null | string @go(DefaultOs,*string)

	// Name of the type of root device instances will have by default.
	defaultRootDeviceType?: null | string @go(DefaultRootDeviceType,*string)

	// Name of the SSH keypair that instances will have by default.
	defaultSshKeyName?: null | string @go(DefaultSSHKeyName,*string)

	// ID of the subnet in which instances will be created by default.
	// Required if vpc_id is set to a VPC other than the default VPC, and forbidden if it isn't.
	defaultSubnetId?: null | string @go(DefaultSubnetID,*string)

	// Keyword representing the naming scheme that will be used for instance hostnames within this stack.
	hostnameTheme?: null | string @go(HostnameTheme,*string)

	// The id of the stack.
	id?: null | string @go(ID,*string)

	// Boolean value controlling whether Opsworks will run Berkshelf for this stack.
	manageBerkshelf?: null | bool @go(ManageBerkshelf,*bool)

	// The name of the stack.
	name?: null | string @go(Name,*string)

	// The name of the region where the stack will exist.
	region?: null | string @go(Region,*string)

	// The ARN of an IAM role that the OpsWorks service will act as.
	serviceRoleArn?: null | string @go(ServiceRoleArn,*string)
	stackEndpoint?:  null | string @go(StackEndpoint,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// Boolean value controlling whether the custom cookbook settings are enabled.
	useCustomCookbooks?: null | bool @go(UseCustomCookbooks,*bool)

	// Boolean value controlling whether the standard OpsWorks security groups apply to created instances.
	useOpsworksSecurityGroups?: null | bool @go(UseOpsworksSecurityGroups,*bool)

	// ID of the VPC that this stack belongs to.
	// Defaults to the region's default VPC.
	vpcId?: null | string @go(VPCID,*string)
}

#StackParameters: {
	// If set to "LATEST", OpsWorks will automatically install the latest version.
	// +kubebuilder:validation:Optional
	agentVersion?: null | string @go(AgentVersion,*string)

	// If manage_berkshelf is enabled, the version of Berkshelf to use.
	// +kubebuilder:validation:Optional
	berkshelfVersion?: null | string @go(BerkshelfVersion,*string)

	// Color to paint next to the stack's resources in the OpsWorks console.
	// +kubebuilder:validation:Optional
	color?: null | string @go(Color,*string)

	// Name of the configuration manager to use. Defaults to "Chef".
	// +kubebuilder:validation:Optional
	configurationManagerName?: null | string @go(ConfigurationManagerName,*string)

	// Version of the configuration manager to use. Defaults to "11.4".
	// +kubebuilder:validation:Optional
	configurationManagerVersion?: null | string @go(ConfigurationManagerVersion,*string)

	// When use_custom_cookbooks is set, provide this sub-object as described below.
	// +kubebuilder:validation:Optional
	customCookbooksSource?: [...#CustomCookbooksSourceParameters] @go(CustomCookbooksSource,[]CustomCookbooksSourceParameters)

	// User defined JSON passed to "Chef". Use a "here doc" for multiline JSON.
	// +kubebuilder:validation:Optional
	customJson?: null | string @go(CustomJSON,*string)

	// Name of the availability zone where instances will be created by default.
	// Cannot be set when vpc_id is set.
	// +kubebuilder:validation:Optional
	defaultAvailabilityZone?: null | string @go(DefaultAvailabilityZone,*string)

	// The ARN of an IAM Instance Profile that created instances will have by default.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.InstanceProfile
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	defaultInstanceProfileArn?: null | string @go(DefaultInstanceProfileArn,*string)

	// Reference to a InstanceProfile in iam to populate defaultInstanceProfileArn.
	// +kubebuilder:validation:Optional
	defaultInstanceProfileArnRef?: null | v1.#Reference @go(DefaultInstanceProfileArnRef,*v1.Reference)

	// Selector for a InstanceProfile in iam to populate defaultInstanceProfileArn.
	// +kubebuilder:validation:Optional
	defaultInstanceProfileArnSelector?: null | v1.#Selector @go(DefaultInstanceProfileArnSelector,*v1.Selector)

	// Name of OS that will be installed on instances by default.
	// +kubebuilder:validation:Optional
	defaultOs?: null | string @go(DefaultOs,*string)

	// Name of the type of root device instances will have by default.
	// +kubebuilder:validation:Optional
	defaultRootDeviceType?: null | string @go(DefaultRootDeviceType,*string)

	// Name of the SSH keypair that instances will have by default.
	// +kubebuilder:validation:Optional
	defaultSshKeyName?: null | string @go(DefaultSSHKeyName,*string)

	// ID of the subnet in which instances will be created by default.
	// Required if vpc_id is set to a VPC other than the default VPC, and forbidden if it isn't.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.Subnet
	// +kubebuilder:validation:Optional
	defaultSubnetId?: null | string @go(DefaultSubnetID,*string)

	// Reference to a Subnet in ec2 to populate defaultSubnetId.
	// +kubebuilder:validation:Optional
	defaultSubnetIdRef?: null | v1.#Reference @go(DefaultSubnetIDRef,*v1.Reference)

	// Selector for a Subnet in ec2 to populate defaultSubnetId.
	// +kubebuilder:validation:Optional
	defaultSubnetIdSelector?: null | v1.#Selector @go(DefaultSubnetIDSelector,*v1.Selector)

	// Keyword representing the naming scheme that will be used for instance hostnames within this stack.
	// +kubebuilder:validation:Optional
	hostnameTheme?: null | string @go(HostnameTheme,*string)

	// Boolean value controlling whether Opsworks will run Berkshelf for this stack.
	// +kubebuilder:validation:Optional
	manageBerkshelf?: null | bool @go(ManageBerkshelf,*bool)

	// The name of the stack.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The name of the region where the stack will exist.
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The ARN of an IAM role that the OpsWorks service will act as.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	serviceRoleArn?: null | string @go(ServiceRoleArn,*string)

	// Reference to a Role in iam to populate serviceRoleArn.
	// +kubebuilder:validation:Optional
	serviceRoleArnRef?: null | v1.#Reference @go(ServiceRoleArnRef,*v1.Reference)

	// Selector for a Role in iam to populate serviceRoleArn.
	// +kubebuilder:validation:Optional
	serviceRoleArnSelector?: null | v1.#Selector @go(ServiceRoleArnSelector,*v1.Selector)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Boolean value controlling whether the custom cookbook settings are enabled.
	// +kubebuilder:validation:Optional
	useCustomCookbooks?: null | bool @go(UseCustomCookbooks,*bool)

	// Boolean value controlling whether the standard OpsWorks security groups apply to created instances.
	// +kubebuilder:validation:Optional
	useOpsworksSecurityGroups?: null | bool @go(UseOpsworksSecurityGroups,*bool)

	// ID of the VPC that this stack belongs to.
	// Defaults to the region's default VPC.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.VPC
	// +kubebuilder:validation:Optional
	vpcId?: null | string @go(VPCID,*string)

	// Reference to a VPC in ec2 to populate vpcId.
	// +kubebuilder:validation:Optional
	vpcIdRef?: null | v1.#Reference @go(VPCIDRef,*v1.Reference)

	// Selector for a VPC in ec2 to populate vpcId.
	// +kubebuilder:validation:Optional
	vpcIdSelector?: null | v1.#Selector @go(VPCIDSelector,*v1.Selector)
}

// StackSpec defines the desired state of Stack
#StackSpec: {
	v1.#ResourceSpec
	forProvider: #StackParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #StackInitParameters @go(InitProvider)
}

// StackStatus defines the observed state of Stack.
#StackStatus: {
	v1.#ResourceStatus
	atProvider?: #StackObservation @go(AtProvider)
}

// Stack is the Schema for the Stacks API. Provides an OpsWorks stack resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Stack: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	spec:    #StackSpec   @go(Spec)
	status?: #StackStatus @go(Status)
}

// StackList contains a list of Stacks
#StackList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Stack] @go(Items,[]Stack)
}
