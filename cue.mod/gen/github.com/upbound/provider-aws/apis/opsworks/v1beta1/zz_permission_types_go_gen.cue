// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/opsworks/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#PermissionInitParameters: {
	// Whether the user is allowed to use SSH to communicate with the instance
	allowSsh?: null | bool @go(AllowSSH,*bool)

	// Whether the user is allowed to use sudo to elevate privileges
	allowSudo?: null | bool @go(AllowSudo,*bool)

	// The users permission level. Mus be one of deny, show, deploy, manage, iam_only
	level?: null | string @go(Level,*string)
}

#PermissionObservation: {
	// Whether the user is allowed to use SSH to communicate with the instance
	allowSsh?: null | bool @go(AllowSSH,*bool)

	// Whether the user is allowed to use sudo to elevate privileges
	allowSudo?: null | bool @go(AllowSudo,*bool)

	// The computed id of the permission. Please note that this is only used internally to identify the permission. This value is not used in aws.
	id?: null | string @go(ID,*string)

	// The users permission level. Mus be one of deny, show, deploy, manage, iam_only
	level?: null | string @go(Level,*string)

	// The stack to set the permissions for
	stackId?: null | string @go(StackID,*string)

	// The user's IAM ARN to set permissions for
	userArn?: null | string @go(UserArn,*string)
}

#PermissionParameters: {
	// Whether the user is allowed to use SSH to communicate with the instance
	// +kubebuilder:validation:Optional
	allowSsh?: null | bool @go(AllowSSH,*bool)

	// Whether the user is allowed to use sudo to elevate privileges
	// +kubebuilder:validation:Optional
	allowSudo?: null | bool @go(AllowSudo,*bool)

	// The users permission level. Mus be one of deny, show, deploy, manage, iam_only
	// +kubebuilder:validation:Optional
	level?: null | string @go(Level,*string)

	// The stack to set the permissions for
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/opsworks/v1beta1.Stack
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	stackId?: null | string @go(StackID,*string)

	// Reference to a Stack in opsworks to populate stackId.
	// +kubebuilder:validation:Optional
	stackIdRef?: null | v1.#Reference @go(StackIDRef,*v1.Reference)

	// Selector for a Stack in opsworks to populate stackId.
	// +kubebuilder:validation:Optional
	stackIdSelector?: null | v1.#Selector @go(StackIDSelector,*v1.Selector)

	// The user's IAM ARN to set permissions for
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.User
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	userArn?: null | string @go(UserArn,*string)

	// Reference to a User in iam to populate userArn.
	// +kubebuilder:validation:Optional
	userArnRef?: null | v1.#Reference @go(UserArnRef,*v1.Reference)

	// Selector for a User in iam to populate userArn.
	// +kubebuilder:validation:Optional
	userArnSelector?: null | v1.#Selector @go(UserArnSelector,*v1.Selector)
}

// PermissionSpec defines the desired state of Permission
#PermissionSpec: {
	v1.#ResourceSpec
	forProvider: #PermissionParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #PermissionInitParameters @go(InitProvider)
}

// PermissionStatus defines the observed state of Permission.
#PermissionStatus: {
	v1.#ResourceStatus
	atProvider?: #PermissionObservation @go(AtProvider)
}

// Permission is the Schema for the Permissions API. Provides an OpsWorks permission resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Permission: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec:      #PermissionSpec    @go(Spec)
	status?:   #PermissionStatus  @go(Status)
}

// PermissionList contains a list of Permissions
#PermissionList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Permission] @go(Items,[]Permission)
}
