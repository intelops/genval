// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/codepipeline/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#ActionInitParameters: {
	// A category defines what kind of action can be taken in the stage, and constrains the provider type for the action. Possible values are Approval, Build, Deploy, Invoke, Source and Test.
	category?: null | string @go(Category,*string)

	// A map of the action declaration's configuration. Configurations options for action types and providers can be found in the Pipeline Structure Reference and Action Structure Reference documentation.
	configuration?: {[string]: null | string} @go(Configuration,map[string]*string)

	// A list of artifact names to be worked on.
	inputArtifacts?: [...null | string] @go(InputArtifacts,[]*string)

	// The action declaration's name.
	name?: null | string @go(Name,*string)

	// The namespace all output variables will be accessed from.
	namespace?: null | string @go(Namespace,*string)

	// A list of artifact names to output. Output artifact names must be unique within a pipeline.
	outputArtifacts?: [...null | string] @go(OutputArtifacts,[]*string)

	// The creator of the action being called. Possible values are AWS, Custom and ThirdParty.
	owner?: null | string @go(Owner,*string)

	// The provider of the service being called by the action. Valid providers are determined by the action category. Provider names are listed in the Action Structure Reference documentation.
	provider?: null | string @go(Provider,*string)

	// The ARN of the IAM service role that will perform the declared action. This is assumed through the roleArn for the pipeline.
	roleArn?: null | string @go(RoleArn,*string)

	// The order in which actions are run.
	runOrder?: null | float64 @go(RunOrder,*float64)

	// A string that identifies the action type.
	version?: null | string @go(Version,*string)
}

#ActionObservation: {
	// A category defines what kind of action can be taken in the stage, and constrains the provider type for the action. Possible values are Approval, Build, Deploy, Invoke, Source and Test.
	category?: null | string @go(Category,*string)

	// A map of the action declaration's configuration. Configurations options for action types and providers can be found in the Pipeline Structure Reference and Action Structure Reference documentation.
	configuration?: {[string]: null | string} @go(Configuration,map[string]*string)

	// A list of artifact names to be worked on.
	inputArtifacts?: [...null | string] @go(InputArtifacts,[]*string)

	// The action declaration's name.
	name?: null | string @go(Name,*string)

	// The namespace all output variables will be accessed from.
	namespace?: null | string @go(Namespace,*string)

	// A list of artifact names to output. Output artifact names must be unique within a pipeline.
	outputArtifacts?: [...null | string] @go(OutputArtifacts,[]*string)

	// The creator of the action being called. Possible values are AWS, Custom and ThirdParty.
	owner?: null | string @go(Owner,*string)

	// The provider of the service being called by the action. Valid providers are determined by the action category. Provider names are listed in the Action Structure Reference documentation.
	provider?: null | string @go(Provider,*string)

	// The region in which to run the action.
	region?: null | string @go(Region,*string)

	// The ARN of the IAM service role that will perform the declared action. This is assumed through the roleArn for the pipeline.
	roleArn?: null | string @go(RoleArn,*string)

	// The order in which actions are run.
	runOrder?: null | float64 @go(RunOrder,*float64)

	// A string that identifies the action type.
	version?: null | string @go(Version,*string)
}

#ActionParameters: {
	// A category defines what kind of action can be taken in the stage, and constrains the provider type for the action. Possible values are Approval, Build, Deploy, Invoke, Source and Test.
	// +kubebuilder:validation:Optional
	category?: null | string @go(Category,*string)

	// A map of the action declaration's configuration. Configurations options for action types and providers can be found in the Pipeline Structure Reference and Action Structure Reference documentation.
	// +kubebuilder:validation:Optional
	configuration?: {[string]: null | string} @go(Configuration,map[string]*string)

	// A list of artifact names to be worked on.
	// +kubebuilder:validation:Optional
	inputArtifacts?: [...null | string] @go(InputArtifacts,[]*string)

	// The action declaration's name.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The namespace all output variables will be accessed from.
	// +kubebuilder:validation:Optional
	namespace?: null | string @go(Namespace,*string)

	// A list of artifact names to output. Output artifact names must be unique within a pipeline.
	// +kubebuilder:validation:Optional
	outputArtifacts?: [...null | string] @go(OutputArtifacts,[]*string)

	// The creator of the action being called. Possible values are AWS, Custom and ThirdParty.
	// +kubebuilder:validation:Optional
	owner?: null | string @go(Owner,*string)

	// The provider of the service being called by the action. Valid providers are determined by the action category. Provider names are listed in the Action Structure Reference documentation.
	// +kubebuilder:validation:Optional
	provider?: null | string @go(Provider,*string)

	// The region in which to run the action.
	// +kubebuilder:validation:Optional
	region?: null | string @go(Region,*string)

	// The ARN of the IAM service role that will perform the declared action. This is assumed through the roleArn for the pipeline.
	// +kubebuilder:validation:Optional
	roleArn?: null | string @go(RoleArn,*string)

	// The order in which actions are run.
	// +kubebuilder:validation:Optional
	runOrder?: null | float64 @go(RunOrder,*float64)

	// A string that identifies the action type.
	// +kubebuilder:validation:Optional
	version?: null | string @go(Version,*string)
}

#ArtifactStoreInitParameters: {
	// The encryption key block AWS CodePipeline uses to encrypt the data in the artifact store, such as an AWS Key Management Service (AWS KMS) key. If you don't specify a key, AWS CodePipeline uses the default key for Amazon Simple Storage Service (Amazon S3). An encryption_key block is documented below.
	encryptionKey?: [...#EncryptionKeyInitParameters] @go(EncryptionKey,[]EncryptionKeyInitParameters)

	// The type of the artifact store, such as Amazon S3
	type?: null | string @go(Type,*string)
}

#ArtifactStoreObservation: {
	// The encryption key block AWS CodePipeline uses to encrypt the data in the artifact store, such as an AWS Key Management Service (AWS KMS) key. If you don't specify a key, AWS CodePipeline uses the default key for Amazon Simple Storage Service (Amazon S3). An encryption_key block is documented below.
	encryptionKey?: [...#EncryptionKeyObservation] @go(EncryptionKey,[]EncryptionKeyObservation)

	// The location where AWS CodePipeline stores artifacts for a pipeline; currently only S3 is supported.
	location?: null | string @go(Location,*string)

	// The region where the artifact store is located. Required for a cross-region CodePipeline, do not provide for a single-region CodePipeline.
	region?: null | string @go(Region,*string)

	// The type of the artifact store, such as Amazon S3
	type?: null | string @go(Type,*string)
}

#ArtifactStoreParameters: {
	// The encryption key block AWS CodePipeline uses to encrypt the data in the artifact store, such as an AWS Key Management Service (AWS KMS) key. If you don't specify a key, AWS CodePipeline uses the default key for Amazon Simple Storage Service (Amazon S3). An encryption_key block is documented below.
	// +kubebuilder:validation:Optional
	encryptionKey?: [...#EncryptionKeyParameters] @go(EncryptionKey,[]EncryptionKeyParameters)

	// The location where AWS CodePipeline stores artifacts for a pipeline; currently only S3 is supported.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/s3/v1beta1.Bucket
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// Reference to a Bucket in s3 to populate location.
	// +kubebuilder:validation:Optional
	locationRef?: null | v1.#Reference @go(LocationRef,*v1.Reference)

	// Selector for a Bucket in s3 to populate location.
	// +kubebuilder:validation:Optional
	locationSelector?: null | v1.#Selector @go(LocationSelector,*v1.Selector)

	// The region where the artifact store is located. Required for a cross-region CodePipeline, do not provide for a single-region CodePipeline.
	// +kubebuilder:validation:Optional
	region?: null | string @go(Region,*string)

	// The type of the artifact store, such as Amazon S3
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

#CodepipelineInitParameters: {
	// One or more artifact_store blocks. Artifact stores are documented below.
	artifactStore?: [...#ArtifactStoreInitParameters] @go(ArtifactStore,[]ArtifactStoreInitParameters)

	// (Minimum of at least two stage blocks is required) A stage block. Stages are documented below.
	stage?: [...#StageInitParameters] @go(Stage,[]StageInitParameters)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#CodepipelineObservation: {
	// The codepipeline ARN.
	arn?: null | string @go(Arn,*string)

	// One or more artifact_store blocks. Artifact stores are documented below.
	artifactStore?: [...#ArtifactStoreObservation] @go(ArtifactStore,[]ArtifactStoreObservation)

	// The codepipeline ID.
	id?: null | string @go(ID,*string)

	// A service role Amazon Resource Name (ARN) that grants AWS CodePipeline permission to make calls to AWS services on your behalf.
	roleArn?: null | string @go(RoleArn,*string)

	// (Minimum of at least two stage blocks is required) A stage block. Stages are documented below.
	stage?: [...#StageObservation] @go(Stage,[]StageObservation)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#CodepipelineParameters: {
	// One or more artifact_store blocks. Artifact stores are documented below.
	// +kubebuilder:validation:Optional
	artifactStore?: [...#ArtifactStoreParameters] @go(ArtifactStore,[]ArtifactStoreParameters)

	// The region in which to run the action.
	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// A service role Amazon Resource Name (ARN) that grants AWS CodePipeline permission to make calls to AWS services on your behalf.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	roleArn?: null | string @go(RoleArn,*string)

	// Reference to a Role in iam to populate roleArn.
	// +kubebuilder:validation:Optional
	roleArnRef?: null | v1.#Reference @go(RoleArnRef,*v1.Reference)

	// Selector for a Role in iam to populate roleArn.
	// +kubebuilder:validation:Optional
	roleArnSelector?: null | v1.#Selector @go(RoleArnSelector,*v1.Selector)

	// (Minimum of at least two stage blocks is required) A stage block. Stages are documented below.
	// +kubebuilder:validation:Optional
	stage?: [...#StageParameters] @go(Stage,[]StageParameters)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#EncryptionKeyInitParameters: {
	// The KMS key ARN or ID
	id?: null | string @go(ID,*string)

	// The type of key; currently only KMS is supported
	type?: null | string @go(Type,*string)
}

#EncryptionKeyObservation: {
	// The KMS key ARN or ID
	id?: null | string @go(ID,*string)

	// The type of key; currently only KMS is supported
	type?: null | string @go(Type,*string)
}

#EncryptionKeyParameters: {
	// The KMS key ARN or ID
	// +kubebuilder:validation:Optional
	id?: null | string @go(ID,*string)

	// The type of key; currently only KMS is supported
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

#StageInitParameters: {
	// The action(s) to include in the stage. Defined as an action block below
	action?: [...#ActionInitParameters] @go(Action,[]ActionInitParameters)

	// The name of the stage.
	name?: null | string @go(Name,*string)
}

#StageObservation: {
	// The action(s) to include in the stage. Defined as an action block below
	action?: [...#ActionObservation] @go(Action,[]ActionObservation)

	// The name of the stage.
	name?: null | string @go(Name,*string)
}

#StageParameters: {
	// The action(s) to include in the stage. Defined as an action block below
	// +kubebuilder:validation:Optional
	action: [...#ActionParameters] @go(Action,[]ActionParameters)

	// The name of the stage.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)
}

// CodepipelineSpec defines the desired state of Codepipeline
#CodepipelineSpec: {
	v1.#ResourceSpec
	forProvider: #CodepipelineParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #CodepipelineInitParameters @go(InitProvider)
}

// CodepipelineStatus defines the observed state of Codepipeline.
#CodepipelineStatus: {
	v1.#ResourceStatus
	atProvider?: #CodepipelineObservation @go(AtProvider)
}

// Codepipeline is the Schema for the Codepipelines API. Provides a CodePipeline
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Codepipeline: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.artifactStore) || (has(self.initProvider) && has(self.initProvider.artifactStore))",message="spec.forProvider.artifactStore is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.stage) || (has(self.initProvider) && has(self.initProvider.stage))",message="spec.forProvider.stage is a required parameter"
	spec:    #CodepipelineSpec   @go(Spec)
	status?: #CodepipelineStatus @go(Status)
}

// CodepipelineList contains a list of Codepipelines
#CodepipelineList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Codepipeline] @go(Items,[]Codepipeline)
}
