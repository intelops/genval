// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/configservice/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#DeliveryChannelInitParameters: {
	// The ARN of the AWS KMS key used to encrypt objects delivered by AWS Config. Must belong to the same Region as the destination S3 bucket.
	s3KmsKeyArn?: null | string @go(S3KMSKeyArn,*string)

	// The prefix for the specified S3 bucket.
	s3KeyPrefix?: null | string @go(S3KeyPrefix,*string)

	// Options for how AWS Config delivers configuration snapshots. See below
	snapshotDeliveryProperties?: [...#SnapshotDeliveryPropertiesInitParameters] @go(SnapshotDeliveryProperties,[]SnapshotDeliveryPropertiesInitParameters)

	// The ARN of the SNS topic that AWS Config delivers notifications to.
	snsTopicArn?: null | string @go(SnsTopicArn,*string)
}

#DeliveryChannelObservation: {
	// The name of the delivery channel.
	id?: null | string @go(ID,*string)

	// The name of the S3 bucket used to store the configuration history.
	s3BucketName?: null | string @go(S3BucketName,*string)

	// The ARN of the AWS KMS key used to encrypt objects delivered by AWS Config. Must belong to the same Region as the destination S3 bucket.
	s3KmsKeyArn?: null | string @go(S3KMSKeyArn,*string)

	// The prefix for the specified S3 bucket.
	s3KeyPrefix?: null | string @go(S3KeyPrefix,*string)

	// Options for how AWS Config delivers configuration snapshots. See below
	snapshotDeliveryProperties?: [...#SnapshotDeliveryPropertiesObservation] @go(SnapshotDeliveryProperties,[]SnapshotDeliveryPropertiesObservation)

	// The ARN of the SNS topic that AWS Config delivers notifications to.
	snsTopicArn?: null | string @go(SnsTopicArn,*string)
}

#DeliveryChannelParameters: {
	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The name of the S3 bucket used to store the configuration history.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/s3/v1beta1.Bucket
	// +kubebuilder:validation:Optional
	s3BucketName?: null | string @go(S3BucketName,*string)

	// Reference to a Bucket in s3 to populate s3BucketName.
	// +kubebuilder:validation:Optional
	s3BucketNameRef?: null | v1.#Reference @go(S3BucketNameRef,*v1.Reference)

	// Selector for a Bucket in s3 to populate s3BucketName.
	// +kubebuilder:validation:Optional
	s3BucketNameSelector?: null | v1.#Selector @go(S3BucketNameSelector,*v1.Selector)

	// The ARN of the AWS KMS key used to encrypt objects delivered by AWS Config. Must belong to the same Region as the destination S3 bucket.
	// +kubebuilder:validation:Optional
	s3KmsKeyArn?: null | string @go(S3KMSKeyArn,*string)

	// The prefix for the specified S3 bucket.
	// +kubebuilder:validation:Optional
	s3KeyPrefix?: null | string @go(S3KeyPrefix,*string)

	// Options for how AWS Config delivers configuration snapshots. See below
	// +kubebuilder:validation:Optional
	snapshotDeliveryProperties?: [...#SnapshotDeliveryPropertiesParameters] @go(SnapshotDeliveryProperties,[]SnapshotDeliveryPropertiesParameters)

	// The ARN of the SNS topic that AWS Config delivers notifications to.
	// +kubebuilder:validation:Optional
	snsTopicArn?: null | string @go(SnsTopicArn,*string)
}

#SnapshotDeliveryPropertiesInitParameters: {
	// - The frequency with which AWS Config recurringly delivers configuration snapshotsE.g., One_Hour or Three_Hours. Valid values are listed here.
	deliveryFrequency?: null | string @go(DeliveryFrequency,*string)
}

#SnapshotDeliveryPropertiesObservation: {
	// - The frequency with which AWS Config recurringly delivers configuration snapshotsE.g., One_Hour or Three_Hours. Valid values are listed here.
	deliveryFrequency?: null | string @go(DeliveryFrequency,*string)
}

#SnapshotDeliveryPropertiesParameters: {
	// - The frequency with which AWS Config recurringly delivers configuration snapshotsE.g., One_Hour or Three_Hours. Valid values are listed here.
	// +kubebuilder:validation:Optional
	deliveryFrequency?: null | string @go(DeliveryFrequency,*string)
}

// DeliveryChannelSpec defines the desired state of DeliveryChannel
#DeliveryChannelSpec: {
	v1.#ResourceSpec
	forProvider: #DeliveryChannelParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #DeliveryChannelInitParameters @go(InitProvider)
}

// DeliveryChannelStatus defines the observed state of DeliveryChannel.
#DeliveryChannelStatus: {
	v1.#ResourceStatus
	atProvider?: #DeliveryChannelObservation @go(AtProvider)
}

// DeliveryChannel is the Schema for the DeliveryChannels API. Provides an AWS Config Delivery Channel.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#DeliveryChannel: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta     @go(ObjectMeta)
	spec:      #DeliveryChannelSpec   @go(Spec)
	status?:   #DeliveryChannelStatus @go(Status)
}

// DeliveryChannelList contains a list of DeliveryChannels
#DeliveryChannelList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#DeliveryChannel] @go(Items,[]DeliveryChannel)
}
