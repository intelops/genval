// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/efs/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#BackupPolicyBackupPolicyInitParameters: {
	// A status of the backup policy. Valid values: ENABLED, DISABLED.
	status?: null | string @go(Status,*string)
}

#BackupPolicyBackupPolicyObservation: {
	// A status of the backup policy. Valid values: ENABLED, DISABLED.
	status?: null | string @go(Status,*string)
}

#BackupPolicyBackupPolicyParameters: {
	// A status of the backup policy. Valid values: ENABLED, DISABLED.
	// +kubebuilder:validation:Optional
	status?: null | string @go(Status,*string)
}

#BackupPolicyInitParameters: {
	// A backup_policy object (documented below).
	backupPolicy?: [...#BackupPolicyBackupPolicyInitParameters] @go(BackupPolicy,[]BackupPolicyBackupPolicyInitParameters)
}

#BackupPolicyObservation: {
	// A backup_policy object (documented below).
	backupPolicy?: [...#BackupPolicyBackupPolicyObservation] @go(BackupPolicy,[]BackupPolicyBackupPolicyObservation)

	// The ID of the EFS file system.
	fileSystemId?: null | string @go(FileSystemID,*string)

	// The ID that identifies the file system (e.g., fs-ccfc0d65).
	id?: null | string @go(ID,*string)
}

#BackupPolicyParameters: {
	// A backup_policy object (documented below).
	// +kubebuilder:validation:Optional
	backupPolicy?: [...#BackupPolicyBackupPolicyParameters] @go(BackupPolicy,[]BackupPolicyBackupPolicyParameters)

	// The ID of the EFS file system.
	// +crossplane:generate:reference:type=FileSystem
	// +kubebuilder:validation:Optional
	fileSystemId?: null | string @go(FileSystemID,*string)

	// Reference to a FileSystem to populate fileSystemId.
	// +kubebuilder:validation:Optional
	fileSystemIdRef?: null | v1.#Reference @go(FileSystemIDRef,*v1.Reference)

	// Selector for a FileSystem to populate fileSystemId.
	// +kubebuilder:validation:Optional
	fileSystemIdSelector?: null | v1.#Selector @go(FileSystemIDSelector,*v1.Selector)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)
}

// BackupPolicySpec defines the desired state of BackupPolicy
#BackupPolicySpec: {
	v1.#ResourceSpec
	forProvider: #BackupPolicyParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #BackupPolicyInitParameters @go(InitProvider)
}

// BackupPolicyStatus defines the observed state of BackupPolicy.
#BackupPolicyStatus: {
	v1.#ResourceStatus
	atProvider?: #BackupPolicyObservation @go(AtProvider)
}

// BackupPolicy is the Schema for the BackupPolicys API. Provides an Elastic File System (EFS) Backup Policy resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#BackupPolicy: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.backupPolicy) || (has(self.initProvider) && has(self.initProvider.backupPolicy))",message="spec.forProvider.backupPolicy is a required parameter"
	spec:    #BackupPolicySpec   @go(Spec)
	status?: #BackupPolicyStatus @go(Status)
}

// BackupPolicyList contains a list of BackupPolicys
#BackupPolicyList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#BackupPolicy] @go(Items,[]BackupPolicy)
}
