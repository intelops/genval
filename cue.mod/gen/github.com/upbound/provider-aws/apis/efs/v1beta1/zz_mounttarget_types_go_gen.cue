// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/efs/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#MountTargetInitParameters: {
	// The address (within the address range of the specified subnet) at
	// which the file system may be mounted via the mount target.
	ipAddress?: null | string @go(IPAddress,*string)
}

#MountTargetObservation: {
	// The unique and consistent identifier of the Availability Zone (AZ) that the mount target resides in.
	availabilityZoneId?: null | string @go(AvailabilityZoneID,*string)

	// The name of the Availability Zone (AZ) that the mount target resides in.
	availabilityZoneName?: null | string @go(AvailabilityZoneName,*string)

	// The DNS name for the EFS file system.
	dnsName?: null | string @go(DNSName,*string)

	// Amazon Resource Name of the file system.
	fileSystemArn?: null | string @go(FileSystemArn,*string)

	// The ID of the file system for which the mount target is intended.
	fileSystemId?: null | string @go(FileSystemID,*string)

	// The ID of the mount target.
	id?: null | string @go(ID,*string)

	// The address (within the address range of the specified subnet) at
	// which the file system may be mounted via the mount target.
	ipAddress?: null | string @go(IPAddress,*string)

	// The DNS name for the given subnet/AZ per documented convention.
	mountTargetDnsName?: null | string @go(MountTargetDNSName,*string)

	// The ID of the network interface that Amazon EFS created when it created the mount target.
	networkInterfaceId?: null | string @go(NetworkInterfaceID,*string)

	// AWS account ID that owns the resource.
	ownerId?: null | string @go(OwnerID,*string)

	// A list of up to 5 VPC security group IDs (that must
	// be for the same VPC as subnet specified) in effect for the mount target.
	securityGroups?: [...null | string] @go(SecurityGroups,[]*string)

	// The ID of the subnet to add the mount target in.
	subnetId?: null | string @go(SubnetID,*string)
}

#MountTargetParameters: {
	// The ID of the file system for which the mount target is intended.
	// +crossplane:generate:reference:type=FileSystem
	// +kubebuilder:validation:Optional
	fileSystemId?: null | string @go(FileSystemID,*string)

	// Reference to a FileSystem to populate fileSystemId.
	// +kubebuilder:validation:Optional
	fileSystemIdRef?: null | v1.#Reference @go(FileSystemIDRef,*v1.Reference)

	// Selector for a FileSystem to populate fileSystemId.
	// +kubebuilder:validation:Optional
	fileSystemIdSelector?: null | v1.#Selector @go(FileSystemIDSelector,*v1.Selector)

	// The address (within the address range of the specified subnet) at
	// which the file system may be mounted via the mount target.
	// +kubebuilder:validation:Optional
	ipAddress?: null | string @go(IPAddress,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// A list of up to 5 VPC security group IDs (that must
	// be for the same VPC as subnet specified) in effect for the mount target.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.SecurityGroup
	// +kubebuilder:validation:Optional
	securityGroups?: [...null | string] @go(SecurityGroups,[]*string)

	// References to SecurityGroup in ec2 to populate securityGroups.
	// +kubebuilder:validation:Optional
	securityGroupsRefs?: [...v1.#Reference] @go(SecurityGroupsRefs,[]v1.Reference)

	// Selector for a list of SecurityGroup in ec2 to populate securityGroups.
	// +kubebuilder:validation:Optional
	securityGroupsSelector?: null | v1.#Selector @go(SecurityGroupsSelector,*v1.Selector)

	// The ID of the subnet to add the mount target in.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.Subnet
	// +kubebuilder:validation:Optional
	subnetId?: null | string @go(SubnetID,*string)

	// Reference to a Subnet in ec2 to populate subnetId.
	// +kubebuilder:validation:Optional
	subnetIdRef?: null | v1.#Reference @go(SubnetIDRef,*v1.Reference)

	// Selector for a Subnet in ec2 to populate subnetId.
	// +kubebuilder:validation:Optional
	subnetIdSelector?: null | v1.#Selector @go(SubnetIDSelector,*v1.Selector)
}

// MountTargetSpec defines the desired state of MountTarget
#MountTargetSpec: {
	v1.#ResourceSpec
	forProvider: #MountTargetParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #MountTargetInitParameters @go(InitProvider)
}

// MountTargetStatus defines the observed state of MountTarget.
#MountTargetStatus: {
	v1.#ResourceStatus
	atProvider?: #MountTargetObservation @go(AtProvider)
}

// MountTarget is the Schema for the MountTargets API. Provides an Elastic File System (EFS) mount target.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#MountTarget: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec:      #MountTargetSpec   @go(Spec)
	status?:   #MountTargetStatus @go(Status)
}

// MountTargetList contains a list of MountTargets
#MountTargetList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#MountTarget] @go(Items,[]MountTarget)
}
