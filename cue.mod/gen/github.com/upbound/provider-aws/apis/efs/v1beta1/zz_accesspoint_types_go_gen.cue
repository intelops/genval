// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/efs/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#AccessPointInitParameters: {
	// Operating system user and group applied to all file system requests made using the access point. Detailed below.
	posixUser?: [...#PosixUserInitParameters] @go(PosixUser,[]PosixUserInitParameters)

	// Directory on the Amazon EFS file system that the access point provides access to. Detailed below.
	rootDirectory?: [...#RootDirectoryInitParameters] @go(RootDirectory,[]RootDirectoryInitParameters)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#AccessPointObservation: {
	// ARN of the access point.
	arn?: null | string @go(Arn,*string)

	// ARN of the file system.
	fileSystemArn?: null | string @go(FileSystemArn,*string)

	// ID of the file system for which the access point is intended.
	fileSystemId?: null | string @go(FileSystemID,*string)

	// ID of the access point.
	id?: null | string @go(ID,*string)

	// ID of the access point.
	ownerId?: null | string @go(OwnerID,*string)

	// Operating system user and group applied to all file system requests made using the access point. Detailed below.
	posixUser?: [...#PosixUserObservation] @go(PosixUser,[]PosixUserObservation)

	// Directory on the Amazon EFS file system that the access point provides access to. Detailed below.
	rootDirectory?: [...#RootDirectoryObservation] @go(RootDirectory,[]RootDirectoryObservation)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#AccessPointParameters: {
	// ID of the file system for which the access point is intended.
	// +crossplane:generate:reference:type=FileSystem
	// +kubebuilder:validation:Optional
	fileSystemId?: null | string @go(FileSystemID,*string)

	// Reference to a FileSystem to populate fileSystemId.
	// +kubebuilder:validation:Optional
	fileSystemIdRef?: null | v1.#Reference @go(FileSystemIDRef,*v1.Reference)

	// Selector for a FileSystem to populate fileSystemId.
	// +kubebuilder:validation:Optional
	fileSystemIdSelector?: null | v1.#Selector @go(FileSystemIDSelector,*v1.Selector)

	// Operating system user and group applied to all file system requests made using the access point. Detailed below.
	// +kubebuilder:validation:Optional
	posixUser?: [...#PosixUserParameters] @go(PosixUser,[]PosixUserParameters)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Directory on the Amazon EFS file system that the access point provides access to. Detailed below.
	// +kubebuilder:validation:Optional
	rootDirectory?: [...#RootDirectoryParameters] @go(RootDirectory,[]RootDirectoryParameters)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#CreationInfoInitParameters: {
	// POSIX group ID to apply to the root_directory.
	ownerGid?: null | float64 @go(OwnerGID,*float64)

	// POSIX user ID to apply to the root_directory.
	ownerUid?: null | float64 @go(OwnerUID,*float64)

	// POSIX permissions to apply to the RootDirectory, in the format of an octal number representing the file's mode bits.
	permissions?: null | string @go(Permissions,*string)
}

#CreationInfoObservation: {
	// POSIX group ID to apply to the root_directory.
	ownerGid?: null | float64 @go(OwnerGID,*float64)

	// POSIX user ID to apply to the root_directory.
	ownerUid?: null | float64 @go(OwnerUID,*float64)

	// POSIX permissions to apply to the RootDirectory, in the format of an octal number representing the file's mode bits.
	permissions?: null | string @go(Permissions,*string)
}

#CreationInfoParameters: {
	// POSIX group ID to apply to the root_directory.
	// +kubebuilder:validation:Optional
	ownerGid?: null | float64 @go(OwnerGID,*float64)

	// POSIX user ID to apply to the root_directory.
	// +kubebuilder:validation:Optional
	ownerUid?: null | float64 @go(OwnerUID,*float64)

	// POSIX permissions to apply to the RootDirectory, in the format of an octal number representing the file's mode bits.
	// +kubebuilder:validation:Optional
	permissions?: null | string @go(Permissions,*string)
}

#PosixUserInitParameters: {
	// POSIX group ID used for all file system operations using this access point.
	gid?: null | float64 @go(GID,*float64)

	// Secondary POSIX group IDs used for all file system operations using this access point.
	secondaryGids?: [...null | float64] @go(SecondaryGids,[]*float64)

	// POSIX user ID used for all file system operations using this access point.
	uid?: null | float64 @go(UID,*float64)
}

#PosixUserObservation: {
	// POSIX group ID used for all file system operations using this access point.
	gid?: null | float64 @go(GID,*float64)

	// Secondary POSIX group IDs used for all file system operations using this access point.
	secondaryGids?: [...null | float64] @go(SecondaryGids,[]*float64)

	// POSIX user ID used for all file system operations using this access point.
	uid?: null | float64 @go(UID,*float64)
}

#PosixUserParameters: {
	// POSIX group ID used for all file system operations using this access point.
	// +kubebuilder:validation:Optional
	gid?: null | float64 @go(GID,*float64)

	// Secondary POSIX group IDs used for all file system operations using this access point.
	// +kubebuilder:validation:Optional
	secondaryGids?: [...null | float64] @go(SecondaryGids,[]*float64)

	// POSIX user ID used for all file system operations using this access point.
	// +kubebuilder:validation:Optional
	uid?: null | float64 @go(UID,*float64)
}

#RootDirectoryInitParameters: {
	// POSIX IDs and permissions to apply to the access point's Root Directory. See Creation Info below.
	creationInfo?: [...#CreationInfoInitParameters] @go(CreationInfo,[]CreationInfoInitParameters)

	// Path on the EFS file system to expose as the root directory to NFS clients using the access point to access the EFS file system. A path can have up to four subdirectories. If the specified path does not exist, you are required to provide creation_info.
	path?: null | string @go(Path,*string)
}

#RootDirectoryObservation: {
	// POSIX IDs and permissions to apply to the access point's Root Directory. See Creation Info below.
	creationInfo?: [...#CreationInfoObservation] @go(CreationInfo,[]CreationInfoObservation)

	// Path on the EFS file system to expose as the root directory to NFS clients using the access point to access the EFS file system. A path can have up to four subdirectories. If the specified path does not exist, you are required to provide creation_info.
	path?: null | string @go(Path,*string)
}

#RootDirectoryParameters: {
	// POSIX IDs and permissions to apply to the access point's Root Directory. See Creation Info below.
	// +kubebuilder:validation:Optional
	creationInfo?: [...#CreationInfoParameters] @go(CreationInfo,[]CreationInfoParameters)

	// Path on the EFS file system to expose as the root directory to NFS clients using the access point to access the EFS file system. A path can have up to four subdirectories. If the specified path does not exist, you are required to provide creation_info.
	// +kubebuilder:validation:Optional
	path?: null | string @go(Path,*string)
}

// AccessPointSpec defines the desired state of AccessPoint
#AccessPointSpec: {
	v1.#ResourceSpec
	forProvider: #AccessPointParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #AccessPointInitParameters @go(InitProvider)
}

// AccessPointStatus defines the observed state of AccessPoint.
#AccessPointStatus: {
	v1.#ResourceStatus
	atProvider?: #AccessPointObservation @go(AtProvider)
}

// AccessPoint is the Schema for the AccessPoints API. Provides an Elastic File System (EFS) access point.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#AccessPoint: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec:      #AccessPointSpec   @go(Spec)
	status?:   #AccessPointStatus @go(Status)
}

// AccessPointList contains a list of AccessPoints
#AccessPointList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#AccessPoint] @go(Items,[]AccessPoint)
}
