// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/qldb/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#LedgerInitParameters: {
	// The deletion protection for the QLDB Ledger instance. By default it is true.
	deletionProtection?: null | bool @go(DeletionProtection,*bool)

	// The permissions mode for the QLDB ledger instance. Specify either ALLOW_ALL or STANDARD.
	permissionsMode?: null | string @go(PermissionsMode,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#LedgerObservation: {
	// The ARN of the QLDB Ledger
	arn?: null | string @go(Arn,*string)

	// The deletion protection for the QLDB Ledger instance. By default it is true.
	deletionProtection?: null | bool @go(DeletionProtection,*bool)

	// The Name of the QLDB Ledger
	id?: null | string @go(ID,*string)

	// The key in AWS Key Management Service (AWS KMS) to use for encryption of data at rest in the ledger. For more information, see the AWS documentation. Valid values are "AWS_OWNED_KMS_KEY" to use an AWS KMS key that is owned and managed by AWS on your behalf, or the ARN of a valid symmetric customer managed KMS key.
	kmsKey?: null | string @go(KMSKey,*string)

	// The permissions mode for the QLDB ledger instance. Specify either ALLOW_ALL or STANDARD.
	permissionsMode?: null | string @go(PermissionsMode,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#LedgerParameters: {
	// The deletion protection for the QLDB Ledger instance. By default it is true.
	// +kubebuilder:validation:Optional
	deletionProtection?: null | bool @go(DeletionProtection,*bool)

	// The key in AWS Key Management Service (AWS KMS) to use for encryption of data at rest in the ledger. For more information, see the AWS documentation. Valid values are "AWS_OWNED_KMS_KEY" to use an AWS KMS key that is owned and managed by AWS on your behalf, or the ARN of a valid symmetric customer managed KMS key.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/kms/v1beta1.Key
	// +kubebuilder:validation:Optional
	kmsKey?: null | string @go(KMSKey,*string)

	// Reference to a Key in kms to populate kmsKey.
	// +kubebuilder:validation:Optional
	kmsKeyRef?: null | v1.#Reference @go(KMSKeyRef,*v1.Reference)

	// Selector for a Key in kms to populate kmsKey.
	// +kubebuilder:validation:Optional
	kmsKeySelector?: null | v1.#Selector @go(KMSKeySelector,*v1.Selector)

	// The permissions mode for the QLDB ledger instance. Specify either ALLOW_ALL or STANDARD.
	// +kubebuilder:validation:Optional
	permissionsMode?: null | string @go(PermissionsMode,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// LedgerSpec defines the desired state of Ledger
#LedgerSpec: {
	v1.#ResourceSpec
	forProvider: #LedgerParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #LedgerInitParameters @go(InitProvider)
}

// LedgerStatus defines the observed state of Ledger.
#LedgerStatus: {
	v1.#ResourceStatus
	atProvider?: #LedgerObservation @go(AtProvider)
}

// Ledger is the Schema for the Ledgers API. Provides an QLDB Resource resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Ledger: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.permissionsMode) || (has(self.initProvider) && has(self.initProvider.permissionsMode))",message="spec.forProvider.permissionsMode is a required parameter"
	spec:    #LedgerSpec   @go(Spec)
	status?: #LedgerStatus @go(Status)
}

// LedgerList contains a list of Ledgers
#LedgerList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Ledger] @go(Items,[]Ledger)
}
