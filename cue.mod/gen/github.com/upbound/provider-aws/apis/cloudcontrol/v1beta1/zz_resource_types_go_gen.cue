// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/cloudcontrol/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#ResourceInitParameters: {
	// JSON string matching the CloudFormation resource type schema with desired configuration.
	desiredState?: null | string @go(DesiredState,*string)

	// CloudFormation resource type name. For example, AWS::EC2::VPC.
	typeName?: null | string @go(TypeName,*string)

	// Identifier of the CloudFormation resource type version.
	typeVersionId?: null | string @go(TypeVersionID,*string)
}

#ResourceObservation: {
	// JSON string matching the CloudFormation resource type schema with desired configuration.
	desiredState?: null | string @go(DesiredState,*string)
	id?:           null | string @go(ID,*string)

	// JSON string matching the CloudFormation resource type schema with current configuration. Underlying attributes can be referenced via the jsondecode() function, for example, jsondecode(data.aws_cloudcontrolapi_resource.example.properties)["example"].
	properties?: null | string @go(Properties,*string)

	// Amazon Resource Name (ARN) of the IAM Role to assume for operations.
	roleArn?: null | string @go(RoleArn,*string)

	// CloudFormation resource type name. For example, AWS::EC2::VPC.
	typeName?: null | string @go(TypeName,*string)

	// Identifier of the CloudFormation resource type version.
	typeVersionId?: null | string @go(TypeVersionID,*string)
}

#ResourceParameters: {
	// JSON string matching the CloudFormation resource type schema with desired configuration.
	// +kubebuilder:validation:Optional
	desiredState?: null | string @go(DesiredState,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Amazon Resource Name (ARN) of the IAM Role to assume for operations.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	roleArn?: null | string @go(RoleArn,*string)

	// Reference to a Role in iam to populate roleArn.
	// +kubebuilder:validation:Optional
	roleArnRef?: null | v1.#Reference @go(RoleArnRef,*v1.Reference)

	// Selector for a Role in iam to populate roleArn.
	// +kubebuilder:validation:Optional
	roleArnSelector?: null | v1.#Selector @go(RoleArnSelector,*v1.Selector)

	// JSON string of the CloudFormation resource type schema which is used for plan time validation where possible. Automatically fetched if not provided. In large scale environments with multiple resources using the same type_name, it is recommended to fetch the schema once via the aws_cloudformation_type data source and use this argument to reduce DescribeType API operation throttling. This value is marked sensitive only to prevent large plan differences from showing.
	// +kubebuilder:validation:Optional
	schemaSecretRef?: null | v1.#SecretKeySelector @go(SchemaSecretRef,*v1.SecretKeySelector)

	// CloudFormation resource type name. For example, AWS::EC2::VPC.
	// +kubebuilder:validation:Optional
	typeName?: null | string @go(TypeName,*string)

	// Identifier of the CloudFormation resource type version.
	// +kubebuilder:validation:Optional
	typeVersionId?: null | string @go(TypeVersionID,*string)
}

// ResourceSpec defines the desired state of Resource
#ResourceSpec: {
	v1.#ResourceSpec
	forProvider: #ResourceParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ResourceInitParameters @go(InitProvider)
}

// ResourceStatus defines the observed state of Resource.
#ResourceStatus: {
	v1.#ResourceStatus
	atProvider?: #ResourceObservation @go(AtProvider)
}

// Resource is the Schema for the Resources API. Manages a Cloud Control API Resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Resource: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.desiredState) || (has(self.initProvider) && has(self.initProvider.desiredState))",message="spec.forProvider.desiredState is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.typeName) || (has(self.initProvider) && has(self.initProvider.typeName))",message="spec.forProvider.typeName is a required parameter"
	spec:    #ResourceSpec   @go(Spec)
	status?: #ResourceStatus @go(Status)
}

// ResourceList contains a list of Resources
#ResourceList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Resource] @go(Items,[]Resource)
}
