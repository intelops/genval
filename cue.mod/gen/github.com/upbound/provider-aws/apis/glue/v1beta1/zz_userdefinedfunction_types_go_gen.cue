// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/glue/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#ResourceUrisInitParameters: {
	// The type of the resource. can be one of JAR, FILE, and ARCHIVE.
	resourceType?: null | string @go(ResourceType,*string)

	// The URI for accessing the resource.
	uri?: null | string @go(URI,*string)
}

#ResourceUrisObservation: {
	// The type of the resource. can be one of JAR, FILE, and ARCHIVE.
	resourceType?: null | string @go(ResourceType,*string)

	// The URI for accessing the resource.
	uri?: null | string @go(URI,*string)
}

#ResourceUrisParameters: {
	// The type of the resource. can be one of JAR, FILE, and ARCHIVE.
	// +kubebuilder:validation:Optional
	resourceType?: null | string @go(ResourceType,*string)

	// The URI for accessing the resource.
	// +kubebuilder:validation:Optional
	uri?: null | string @go(URI,*string)
}

#UserDefinedFunctionInitParameters: {
	// The Java class that contains the function code.
	className?: null | string @go(ClassName,*string)

	// The owner of the function.
	ownerName?: null | string @go(OwnerName,*string)

	// The owner type. can be one of USER, ROLE, and GROUP.
	ownerType?: null | string @go(OwnerType,*string)

	// The configuration block for Resource URIs. See resource uris below for more details.
	resourceUris?: [...#ResourceUrisInitParameters] @go(ResourceUris,[]ResourceUrisInitParameters)
}

#UserDefinedFunctionObservation: {
	// The ARN of the Glue User Defined Function.
	arn?: null | string @go(Arn,*string)

	// ID of the Glue Catalog to create the function in. If omitted, this defaults to the AWS Account ID.
	catalogId?: null | string @go(CatalogID,*string)

	// The Java class that contains the function code.
	className?: null | string @go(ClassName,*string)

	// The time at which the function was created.
	createTime?: null | string @go(CreateTime,*string)

	// The name of the Database to create the Function.
	databaseName?: null | string @go(DatabaseName,*string)

	// The id of the Glue User Defined Function.
	id?: null | string @go(ID,*string)

	// The owner of the function.
	ownerName?: null | string @go(OwnerName,*string)

	// The owner type. can be one of USER, ROLE, and GROUP.
	ownerType?: null | string @go(OwnerType,*string)

	// The configuration block for Resource URIs. See resource uris below for more details.
	resourceUris?: [...#ResourceUrisObservation] @go(ResourceUris,[]ResourceUrisObservation)
}

#UserDefinedFunctionParameters: {
	// ID of the Glue Catalog to create the function in. If omitted, this defaults to the AWS Account ID.
	// +kubebuilder:validation:Required
	catalogId?: null | string @go(CatalogID,*string)

	// The Java class that contains the function code.
	// +kubebuilder:validation:Optional
	className?: null | string @go(ClassName,*string)

	// The name of the Database to create the Function.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/glue/v1beta1.CatalogDatabase
	// +kubebuilder:validation:Optional
	databaseName?: null | string @go(DatabaseName,*string)

	// Reference to a CatalogDatabase in glue to populate databaseName.
	// +kubebuilder:validation:Optional
	databaseNameRef?: null | v1.#Reference @go(DatabaseNameRef,*v1.Reference)

	// Selector for a CatalogDatabase in glue to populate databaseName.
	// +kubebuilder:validation:Optional
	databaseNameSelector?: null | v1.#Selector @go(DatabaseNameSelector,*v1.Selector)

	// The owner of the function.
	// +kubebuilder:validation:Optional
	ownerName?: null | string @go(OwnerName,*string)

	// The owner type. can be one of USER, ROLE, and GROUP.
	// +kubebuilder:validation:Optional
	ownerType?: null | string @go(OwnerType,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The configuration block for Resource URIs. See resource uris below for more details.
	// +kubebuilder:validation:Optional
	resourceUris?: [...#ResourceUrisParameters] @go(ResourceUris,[]ResourceUrisParameters)
}

// UserDefinedFunctionSpec defines the desired state of UserDefinedFunction
#UserDefinedFunctionSpec: {
	v1.#ResourceSpec
	forProvider: #UserDefinedFunctionParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #UserDefinedFunctionInitParameters @go(InitProvider)
}

// UserDefinedFunctionStatus defines the observed state of UserDefinedFunction.
#UserDefinedFunctionStatus: {
	v1.#ResourceStatus
	atProvider?: #UserDefinedFunctionObservation @go(AtProvider)
}

// UserDefinedFunction is the Schema for the UserDefinedFunctions API. Provides a Glue User Defined Function.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#UserDefinedFunction: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.className) || (has(self.initProvider) && has(self.initProvider.className))",message="spec.forProvider.className is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.ownerName) || (has(self.initProvider) && has(self.initProvider.ownerName))",message="spec.forProvider.ownerName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.ownerType) || (has(self.initProvider) && has(self.initProvider.ownerType))",message="spec.forProvider.ownerType is a required parameter"
	spec:    #UserDefinedFunctionSpec   @go(Spec)
	status?: #UserDefinedFunctionStatus @go(Status)
}

// UserDefinedFunctionList contains a list of UserDefinedFunctions
#UserDefinedFunctionList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#UserDefinedFunction] @go(Items,[]UserDefinedFunction)
}
