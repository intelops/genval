// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/glue/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#ConnectionPasswordEncryptionInitParameters: {
	// When set to true, passwords remain encrypted in the responses of GetConnection and GetConnections. This encryption takes effect independently of the catalog encryption.
	returnConnectionPasswordEncrypted?: null | bool @go(ReturnConnectionPasswordEncrypted,*bool)
}

#ConnectionPasswordEncryptionObservation: {
	// A KMS key ARN that is used to encrypt the connection password. If connection password protection is enabled, the caller of CreateConnection and UpdateConnection needs at least kms:Encrypt permission on the specified AWS KMS key, to encrypt passwords before storing them in the Data Catalog.
	awsKmsKeyId?: null | string @go(AwsKMSKeyID,*string)

	// When set to true, passwords remain encrypted in the responses of GetConnection and GetConnections. This encryption takes effect independently of the catalog encryption.
	returnConnectionPasswordEncrypted?: null | bool @go(ReturnConnectionPasswordEncrypted,*bool)
}

#ConnectionPasswordEncryptionParameters: {
	// A KMS key ARN that is used to encrypt the connection password. If connection password protection is enabled, the caller of CreateConnection and UpdateConnection needs at least kms:Encrypt permission on the specified AWS KMS key, to encrypt passwords before storing them in the Data Catalog.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/kms/v1beta1.Key
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	awsKmsKeyId?: null | string @go(AwsKMSKeyID,*string)

	// Reference to a Key in kms to populate awsKmsKeyId.
	// +kubebuilder:validation:Optional
	awsKmsKeyIdRef?: null | v1.#Reference @go(AwsKMSKeyIDRef,*v1.Reference)

	// Selector for a Key in kms to populate awsKmsKeyId.
	// +kubebuilder:validation:Optional
	awsKmsKeyIdSelector?: null | v1.#Selector @go(AwsKMSKeyIDSelector,*v1.Selector)

	// When set to true, passwords remain encrypted in the responses of GetConnection and GetConnections. This encryption takes effect independently of the catalog encryption.
	// +kubebuilder:validation:Optional
	returnConnectionPasswordEncrypted?: null | bool @go(ReturnConnectionPasswordEncrypted,*bool)
}

#DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsInitParameters: {
	// When connection password protection is enabled, the Data Catalog uses a customer-provided key to encrypt the password as part of CreateConnection or UpdateConnection and store it in the ENCRYPTED_PASSWORD field in the connection properties. You can enable catalog encryption or only password encryption. see Connection Password Encryption.
	connectionPasswordEncryption?: [...#ConnectionPasswordEncryptionInitParameters] @go(ConnectionPasswordEncryption,[]ConnectionPasswordEncryptionInitParameters)

	// Specifies the encryption-at-rest configuration for the Data Catalog. see Encryption At Rest.
	encryptionAtRest?: [...#EncryptionAtRestInitParameters] @go(EncryptionAtRest,[]EncryptionAtRestInitParameters)
}

#DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsObservation: {
	// When connection password protection is enabled, the Data Catalog uses a customer-provided key to encrypt the password as part of CreateConnection or UpdateConnection and store it in the ENCRYPTED_PASSWORD field in the connection properties. You can enable catalog encryption or only password encryption. see Connection Password Encryption.
	connectionPasswordEncryption?: [...#ConnectionPasswordEncryptionObservation] @go(ConnectionPasswordEncryption,[]ConnectionPasswordEncryptionObservation)

	// Specifies the encryption-at-rest configuration for the Data Catalog. see Encryption At Rest.
	encryptionAtRest?: [...#EncryptionAtRestObservation] @go(EncryptionAtRest,[]EncryptionAtRestObservation)
}

#DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsParameters: {
	// When connection password protection is enabled, the Data Catalog uses a customer-provided key to encrypt the password as part of CreateConnection or UpdateConnection and store it in the ENCRYPTED_PASSWORD field in the connection properties. You can enable catalog encryption or only password encryption. see Connection Password Encryption.
	// +kubebuilder:validation:Optional
	connectionPasswordEncryption: [...#ConnectionPasswordEncryptionParameters] @go(ConnectionPasswordEncryption,[]ConnectionPasswordEncryptionParameters)

	// Specifies the encryption-at-rest configuration for the Data Catalog. see Encryption At Rest.
	// +kubebuilder:validation:Optional
	encryptionAtRest: [...#EncryptionAtRestParameters] @go(EncryptionAtRest,[]EncryptionAtRestParameters)
}

#DataCatalogEncryptionSettingsInitParameters: {
	// –  The ID of the Data Catalog to set the security configuration for. If none is provided, the AWS account ID is used by default.
	catalogId?: null | string @go(CatalogID,*string)

	// –  The security configuration to set. see Data Catalog Encryption Settings.
	dataCatalogEncryptionSettings?: [...#DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsInitParameters] @go(DataCatalogEncryptionSettings,[]DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsInitParameters)
}

#DataCatalogEncryptionSettingsObservation: {
	// –  The ID of the Data Catalog to set the security configuration for. If none is provided, the AWS account ID is used by default.
	catalogId?: null | string @go(CatalogID,*string)

	// –  The security configuration to set. see Data Catalog Encryption Settings.
	dataCatalogEncryptionSettings?: [...#DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsObservation] @go(DataCatalogEncryptionSettings,[]DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsObservation)

	// The ID of the Data Catalog to set the security configuration for.
	id?: null | string @go(ID,*string)
}

#DataCatalogEncryptionSettingsParameters: {
	// –  The ID of the Data Catalog to set the security configuration for. If none is provided, the AWS account ID is used by default.
	// +kubebuilder:validation:Optional
	catalogId?: null | string @go(CatalogID,*string)

	// –  The security configuration to set. see Data Catalog Encryption Settings.
	// +kubebuilder:validation:Optional
	dataCatalogEncryptionSettings?: [...#DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsParameters] @go(DataCatalogEncryptionSettings,[]DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsParameters)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)
}

#EncryptionAtRestInitParameters: {
	// The encryption-at-rest mode for encrypting Data Catalog data. Valid values are DISABLED and SSE-KMS.
	catalogEncryptionMode?: null | string @go(CatalogEncryptionMode,*string)
}

#EncryptionAtRestObservation: {
	// The encryption-at-rest mode for encrypting Data Catalog data. Valid values are DISABLED and SSE-KMS.
	catalogEncryptionMode?: null | string @go(CatalogEncryptionMode,*string)

	// The ARN of the AWS KMS key to use for encryption at rest.
	sseAwsKmsKeyId?: null | string @go(SseAwsKMSKeyID,*string)
}

#EncryptionAtRestParameters: {
	// The encryption-at-rest mode for encrypting Data Catalog data. Valid values are DISABLED and SSE-KMS.
	// +kubebuilder:validation:Optional
	catalogEncryptionMode?: null | string @go(CatalogEncryptionMode,*string)

	// The ARN of the AWS KMS key to use for encryption at rest.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/kms/v1beta1.Key
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	sseAwsKmsKeyId?: null | string @go(SseAwsKMSKeyID,*string)

	// Reference to a Key in kms to populate sseAwsKmsKeyId.
	// +kubebuilder:validation:Optional
	sseAwsKmsKeyIdRef?: null | v1.#Reference @go(SseAwsKMSKeyIDRef,*v1.Reference)

	// Selector for a Key in kms to populate sseAwsKmsKeyId.
	// +kubebuilder:validation:Optional
	sseAwsKmsKeyIdSelector?: null | v1.#Selector @go(SseAwsKMSKeyIDSelector,*v1.Selector)
}

// DataCatalogEncryptionSettingsSpec defines the desired state of DataCatalogEncryptionSettings
#DataCatalogEncryptionSettingsSpec: {
	v1.#ResourceSpec
	forProvider: #DataCatalogEncryptionSettingsParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #DataCatalogEncryptionSettingsInitParameters @go(InitProvider)
}

// DataCatalogEncryptionSettingsStatus defines the observed state of DataCatalogEncryptionSettings.
#DataCatalogEncryptionSettingsStatus: {
	v1.#ResourceStatus
	atProvider?: #DataCatalogEncryptionSettingsObservation @go(AtProvider)
}

// DataCatalogEncryptionSettings is the Schema for the DataCatalogEncryptionSettingss API. Provides a Glue Data Catalog Encryption Settings resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#DataCatalogEncryptionSettings: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.dataCatalogEncryptionSettings) || (has(self.initProvider) && has(self.initProvider.dataCatalogEncryptionSettings))",message="spec.forProvider.dataCatalogEncryptionSettings is a required parameter"
	spec:    #DataCatalogEncryptionSettingsSpec   @go(Spec)
	status?: #DataCatalogEncryptionSettingsStatus @go(Status)
}

// DataCatalogEncryptionSettingsList contains a list of DataCatalogEncryptionSettingss
#DataCatalogEncryptionSettingsList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#DataCatalogEncryptionSettings] @go(Items,[]DataCatalogEncryptionSettings)
}
