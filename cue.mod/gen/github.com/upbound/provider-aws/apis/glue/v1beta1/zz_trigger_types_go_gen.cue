// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/glue/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#ActionsInitParameters: {
	// Arguments to be passed to the job. You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes.
	arguments?: {[string]: null | string} @go(Arguments,map[string]*string)

	// Specifies configuration properties of a job run notification. See Notification Property details below.
	notificationProperty?: [...#ActionsNotificationPropertyInitParameters] @go(NotificationProperty,[]ActionsNotificationPropertyInitParameters)

	// The name of the Security Configuration structure to be used with this action.
	securityConfiguration?: null | string @go(SecurityConfiguration,*string)

	// The job run timeout in minutes. It overrides the timeout value of the job.
	timeout?: null | float64 @go(Timeout,*float64)
}

#ActionsNotificationPropertyInitParameters: {
	// After a job run starts, the number of minutes to wait before sending a job run delay notification.
	notifyDelayAfter?: null | float64 @go(NotifyDelayAfter,*float64)
}

#ActionsNotificationPropertyObservation: {
	// After a job run starts, the number of minutes to wait before sending a job run delay notification.
	notifyDelayAfter?: null | float64 @go(NotifyDelayAfter,*float64)
}

#ActionsNotificationPropertyParameters: {
	// After a job run starts, the number of minutes to wait before sending a job run delay notification.
	// +kubebuilder:validation:Optional
	notifyDelayAfter?: null | float64 @go(NotifyDelayAfter,*float64)
}

#ActionsObservation: {
	// Arguments to be passed to the job. You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes.
	arguments?: {[string]: null | string} @go(Arguments,map[string]*string)

	// The name of the crawler to be executed. Conflicts with job_name.
	crawlerName?: null | string @go(CrawlerName,*string)

	// The name of a job to be executed. Conflicts with crawler_name.
	jobName?: null | string @go(JobName,*string)

	// Specifies configuration properties of a job run notification. See Notification Property details below.
	notificationProperty?: [...#ActionsNotificationPropertyObservation] @go(NotificationProperty,[]ActionsNotificationPropertyObservation)

	// The name of the Security Configuration structure to be used with this action.
	securityConfiguration?: null | string @go(SecurityConfiguration,*string)

	// The job run timeout in minutes. It overrides the timeout value of the job.
	timeout?: null | float64 @go(Timeout,*float64)
}

#ActionsParameters: {
	// Arguments to be passed to the job. You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes.
	// +kubebuilder:validation:Optional
	arguments?: {[string]: null | string} @go(Arguments,map[string]*string)

	// The name of the crawler to be executed. Conflicts with job_name.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/glue/v1beta1.Crawler
	// +kubebuilder:validation:Optional
	crawlerName?: null | string @go(CrawlerName,*string)

	// Reference to a Crawler in glue to populate crawlerName.
	// +kubebuilder:validation:Optional
	crawlerNameRef?: null | v1.#Reference @go(CrawlerNameRef,*v1.Reference)

	// Selector for a Crawler in glue to populate crawlerName.
	// +kubebuilder:validation:Optional
	crawlerNameSelector?: null | v1.#Selector @go(CrawlerNameSelector,*v1.Selector)

	// The name of a job to be executed. Conflicts with crawler_name.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/glue/v1beta1.Job
	// +kubebuilder:validation:Optional
	jobName?: null | string @go(JobName,*string)

	// Reference to a Job in glue to populate jobName.
	// +kubebuilder:validation:Optional
	jobNameRef?: null | v1.#Reference @go(JobNameRef,*v1.Reference)

	// Selector for a Job in glue to populate jobName.
	// +kubebuilder:validation:Optional
	jobNameSelector?: null | v1.#Selector @go(JobNameSelector,*v1.Selector)

	// Specifies configuration properties of a job run notification. See Notification Property details below.
	// +kubebuilder:validation:Optional
	notificationProperty?: [...#ActionsNotificationPropertyParameters] @go(NotificationProperty,[]ActionsNotificationPropertyParameters)

	// The name of the Security Configuration structure to be used with this action.
	// +kubebuilder:validation:Optional
	securityConfiguration?: null | string @go(SecurityConfiguration,*string)

	// The job run timeout in minutes. It overrides the timeout value of the job.
	// +kubebuilder:validation:Optional
	timeout?: null | float64 @go(Timeout,*float64)
}

#ConditionsInitParameters: {
	// The condition crawl state. Currently, the values supported are RUNNING, SUCCEEDED, CANCELLED, and FAILED. If this is specified, crawler_name must also be specified. Conflicts with state.
	crawlState?: null | string @go(CrawlState,*string)

	// A logical operator. Defaults to EQUALS.
	logicalOperator?: null | string @go(LogicalOperator,*string)

	// The condition job state. Currently, the values supported are SUCCEEDED, STOPPED, TIMEOUT and FAILED. If this is specified, job_name must also be specified. Conflicts with crawler_state.
	state?: null | string @go(State,*string)
}

#ConditionsObservation: {
	// The condition crawl state. Currently, the values supported are RUNNING, SUCCEEDED, CANCELLED, and FAILED. If this is specified, crawler_name must also be specified. Conflicts with state.
	crawlState?: null | string @go(CrawlState,*string)

	// The name of the crawler to be executed. Conflicts with job_name.
	crawlerName?: null | string @go(CrawlerName,*string)

	// The name of a job to be executed. Conflicts with crawler_name.
	jobName?: null | string @go(JobName,*string)

	// A logical operator. Defaults to EQUALS.
	logicalOperator?: null | string @go(LogicalOperator,*string)

	// The condition job state. Currently, the values supported are SUCCEEDED, STOPPED, TIMEOUT and FAILED. If this is specified, job_name must also be specified. Conflicts with crawler_state.
	state?: null | string @go(State,*string)
}

#ConditionsParameters: {
	// The condition crawl state. Currently, the values supported are RUNNING, SUCCEEDED, CANCELLED, and FAILED. If this is specified, crawler_name must also be specified. Conflicts with state.
	// +kubebuilder:validation:Optional
	crawlState?: null | string @go(CrawlState,*string)

	// The name of the crawler to be executed. Conflicts with job_name.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/glue/v1beta1.Crawler
	// +kubebuilder:validation:Optional
	crawlerName?: null | string @go(CrawlerName,*string)

	// Reference to a Crawler in glue to populate crawlerName.
	// +kubebuilder:validation:Optional
	crawlerNameRef?: null | v1.#Reference @go(CrawlerNameRef,*v1.Reference)

	// Selector for a Crawler in glue to populate crawlerName.
	// +kubebuilder:validation:Optional
	crawlerNameSelector?: null | v1.#Selector @go(CrawlerNameSelector,*v1.Selector)

	// The name of a job to be executed. Conflicts with crawler_name.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/glue/v1beta1.Job
	// +kubebuilder:validation:Optional
	jobName?: null | string @go(JobName,*string)

	// Reference to a Job in glue to populate jobName.
	// +kubebuilder:validation:Optional
	jobNameRef?: null | v1.#Reference @go(JobNameRef,*v1.Reference)

	// Selector for a Job in glue to populate jobName.
	// +kubebuilder:validation:Optional
	jobNameSelector?: null | v1.#Selector @go(JobNameSelector,*v1.Selector)

	// A logical operator. Defaults to EQUALS.
	// +kubebuilder:validation:Optional
	logicalOperator?: null | string @go(LogicalOperator,*string)

	// The condition job state. Currently, the values supported are SUCCEEDED, STOPPED, TIMEOUT and FAILED. If this is specified, job_name must also be specified. Conflicts with crawler_state.
	// +kubebuilder:validation:Optional
	state?: null | string @go(State,*string)
}

#EventBatchingConditionInitParameters: {
	// Number of events that must be received from Amazon EventBridge before EventBridge  event trigger fires.
	batchSize?: null | float64 @go(BatchSize,*float64)

	// Window of time in seconds after which EventBridge event trigger fires. Window starts when first event is received. Default value is 900.
	batchWindow?: null | float64 @go(BatchWindow,*float64)
}

#EventBatchingConditionObservation: {
	// Number of events that must be received from Amazon EventBridge before EventBridge  event trigger fires.
	batchSize?: null | float64 @go(BatchSize,*float64)

	// Window of time in seconds after which EventBridge event trigger fires. Window starts when first event is received. Default value is 900.
	batchWindow?: null | float64 @go(BatchWindow,*float64)
}

#EventBatchingConditionParameters: {
	// Number of events that must be received from Amazon EventBridge before EventBridge  event trigger fires.
	// +kubebuilder:validation:Optional
	batchSize?: null | float64 @go(BatchSize,*float64)

	// Window of time in seconds after which EventBridge event trigger fires. Window starts when first event is received. Default value is 900.
	// +kubebuilder:validation:Optional
	batchWindow?: null | float64 @go(BatchWindow,*float64)
}

#PredicateInitParameters: {
	// A list of the conditions that determine when the trigger will fire. See Conditions.
	conditions?: [...#ConditionsInitParameters] @go(Conditions,[]ConditionsInitParameters)

	// How to handle multiple conditions. Defaults to AND. Valid values are AND or ANY.
	logical?: null | string @go(Logical,*string)
}

#PredicateObservation: {
	// A list of the conditions that determine when the trigger will fire. See Conditions.
	conditions?: [...#ConditionsObservation] @go(Conditions,[]ConditionsObservation)

	// How to handle multiple conditions. Defaults to AND. Valid values are AND or ANY.
	logical?: null | string @go(Logical,*string)
}

#PredicateParameters: {
	// A list of the conditions that determine when the trigger will fire. See Conditions.
	// +kubebuilder:validation:Optional
	conditions: [...#ConditionsParameters] @go(Conditions,[]ConditionsParameters)

	// How to handle multiple conditions. Defaults to AND. Valid values are AND or ANY.
	// +kubebuilder:validation:Optional
	logical?: null | string @go(Logical,*string)
}

#TriggerInitParameters: {
	// –  List of actions initiated by this trigger when it fires. See Actions Below.
	actions?: [...#ActionsInitParameters] @go(Actions,[]ActionsInitParameters)

	// –  A description of the new trigger.
	description?: null | string @go(Description,*string)

	// –  Start the trigger. Defaults to true.
	enabled?: null | bool @go(Enabled,*bool)

	// Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires. See Event Batching Condition.
	eventBatchingCondition?: [...#EventBatchingConditionInitParameters] @go(EventBatchingCondition,[]EventBatchingConditionInitParameters)

	// –  A predicate to specify when the new trigger should fire. Required when trigger type is CONDITIONAL. See Predicate Below.
	predicate?: [...#PredicateInitParameters] @go(Predicate,[]PredicateInitParameters)

	// Based Schedules for Jobs and Crawlers
	schedule?: null | string @go(Schedule,*string)

	// –  Set to true to start SCHEDULED and CONDITIONAL triggers when created. True is not supported for ON_DEMAND triggers.
	startOnCreation?: null | bool @go(StartOnCreation,*bool)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// –  The type of trigger. Valid values are CONDITIONAL, EVENT, ON_DEMAND, and SCHEDULED.
	type?: null | string @go(Type,*string)

	// A workflow to which the trigger should be associated to. Every workflow graph (DAG) needs a starting trigger (ON_DEMAND or SCHEDULED type) and can contain multiple additional CONDITIONAL triggers.
	workflowName?: null | string @go(WorkflowName,*string)
}

#TriggerObservation: {
	// –  List of actions initiated by this trigger when it fires. See Actions Below.
	actions?: [...#ActionsObservation] @go(Actions,[]ActionsObservation)

	// Amazon Resource Name (ARN) of Glue Trigger
	arn?: null | string @go(Arn,*string)

	// –  A description of the new trigger.
	description?: null | string @go(Description,*string)

	// –  Start the trigger. Defaults to true.
	enabled?: null | bool @go(Enabled,*bool)

	// Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires. See Event Batching Condition.
	eventBatchingCondition?: [...#EventBatchingConditionObservation] @go(EventBatchingCondition,[]EventBatchingConditionObservation)

	// Trigger name
	id?: null | string @go(ID,*string)

	// –  A predicate to specify when the new trigger should fire. Required when trigger type is CONDITIONAL. See Predicate Below.
	predicate?: [...#PredicateObservation] @go(Predicate,[]PredicateObservation)

	// Based Schedules for Jobs and Crawlers
	schedule?: null | string @go(Schedule,*string)

	// –  Set to true to start SCHEDULED and CONDITIONAL triggers when created. True is not supported for ON_DEMAND triggers.
	startOnCreation?: null | bool @go(StartOnCreation,*bool)

	// The condition job state. Currently, the values supported are SUCCEEDED, STOPPED, TIMEOUT and FAILED. If this is specified, job_name must also be specified. Conflicts with crawler_state.
	state?: null | string @go(State,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// –  The type of trigger. Valid values are CONDITIONAL, EVENT, ON_DEMAND, and SCHEDULED.
	type?: null | string @go(Type,*string)

	// A workflow to which the trigger should be associated to. Every workflow graph (DAG) needs a starting trigger (ON_DEMAND or SCHEDULED type) and can contain multiple additional CONDITIONAL triggers.
	workflowName?: null | string @go(WorkflowName,*string)
}

#TriggerParameters: {
	// –  List of actions initiated by this trigger when it fires. See Actions Below.
	// +kubebuilder:validation:Optional
	actions?: [...#ActionsParameters] @go(Actions,[]ActionsParameters)

	// –  A description of the new trigger.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// –  Start the trigger. Defaults to true.
	// +kubebuilder:validation:Optional
	enabled?: null | bool @go(Enabled,*bool)

	// Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires. See Event Batching Condition.
	// +kubebuilder:validation:Optional
	eventBatchingCondition?: [...#EventBatchingConditionParameters] @go(EventBatchingCondition,[]EventBatchingConditionParameters)

	// –  A predicate to specify when the new trigger should fire. Required when trigger type is CONDITIONAL. See Predicate Below.
	// +kubebuilder:validation:Optional
	predicate?: [...#PredicateParameters] @go(Predicate,[]PredicateParameters)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Based Schedules for Jobs and Crawlers
	// +kubebuilder:validation:Optional
	schedule?: null | string @go(Schedule,*string)

	// –  Set to true to start SCHEDULED and CONDITIONAL triggers when created. True is not supported for ON_DEMAND triggers.
	// +kubebuilder:validation:Optional
	startOnCreation?: null | bool @go(StartOnCreation,*bool)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// –  The type of trigger. Valid values are CONDITIONAL, EVENT, ON_DEMAND, and SCHEDULED.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)

	// A workflow to which the trigger should be associated to. Every workflow graph (DAG) needs a starting trigger (ON_DEMAND or SCHEDULED type) and can contain multiple additional CONDITIONAL triggers.
	// +kubebuilder:validation:Optional
	workflowName?: null | string @go(WorkflowName,*string)
}

// TriggerSpec defines the desired state of Trigger
#TriggerSpec: {
	v1.#ResourceSpec
	forProvider: #TriggerParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #TriggerInitParameters @go(InitProvider)
}

// TriggerStatus defines the observed state of Trigger.
#TriggerStatus: {
	v1.#ResourceStatus
	atProvider?: #TriggerObservation @go(AtProvider)
}

// Trigger is the Schema for the Triggers API. Manages a Glue Trigger resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Trigger: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.actions) || (has(self.initProvider) && has(self.initProvider.actions))",message="spec.forProvider.actions is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	spec:    #TriggerSpec   @go(Spec)
	status?: #TriggerStatus @go(Status)
}

// TriggerList contains a list of Triggers
#TriggerList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Trigger] @go(Items,[]Trigger)
}
