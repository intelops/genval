// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/glue/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#ConnectionInitParameters: {
	// –  The type of the connection. Supported are: CUSTOM, JDBC, KAFKA, MARKETPLACE, MONGODB, and NETWORK. Defaults to JBDC.
	connectionType?: null | string @go(ConnectionType,*string)

	// –  Description of the connection.
	description?: null | string @go(Description,*string)

	// –  A list of criteria that can be used in selecting this connection.
	matchCriteria?: [...null | string] @go(MatchCriteria,[]*string)

	// A map of physical connection requirements, such as VPC and SecurityGroup. Defined below.
	physicalConnectionRequirements?: [...#PhysicalConnectionRequirementsInitParameters] @go(PhysicalConnectionRequirements,[]PhysicalConnectionRequirementsInitParameters)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#ConnectionObservation: {
	// The ARN of the Glue Connection.
	arn?: null | string @go(Arn,*string)

	// –  The ID of the Data Catalog in which to create the connection. If none is supplied, the AWS account ID is used by default.
	catalogId?: null | string @go(CatalogID,*string)

	// –  The type of the connection. Supported are: CUSTOM, JDBC, KAFKA, MARKETPLACE, MONGODB, and NETWORK. Defaults to JBDC.
	connectionType?: null | string @go(ConnectionType,*string)

	// –  Description of the connection.
	description?: null | string @go(Description,*string)

	// Catalog ID and name of the connection
	id?: null | string @go(ID,*string)

	// –  A list of criteria that can be used in selecting this connection.
	matchCriteria?: [...null | string] @go(MatchCriteria,[]*string)

	// A map of physical connection requirements, such as VPC and SecurityGroup. Defined below.
	physicalConnectionRequirements?: [...#PhysicalConnectionRequirementsObservation] @go(PhysicalConnectionRequirements,[]PhysicalConnectionRequirementsObservation)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#ConnectionParameters: {
	// –  The ID of the Data Catalog in which to create the connection. If none is supplied, the AWS account ID is used by default.
	// +kubebuilder:validation:Required
	catalogId?: null | string @go(CatalogID,*string)

	// value pairs used as parameters for this connection.
	// +kubebuilder:validation:Optional
	connectionPropertiesSecretRef?: null | v1.#SecretReference @go(ConnectionPropertiesSecretRef,*v1.SecretReference)

	// –  The type of the connection. Supported are: CUSTOM, JDBC, KAFKA, MARKETPLACE, MONGODB, and NETWORK. Defaults to JBDC.
	// +kubebuilder:validation:Optional
	connectionType?: null | string @go(ConnectionType,*string)

	// –  Description of the connection.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// –  A list of criteria that can be used in selecting this connection.
	// +kubebuilder:validation:Optional
	matchCriteria?: [...null | string] @go(MatchCriteria,[]*string)

	// A map of physical connection requirements, such as VPC and SecurityGroup. Defined below.
	// +kubebuilder:validation:Optional
	physicalConnectionRequirements?: [...#PhysicalConnectionRequirementsParameters] @go(PhysicalConnectionRequirements,[]PhysicalConnectionRequirementsParameters)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#PhysicalConnectionRequirementsInitParameters: {
	// The security group ID list used by the connection.
	securityGroupIdList?: [...null | string] @go(SecurityGroupIDList,[]*string)
}

#PhysicalConnectionRequirementsObservation: {
	// The availability zone of the connection. This field is redundant and implied by subnet_id, but is currently an api requirement.
	availabilityZone?: null | string @go(AvailabilityZone,*string)

	// The security group ID list used by the connection.
	securityGroupIdList?: [...null | string] @go(SecurityGroupIDList,[]*string)

	// The subnet ID used by the connection.
	subnetId?: null | string @go(SubnetID,*string)
}

#PhysicalConnectionRequirementsParameters: {
	// The availability zone of the connection. This field is redundant and implied by subnet_id, but is currently an api requirement.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.Subnet
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("availability_zone",false)
	// +kubebuilder:validation:Optional
	availabilityZone?: null | string @go(AvailabilityZone,*string)

	// Reference to a Subnet in ec2 to populate availabilityZone.
	// +kubebuilder:validation:Optional
	availabilityZoneRef?: null | v1.#Reference @go(AvailabilityZoneRef,*v1.Reference)

	// Selector for a Subnet in ec2 to populate availabilityZone.
	// +kubebuilder:validation:Optional
	availabilityZoneSelector?: null | v1.#Selector @go(AvailabilityZoneSelector,*v1.Selector)

	// The security group ID list used by the connection.
	// +kubebuilder:validation:Optional
	securityGroupIdList?: [...null | string] @go(SecurityGroupIDList,[]*string)

	// The subnet ID used by the connection.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.Subnet
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	subnetId?: null | string @go(SubnetID,*string)

	// Reference to a Subnet in ec2 to populate subnetId.
	// +kubebuilder:validation:Optional
	subnetIdRef?: null | v1.#Reference @go(SubnetIDRef,*v1.Reference)

	// Selector for a Subnet in ec2 to populate subnetId.
	// +kubebuilder:validation:Optional
	subnetIdSelector?: null | v1.#Selector @go(SubnetIDSelector,*v1.Selector)
}

// ConnectionSpec defines the desired state of Connection
#ConnectionSpec: {
	v1.#ResourceSpec
	forProvider: #ConnectionParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ConnectionInitParameters @go(InitProvider)
}

// ConnectionStatus defines the observed state of Connection.
#ConnectionStatus: {
	v1.#ResourceStatus
	atProvider?: #ConnectionObservation @go(AtProvider)
}

// Connection is the Schema for the Connections API. Provides an Glue Connection resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Connection: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec:      #ConnectionSpec    @go(Spec)
	status?:   #ConnectionStatus  @go(Status)
}

// ConnectionList contains a list of Connections
#ConnectionList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Connection] @go(Items,[]Connection)
}
