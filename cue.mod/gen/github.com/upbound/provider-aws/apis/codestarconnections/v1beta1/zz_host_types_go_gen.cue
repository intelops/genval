// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/codestarconnections/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#HostInitParameters: {
	// The name of the host to be created. The name must be unique in the calling AWS account.
	name?: null | string @go(Name,*string)

	// The endpoint of the infrastructure to be represented by the host after it is created.
	providerEndpoint?: null | string @go(ProviderEndpoint,*string)

	// The name of the external provider where your third-party code repository is configured.
	providerType?: null | string @go(ProviderType,*string)

	// The VPC configuration to be provisioned for the host. A VPC must be configured, and the infrastructure to be represented by the host must already be connected to the VPC.
	vpcConfiguration?: [...#VPCConfigurationInitParameters] @go(VPCConfiguration,[]VPCConfigurationInitParameters)
}

#HostObservation: {
	// The CodeStar Host ARN.
	arn?: null | string @go(Arn,*string)

	// The CodeStar Host ARN.
	id?: null | string @go(ID,*string)

	// The name of the host to be created. The name must be unique in the calling AWS account.
	name?: null | string @go(Name,*string)

	// The endpoint of the infrastructure to be represented by the host after it is created.
	providerEndpoint?: null | string @go(ProviderEndpoint,*string)

	// The name of the external provider where your third-party code repository is configured.
	providerType?: null | string @go(ProviderType,*string)

	// The CodeStar Host status. Possible values are PENDING, AVAILABLE, VPC_CONFIG_DELETING, VPC_CONFIG_INITIALIZING, and VPC_CONFIG_FAILED_INITIALIZATION.
	status?: null | string @go(Status,*string)

	// The VPC configuration to be provisioned for the host. A VPC must be configured, and the infrastructure to be represented by the host must already be connected to the VPC.
	vpcConfiguration?: [...#VPCConfigurationObservation] @go(VPCConfiguration,[]VPCConfigurationObservation)
}

#HostParameters: {
	// The name of the host to be created. The name must be unique in the calling AWS account.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The endpoint of the infrastructure to be represented by the host after it is created.
	// +kubebuilder:validation:Optional
	providerEndpoint?: null | string @go(ProviderEndpoint,*string)

	// The name of the external provider where your third-party code repository is configured.
	// +kubebuilder:validation:Optional
	providerType?: null | string @go(ProviderType,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The VPC configuration to be provisioned for the host. A VPC must be configured, and the infrastructure to be represented by the host must already be connected to the VPC.
	// +kubebuilder:validation:Optional
	vpcConfiguration?: [...#VPCConfigurationParameters] @go(VPCConfiguration,[]VPCConfigurationParameters)
}

#VPCConfigurationInitParameters: {
	// ID of the security group or security groups associated with the Amazon VPC connected to the infrastructure where your provider type is installed.
	securityGroupIds?: [...null | string] @go(SecurityGroupIds,[]*string)

	// The ID of the subnet or subnets associated with the Amazon VPC connected to the infrastructure where your provider type is installed.
	subnetIds?: [...null | string] @go(SubnetIds,[]*string)

	// The value of the Transport Layer Security (TLS) certificate associated with the infrastructure where your provider type is installed.
	tlsCertificate?: null | string @go(TLSCertificate,*string)

	// The ID of the Amazon VPC connected to the infrastructure where your provider type is installed.
	vpcId?: null | string @go(VPCID,*string)
}

#VPCConfigurationObservation: {
	// ID of the security group or security groups associated with the Amazon VPC connected to the infrastructure where your provider type is installed.
	securityGroupIds?: [...null | string] @go(SecurityGroupIds,[]*string)

	// The ID of the subnet or subnets associated with the Amazon VPC connected to the infrastructure where your provider type is installed.
	subnetIds?: [...null | string] @go(SubnetIds,[]*string)

	// The value of the Transport Layer Security (TLS) certificate associated with the infrastructure where your provider type is installed.
	tlsCertificate?: null | string @go(TLSCertificate,*string)

	// The ID of the Amazon VPC connected to the infrastructure where your provider type is installed.
	vpcId?: null | string @go(VPCID,*string)
}

#VPCConfigurationParameters: {
	// ID of the security group or security groups associated with the Amazon VPC connected to the infrastructure where your provider type is installed.
	// +kubebuilder:validation:Optional
	securityGroupIds: [...null | string] @go(SecurityGroupIds,[]*string)

	// The ID of the subnet or subnets associated with the Amazon VPC connected to the infrastructure where your provider type is installed.
	// +kubebuilder:validation:Optional
	subnetIds: [...null | string] @go(SubnetIds,[]*string)

	// The value of the Transport Layer Security (TLS) certificate associated with the infrastructure where your provider type is installed.
	// +kubebuilder:validation:Optional
	tlsCertificate?: null | string @go(TLSCertificate,*string)

	// The ID of the Amazon VPC connected to the infrastructure where your provider type is installed.
	// +kubebuilder:validation:Optional
	vpcId?: null | string @go(VPCID,*string)
}

// HostSpec defines the desired state of Host
#HostSpec: {
	v1.#ResourceSpec
	forProvider: #HostParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #HostInitParameters @go(InitProvider)
}

// HostStatus defines the observed state of Host.
#HostStatus: {
	v1.#ResourceStatus
	atProvider?: #HostObservation @go(AtProvider)
}

// Host is the Schema for the Hosts API. Provides a CodeStar Host
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Host: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.providerEndpoint) || (has(self.initProvider) && has(self.initProvider.providerEndpoint))",message="spec.forProvider.providerEndpoint is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.providerType) || (has(self.initProvider) && has(self.initProvider.providerType))",message="spec.forProvider.providerType is a required parameter"
	spec:    #HostSpec   @go(Spec)
	status?: #HostStatus @go(Status)
}

// HostList contains a list of Hosts
#HostList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Host] @go(Items,[]Host)
}
