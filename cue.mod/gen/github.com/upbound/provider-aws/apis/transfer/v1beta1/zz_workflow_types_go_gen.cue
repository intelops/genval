// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/transfer/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#CopyStepDetailsDestinationFileLocationEFSFileLocationInitParameters: {
	// The ID of the file system, assigned by Amazon EFS.
	fileSystemId?: null | string @go(FileSystemID,*string)

	// The pathname for the folder being used by a workflow.
	path?: null | string @go(Path,*string)
}

#CopyStepDetailsDestinationFileLocationEFSFileLocationObservation: {
	// The ID of the file system, assigned by Amazon EFS.
	fileSystemId?: null | string @go(FileSystemID,*string)

	// The pathname for the folder being used by a workflow.
	path?: null | string @go(Path,*string)
}

#CopyStepDetailsDestinationFileLocationEFSFileLocationParameters: {
	// The ID of the file system, assigned by Amazon EFS.
	// +kubebuilder:validation:Optional
	fileSystemId?: null | string @go(FileSystemID,*string)

	// The pathname for the folder being used by a workflow.
	// +kubebuilder:validation:Optional
	path?: null | string @go(Path,*string)
}

#CopyStepDetailsDestinationFileLocationInitParameters: {
	// Specifies the details for the EFS file being copied.
	efsFileLocation?: [...#CopyStepDetailsDestinationFileLocationEFSFileLocationInitParameters] @go(EFSFileLocation,[]CopyStepDetailsDestinationFileLocationEFSFileLocationInitParameters)

	// Specifies the details for the S3 file being copied.
	s3FileLocation?: [...#CopyStepDetailsDestinationFileLocationS3FileLocationInitParameters] @go(S3FileLocation,[]CopyStepDetailsDestinationFileLocationS3FileLocationInitParameters)
}

#CopyStepDetailsDestinationFileLocationObservation: {
	// Specifies the details for the EFS file being copied.
	efsFileLocation?: [...#CopyStepDetailsDestinationFileLocationEFSFileLocationObservation] @go(EFSFileLocation,[]CopyStepDetailsDestinationFileLocationEFSFileLocationObservation)

	// Specifies the details for the S3 file being copied.
	s3FileLocation?: [...#CopyStepDetailsDestinationFileLocationS3FileLocationObservation] @go(S3FileLocation,[]CopyStepDetailsDestinationFileLocationS3FileLocationObservation)
}

#CopyStepDetailsDestinationFileLocationParameters: {
	// Specifies the details for the EFS file being copied.
	// +kubebuilder:validation:Optional
	efsFileLocation?: [...#CopyStepDetailsDestinationFileLocationEFSFileLocationParameters] @go(EFSFileLocation,[]CopyStepDetailsDestinationFileLocationEFSFileLocationParameters)

	// Specifies the details for the S3 file being copied.
	// +kubebuilder:validation:Optional
	s3FileLocation?: [...#CopyStepDetailsDestinationFileLocationS3FileLocationParameters] @go(S3FileLocation,[]CopyStepDetailsDestinationFileLocationS3FileLocationParameters)
}

#CopyStepDetailsDestinationFileLocationS3FileLocationInitParameters: {
	// Specifies the S3 bucket for the customer input file.
	bucket?: null | string @go(Bucket,*string)

	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	key?: null | string @go(Key,*string)
}

#CopyStepDetailsDestinationFileLocationS3FileLocationObservation: {
	// Specifies the S3 bucket for the customer input file.
	bucket?: null | string @go(Bucket,*string)

	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	key?: null | string @go(Key,*string)
}

#CopyStepDetailsDestinationFileLocationS3FileLocationParameters: {
	// Specifies the S3 bucket for the customer input file.
	// +kubebuilder:validation:Optional
	bucket?: null | string @go(Bucket,*string)

	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)
}

#CopyStepDetailsInitParameters: {
	// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
	destinationFileLocation?: [...#DestinationFileLocationInitParameters] @go(DestinationFileLocation,[]DestinationFileLocationInitParameters)

	// The name of the step, used as an identifier.
	name?: null | string @go(Name,*string)

	// A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE. Valid values are TRUE and FALSE.
	overwriteExisting?: null | string @go(OverwriteExisting,*string)

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	sourceFileLocation?: null | string @go(SourceFileLocation,*string)
}

#CopyStepDetailsObservation: {
	// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
	destinationFileLocation?: [...#DestinationFileLocationObservation] @go(DestinationFileLocation,[]DestinationFileLocationObservation)

	// The name of the step, used as an identifier.
	name?: null | string @go(Name,*string)

	// A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE. Valid values are TRUE and FALSE.
	overwriteExisting?: null | string @go(OverwriteExisting,*string)

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	sourceFileLocation?: null | string @go(SourceFileLocation,*string)
}

#CopyStepDetailsParameters: {
	// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
	// +kubebuilder:validation:Optional
	destinationFileLocation?: [...#DestinationFileLocationParameters] @go(DestinationFileLocation,[]DestinationFileLocationParameters)

	// The name of the step, used as an identifier.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE. Valid values are TRUE and FALSE.
	// +kubebuilder:validation:Optional
	overwriteExisting?: null | string @go(OverwriteExisting,*string)

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	// +kubebuilder:validation:Optional
	sourceFileLocation?: null | string @go(SourceFileLocation,*string)
}

#CustomStepDetailsInitParameters: {
	// The name of the step, used as an identifier.
	name?: null | string @go(Name,*string)

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	sourceFileLocation?: null | string @go(SourceFileLocation,*string)

	// The ARN for the lambda function that is being called.
	target?: null | string @go(Target,*string)

	// Timeout, in seconds, for the step.
	timeoutSeconds?: null | float64 @go(TimeoutSeconds,*float64)
}

#CustomStepDetailsObservation: {
	// The name of the step, used as an identifier.
	name?: null | string @go(Name,*string)

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	sourceFileLocation?: null | string @go(SourceFileLocation,*string)

	// The ARN for the lambda function that is being called.
	target?: null | string @go(Target,*string)

	// Timeout, in seconds, for the step.
	timeoutSeconds?: null | float64 @go(TimeoutSeconds,*float64)
}

#CustomStepDetailsParameters: {
	// The name of the step, used as an identifier.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	// +kubebuilder:validation:Optional
	sourceFileLocation?: null | string @go(SourceFileLocation,*string)

	// The ARN for the lambda function that is being called.
	// +kubebuilder:validation:Optional
	target?: null | string @go(Target,*string)

	// Timeout, in seconds, for the step.
	// +kubebuilder:validation:Optional
	timeoutSeconds?: null | float64 @go(TimeoutSeconds,*float64)
}

#DecryptStepDetailsDestinationFileLocationEFSFileLocationInitParameters: {
	// The ID of the file system, assigned by Amazon EFS.
	fileSystemId?: null | string @go(FileSystemID,*string)

	// The pathname for the folder being used by a workflow.
	path?: null | string @go(Path,*string)
}

#DecryptStepDetailsDestinationFileLocationEFSFileLocationObservation: {
	// The ID of the file system, assigned by Amazon EFS.
	fileSystemId?: null | string @go(FileSystemID,*string)

	// The pathname for the folder being used by a workflow.
	path?: null | string @go(Path,*string)
}

#DecryptStepDetailsDestinationFileLocationEFSFileLocationParameters: {
	// The ID of the file system, assigned by Amazon EFS.
	// +kubebuilder:validation:Optional
	fileSystemId?: null | string @go(FileSystemID,*string)

	// The pathname for the folder being used by a workflow.
	// +kubebuilder:validation:Optional
	path?: null | string @go(Path,*string)
}

#DecryptStepDetailsDestinationFileLocationInitParameters: {
	// Specifies the details for the EFS file being copied.
	efsFileLocation?: [...#DestinationFileLocationEFSFileLocationInitParameters] @go(EFSFileLocation,[]DestinationFileLocationEFSFileLocationInitParameters)

	// Specifies the details for the S3 file being copied.
	s3FileLocation?: [...#DestinationFileLocationS3FileLocationInitParameters] @go(S3FileLocation,[]DestinationFileLocationS3FileLocationInitParameters)
}

#DecryptStepDetailsDestinationFileLocationObservation: {
	// Specifies the details for the EFS file being copied.
	efsFileLocation?: [...#DestinationFileLocationEFSFileLocationObservation] @go(EFSFileLocation,[]DestinationFileLocationEFSFileLocationObservation)

	// Specifies the details for the S3 file being copied.
	s3FileLocation?: [...#DestinationFileLocationS3FileLocationObservation] @go(S3FileLocation,[]DestinationFileLocationS3FileLocationObservation)
}

#DecryptStepDetailsDestinationFileLocationParameters: {
	// Specifies the details for the EFS file being copied.
	// +kubebuilder:validation:Optional
	efsFileLocation?: [...#DestinationFileLocationEFSFileLocationParameters] @go(EFSFileLocation,[]DestinationFileLocationEFSFileLocationParameters)

	// Specifies the details for the S3 file being copied.
	// +kubebuilder:validation:Optional
	s3FileLocation?: [...#DestinationFileLocationS3FileLocationParameters] @go(S3FileLocation,[]DestinationFileLocationS3FileLocationParameters)
}

#DecryptStepDetailsDestinationFileLocationS3FileLocationInitParameters: {
	// Specifies the S3 bucket for the customer input file.
	bucket?: null | string @go(Bucket,*string)

	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	key?: null | string @go(Key,*string)
}

#DecryptStepDetailsDestinationFileLocationS3FileLocationObservation: {
	// Specifies the S3 bucket for the customer input file.
	bucket?: null | string @go(Bucket,*string)

	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	key?: null | string @go(Key,*string)
}

#DecryptStepDetailsDestinationFileLocationS3FileLocationParameters: {
	// Specifies the S3 bucket for the customer input file.
	// +kubebuilder:validation:Optional
	bucket?: null | string @go(Bucket,*string)

	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)
}

#DecryptStepDetailsInitParameters: {
	// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
	destinationFileLocation?: [...#DecryptStepDetailsDestinationFileLocationInitParameters] @go(DestinationFileLocation,[]DecryptStepDetailsDestinationFileLocationInitParameters)

	// The name of the step, used as an identifier.
	name?: null | string @go(Name,*string)

	// A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE. Valid values are TRUE and FALSE.
	overwriteExisting?: null | string @go(OverwriteExisting,*string)

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	sourceFileLocation?: null | string @go(SourceFileLocation,*string)

	// One of the following step types are supported. COPY, CUSTOM, DECRYPT, DELETE, and TAG.
	type?: null | string @go(Type,*string)
}

#DecryptStepDetailsObservation: {
	// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
	destinationFileLocation?: [...#DecryptStepDetailsDestinationFileLocationObservation] @go(DestinationFileLocation,[]DecryptStepDetailsDestinationFileLocationObservation)

	// The name of the step, used as an identifier.
	name?: null | string @go(Name,*string)

	// A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE. Valid values are TRUE and FALSE.
	overwriteExisting?: null | string @go(OverwriteExisting,*string)

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	sourceFileLocation?: null | string @go(SourceFileLocation,*string)

	// One of the following step types are supported. COPY, CUSTOM, DECRYPT, DELETE, and TAG.
	type?: null | string @go(Type,*string)
}

#DecryptStepDetailsParameters: {
	// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
	// +kubebuilder:validation:Optional
	destinationFileLocation?: [...#DecryptStepDetailsDestinationFileLocationParameters] @go(DestinationFileLocation,[]DecryptStepDetailsDestinationFileLocationParameters)

	// The name of the step, used as an identifier.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE. Valid values are TRUE and FALSE.
	// +kubebuilder:validation:Optional
	overwriteExisting?: null | string @go(OverwriteExisting,*string)

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	// +kubebuilder:validation:Optional
	sourceFileLocation?: null | string @go(SourceFileLocation,*string)

	// One of the following step types are supported. COPY, CUSTOM, DECRYPT, DELETE, and TAG.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

#DeleteStepDetailsInitParameters: {
	// The name of the step, used as an identifier.
	name?: null | string @go(Name,*string)

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	sourceFileLocation?: null | string @go(SourceFileLocation,*string)
}

#DeleteStepDetailsObservation: {
	// The name of the step, used as an identifier.
	name?: null | string @go(Name,*string)

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	sourceFileLocation?: null | string @go(SourceFileLocation,*string)
}

#DeleteStepDetailsParameters: {
	// The name of the step, used as an identifier.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	// +kubebuilder:validation:Optional
	sourceFileLocation?: null | string @go(SourceFileLocation,*string)
}

#DestinationFileLocationEFSFileLocationInitParameters: {
	// The ID of the file system, assigned by Amazon EFS.
	fileSystemId?: null | string @go(FileSystemID,*string)

	// The pathname for the folder being used by a workflow.
	path?: null | string @go(Path,*string)
}

#DestinationFileLocationEFSFileLocationObservation: {
	// The ID of the file system, assigned by Amazon EFS.
	fileSystemId?: null | string @go(FileSystemID,*string)

	// The pathname for the folder being used by a workflow.
	path?: null | string @go(Path,*string)
}

#DestinationFileLocationEFSFileLocationParameters: {
	// The ID of the file system, assigned by Amazon EFS.
	// +kubebuilder:validation:Optional
	fileSystemId?: null | string @go(FileSystemID,*string)

	// The pathname for the folder being used by a workflow.
	// +kubebuilder:validation:Optional
	path?: null | string @go(Path,*string)
}

#DestinationFileLocationInitParameters: {
	// Specifies the details for the EFS file being copied.
	efsFileLocation?: [...#EFSFileLocationInitParameters] @go(EFSFileLocation,[]EFSFileLocationInitParameters)

	// Specifies the details for the S3 file being copied.
	s3FileLocation?: [...#S3FileLocationInitParameters] @go(S3FileLocation,[]S3FileLocationInitParameters)
}

#DestinationFileLocationObservation: {
	// Specifies the details for the EFS file being copied.
	efsFileLocation?: [...#EFSFileLocationObservation] @go(EFSFileLocation,[]EFSFileLocationObservation)

	// Specifies the details for the S3 file being copied.
	s3FileLocation?: [...#S3FileLocationObservation] @go(S3FileLocation,[]S3FileLocationObservation)
}

#DestinationFileLocationParameters: {
	// Specifies the details for the EFS file being copied.
	// +kubebuilder:validation:Optional
	efsFileLocation?: [...#EFSFileLocationParameters] @go(EFSFileLocation,[]EFSFileLocationParameters)

	// Specifies the details for the S3 file being copied.
	// +kubebuilder:validation:Optional
	s3FileLocation?: [...#S3FileLocationParameters] @go(S3FileLocation,[]S3FileLocationParameters)
}

#DestinationFileLocationS3FileLocationInitParameters: {
	// Specifies the S3 bucket for the customer input file.
	bucket?: null | string @go(Bucket,*string)

	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	key?: null | string @go(Key,*string)
}

#DestinationFileLocationS3FileLocationObservation: {
	// Specifies the S3 bucket for the customer input file.
	bucket?: null | string @go(Bucket,*string)

	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	key?: null | string @go(Key,*string)
}

#DestinationFileLocationS3FileLocationParameters: {
	// Specifies the S3 bucket for the customer input file.
	// +kubebuilder:validation:Optional
	bucket?: null | string @go(Bucket,*string)

	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)
}

#EFSFileLocationInitParameters: {
	// The ID of the file system, assigned by Amazon EFS.
	fileSystemId?: null | string @go(FileSystemID,*string)

	// The pathname for the folder being used by a workflow.
	path?: null | string @go(Path,*string)
}

#EFSFileLocationObservation: {
	// The ID of the file system, assigned by Amazon EFS.
	fileSystemId?: null | string @go(FileSystemID,*string)

	// The pathname for the folder being used by a workflow.
	path?: null | string @go(Path,*string)
}

#EFSFileLocationParameters: {
	// The ID of the file system, assigned by Amazon EFS.
	// +kubebuilder:validation:Optional
	fileSystemId?: null | string @go(FileSystemID,*string)

	// The pathname for the folder being used by a workflow.
	// +kubebuilder:validation:Optional
	path?: null | string @go(Path,*string)
}

#OnExceptionStepsInitParameters: {
	// Details for a step that performs a file copy. See Copy Step Details below.
	copyStepDetails?: [...#CopyStepDetailsInitParameters] @go(CopyStepDetails,[]CopyStepDetailsInitParameters)

	// Details for a step that invokes a lambda function.
	customStepDetails?: [...#CustomStepDetailsInitParameters] @go(CustomStepDetails,[]CustomStepDetailsInitParameters)

	// Details for a step that decrypts the file.
	decryptStepDetails?: [...#DecryptStepDetailsInitParameters] @go(DecryptStepDetails,[]DecryptStepDetailsInitParameters)

	// Details for a step that deletes the file.
	deleteStepDetails?: [...#DeleteStepDetailsInitParameters] @go(DeleteStepDetails,[]DeleteStepDetailsInitParameters)

	// Details for a step that creates one or more tags.
	tagStepDetails?: [...#TagStepDetailsInitParameters] @go(TagStepDetails,[]TagStepDetailsInitParameters)

	// One of the following step types are supported. COPY, CUSTOM, DECRYPT, DELETE, and TAG.
	type?: null | string @go(Type,*string)
}

#OnExceptionStepsObservation: {
	// Details for a step that performs a file copy. See Copy Step Details below.
	copyStepDetails?: [...#CopyStepDetailsObservation] @go(CopyStepDetails,[]CopyStepDetailsObservation)

	// Details for a step that invokes a lambda function.
	customStepDetails?: [...#CustomStepDetailsObservation] @go(CustomStepDetails,[]CustomStepDetailsObservation)

	// Details for a step that decrypts the file.
	decryptStepDetails?: [...#DecryptStepDetailsObservation] @go(DecryptStepDetails,[]DecryptStepDetailsObservation)

	// Details for a step that deletes the file.
	deleteStepDetails?: [...#DeleteStepDetailsObservation] @go(DeleteStepDetails,[]DeleteStepDetailsObservation)

	// Details for a step that creates one or more tags.
	tagStepDetails?: [...#TagStepDetailsObservation] @go(TagStepDetails,[]TagStepDetailsObservation)

	// One of the following step types are supported. COPY, CUSTOM, DECRYPT, DELETE, and TAG.
	type?: null | string @go(Type,*string)
}

#OnExceptionStepsParameters: {
	// Details for a step that performs a file copy. See Copy Step Details below.
	// +kubebuilder:validation:Optional
	copyStepDetails?: [...#CopyStepDetailsParameters] @go(CopyStepDetails,[]CopyStepDetailsParameters)

	// Details for a step that invokes a lambda function.
	// +kubebuilder:validation:Optional
	customStepDetails?: [...#CustomStepDetailsParameters] @go(CustomStepDetails,[]CustomStepDetailsParameters)

	// Details for a step that decrypts the file.
	// +kubebuilder:validation:Optional
	decryptStepDetails?: [...#DecryptStepDetailsParameters] @go(DecryptStepDetails,[]DecryptStepDetailsParameters)

	// Details for a step that deletes the file.
	// +kubebuilder:validation:Optional
	deleteStepDetails?: [...#DeleteStepDetailsParameters] @go(DeleteStepDetails,[]DeleteStepDetailsParameters)

	// Details for a step that creates one or more tags.
	// +kubebuilder:validation:Optional
	tagStepDetails?: [...#TagStepDetailsParameters] @go(TagStepDetails,[]TagStepDetailsParameters)

	// One of the following step types are supported. COPY, CUSTOM, DECRYPT, DELETE, and TAG.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

#S3FileLocationInitParameters: {
	// Specifies the S3 bucket for the customer input file.
	bucket?: null | string @go(Bucket,*string)

	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	key?: null | string @go(Key,*string)
}

#S3FileLocationObservation: {
	// Specifies the S3 bucket for the customer input file.
	bucket?: null | string @go(Bucket,*string)

	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	key?: null | string @go(Key,*string)
}

#S3FileLocationParameters: {
	// Specifies the S3 bucket for the customer input file.
	// +kubebuilder:validation:Optional
	bucket?: null | string @go(Bucket,*string)

	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)
}

#StepsCopyStepDetailsInitParameters: {
	// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
	destinationFileLocation?: [...#CopyStepDetailsDestinationFileLocationInitParameters] @go(DestinationFileLocation,[]CopyStepDetailsDestinationFileLocationInitParameters)

	// The name of the step, used as an identifier.
	name?: null | string @go(Name,*string)

	// A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE. Valid values are TRUE and FALSE.
	overwriteExisting?: null | string @go(OverwriteExisting,*string)

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	sourceFileLocation?: null | string @go(SourceFileLocation,*string)
}

#StepsCopyStepDetailsObservation: {
	// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
	destinationFileLocation?: [...#CopyStepDetailsDestinationFileLocationObservation] @go(DestinationFileLocation,[]CopyStepDetailsDestinationFileLocationObservation)

	// The name of the step, used as an identifier.
	name?: null | string @go(Name,*string)

	// A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE. Valid values are TRUE and FALSE.
	overwriteExisting?: null | string @go(OverwriteExisting,*string)

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	sourceFileLocation?: null | string @go(SourceFileLocation,*string)
}

#StepsCopyStepDetailsParameters: {
	// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
	// +kubebuilder:validation:Optional
	destinationFileLocation?: [...#CopyStepDetailsDestinationFileLocationParameters] @go(DestinationFileLocation,[]CopyStepDetailsDestinationFileLocationParameters)

	// The name of the step, used as an identifier.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE. Valid values are TRUE and FALSE.
	// +kubebuilder:validation:Optional
	overwriteExisting?: null | string @go(OverwriteExisting,*string)

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	// +kubebuilder:validation:Optional
	sourceFileLocation?: null | string @go(SourceFileLocation,*string)
}

#StepsCustomStepDetailsInitParameters: {
	// The name of the step, used as an identifier.
	name?: null | string @go(Name,*string)

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	sourceFileLocation?: null | string @go(SourceFileLocation,*string)

	// Timeout, in seconds, for the step.
	timeoutSeconds?: null | float64 @go(TimeoutSeconds,*float64)
}

#StepsCustomStepDetailsObservation: {
	// The name of the step, used as an identifier.
	name?: null | string @go(Name,*string)

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	sourceFileLocation?: null | string @go(SourceFileLocation,*string)

	// The ARN for the lambda function that is being called.
	target?: null | string @go(Target,*string)

	// Timeout, in seconds, for the step.
	timeoutSeconds?: null | float64 @go(TimeoutSeconds,*float64)
}

#StepsCustomStepDetailsParameters: {
	// The name of the step, used as an identifier.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	// +kubebuilder:validation:Optional
	sourceFileLocation?: null | string @go(SourceFileLocation,*string)

	// The ARN for the lambda function that is being called.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/lambda/v1beta1.Function
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	target?: null | string @go(Target,*string)

	// Reference to a Function in lambda to populate target.
	// +kubebuilder:validation:Optional
	targetRef?: null | v1.#Reference @go(TargetRef,*v1.Reference)

	// Selector for a Function in lambda to populate target.
	// +kubebuilder:validation:Optional
	targetSelector?: null | v1.#Selector @go(TargetSelector,*v1.Selector)

	// Timeout, in seconds, for the step.
	// +kubebuilder:validation:Optional
	timeoutSeconds?: null | float64 @go(TimeoutSeconds,*float64)
}

#StepsDecryptStepDetailsDestinationFileLocationInitParameters: {
	// Specifies the details for the EFS file being copied.
	efsFileLocation?: [...#DecryptStepDetailsDestinationFileLocationEFSFileLocationInitParameters] @go(EFSFileLocation,[]DecryptStepDetailsDestinationFileLocationEFSFileLocationInitParameters)

	// Specifies the details for the S3 file being copied.
	s3FileLocation?: [...#DecryptStepDetailsDestinationFileLocationS3FileLocationInitParameters] @go(S3FileLocation,[]DecryptStepDetailsDestinationFileLocationS3FileLocationInitParameters)
}

#StepsDecryptStepDetailsDestinationFileLocationObservation: {
	// Specifies the details for the EFS file being copied.
	efsFileLocation?: [...#DecryptStepDetailsDestinationFileLocationEFSFileLocationObservation] @go(EFSFileLocation,[]DecryptStepDetailsDestinationFileLocationEFSFileLocationObservation)

	// Specifies the details for the S3 file being copied.
	s3FileLocation?: [...#DecryptStepDetailsDestinationFileLocationS3FileLocationObservation] @go(S3FileLocation,[]DecryptStepDetailsDestinationFileLocationS3FileLocationObservation)
}

#StepsDecryptStepDetailsDestinationFileLocationParameters: {
	// Specifies the details for the EFS file being copied.
	// +kubebuilder:validation:Optional
	efsFileLocation?: [...#DecryptStepDetailsDestinationFileLocationEFSFileLocationParameters] @go(EFSFileLocation,[]DecryptStepDetailsDestinationFileLocationEFSFileLocationParameters)

	// Specifies the details for the S3 file being copied.
	// +kubebuilder:validation:Optional
	s3FileLocation?: [...#DecryptStepDetailsDestinationFileLocationS3FileLocationParameters] @go(S3FileLocation,[]DecryptStepDetailsDestinationFileLocationS3FileLocationParameters)
}

#StepsDecryptStepDetailsInitParameters: {
	// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
	destinationFileLocation?: [...#StepsDecryptStepDetailsDestinationFileLocationInitParameters] @go(DestinationFileLocation,[]StepsDecryptStepDetailsDestinationFileLocationInitParameters)

	// The name of the step, used as an identifier.
	name?: null | string @go(Name,*string)

	// A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE. Valid values are TRUE and FALSE.
	overwriteExisting?: null | string @go(OverwriteExisting,*string)

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	sourceFileLocation?: null | string @go(SourceFileLocation,*string)

	// One of the following step types are supported. COPY, CUSTOM, DECRYPT, DELETE, and TAG.
	type?: null | string @go(Type,*string)
}

#StepsDecryptStepDetailsObservation: {
	// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
	destinationFileLocation?: [...#StepsDecryptStepDetailsDestinationFileLocationObservation] @go(DestinationFileLocation,[]StepsDecryptStepDetailsDestinationFileLocationObservation)

	// The name of the step, used as an identifier.
	name?: null | string @go(Name,*string)

	// A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE. Valid values are TRUE and FALSE.
	overwriteExisting?: null | string @go(OverwriteExisting,*string)

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	sourceFileLocation?: null | string @go(SourceFileLocation,*string)

	// One of the following step types are supported. COPY, CUSTOM, DECRYPT, DELETE, and TAG.
	type?: null | string @go(Type,*string)
}

#StepsDecryptStepDetailsParameters: {
	// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
	// +kubebuilder:validation:Optional
	destinationFileLocation?: [...#StepsDecryptStepDetailsDestinationFileLocationParameters] @go(DestinationFileLocation,[]StepsDecryptStepDetailsDestinationFileLocationParameters)

	// The name of the step, used as an identifier.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE. Valid values are TRUE and FALSE.
	// +kubebuilder:validation:Optional
	overwriteExisting?: null | string @go(OverwriteExisting,*string)

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	// +kubebuilder:validation:Optional
	sourceFileLocation?: null | string @go(SourceFileLocation,*string)

	// One of the following step types are supported. COPY, CUSTOM, DECRYPT, DELETE, and TAG.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

#StepsDeleteStepDetailsInitParameters: {
	// The name of the step, used as an identifier.
	name?: null | string @go(Name,*string)

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	sourceFileLocation?: null | string @go(SourceFileLocation,*string)
}

#StepsDeleteStepDetailsObservation: {
	// The name of the step, used as an identifier.
	name?: null | string @go(Name,*string)

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	sourceFileLocation?: null | string @go(SourceFileLocation,*string)
}

#StepsDeleteStepDetailsParameters: {
	// The name of the step, used as an identifier.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	// +kubebuilder:validation:Optional
	sourceFileLocation?: null | string @go(SourceFileLocation,*string)
}

#StepsInitParameters: {
	// Details for a step that performs a file copy. See Copy Step Details below.
	copyStepDetails?: [...#StepsCopyStepDetailsInitParameters] @go(CopyStepDetails,[]StepsCopyStepDetailsInitParameters)

	// Details for a step that invokes a lambda function.
	customStepDetails?: [...#StepsCustomStepDetailsInitParameters] @go(CustomStepDetails,[]StepsCustomStepDetailsInitParameters)

	// Details for a step that decrypts the file.
	decryptStepDetails?: [...#StepsDecryptStepDetailsInitParameters] @go(DecryptStepDetails,[]StepsDecryptStepDetailsInitParameters)

	// Details for a step that deletes the file.
	deleteStepDetails?: [...#StepsDeleteStepDetailsInitParameters] @go(DeleteStepDetails,[]StepsDeleteStepDetailsInitParameters)

	// Details for a step that creates one or more tags.
	tagStepDetails?: [...#StepsTagStepDetailsInitParameters] @go(TagStepDetails,[]StepsTagStepDetailsInitParameters)

	// One of the following step types are supported. COPY, CUSTOM, DECRYPT, DELETE, and TAG.
	type?: null | string @go(Type,*string)
}

#StepsObservation: {
	// Details for a step that performs a file copy. See Copy Step Details below.
	copyStepDetails?: [...#StepsCopyStepDetailsObservation] @go(CopyStepDetails,[]StepsCopyStepDetailsObservation)

	// Details for a step that invokes a lambda function.
	customStepDetails?: [...#StepsCustomStepDetailsObservation] @go(CustomStepDetails,[]StepsCustomStepDetailsObservation)

	// Details for a step that decrypts the file.
	decryptStepDetails?: [...#StepsDecryptStepDetailsObservation] @go(DecryptStepDetails,[]StepsDecryptStepDetailsObservation)

	// Details for a step that deletes the file.
	deleteStepDetails?: [...#StepsDeleteStepDetailsObservation] @go(DeleteStepDetails,[]StepsDeleteStepDetailsObservation)

	// Details for a step that creates one or more tags.
	tagStepDetails?: [...#StepsTagStepDetailsObservation] @go(TagStepDetails,[]StepsTagStepDetailsObservation)

	// One of the following step types are supported. COPY, CUSTOM, DECRYPT, DELETE, and TAG.
	type?: null | string @go(Type,*string)
}

#StepsParameters: {
	// Details for a step that performs a file copy. See Copy Step Details below.
	// +kubebuilder:validation:Optional
	copyStepDetails?: [...#StepsCopyStepDetailsParameters] @go(CopyStepDetails,[]StepsCopyStepDetailsParameters)

	// Details for a step that invokes a lambda function.
	// +kubebuilder:validation:Optional
	customStepDetails?: [...#StepsCustomStepDetailsParameters] @go(CustomStepDetails,[]StepsCustomStepDetailsParameters)

	// Details for a step that decrypts the file.
	// +kubebuilder:validation:Optional
	decryptStepDetails?: [...#StepsDecryptStepDetailsParameters] @go(DecryptStepDetails,[]StepsDecryptStepDetailsParameters)

	// Details for a step that deletes the file.
	// +kubebuilder:validation:Optional
	deleteStepDetails?: [...#StepsDeleteStepDetailsParameters] @go(DeleteStepDetails,[]StepsDeleteStepDetailsParameters)

	// Details for a step that creates one or more tags.
	// +kubebuilder:validation:Optional
	tagStepDetails?: [...#StepsTagStepDetailsParameters] @go(TagStepDetails,[]StepsTagStepDetailsParameters)

	// One of the following step types are supported. COPY, CUSTOM, DECRYPT, DELETE, and TAG.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

#StepsTagStepDetailsInitParameters: {
	// The name of the step, used as an identifier.
	name?: null | string @go(Name,*string)

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	sourceFileLocation?: null | string @go(SourceFileLocation,*string)

	// Key-value map of resource tags.
	tags?: [...#TagStepDetailsTagsInitParameters] @go(Tags,[]TagStepDetailsTagsInitParameters)
}

#StepsTagStepDetailsObservation: {
	// The name of the step, used as an identifier.
	name?: null | string @go(Name,*string)

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	sourceFileLocation?: null | string @go(SourceFileLocation,*string)

	// Key-value map of resource tags.
	tags?: [...#TagStepDetailsTagsObservation] @go(Tags,[]TagStepDetailsTagsObservation)
}

#StepsTagStepDetailsParameters: {
	// The name of the step, used as an identifier.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	// +kubebuilder:validation:Optional
	sourceFileLocation?: null | string @go(SourceFileLocation,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: [...#TagStepDetailsTagsParameters] @go(Tags,[]TagStepDetailsTagsParameters)
}

#TagStepDetailsInitParameters: {
	// The name of the step, used as an identifier.
	name?: null | string @go(Name,*string)

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	sourceFileLocation?: null | string @go(SourceFileLocation,*string)

	// Key-value map of resource tags.
	tags?: [...#TagsInitParameters] @go(Tags,[]TagsInitParameters)
}

#TagStepDetailsObservation: {
	// The name of the step, used as an identifier.
	name?: null | string @go(Name,*string)

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	sourceFileLocation?: null | string @go(SourceFileLocation,*string)

	// Key-value map of resource tags.
	tags?: [...#TagsObservation] @go(Tags,[]TagsObservation)
}

#TagStepDetailsParameters: {
	// The name of the step, used as an identifier.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	// +kubebuilder:validation:Optional
	sourceFileLocation?: null | string @go(SourceFileLocation,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: [...#TagsParameters] @go(Tags,[]TagsParameters)
}

#TagStepDetailsTagsInitParameters: {
	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	key?: null | string @go(Key,*string)

	// The value that corresponds to the key.
	value?: null | string @go(Value,*string)
}

#TagStepDetailsTagsObservation: {
	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	key?: null | string @go(Key,*string)

	// The value that corresponds to the key.
	value?: null | string @go(Value,*string)
}

#TagStepDetailsTagsParameters: {
	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)

	// The value that corresponds to the key.
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

#TagsInitParameters: {
	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	key?: null | string @go(Key,*string)

	// The value that corresponds to the key.
	value?: null | string @go(Value,*string)
}

#TagsObservation: {
	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	key?: null | string @go(Key,*string)

	// The value that corresponds to the key.
	value?: null | string @go(Value,*string)
}

#TagsParameters: {
	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)

	// The value that corresponds to the key.
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

#WorkflowInitParameters: {
	// A textual description for the workflow.
	description?: null | string @go(Description,*string)

	// Specifies the steps (actions) to take if errors are encountered during execution of the workflow. See Workflow Steps below.
	onExceptionSteps?: [...#OnExceptionStepsInitParameters] @go(OnExceptionSteps,[]OnExceptionStepsInitParameters)

	// Specifies the details for the steps that are in the specified workflow. See Workflow Steps below.
	steps?: [...#StepsInitParameters] @go(Steps,[]StepsInitParameters)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#WorkflowObservation: {
	// The Workflow ARN.
	arn?: null | string @go(Arn,*string)

	// A textual description for the workflow.
	description?: null | string @go(Description,*string)

	// The Workflow id.
	id?: null | string @go(ID,*string)

	// Specifies the steps (actions) to take if errors are encountered during execution of the workflow. See Workflow Steps below.
	onExceptionSteps?: [...#OnExceptionStepsObservation] @go(OnExceptionSteps,[]OnExceptionStepsObservation)

	// Specifies the details for the steps that are in the specified workflow. See Workflow Steps below.
	steps?: [...#StepsObservation] @go(Steps,[]StepsObservation)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#WorkflowParameters: {
	// A textual description for the workflow.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Specifies the steps (actions) to take if errors are encountered during execution of the workflow. See Workflow Steps below.
	// +kubebuilder:validation:Optional
	onExceptionSteps?: [...#OnExceptionStepsParameters] @go(OnExceptionSteps,[]OnExceptionStepsParameters)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Specifies the details for the steps that are in the specified workflow. See Workflow Steps below.
	// +kubebuilder:validation:Optional
	steps?: [...#StepsParameters] @go(Steps,[]StepsParameters)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// WorkflowSpec defines the desired state of Workflow
#WorkflowSpec: {
	v1.#ResourceSpec
	forProvider: #WorkflowParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #WorkflowInitParameters @go(InitProvider)
}

// WorkflowStatus defines the observed state of Workflow.
#WorkflowStatus: {
	v1.#ResourceStatus
	atProvider?: #WorkflowObservation @go(AtProvider)
}

// Workflow is the Schema for the Workflows API. Provides a AWS Transfer Workflow resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Workflow: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.steps) || (has(self.initProvider) && has(self.initProvider.steps))",message="spec.forProvider.steps is a required parameter"
	spec:    #WorkflowSpec   @go(Spec)
	status?: #WorkflowStatus @go(Status)
}

// WorkflowList contains a list of Workflows
#WorkflowList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Workflow] @go(Items,[]Workflow)
}
