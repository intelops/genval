// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/dynamodb/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#TableItemInitParameters: {
	// Hash key to use for lookups and identification of the item
	hashKey?: null | string @go(HashKey,*string)

	// JSON representation of a map of attribute name/value pairs, one for each attribute. Only the primary key attributes are required; you can optionally provide other attribute name-value pairs for the item.
	item?: null | string @go(Item,*string)

	// Range key to use for lookups and identification of the item. Required if there is range key defined in the table.
	rangeKey?: null | string @go(RangeKey,*string)
}

#TableItemObservation: {
	// Hash key to use for lookups and identification of the item
	hashKey?: null | string @go(HashKey,*string)
	id?:      null | string @go(ID,*string)

	// JSON representation of a map of attribute name/value pairs, one for each attribute. Only the primary key attributes are required; you can optionally provide other attribute name-value pairs for the item.
	item?: null | string @go(Item,*string)

	// Range key to use for lookups and identification of the item. Required if there is range key defined in the table.
	rangeKey?: null | string @go(RangeKey,*string)

	// Name of the table to contain the item.
	tableName?: null | string @go(TableName,*string)
}

#TableItemParameters: {
	// Hash key to use for lookups and identification of the item
	// +kubebuilder:validation:Optional
	hashKey?: null | string @go(HashKey,*string)

	// JSON representation of a map of attribute name/value pairs, one for each attribute. Only the primary key attributes are required; you can optionally provide other attribute name-value pairs for the item.
	// +kubebuilder:validation:Optional
	item?: null | string @go(Item,*string)

	// Range key to use for lookups and identification of the item. Required if there is range key defined in the table.
	// +kubebuilder:validation:Optional
	rangeKey?: null | string @go(RangeKey,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Name of the table to contain the item.
	// +crossplane:generate:reference:type=Table
	// +kubebuilder:validation:Optional
	tableName?: null | string @go(TableName,*string)

	// Reference to a Table to populate tableName.
	// +kubebuilder:validation:Optional
	tableNameRef?: null | v1.#Reference @go(TableNameRef,*v1.Reference)

	// Selector for a Table to populate tableName.
	// +kubebuilder:validation:Optional
	tableNameSelector?: null | v1.#Selector @go(TableNameSelector,*v1.Selector)
}

// TableItemSpec defines the desired state of TableItem
#TableItemSpec: {
	v1.#ResourceSpec
	forProvider: #TableItemParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #TableItemInitParameters @go(InitProvider)
}

// TableItemStatus defines the observed state of TableItem.
#TableItemStatus: {
	v1.#ResourceStatus
	atProvider?: #TableItemObservation @go(AtProvider)
}

// TableItem is the Schema for the TableItems API. Provides a DynamoDB table item resource
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#TableItem: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.hashKey) || (has(self.initProvider) && has(self.initProvider.hashKey))",message="spec.forProvider.hashKey is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.item) || (has(self.initProvider) && has(self.initProvider.item))",message="spec.forProvider.item is a required parameter"
	spec:    #TableItemSpec   @go(Spec)
	status?: #TableItemStatus @go(Status)
}

// TableItemList contains a list of TableItems
#TableItemList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#TableItem] @go(Items,[]TableItem)
}
