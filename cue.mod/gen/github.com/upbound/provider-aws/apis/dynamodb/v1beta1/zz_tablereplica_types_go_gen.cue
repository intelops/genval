// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/dynamodb/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#TableReplicaInitParameters_2: {
	// Whether to enable Point In Time Recovery for the replica. Default is false.
	pointInTimeRecovery?: null | bool @go(PointInTimeRecovery,*bool)

	// Storage class of the table replica. Valid values are STANDARD and STANDARD_INFREQUENT_ACCESS. If not used, the table replica will use the same class as the global table.
	tableClassOverride?: null | string @go(TableClassOverride,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#TableReplicaObservation_2: {
	// ARN of the table replica.
	arn?: null | string @go(Arn,*string)

	// ARN of the main or global table which this resource will replicate.
	globalTableArn?: null | string @go(GlobalTableArn,*string)

	// Name of the table and region of the main global table joined with a semicolon (e.g., TableName:us-east-1).
	id?: null | string @go(ID,*string)

	// ARN of the CMK that should be used for the AWS KMS encryption. This argument should only be used if the key is different from the default KMS-managed DynamoDB key, alias/aws/dynamodb. Note: This attribute will not be populated with the ARN of default keys.
	kmsKeyArn?: null | string @go(KMSKeyArn,*string)

	// Whether to enable Point In Time Recovery for the replica. Default is false.
	pointInTimeRecovery?: null | bool @go(PointInTimeRecovery,*bool)

	// Storage class of the table replica. Valid values are STANDARD and STANDARD_INFREQUENT_ACCESS. If not used, the table replica will use the same class as the global table.
	tableClassOverride?: null | string @go(TableClassOverride,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#TableReplicaParameters_2: {
	// ARN of the main or global table which this resource will replicate.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/dynamodb/v1beta1.Table
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	globalTableArn?: null | string @go(GlobalTableArn,*string)

	// Reference to a Table in dynamodb to populate globalTableArn.
	// +kubebuilder:validation:Optional
	globalTableArnRef?: null | v1.#Reference @go(GlobalTableArnRef,*v1.Reference)

	// Selector for a Table in dynamodb to populate globalTableArn.
	// +kubebuilder:validation:Optional
	globalTableArnSelector?: null | v1.#Selector @go(GlobalTableArnSelector,*v1.Selector)

	// ARN of the CMK that should be used for the AWS KMS encryption. This argument should only be used if the key is different from the default KMS-managed DynamoDB key, alias/aws/dynamodb. Note: This attribute will not be populated with the ARN of default keys.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/kms/v1beta1.Key
	// +kubebuilder:validation:Optional
	kmsKeyArn?: null | string @go(KMSKeyArn,*string)

	// Reference to a Key in kms to populate kmsKeyArn.
	// +kubebuilder:validation:Optional
	kmsKeyArnRef?: null | v1.#Reference @go(KMSKeyArnRef,*v1.Reference)

	// Selector for a Key in kms to populate kmsKeyArn.
	// +kubebuilder:validation:Optional
	kmsKeyArnSelector?: null | v1.#Selector @go(KMSKeyArnSelector,*v1.Selector)

	// Whether to enable Point In Time Recovery for the replica. Default is false.
	// +kubebuilder:validation:Optional
	pointInTimeRecovery?: null | bool @go(PointInTimeRecovery,*bool)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Storage class of the table replica. Valid values are STANDARD and STANDARD_INFREQUENT_ACCESS. If not used, the table replica will use the same class as the global table.
	// +kubebuilder:validation:Optional
	tableClassOverride?: null | string @go(TableClassOverride,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// TableReplicaSpec defines the desired state of TableReplica
#TableReplicaSpec: {
	v1.#ResourceSpec
	forProvider: #TableReplicaParameters_2 @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #TableReplicaInitParameters_2 @go(InitProvider)
}

// TableReplicaStatus defines the observed state of TableReplica.
#TableReplicaStatus: {
	v1.#ResourceStatus
	atProvider?: #TableReplicaObservation_2 @go(AtProvider)
}

// TableReplica is the Schema for the TableReplicas API. Provides a DynamoDB table replica resource
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#TableReplica: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta  @go(ObjectMeta)
	spec:      #TableReplicaSpec   @go(Spec)
	status?:   #TableReplicaStatus @go(Status)
}

// TableReplicaList contains a list of TableReplicas
#TableReplicaList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#TableReplica] @go(Items,[]TableReplica)
}
