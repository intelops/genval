// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/securityhub/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#AccountInitParameters: {
	// Whether to automatically enable new controls when they are added to standards that are enabled. By default, this is set to true, and new controls are enabled automatically. To not automatically enable new controls, set this to false.
	autoEnableControls?: null | bool @go(AutoEnableControls,*bool)

	// Updates whether the calling account has consolidated control findings turned on. If the value for this field is set to SECURITY_CONTROL, Security Hub generates a single finding for a control check even when the check applies to multiple enabled standards. If the value for this field is set to STANDARD_CONTROL, Security Hub generates separate findings for a control check when the check applies to multiple enabled standards. For accounts that are part of an organization, this value can only be updated in the administrator account.
	controlFindingGenerator?: null | string @go(ControlFindingGenerator,*string)

	// Whether to enable the security standards that Security Hub has designated as automatically enabled including:  AWS Foundational Security Best Practices v1.0.0 and CIS AWS Foundations Benchmark v1.2.0. Defaults to true.
	enableDefaultStandards?: null | bool @go(EnableDefaultStandards,*bool)
}

#AccountObservation: {
	// ARN of the SecurityHub Hub created in the account.
	arn?: null | string @go(Arn,*string)

	// Whether to automatically enable new controls when they are added to standards that are enabled. By default, this is set to true, and new controls are enabled automatically. To not automatically enable new controls, set this to false.
	autoEnableControls?: null | bool @go(AutoEnableControls,*bool)

	// Updates whether the calling account has consolidated control findings turned on. If the value for this field is set to SECURITY_CONTROL, Security Hub generates a single finding for a control check even when the check applies to multiple enabled standards. If the value for this field is set to STANDARD_CONTROL, Security Hub generates separate findings for a control check when the check applies to multiple enabled standards. For accounts that are part of an organization, this value can only be updated in the administrator account.
	controlFindingGenerator?: null | string @go(ControlFindingGenerator,*string)

	// Whether to enable the security standards that Security Hub has designated as automatically enabled including:  AWS Foundational Security Best Practices v1.0.0 and CIS AWS Foundations Benchmark v1.2.0. Defaults to true.
	enableDefaultStandards?: null | bool @go(EnableDefaultStandards,*bool)

	// AWS Account ID.
	id?: null | string @go(ID,*string)
}

#AccountParameters: {
	// Whether to automatically enable new controls when they are added to standards that are enabled. By default, this is set to true, and new controls are enabled automatically. To not automatically enable new controls, set this to false.
	// +kubebuilder:validation:Optional
	autoEnableControls?: null | bool @go(AutoEnableControls,*bool)

	// Updates whether the calling account has consolidated control findings turned on. If the value for this field is set to SECURITY_CONTROL, Security Hub generates a single finding for a control check even when the check applies to multiple enabled standards. If the value for this field is set to STANDARD_CONTROL, Security Hub generates separate findings for a control check when the check applies to multiple enabled standards. For accounts that are part of an organization, this value can only be updated in the administrator account.
	// +kubebuilder:validation:Optional
	controlFindingGenerator?: null | string @go(ControlFindingGenerator,*string)

	// Whether to enable the security standards that Security Hub has designated as automatically enabled including:  AWS Foundational Security Best Practices v1.0.0 and CIS AWS Foundations Benchmark v1.2.0. Defaults to true.
	// +kubebuilder:validation:Optional
	enableDefaultStandards?: null | bool @go(EnableDefaultStandards,*bool)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)
}

// AccountSpec defines the desired state of Account
#AccountSpec: {
	v1.#ResourceSpec
	forProvider: #AccountParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #AccountInitParameters @go(InitProvider)
}

// AccountStatus defines the observed state of Account.
#AccountStatus: {
	v1.#ResourceStatus
	atProvider?: #AccountObservation @go(AtProvider)
}

// Account is the Schema for the Accounts API. Enables Security Hub for an AWS account.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Account: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec:      #AccountSpec       @go(Spec)
	status?:   #AccountStatus     @go(Status)
}

// AccountList contains a list of Accounts
#AccountList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Account] @go(Items,[]Account)
}
