// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/securityhub/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#FindingAggregatorInitParameters: {
	// Indicates whether to aggregate findings from all of the available Regions or from a specified list. The options are ALL_REGIONS, ALL_REGIONS_EXCEPT_SPECIFIED or SPECIFIED_REGIONS. When ALL_REGIONS or ALL_REGIONS_EXCEPT_SPECIFIED are used, Security Hub will automatically aggregate findings from new Regions as Security Hub supports them and you opt into them.
	linkingMode?: null | string @go(LinkingMode,*string)

	// List of regions to include or exclude
	specifiedRegions?: [...null | string] @go(SpecifiedRegions,[]*string)
}

#FindingAggregatorObservation: {
	id?: null | string @go(ID,*string)

	// Indicates whether to aggregate findings from all of the available Regions or from a specified list. The options are ALL_REGIONS, ALL_REGIONS_EXCEPT_SPECIFIED or SPECIFIED_REGIONS. When ALL_REGIONS or ALL_REGIONS_EXCEPT_SPECIFIED are used, Security Hub will automatically aggregate findings from new Regions as Security Hub supports them and you opt into them.
	linkingMode?: null | string @go(LinkingMode,*string)

	// List of regions to include or exclude
	specifiedRegions?: [...null | string] @go(SpecifiedRegions,[]*string)
}

#FindingAggregatorParameters: {
	// Indicates whether to aggregate findings from all of the available Regions or from a specified list. The options are ALL_REGIONS, ALL_REGIONS_EXCEPT_SPECIFIED or SPECIFIED_REGIONS. When ALL_REGIONS or ALL_REGIONS_EXCEPT_SPECIFIED are used, Security Hub will automatically aggregate findings from new Regions as Security Hub supports them and you opt into them.
	// +kubebuilder:validation:Optional
	linkingMode?: null | string @go(LinkingMode,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// List of regions to include or exclude
	// +kubebuilder:validation:Optional
	specifiedRegions?: [...null | string] @go(SpecifiedRegions,[]*string)
}

// FindingAggregatorSpec defines the desired state of FindingAggregator
#FindingAggregatorSpec: {
	v1.#ResourceSpec
	forProvider: #FindingAggregatorParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #FindingAggregatorInitParameters @go(InitProvider)
}

// FindingAggregatorStatus defines the observed state of FindingAggregator.
#FindingAggregatorStatus: {
	v1.#ResourceStatus
	atProvider?: #FindingAggregatorObservation @go(AtProvider)
}

// FindingAggregator is the Schema for the FindingAggregators API. Manages a Security Hub finding aggregator
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#FindingAggregator: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.linkingMode) || (has(self.initProvider) && has(self.initProvider.linkingMode))",message="spec.forProvider.linkingMode is a required parameter"
	spec:    #FindingAggregatorSpec   @go(Spec)
	status?: #FindingAggregatorStatus @go(Status)
}

// FindingAggregatorList contains a list of FindingAggregators
#FindingAggregatorList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#FindingAggregator] @go(Items,[]FindingAggregator)
}
