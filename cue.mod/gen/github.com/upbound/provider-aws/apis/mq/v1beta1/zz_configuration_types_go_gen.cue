// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/mq/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#ConfigurationInitParameters_2: {
	// Authentication strategy associated with the configuration. Valid values are simple and ldap. ldap is not supported for engine_type RabbitMQ.
	authenticationStrategy?: null | string @go(AuthenticationStrategy,*string)

	// Broker configuration in XML format. See official docs for supported parameters and format of the XML.
	data?: null | string @go(Data,*string)

	// Description of the configuration.
	description?: null | string @go(Description,*string)

	// Type of broker engine. Valid values are ActiveMQ and RabbitMQ.
	engineType?: null | string @go(EngineType,*string)

	// Version of the broker engine.
	engineVersion?: null | string @go(EngineVersion,*string)

	// Name of the configuration.
	name?: null | string @go(Name,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#ConfigurationObservation_2: {
	// ARN of the configuration.
	arn?: null | string @go(Arn,*string)

	// Authentication strategy associated with the configuration. Valid values are simple and ldap. ldap is not supported for engine_type RabbitMQ.
	authenticationStrategy?: null | string @go(AuthenticationStrategy,*string)

	// Broker configuration in XML format. See official docs for supported parameters and format of the XML.
	data?: null | string @go(Data,*string)

	// Description of the configuration.
	description?: null | string @go(Description,*string)

	// Type of broker engine. Valid values are ActiveMQ and RabbitMQ.
	engineType?: null | string @go(EngineType,*string)

	// Version of the broker engine.
	engineVersion?: null | string @go(EngineVersion,*string)

	// Unique ID that Amazon MQ generates for the configuration.
	id?: null | string @go(ID,*string)

	// Latest revision of the configuration.
	latestRevision?: null | float64 @go(LatestRevision,*float64)

	// Name of the configuration.
	name?: null | string @go(Name,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#ConfigurationParameters_2: {
	// Authentication strategy associated with the configuration. Valid values are simple and ldap. ldap is not supported for engine_type RabbitMQ.
	// +kubebuilder:validation:Optional
	authenticationStrategy?: null | string @go(AuthenticationStrategy,*string)

	// Broker configuration in XML format. See official docs for supported parameters and format of the XML.
	// +kubebuilder:validation:Optional
	data?: null | string @go(Data,*string)

	// Description of the configuration.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Type of broker engine. Valid values are ActiveMQ and RabbitMQ.
	// +kubebuilder:validation:Optional
	engineType?: null | string @go(EngineType,*string)

	// Version of the broker engine.
	// +kubebuilder:validation:Optional
	engineVersion?: null | string @go(EngineVersion,*string)

	// Name of the configuration.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// ConfigurationSpec defines the desired state of Configuration
#ConfigurationSpec: {
	v1.#ResourceSpec
	forProvider: #ConfigurationParameters_2 @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ConfigurationInitParameters_2 @go(InitProvider)
}

// ConfigurationStatus defines the observed state of Configuration.
#ConfigurationStatus: {
	v1.#ResourceStatus
	atProvider?: #ConfigurationObservation_2 @go(AtProvider)
}

// Configuration is the Schema for the Configurations API. Provides an MQ configuration Resource
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Configuration: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.data) || (has(self.initProvider) && has(self.initProvider.data))",message="spec.forProvider.data is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.engineType) || (has(self.initProvider) && has(self.initProvider.engineType))",message="spec.forProvider.engineType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.engineVersion) || (has(self.initProvider) && has(self.initProvider.engineVersion))",message="spec.forProvider.engineVersion is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	spec:    #ConfigurationSpec   @go(Spec)
	status?: #ConfigurationStatus @go(Status)
}

// ConfigurationList contains a list of Configurations
#ConfigurationList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Configuration] @go(Items,[]Configuration)
}
