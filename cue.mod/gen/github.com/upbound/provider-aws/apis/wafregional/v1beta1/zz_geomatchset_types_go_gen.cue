// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/wafregional/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#GeoMatchConstraintInitParameters: {
	// The type of geographical area you want AWS WAF to search for. Currently Country is the only valid value.
	type?: null | string @go(Type,*string)

	// The country that you want AWS WAF to search for.
	// This is the two-letter country code, e.g., US, CA, RU, CN, etc.
	// See docs for all supported values.
	value?: null | string @go(Value,*string)
}

#GeoMatchConstraintObservation: {
	// The type of geographical area you want AWS WAF to search for. Currently Country is the only valid value.
	type?: null | string @go(Type,*string)

	// The country that you want AWS WAF to search for.
	// This is the two-letter country code, e.g., US, CA, RU, CN, etc.
	// See docs for all supported values.
	value?: null | string @go(Value,*string)
}

#GeoMatchConstraintParameters: {
	// The type of geographical area you want AWS WAF to search for. Currently Country is the only valid value.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)

	// The country that you want AWS WAF to search for.
	// This is the two-letter country code, e.g., US, CA, RU, CN, etc.
	// See docs for all supported values.
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

#GeoMatchSetInitParameters: {
	// The Geo Match Constraint objects which contain the country that you want AWS WAF to search for.
	geoMatchConstraint?: [...#GeoMatchConstraintInitParameters] @go(GeoMatchConstraint,[]GeoMatchConstraintInitParameters)

	// The name or description of the Geo Match Set.
	name?: null | string @go(Name,*string)
}

#GeoMatchSetObservation: {
	// The Geo Match Constraint objects which contain the country that you want AWS WAF to search for.
	geoMatchConstraint?: [...#GeoMatchConstraintObservation] @go(GeoMatchConstraint,[]GeoMatchConstraintObservation)

	// The ID of the WAF Regional Geo Match Set.
	id?: null | string @go(ID,*string)

	// The name or description of the Geo Match Set.
	name?: null | string @go(Name,*string)
}

#GeoMatchSetParameters: {
	// The Geo Match Constraint objects which contain the country that you want AWS WAF to search for.
	// +kubebuilder:validation:Optional
	geoMatchConstraint?: [...#GeoMatchConstraintParameters] @go(GeoMatchConstraint,[]GeoMatchConstraintParameters)

	// The name or description of the Geo Match Set.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)
}

// GeoMatchSetSpec defines the desired state of GeoMatchSet
#GeoMatchSetSpec: {
	v1.#ResourceSpec
	forProvider: #GeoMatchSetParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #GeoMatchSetInitParameters @go(InitProvider)
}

// GeoMatchSetStatus defines the observed state of GeoMatchSet.
#GeoMatchSetStatus: {
	v1.#ResourceStatus
	atProvider?: #GeoMatchSetObservation @go(AtProvider)
}

// GeoMatchSet is the Schema for the GeoMatchSets API. Provides a AWS WAF Regional Geo Match Set resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#GeoMatchSet: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	spec:    #GeoMatchSetSpec   @go(Spec)
	status?: #GeoMatchSetStatus @go(Status)
}

// GeoMatchSetList contains a list of GeoMatchSets
#GeoMatchSetList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#GeoMatchSet] @go(Items,[]GeoMatchSet)
}
