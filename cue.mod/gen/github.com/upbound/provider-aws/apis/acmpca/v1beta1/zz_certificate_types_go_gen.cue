// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/acmpca/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#CertificateInitParameters: {
	// Specifies X.509 certificate information to be included in the issued certificate. To use with API Passthrough templates
	apiPassthrough?: null | string @go(APIPassthrough,*string)

	// Algorithm to use to sign certificate requests. Valid values: SHA256WITHRSA, SHA256WITHECDSA, SHA384WITHRSA, SHA384WITHECDSA, SHA512WITHRSA, SHA512WITHECDSA.
	signingAlgorithm?: null | string @go(SigningAlgorithm,*string)

	// Template to use when issuing a certificate.
	// See ACM PCA Documentation for more information.
	templateArn?: null | string @go(TemplateArn,*string)

	// Configures end of the validity period for the certificate. See validity block below.
	validity?: [...#ValidityInitParameters] @go(Validity,[]ValidityInitParameters)
}

#CertificateObservation: {
	// Specifies X.509 certificate information to be included in the issued certificate. To use with API Passthrough templates
	apiPassthrough?: null | string @go(APIPassthrough,*string)

	// ARN of the certificate.
	arn?: null | string @go(Arn,*string)

	// PEM-encoded certificate value.
	certificate?: null | string @go(Certificate,*string)

	// ARN of the certificate authority.
	certificateAuthorityArn?: null | string @go(CertificateAuthorityArn,*string)

	// PEM-encoded certificate chain that includes any intermediate certificates and chains up to root CA.
	certificateChain?: null | string @go(CertificateChain,*string)
	id?:               null | string @go(ID,*string)

	// Algorithm to use to sign certificate requests. Valid values: SHA256WITHRSA, SHA256WITHECDSA, SHA384WITHRSA, SHA384WITHECDSA, SHA512WITHRSA, SHA512WITHECDSA.
	signingAlgorithm?: null | string @go(SigningAlgorithm,*string)

	// Template to use when issuing a certificate.
	// See ACM PCA Documentation for more information.
	templateArn?: null | string @go(TemplateArn,*string)

	// Configures end of the validity period for the certificate. See validity block below.
	validity?: [...#ValidityObservation] @go(Validity,[]ValidityObservation)
}

#CertificateParameters: {
	// Specifies X.509 certificate information to be included in the issued certificate. To use with API Passthrough templates
	// +kubebuilder:validation:Optional
	apiPassthrough?: null | string @go(APIPassthrough,*string)

	// ARN of the certificate authority.
	// +crossplane:generate:reference:type=CertificateAuthority
	// +kubebuilder:validation:Optional
	certificateAuthorityArn?: null | string @go(CertificateAuthorityArn,*string)

	// Reference to a CertificateAuthority to populate certificateAuthorityArn.
	// +kubebuilder:validation:Optional
	certificateAuthorityArnRef?: null | v1.#Reference @go(CertificateAuthorityArnRef,*v1.Reference)

	// Selector for a CertificateAuthority to populate certificateAuthorityArn.
	// +kubebuilder:validation:Optional
	certificateAuthorityArnSelector?: null | v1.#Selector @go(CertificateAuthorityArnSelector,*v1.Selector)

	// Certificate Signing Request in PEM format.
	// +kubebuilder:validation:Optional
	certificateSigningRequestSecretRef: v1.#SecretKeySelector @go(CertificateSigningRequestSecretRef)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Algorithm to use to sign certificate requests. Valid values: SHA256WITHRSA, SHA256WITHECDSA, SHA384WITHRSA, SHA384WITHECDSA, SHA512WITHRSA, SHA512WITHECDSA.
	// +kubebuilder:validation:Optional
	signingAlgorithm?: null | string @go(SigningAlgorithm,*string)

	// Template to use when issuing a certificate.
	// See ACM PCA Documentation for more information.
	// +kubebuilder:validation:Optional
	templateArn?: null | string @go(TemplateArn,*string)

	// Configures end of the validity period for the certificate. See validity block below.
	// +kubebuilder:validation:Optional
	validity?: [...#ValidityParameters] @go(Validity,[]ValidityParameters)
}

#ValidityInitParameters: {
	// Determines how value is interpreted. Valid values: DAYS, MONTHS, YEARS, ABSOLUTE, END_DATE.
	type?: null | string @go(Type,*string)

	// If type is DAYS, MONTHS, or YEARS, the relative time until the certificate expires. If type is ABSOLUTE, the date in seconds since the Unix epoch. If type is END_DATE, the  date in RFC 3339 format.
	value?: null | string @go(Value,*string)
}

#ValidityObservation: {
	// Determines how value is interpreted. Valid values: DAYS, MONTHS, YEARS, ABSOLUTE, END_DATE.
	type?: null | string @go(Type,*string)

	// If type is DAYS, MONTHS, or YEARS, the relative time until the certificate expires. If type is ABSOLUTE, the date in seconds since the Unix epoch. If type is END_DATE, the  date in RFC 3339 format.
	value?: null | string @go(Value,*string)
}

#ValidityParameters: {
	// Determines how value is interpreted. Valid values: DAYS, MONTHS, YEARS, ABSOLUTE, END_DATE.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)

	// If type is DAYS, MONTHS, or YEARS, the relative time until the certificate expires. If type is ABSOLUTE, the date in seconds since the Unix epoch. If type is END_DATE, the  date in RFC 3339 format.
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

// CertificateSpec defines the desired state of Certificate
#CertificateSpec: {
	v1.#ResourceSpec
	forProvider: #CertificateParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #CertificateInitParameters @go(InitProvider)
}

// CertificateStatus defines the observed state of Certificate.
#CertificateStatus: {
	v1.#ResourceStatus
	atProvider?: #CertificateObservation @go(AtProvider)
}

// Certificate is the Schema for the Certificates API. Provides a resource to issue a certificate using AWS Certificate Manager Private Certificate Authority (ACM PCA)
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Certificate: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.certificateSigningRequestSecretRef)",message="spec.forProvider.certificateSigningRequestSecretRef is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.signingAlgorithm) || (has(self.initProvider) && has(self.initProvider.signingAlgorithm))",message="spec.forProvider.signingAlgorithm is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.validity) || (has(self.initProvider) && has(self.initProvider.validity))",message="spec.forProvider.validity is a required parameter"
	spec:    #CertificateSpec   @go(Spec)
	status?: #CertificateStatus @go(Status)
}

// CertificateList contains a list of Certificates
#CertificateList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Certificate] @go(Items,[]Certificate)
}
