// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/athena/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#NamedQueryInitParameters: {
	// Brief explanation of the query. Maximum length of 1024.
	description?: null | string @go(Description,*string)

	// Plain language name for the query. Maximum length of 128.
	name?: null | string @go(Name,*string)

	// Text of the query itself. In other words, all query statements. Maximum length of 262144.
	query?: null | string @go(Query,*string)
}

#NamedQueryObservation: {
	// Database to which the query belongs.
	database?: null | string @go(Database,*string)

	// Brief explanation of the query. Maximum length of 1024.
	description?: null | string @go(Description,*string)

	// Unique ID of the query.
	id?: null | string @go(ID,*string)

	// Plain language name for the query. Maximum length of 128.
	name?: null | string @go(Name,*string)

	// Text of the query itself. In other words, all query statements. Maximum length of 262144.
	query?: null | string @go(Query,*string)

	// Workgroup to which the query belongs. Defaults to primary
	workgroup?: null | string @go(Workgroup,*string)
}

#NamedQueryParameters: {
	// Database to which the query belongs.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/athena/v1beta1.Database
	// +kubebuilder:validation:Optional
	database?: null | string @go(Database,*string)

	// Reference to a Database in athena to populate database.
	// +kubebuilder:validation:Optional
	databaseRef?: null | v1.#Reference @go(DatabaseRef,*v1.Reference)

	// Selector for a Database in athena to populate database.
	// +kubebuilder:validation:Optional
	databaseSelector?: null | v1.#Selector @go(DatabaseSelector,*v1.Selector)

	// Brief explanation of the query. Maximum length of 1024.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Plain language name for the query. Maximum length of 128.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Text of the query itself. In other words, all query statements. Maximum length of 262144.
	// +kubebuilder:validation:Optional
	query?: null | string @go(Query,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Workgroup to which the query belongs. Defaults to primary
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/athena/v1beta1.Workgroup
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	workgroup?: null | string @go(Workgroup,*string)

	// Reference to a Workgroup in athena to populate workgroup.
	// +kubebuilder:validation:Optional
	workgroupRef?: null | v1.#Reference @go(WorkgroupRef,*v1.Reference)

	// Selector for a Workgroup in athena to populate workgroup.
	// +kubebuilder:validation:Optional
	workgroupSelector?: null | v1.#Selector @go(WorkgroupSelector,*v1.Selector)
}

// NamedQuerySpec defines the desired state of NamedQuery
#NamedQuerySpec: {
	v1.#ResourceSpec
	forProvider: #NamedQueryParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #NamedQueryInitParameters @go(InitProvider)
}

// NamedQueryStatus defines the observed state of NamedQuery.
#NamedQueryStatus: {
	v1.#ResourceStatus
	atProvider?: #NamedQueryObservation @go(AtProvider)
}

// NamedQuery is the Schema for the NamedQuerys API. Provides an Athena Named Query resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#NamedQuery: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.query) || (has(self.initProvider) && has(self.initProvider.query))",message="spec.forProvider.query is a required parameter"
	spec:    #NamedQuerySpec   @go(Spec)
	status?: #NamedQueryStatus @go(Status)
}

// NamedQueryList contains a list of NamedQuerys
#NamedQueryList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#NamedQuery] @go(Items,[]NamedQuery)
}
