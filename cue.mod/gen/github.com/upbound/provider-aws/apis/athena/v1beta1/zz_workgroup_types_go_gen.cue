// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/athena/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#ConfigurationInitParameters: {
	// Integer for the upper data usage limit (cutoff) for the amount of bytes a single query in a workgroup is allowed to scan. Must be at least 10485760.
	bytesScannedCutoffPerQuery?: null | float64 @go(BytesScannedCutoffPerQuery,*float64)

	// Boolean whether the settings for the workgroup override client-side settings. For more information, see Workgroup Settings Override Client-Side Settings. Defaults to true.
	enforceWorkgroupConfiguration?: null | bool @go(EnforceWorkgroupConfiguration,*bool)

	// Configuration block for the Athena Engine Versioning. For more information, see Athena Engine Versioning. See Engine Version below.
	engineVersion?: [...#EngineVersionInitParameters] @go(EngineVersion,[]EngineVersionInitParameters)

	// Role used in a notebook session for accessing the user's resources.
	executionRole?: null | string @go(ExecutionRole,*string)

	// Boolean whether Amazon CloudWatch metrics are enabled for the workgroup. Defaults to true.
	publishCloudwatchMetricsEnabled?: null | bool @go(PublishCloudwatchMetricsEnabled,*bool)

	// If set to true , allows members assigned to a workgroup to reference Amazon S3 Requester Pays buckets in queries. If set to false , workgroup members cannot query data from Requester Pays buckets, and queries that retrieve data from Requester Pays buckets cause an error. The default is false . For more information about Requester Pays buckets, see Requester Pays Buckets in the Amazon Simple Storage Service Developer Guide.
	requesterPaysEnabled?: null | bool @go(RequesterPaysEnabled,*bool)

	// Configuration block with result settings. See Result Configuration below.
	resultConfiguration?: [...#ResultConfigurationInitParameters] @go(ResultConfiguration,[]ResultConfigurationInitParameters)
}

#ConfigurationObservation: {
	// Integer for the upper data usage limit (cutoff) for the amount of bytes a single query in a workgroup is allowed to scan. Must be at least 10485760.
	bytesScannedCutoffPerQuery?: null | float64 @go(BytesScannedCutoffPerQuery,*float64)

	// Boolean whether the settings for the workgroup override client-side settings. For more information, see Workgroup Settings Override Client-Side Settings. Defaults to true.
	enforceWorkgroupConfiguration?: null | bool @go(EnforceWorkgroupConfiguration,*bool)

	// Configuration block for the Athena Engine Versioning. For more information, see Athena Engine Versioning. See Engine Version below.
	engineVersion?: [...#EngineVersionObservation] @go(EngineVersion,[]EngineVersionObservation)

	// Role used in a notebook session for accessing the user's resources.
	executionRole?: null | string @go(ExecutionRole,*string)

	// Boolean whether Amazon CloudWatch metrics are enabled for the workgroup. Defaults to true.
	publishCloudwatchMetricsEnabled?: null | bool @go(PublishCloudwatchMetricsEnabled,*bool)

	// If set to true , allows members assigned to a workgroup to reference Amazon S3 Requester Pays buckets in queries. If set to false , workgroup members cannot query data from Requester Pays buckets, and queries that retrieve data from Requester Pays buckets cause an error. The default is false . For more information about Requester Pays buckets, see Requester Pays Buckets in the Amazon Simple Storage Service Developer Guide.
	requesterPaysEnabled?: null | bool @go(RequesterPaysEnabled,*bool)

	// Configuration block with result settings. See Result Configuration below.
	resultConfiguration?: [...#ResultConfigurationObservation] @go(ResultConfiguration,[]ResultConfigurationObservation)
}

#ConfigurationParameters: {
	// Integer for the upper data usage limit (cutoff) for the amount of bytes a single query in a workgroup is allowed to scan. Must be at least 10485760.
	// +kubebuilder:validation:Optional
	bytesScannedCutoffPerQuery?: null | float64 @go(BytesScannedCutoffPerQuery,*float64)

	// Boolean whether the settings for the workgroup override client-side settings. For more information, see Workgroup Settings Override Client-Side Settings. Defaults to true.
	// +kubebuilder:validation:Optional
	enforceWorkgroupConfiguration?: null | bool @go(EnforceWorkgroupConfiguration,*bool)

	// Configuration block for the Athena Engine Versioning. For more information, see Athena Engine Versioning. See Engine Version below.
	// +kubebuilder:validation:Optional
	engineVersion?: [...#EngineVersionParameters] @go(EngineVersion,[]EngineVersionParameters)

	// Role used in a notebook session for accessing the user's resources.
	// +kubebuilder:validation:Optional
	executionRole?: null | string @go(ExecutionRole,*string)

	// Boolean whether Amazon CloudWatch metrics are enabled for the workgroup. Defaults to true.
	// +kubebuilder:validation:Optional
	publishCloudwatchMetricsEnabled?: null | bool @go(PublishCloudwatchMetricsEnabled,*bool)

	// If set to true , allows members assigned to a workgroup to reference Amazon S3 Requester Pays buckets in queries. If set to false , workgroup members cannot query data from Requester Pays buckets, and queries that retrieve data from Requester Pays buckets cause an error. The default is false . For more information about Requester Pays buckets, see Requester Pays Buckets in the Amazon Simple Storage Service Developer Guide.
	// +kubebuilder:validation:Optional
	requesterPaysEnabled?: null | bool @go(RequesterPaysEnabled,*bool)

	// Configuration block with result settings. See Result Configuration below.
	// +kubebuilder:validation:Optional
	resultConfiguration?: [...#ResultConfigurationParameters] @go(ResultConfiguration,[]ResultConfigurationParameters)
}

#EngineVersionInitParameters: {
	// Requested engine version. Defaults to AUTO.
	selectedEngineVersion?: null | string @go(SelectedEngineVersion,*string)
}

#EngineVersionObservation: {
	// The engine version on which the query runs. If selected_engine_version is set to AUTO, the effective engine version is chosen by Athena.
	effectiveEngineVersion?: null | string @go(EffectiveEngineVersion,*string)

	// Requested engine version. Defaults to AUTO.
	selectedEngineVersion?: null | string @go(SelectedEngineVersion,*string)
}

#EngineVersionParameters: {
	// Requested engine version. Defaults to AUTO.
	// +kubebuilder:validation:Optional
	selectedEngineVersion?: null | string @go(SelectedEngineVersion,*string)
}

#ResultConfigurationACLConfigurationInitParameters: {
	// Amazon S3 canned ACL that Athena should specify when storing query results. Valid value is BUCKET_OWNER_FULL_CONTROL.
	s3AclOption?: null | string @go(S3ACLOption,*string)
}

#ResultConfigurationACLConfigurationObservation: {
	// Amazon S3 canned ACL that Athena should specify when storing query results. Valid value is BUCKET_OWNER_FULL_CONTROL.
	s3AclOption?: null | string @go(S3ACLOption,*string)
}

#ResultConfigurationACLConfigurationParameters: {
	// Amazon S3 canned ACL that Athena should specify when storing query results. Valid value is BUCKET_OWNER_FULL_CONTROL.
	// +kubebuilder:validation:Optional
	s3AclOption?: null | string @go(S3ACLOption,*string)
}

#ResultConfigurationEncryptionConfigurationInitParameters: {
	// Whether Amazon S3 server-side encryption with Amazon S3-managed keys (SSE_S3), server-side encryption with KMS-managed keys (SSE_KMS), or client-side encryption with KMS-managed keys (CSE_KMS) is used. If a query runs in a workgroup and the workgroup overrides client-side settings, then the workgroup's setting for encryption is used. It specifies whether query results must be encrypted, for all queries that run in this workgroup.
	encryptionOption?: null | string @go(EncryptionOption,*string)
}

#ResultConfigurationEncryptionConfigurationObservation: {
	// Whether Amazon S3 server-side encryption with Amazon S3-managed keys (SSE_S3), server-side encryption with KMS-managed keys (SSE_KMS), or client-side encryption with KMS-managed keys (CSE_KMS) is used. If a query runs in a workgroup and the workgroup overrides client-side settings, then the workgroup's setting for encryption is used. It specifies whether query results must be encrypted, for all queries that run in this workgroup.
	encryptionOption?: null | string @go(EncryptionOption,*string)

	// For SSE_KMS and CSE_KMS, this is the KMS key ARN.
	kmsKeyArn?: null | string @go(KMSKeyArn,*string)
}

#ResultConfigurationEncryptionConfigurationParameters: {
	// Whether Amazon S3 server-side encryption with Amazon S3-managed keys (SSE_S3), server-side encryption with KMS-managed keys (SSE_KMS), or client-side encryption with KMS-managed keys (CSE_KMS) is used. If a query runs in a workgroup and the workgroup overrides client-side settings, then the workgroup's setting for encryption is used. It specifies whether query results must be encrypted, for all queries that run in this workgroup.
	// +kubebuilder:validation:Optional
	encryptionOption?: null | string @go(EncryptionOption,*string)

	// For SSE_KMS and CSE_KMS, this is the KMS key ARN.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/kms/v1beta1.Key
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	kmsKeyArn?: null | string @go(KMSKeyArn,*string)

	// Reference to a Key in kms to populate kmsKeyArn.
	// +kubebuilder:validation:Optional
	kmsKeyArnRef?: null | v1.#Reference @go(KMSKeyArnRef,*v1.Reference)

	// Selector for a Key in kms to populate kmsKeyArn.
	// +kubebuilder:validation:Optional
	kmsKeyArnSelector?: null | v1.#Selector @go(KMSKeyArnSelector,*v1.Selector)
}

#ResultConfigurationInitParameters: {
	// That an Amazon S3 canned ACL should be set to control ownership of stored query results. See ACL Configuration below.
	aclConfiguration?: [...#ResultConfigurationACLConfigurationInitParameters] @go(ACLConfiguration,[]ResultConfigurationACLConfigurationInitParameters)

	// Configuration block with encryption settings. See Encryption Configuration below.
	encryptionConfiguration?: [...#ResultConfigurationEncryptionConfigurationInitParameters] @go(EncryptionConfiguration,[]ResultConfigurationEncryptionConfigurationInitParameters)

	// AWS account ID that you expect to be the owner of the Amazon S3 bucket.
	expectedBucketOwner?: null | string @go(ExpectedBucketOwner,*string)

	// Location in Amazon S3 where your query results are stored, such as s3://path/to/query/bucket/. For more information, see Queries and Query Result Files.
	outputLocation?: null | string @go(OutputLocation,*string)
}

#ResultConfigurationObservation: {
	// That an Amazon S3 canned ACL should be set to control ownership of stored query results. See ACL Configuration below.
	aclConfiguration?: [...#ResultConfigurationACLConfigurationObservation] @go(ACLConfiguration,[]ResultConfigurationACLConfigurationObservation)

	// Configuration block with encryption settings. See Encryption Configuration below.
	encryptionConfiguration?: [...#ResultConfigurationEncryptionConfigurationObservation] @go(EncryptionConfiguration,[]ResultConfigurationEncryptionConfigurationObservation)

	// AWS account ID that you expect to be the owner of the Amazon S3 bucket.
	expectedBucketOwner?: null | string @go(ExpectedBucketOwner,*string)

	// Location in Amazon S3 where your query results are stored, such as s3://path/to/query/bucket/. For more information, see Queries and Query Result Files.
	outputLocation?: null | string @go(OutputLocation,*string)
}

#ResultConfigurationParameters: {
	// That an Amazon S3 canned ACL should be set to control ownership of stored query results. See ACL Configuration below.
	// +kubebuilder:validation:Optional
	aclConfiguration?: [...#ResultConfigurationACLConfigurationParameters] @go(ACLConfiguration,[]ResultConfigurationACLConfigurationParameters)

	// Configuration block with encryption settings. See Encryption Configuration below.
	// +kubebuilder:validation:Optional
	encryptionConfiguration?: [...#ResultConfigurationEncryptionConfigurationParameters] @go(EncryptionConfiguration,[]ResultConfigurationEncryptionConfigurationParameters)

	// AWS account ID that you expect to be the owner of the Amazon S3 bucket.
	// +kubebuilder:validation:Optional
	expectedBucketOwner?: null | string @go(ExpectedBucketOwner,*string)

	// Location in Amazon S3 where your query results are stored, such as s3://path/to/query/bucket/. For more information, see Queries and Query Result Files.
	// +kubebuilder:validation:Optional
	outputLocation?: null | string @go(OutputLocation,*string)
}

#WorkgroupInitParameters: {
	// Configuration block with various settings for the workgroup. Documented below.
	configuration?: [...#ConfigurationInitParameters] @go(Configuration,[]ConfigurationInitParameters)

	// Description of the workgroup.
	description?: null | string @go(Description,*string)

	// Option to delete the workgroup and its contents even if the workgroup contains any named queries.
	forceDestroy?: null | bool @go(ForceDestroy,*bool)

	// State of the workgroup. Valid values are DISABLED or ENABLED. Defaults to ENABLED.
	state?: null | string @go(State,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#WorkgroupObservation: {
	// ARN of the workgroup
	arn?: null | string @go(Arn,*string)

	// Configuration block with various settings for the workgroup. Documented below.
	configuration?: [...#ConfigurationObservation] @go(Configuration,[]ConfigurationObservation)

	// Description of the workgroup.
	description?: null | string @go(Description,*string)

	// Option to delete the workgroup and its contents even if the workgroup contains any named queries.
	forceDestroy?: null | bool @go(ForceDestroy,*bool)

	// Workgroup name
	id?: null | string @go(ID,*string)

	// State of the workgroup. Valid values are DISABLED or ENABLED. Defaults to ENABLED.
	state?: null | string @go(State,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#WorkgroupParameters: {
	// Configuration block with various settings for the workgroup. Documented below.
	// +kubebuilder:validation:Optional
	configuration?: [...#ConfigurationParameters] @go(Configuration,[]ConfigurationParameters)

	// Description of the workgroup.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Option to delete the workgroup and its contents even if the workgroup contains any named queries.
	// +kubebuilder:validation:Optional
	forceDestroy?: null | bool @go(ForceDestroy,*bool)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// State of the workgroup. Valid values are DISABLED or ENABLED. Defaults to ENABLED.
	// +kubebuilder:validation:Optional
	state?: null | string @go(State,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// WorkgroupSpec defines the desired state of Workgroup
#WorkgroupSpec: {
	v1.#ResourceSpec
	forProvider: #WorkgroupParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #WorkgroupInitParameters @go(InitProvider)
}

// WorkgroupStatus defines the observed state of Workgroup.
#WorkgroupStatus: {
	v1.#ResourceStatus
	atProvider?: #WorkgroupObservation @go(AtProvider)
}

// Workgroup is the Schema for the Workgroups API. Manages an Athena Workgroup.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Workgroup: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec:      #WorkgroupSpec     @go(Spec)
	status?:   #WorkgroupStatus   @go(Status)
}

// WorkgroupList contains a list of Workgroups
#WorkgroupList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Workgroup] @go(Items,[]Workgroup)
}
