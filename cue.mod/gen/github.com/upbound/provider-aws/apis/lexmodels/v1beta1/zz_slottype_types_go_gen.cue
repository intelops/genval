// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/lexmodels/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#EnumerationValueInitParameters: {
	// Additional values related to the slot type value. Each item must be less than or equal to 140 characters in length.
	synonyms?: [...null | string] @go(Synonyms,[]*string)

	// The value of the slot type. Must be less than or equal to 140 characters in length.
	value?: null | string @go(Value,*string)
}

#EnumerationValueObservation: {
	// Additional values related to the slot type value. Each item must be less than or equal to 140 characters in length.
	synonyms?: [...null | string] @go(Synonyms,[]*string)

	// The value of the slot type. Must be less than or equal to 140 characters in length.
	value?: null | string @go(Value,*string)
}

#EnumerationValueParameters: {
	// Additional values related to the slot type value. Each item must be less than or equal to 140 characters in length.
	// +kubebuilder:validation:Optional
	synonyms?: [...null | string] @go(Synonyms,[]*string)

	// The value of the slot type. Must be less than or equal to 140 characters in length.
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

#SlotTypeInitParameters: {
	// Determines if a new slot type version is created when the initial resource is created and on each
	// update. Defaults to false.
	createVersion?: null | bool @go(CreateVersion,*bool)

	// A description of the slot type. Must be less than or equal to 200 characters in length.
	description?: null | string @go(Description,*string)

	// A list of EnumerationValue objects that defines the values that
	// the slot type can take. Each value can have a list of synonyms, which are additional values that help
	// train the machine learning model about the values that it resolves for a slot. Attributes are
	// documented under enumeration_value.
	enumerationValue?: [...#EnumerationValueInitParameters] @go(EnumerationValue,[]EnumerationValueInitParameters)

	// Determines the slot resolution strategy that Amazon Lex
	// uses to return slot type values. ORIGINAL_VALUE returns the value entered by the user if the user
	// value is similar to the slot value. TOP_RESOLUTION returns the first value in the resolution list
	// if there is a resolution list for the slot, otherwise null is returned. Defaults to ORIGINAL_VALUE.
	valueSelectionStrategy?: null | string @go(ValueSelectionStrategy,*string)
}

#SlotTypeObservation: {
	// Checksum identifying the version of the slot type that was created. The checksum is
	// not included as an argument because the resource will add it automatically when updating the slot type.
	checksum?: null | string @go(Checksum,*string)

	// Determines if a new slot type version is created when the initial resource is created and on each
	// update. Defaults to false.
	createVersion?: null | bool @go(CreateVersion,*bool)

	// The date when the slot type version was created.
	createdDate?: null | string @go(CreatedDate,*string)

	// A description of the slot type. Must be less than or equal to 200 characters in length.
	description?: null | string @go(Description,*string)

	// A list of EnumerationValue objects that defines the values that
	// the slot type can take. Each value can have a list of synonyms, which are additional values that help
	// train the machine learning model about the values that it resolves for a slot. Attributes are
	// documented under enumeration_value.
	enumerationValue?: [...#EnumerationValueObservation] @go(EnumerationValue,[]EnumerationValueObservation)
	id?: null | string @go(ID,*string)

	// The date when the $LATEST version of this slot type was updated.
	lastUpdatedDate?: null | string @go(LastUpdatedDate,*string)

	// Determines the slot resolution strategy that Amazon Lex
	// uses to return slot type values. ORIGINAL_VALUE returns the value entered by the user if the user
	// value is similar to the slot value. TOP_RESOLUTION returns the first value in the resolution list
	// if there is a resolution list for the slot, otherwise null is returned. Defaults to ORIGINAL_VALUE.
	valueSelectionStrategy?: null | string @go(ValueSelectionStrategy,*string)

	// The version of the slot type.
	version?: null | string @go(Version,*string)
}

#SlotTypeParameters: {
	// Determines if a new slot type version is created when the initial resource is created and on each
	// update. Defaults to false.
	// +kubebuilder:validation:Optional
	createVersion?: null | bool @go(CreateVersion,*bool)

	// A description of the slot type. Must be less than or equal to 200 characters in length.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// A list of EnumerationValue objects that defines the values that
	// the slot type can take. Each value can have a list of synonyms, which are additional values that help
	// train the machine learning model about the values that it resolves for a slot. Attributes are
	// documented under enumeration_value.
	// +kubebuilder:validation:Optional
	enumerationValue?: [...#EnumerationValueParameters] @go(EnumerationValue,[]EnumerationValueParameters)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Determines the slot resolution strategy that Amazon Lex
	// uses to return slot type values. ORIGINAL_VALUE returns the value entered by the user if the user
	// value is similar to the slot value. TOP_RESOLUTION returns the first value in the resolution list
	// if there is a resolution list for the slot, otherwise null is returned. Defaults to ORIGINAL_VALUE.
	// +kubebuilder:validation:Optional
	valueSelectionStrategy?: null | string @go(ValueSelectionStrategy,*string)
}

// SlotTypeSpec defines the desired state of SlotType
#SlotTypeSpec: {
	v1.#ResourceSpec
	forProvider: #SlotTypeParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #SlotTypeInitParameters @go(InitProvider)
}

// SlotTypeStatus defines the observed state of SlotType.
#SlotTypeStatus: {
	v1.#ResourceStatus
	atProvider?: #SlotTypeObservation @go(AtProvider)
}

// SlotType is the Schema for the SlotTypes API. Provides details about a specific Amazon Lex Slot Type
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#SlotType: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enumerationValue) || (has(self.initProvider) && has(self.initProvider.enumerationValue))",message="spec.forProvider.enumerationValue is a required parameter"
	spec:    #SlotTypeSpec   @go(Spec)
	status?: #SlotTypeStatus @go(Status)
}

// SlotTypeList contains a list of SlotTypes
#SlotTypeList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#SlotType] @go(Items,[]SlotType)
}
