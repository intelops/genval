// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/ram/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#ResourceShareInitParameters: {
	// Indicates whether principals outside your organization can be associated with a resource share.
	allowExternalPrincipals?: null | bool @go(AllowExternalPrincipals,*bool)

	// The name of the resource share.
	name?: null | string @go(Name,*string)

	// Specifies the Amazon Resource Names (ARNs) of the RAM permission to associate with the resource share. If you do not specify an ARN for the permission, RAM automatically attaches the default version of the permission for each resource type. You can associate only one permission with each resource type included in the resource share.
	permissionArns?: [...null | string] @go(PermissionArns,[]*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#ResourceShareObservation: {
	// Indicates whether principals outside your organization can be associated with a resource share.
	allowExternalPrincipals?: null | bool @go(AllowExternalPrincipals,*bool)

	// The Amazon Resource Name (ARN) of the resource share.
	arn?: null | string @go(Arn,*string)

	// The Amazon Resource Name (ARN) of the resource share.
	id?: null | string @go(ID,*string)

	// The name of the resource share.
	name?: null | string @go(Name,*string)

	// Specifies the Amazon Resource Names (ARNs) of the RAM permission to associate with the resource share. If you do not specify an ARN for the permission, RAM automatically attaches the default version of the permission for each resource type. You can associate only one permission with each resource type included in the resource share.
	permissionArns?: [...null | string] @go(PermissionArns,[]*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#ResourceShareParameters: {
	// Indicates whether principals outside your organization can be associated with a resource share.
	// +kubebuilder:validation:Optional
	allowExternalPrincipals?: null | bool @go(AllowExternalPrincipals,*bool)

	// The name of the resource share.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Specifies the Amazon Resource Names (ARNs) of the RAM permission to associate with the resource share. If you do not specify an ARN for the permission, RAM automatically attaches the default version of the permission for each resource type. You can associate only one permission with each resource type included in the resource share.
	// +kubebuilder:validation:Optional
	permissionArns?: [...null | string] @go(PermissionArns,[]*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// ResourceShareSpec defines the desired state of ResourceShare
#ResourceShareSpec: {
	v1.#ResourceSpec
	forProvider: #ResourceShareParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ResourceShareInitParameters @go(InitProvider)
}

// ResourceShareStatus defines the observed state of ResourceShare.
#ResourceShareStatus: {
	v1.#ResourceStatus
	atProvider?: #ResourceShareObservation @go(AtProvider)
}

// ResourceShare is the Schema for the ResourceShares API. Manages a Resource Access Manager (RAM) Resource Share.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#ResourceShare: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	spec:    #ResourceShareSpec   @go(Spec)
	status?: #ResourceShareStatus @go(Status)
}

// ResourceShareList contains a list of ResourceShares
#ResourceShareList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#ResourceShare] @go(Items,[]ResourceShare)
}
