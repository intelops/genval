// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/appintegrations/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#EventFilterInitParameters: {
	// Source of the events.
	source?: null | string @go(Source,*string)
}

#EventFilterObservation: {
	// Source of the events.
	source?: null | string @go(Source,*string)
}

#EventFilterParameters: {
	// Source of the events.
	// +kubebuilder:validation:Optional
	source?: null | string @go(Source,*string)
}

#EventIntegrationInitParameters: {
	// Description of the Event Integration.
	description?: null | string @go(Description,*string)

	// Block that defines the configuration information for the event filter. The Event Filter block is documented below.
	eventFilter?: [...#EventFilterInitParameters] @go(EventFilter,[]EventFilterInitParameters)

	// EventBridge bus.
	eventbridgeBus?: null | string @go(EventbridgeBus,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#EventIntegrationObservation: {
	// ARN of the Event Integration.
	arn?: null | string @go(Arn,*string)

	// Description of the Event Integration.
	description?: null | string @go(Description,*string)

	// Block that defines the configuration information for the event filter. The Event Filter block is documented below.
	eventFilter?: [...#EventFilterObservation] @go(EventFilter,[]EventFilterObservation)

	// EventBridge bus.
	eventbridgeBus?: null | string @go(EventbridgeBus,*string)

	// Identifier of the Event Integration which is the name of the Event Integration.
	id?: null | string @go(ID,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#EventIntegrationParameters: {
	// Description of the Event Integration.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Block that defines the configuration information for the event filter. The Event Filter block is documented below.
	// +kubebuilder:validation:Optional
	eventFilter?: [...#EventFilterParameters] @go(EventFilter,[]EventFilterParameters)

	// EventBridge bus.
	// +kubebuilder:validation:Optional
	eventbridgeBus?: null | string @go(EventbridgeBus,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// EventIntegrationSpec defines the desired state of EventIntegration
#EventIntegrationSpec: {
	v1.#ResourceSpec
	forProvider: #EventIntegrationParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #EventIntegrationInitParameters @go(InitProvider)
}

// EventIntegrationStatus defines the observed state of EventIntegration.
#EventIntegrationStatus: {
	v1.#ResourceStatus
	atProvider?: #EventIntegrationObservation @go(AtProvider)
}

// EventIntegration is the Schema for the EventIntegrations API. Provides details about a specific Amazon AppIntegrations Event Integration
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#EventIntegration: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.eventFilter) || (has(self.initProvider) && has(self.initProvider.eventFilter))",message="spec.forProvider.eventFilter is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.eventbridgeBus) || (has(self.initProvider) && has(self.initProvider.eventbridgeBus))",message="spec.forProvider.eventbridgeBus is a required parameter"
	spec:    #EventIntegrationSpec   @go(Spec)
	status?: #EventIntegrationStatus @go(Status)
}

// EventIntegrationList contains a list of EventIntegrations
#EventIntegrationList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#EventIntegration] @go(Items,[]EventIntegration)
}
