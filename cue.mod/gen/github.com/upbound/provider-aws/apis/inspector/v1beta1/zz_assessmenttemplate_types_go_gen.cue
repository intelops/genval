// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/inspector/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#AssessmentTemplateInitParameters: {
	// The duration of the inspector run.
	duration?: null | float64 @go(Duration,*float64)

	// A block that enables sending notifications about a specified assessment template event to a designated SNS topic. See Event Subscriptions for details.
	eventSubscription?: [...#EventSubscriptionInitParameters] @go(EventSubscription,[]EventSubscriptionInitParameters)

	// The name of the assessment template.
	name?: null | string @go(Name,*string)

	// The rules to be used during the run.
	rulesPackageArns?: [...null | string] @go(RulesPackageArns,[]*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#AssessmentTemplateObservation: {
	// The template assessment ARN.
	arn?: null | string @go(Arn,*string)

	// The duration of the inspector run.
	duration?: null | float64 @go(Duration,*float64)

	// A block that enables sending notifications about a specified assessment template event to a designated SNS topic. See Event Subscriptions for details.
	eventSubscription?: [...#EventSubscriptionObservation] @go(EventSubscription,[]EventSubscriptionObservation)
	id?: null | string @go(ID,*string)

	// The name of the assessment template.
	name?: null | string @go(Name,*string)

	// The rules to be used during the run.
	rulesPackageArns?: [...null | string] @go(RulesPackageArns,[]*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// The assessment target ARN to attach the template to.
	targetArn?: null | string @go(TargetArn,*string)
}

#AssessmentTemplateParameters: {
	// The duration of the inspector run.
	// +kubebuilder:validation:Optional
	duration?: null | float64 @go(Duration,*float64)

	// A block that enables sending notifications about a specified assessment template event to a designated SNS topic. See Event Subscriptions for details.
	// +kubebuilder:validation:Optional
	eventSubscription?: [...#EventSubscriptionParameters] @go(EventSubscription,[]EventSubscriptionParameters)

	// The name of the assessment template.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The rules to be used during the run.
	// +kubebuilder:validation:Optional
	rulesPackageArns?: [...null | string] @go(RulesPackageArns,[]*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// The assessment target ARN to attach the template to.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/inspector/v1beta1.AssessmentTarget
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	targetArn?: null | string @go(TargetArn,*string)

	// Reference to a AssessmentTarget in inspector to populate targetArn.
	// +kubebuilder:validation:Optional
	targetArnRef?: null | v1.#Reference @go(TargetArnRef,*v1.Reference)

	// Selector for a AssessmentTarget in inspector to populate targetArn.
	// +kubebuilder:validation:Optional
	targetArnSelector?: null | v1.#Selector @go(TargetArnSelector,*v1.Selector)
}

#EventSubscriptionInitParameters: {
	// The event for which you want to receive SNS notifications. Valid values are ASSESSMENT_RUN_STARTED, ASSESSMENT_RUN_COMPLETED, ASSESSMENT_RUN_STATE_CHANGED, and FINDING_REPORTED.
	event?: null | string @go(Event,*string)
}

#EventSubscriptionObservation: {
	// The event for which you want to receive SNS notifications. Valid values are ASSESSMENT_RUN_STARTED, ASSESSMENT_RUN_COMPLETED, ASSESSMENT_RUN_STATE_CHANGED, and FINDING_REPORTED.
	event?: null | string @go(Event,*string)

	// The ARN of the SNS topic to which notifications are sent.
	topicArn?: null | string @go(TopicArn,*string)
}

#EventSubscriptionParameters: {
	// The event for which you want to receive SNS notifications. Valid values are ASSESSMENT_RUN_STARTED, ASSESSMENT_RUN_COMPLETED, ASSESSMENT_RUN_STATE_CHANGED, and FINDING_REPORTED.
	// +kubebuilder:validation:Optional
	event?: null | string @go(Event,*string)

	// The ARN of the SNS topic to which notifications are sent.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/sns/v1beta1.Topic
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	topicArn?: null | string @go(TopicArn,*string)

	// Reference to a Topic in sns to populate topicArn.
	// +kubebuilder:validation:Optional
	topicArnRef?: null | v1.#Reference @go(TopicArnRef,*v1.Reference)

	// Selector for a Topic in sns to populate topicArn.
	// +kubebuilder:validation:Optional
	topicArnSelector?: null | v1.#Selector @go(TopicArnSelector,*v1.Selector)
}

// AssessmentTemplateSpec defines the desired state of AssessmentTemplate
#AssessmentTemplateSpec: {
	v1.#ResourceSpec
	forProvider: #AssessmentTemplateParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #AssessmentTemplateInitParameters @go(InitProvider)
}

// AssessmentTemplateStatus defines the observed state of AssessmentTemplate.
#AssessmentTemplateStatus: {
	v1.#ResourceStatus
	atProvider?: #AssessmentTemplateObservation @go(AtProvider)
}

// AssessmentTemplate is the Schema for the AssessmentTemplates API. Provides an Inspector Classic Assessment Template.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#AssessmentTemplate: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.duration) || (has(self.initProvider) && has(self.initProvider.duration))",message="spec.forProvider.duration is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.rulesPackageArns) || (has(self.initProvider) && has(self.initProvider.rulesPackageArns))",message="spec.forProvider.rulesPackageArns is a required parameter"
	spec:    #AssessmentTemplateSpec   @go(Spec)
	status?: #AssessmentTemplateStatus @go(Status)
}

// AssessmentTemplateList contains a list of AssessmentTemplates
#AssessmentTemplateList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#AssessmentTemplate] @go(Items,[]AssessmentTemplate)
}
