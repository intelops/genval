// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/inspector/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#AssessmentTargetInitParameters: {
	// The name of the assessment target.
	name?: null | string @go(Name,*string)
}

#AssessmentTargetObservation: {
	// The target assessment ARN.
	arn?: null | string @go(Arn,*string)
	id?:  null | string @go(ID,*string)

	// The name of the assessment target.
	name?: null | string @go(Name,*string)

	// Inspector Resource Group Amazon Resource Name (ARN) stating tags for instance matching. If not specified, all EC2 instances in the current AWS account and region are included in the assessment target.
	resourceGroupArn?: null | string @go(ResourceGroupArn,*string)
}

#AssessmentTargetParameters: {
	// The name of the assessment target.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Inspector Resource Group Amazon Resource Name (ARN) stating tags for instance matching. If not specified, all EC2 instances in the current AWS account and region are included in the assessment target.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/inspector/v1beta1.ResourceGroup
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	resourceGroupArn?: null | string @go(ResourceGroupArn,*string)

	// Reference to a ResourceGroup in inspector to populate resourceGroupArn.
	// +kubebuilder:validation:Optional
	resourceGroupArnRef?: null | v1.#Reference @go(ResourceGroupArnRef,*v1.Reference)

	// Selector for a ResourceGroup in inspector to populate resourceGroupArn.
	// +kubebuilder:validation:Optional
	resourceGroupArnSelector?: null | v1.#Selector @go(ResourceGroupArnSelector,*v1.Selector)
}

// AssessmentTargetSpec defines the desired state of AssessmentTarget
#AssessmentTargetSpec: {
	v1.#ResourceSpec
	forProvider: #AssessmentTargetParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #AssessmentTargetInitParameters @go(InitProvider)
}

// AssessmentTargetStatus defines the observed state of AssessmentTarget.
#AssessmentTargetStatus: {
	v1.#ResourceStatus
	atProvider?: #AssessmentTargetObservation @go(AtProvider)
}

// AssessmentTarget is the Schema for the AssessmentTargets API. Provides an Inspector Classic Assessment Target.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#AssessmentTarget: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	spec:    #AssessmentTargetSpec   @go(Spec)
	status?: #AssessmentTargetStatus @go(Status)
}

// AssessmentTargetList contains a list of AssessmentTargets
#AssessmentTargetList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#AssessmentTarget] @go(Items,[]AssessmentTarget)
}
