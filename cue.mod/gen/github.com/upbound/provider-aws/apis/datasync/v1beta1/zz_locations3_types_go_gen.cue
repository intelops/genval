// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/datasync/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#LocationS3InitParameters: {
	// A list of DataSync Agent ARNs with which this location will be associated.
	agentArns?: [...null | string] @go(AgentArns,[]*string)

	// Configuration block containing information for connecting to S3.
	s3Config?: [...#S3ConfigInitParameters] @go(S3Config,[]S3ConfigInitParameters)

	// The Amazon S3 storage class that you want to store your files in when this location is used as a task destination. Valid values
	s3StorageClass?: null | string @go(S3StorageClass,*string)

	// Prefix to perform actions as source or destination.
	subdirectory?: null | string @go(Subdirectory,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#LocationS3Observation: {
	// A list of DataSync Agent ARNs with which this location will be associated.
	agentArns?: [...null | string] @go(AgentArns,[]*string)

	// Amazon Resource Name (ARN) of the DataSync Location.
	arn?: null | string @go(Arn,*string)

	// Amazon Resource Name (ARN) of the DataSync Location.
	id?: null | string @go(ID,*string)

	// Amazon Resource Name (ARN) of the S3 Bucket.
	s3BucketArn?: null | string @go(S3BucketArn,*string)

	// Configuration block containing information for connecting to S3.
	s3Config?: [...#S3ConfigObservation] @go(S3Config,[]S3ConfigObservation)

	// The Amazon S3 storage class that you want to store your files in when this location is used as a task destination. Valid values
	s3StorageClass?: null | string @go(S3StorageClass,*string)

	// Prefix to perform actions as source or destination.
	subdirectory?: null | string @go(Subdirectory,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
	uri?: null | string @go(URI,*string)
}

#LocationS3Parameters: {
	// A list of DataSync Agent ARNs with which this location will be associated.
	// +kubebuilder:validation:Optional
	agentArns?: [...null | string] @go(AgentArns,[]*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Amazon Resource Name (ARN) of the S3 Bucket.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/s3/v1beta1.Bucket
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	s3BucketArn?: null | string @go(S3BucketArn,*string)

	// Reference to a Bucket in s3 to populate s3BucketArn.
	// +kubebuilder:validation:Optional
	s3BucketArnRef?: null | v1.#Reference @go(S3BucketArnRef,*v1.Reference)

	// Selector for a Bucket in s3 to populate s3BucketArn.
	// +kubebuilder:validation:Optional
	s3BucketArnSelector?: null | v1.#Selector @go(S3BucketArnSelector,*v1.Selector)

	// Configuration block containing information for connecting to S3.
	// +kubebuilder:validation:Optional
	s3Config?: [...#S3ConfigParameters] @go(S3Config,[]S3ConfigParameters)

	// The Amazon S3 storage class that you want to store your files in when this location is used as a task destination. Valid values
	// +kubebuilder:validation:Optional
	s3StorageClass?: null | string @go(S3StorageClass,*string)

	// Prefix to perform actions as source or destination.
	// +kubebuilder:validation:Optional
	subdirectory?: null | string @go(Subdirectory,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#S3ConfigInitParameters: {
}

#S3ConfigObservation: {
	// ARN of the IAM Role used to connect to the S3 Bucket.
	bucketAccessRoleArn?: null | string @go(BucketAccessRoleArn,*string)
}

#S3ConfigParameters: {
	// ARN of the IAM Role used to connect to the S3 Bucket.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	bucketAccessRoleArn?: null | string @go(BucketAccessRoleArn,*string)

	// Reference to a Role in iam to populate bucketAccessRoleArn.
	// +kubebuilder:validation:Optional
	bucketAccessRoleArnRef?: null | v1.#Reference @go(BucketAccessRoleArnRef,*v1.Reference)

	// Selector for a Role in iam to populate bucketAccessRoleArn.
	// +kubebuilder:validation:Optional
	bucketAccessRoleArnSelector?: null | v1.#Selector @go(BucketAccessRoleArnSelector,*v1.Selector)
}

// LocationS3Spec defines the desired state of LocationS3
#LocationS3Spec: {
	v1.#ResourceSpec
	forProvider: #LocationS3Parameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #LocationS3InitParameters @go(InitProvider)
}

// LocationS3Status defines the observed state of LocationS3.
#LocationS3Status: {
	v1.#ResourceStatus
	atProvider?: #LocationS3Observation @go(AtProvider)
}

// LocationS3 is the Schema for the LocationS3s API. Manages an AWS DataSync S3 Location
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#LocationS3: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.s3Config) || (has(self.initProvider) && has(self.initProvider.s3Config))",message="spec.forProvider.s3Config is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.subdirectory) || (has(self.initProvider) && has(self.initProvider.subdirectory))",message="spec.forProvider.subdirectory is a required parameter"
	spec:    #LocationS3Spec   @go(Spec)
	status?: #LocationS3Status @go(Status)
}

// LocationS3List contains a list of LocationS3s
#LocationS3List: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#LocationS3] @go(Items,[]LocationS3)
}
