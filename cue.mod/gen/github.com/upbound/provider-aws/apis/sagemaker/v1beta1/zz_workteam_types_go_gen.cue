// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/sagemaker/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#CognitoMemberDefinitionInitParameters: {
}

#CognitoMemberDefinitionObservation: {
	// An identifier for an application client. You must create the app client ID using Amazon Cognito.
	clientId?: null | string @go(ClientID,*string)

	// An identifier for a user group.
	userGroup?: null | string @go(UserGroup,*string)

	// An identifier for a user pool. The user pool must be in the same region as the service that you are calling.
	userPool?: null | string @go(UserPool,*string)
}

#CognitoMemberDefinitionParameters: {
	// An identifier for an application client. You must create the app client ID using Amazon Cognito.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/cognitoidp/v1beta1.UserPoolClient
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	clientId?: null | string @go(ClientID,*string)

	// Reference to a UserPoolClient in cognitoidp to populate clientId.
	// +kubebuilder:validation:Optional
	clientIdRef?: null | v1.#Reference @go(ClientIDRef,*v1.Reference)

	// Selector for a UserPoolClient in cognitoidp to populate clientId.
	// +kubebuilder:validation:Optional
	clientIdSelector?: null | v1.#Selector @go(ClientIDSelector,*v1.Selector)

	// An identifier for a user group.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/cognitoidp/v1beta1.UserGroup
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	userGroup?: null | string @go(UserGroup,*string)

	// Reference to a UserGroup in cognitoidp to populate userGroup.
	// +kubebuilder:validation:Optional
	userGroupRef?: null | v1.#Reference @go(UserGroupRef,*v1.Reference)

	// Selector for a UserGroup in cognitoidp to populate userGroup.
	// +kubebuilder:validation:Optional
	userGroupSelector?: null | v1.#Selector @go(UserGroupSelector,*v1.Selector)

	// An identifier for a user pool. The user pool must be in the same region as the service that you are calling.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/cognitoidp/v1beta1.UserPoolDomain
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("user_pool_id",false)
	// +kubebuilder:validation:Optional
	userPool?: null | string @go(UserPool,*string)

	// Reference to a UserPoolDomain in cognitoidp to populate userPool.
	// +kubebuilder:validation:Optional
	userPoolRef?: null | v1.#Reference @go(UserPoolRef,*v1.Reference)

	// Selector for a UserPoolDomain in cognitoidp to populate userPool.
	// +kubebuilder:validation:Optional
	userPoolSelector?: null | v1.#Selector @go(UserPoolSelector,*v1.Selector)
}

#MemberDefinitionInitParameters: {
	// The Amazon Cognito user group that is part of the work team. See Cognito Member Definition details below.
	cognitoMemberDefinition?: [...#CognitoMemberDefinitionInitParameters] @go(CognitoMemberDefinition,[]CognitoMemberDefinitionInitParameters)

	// A list user groups that exist in your OIDC Identity Provider (IdP). One to ten groups can be used to create a single private work team. See Cognito Member Definition details below.
	oidcMemberDefinition?: [...#OidcMemberDefinitionInitParameters] @go(OidcMemberDefinition,[]OidcMemberDefinitionInitParameters)
}

#MemberDefinitionObservation: {
	// The Amazon Cognito user group that is part of the work team. See Cognito Member Definition details below.
	cognitoMemberDefinition?: [...#CognitoMemberDefinitionObservation] @go(CognitoMemberDefinition,[]CognitoMemberDefinitionObservation)

	// A list user groups that exist in your OIDC Identity Provider (IdP). One to ten groups can be used to create a single private work team. See Cognito Member Definition details below.
	oidcMemberDefinition?: [...#OidcMemberDefinitionObservation] @go(OidcMemberDefinition,[]OidcMemberDefinitionObservation)
}

#MemberDefinitionParameters: {
	// The Amazon Cognito user group that is part of the work team. See Cognito Member Definition details below.
	// +kubebuilder:validation:Optional
	cognitoMemberDefinition?: [...#CognitoMemberDefinitionParameters] @go(CognitoMemberDefinition,[]CognitoMemberDefinitionParameters)

	// A list user groups that exist in your OIDC Identity Provider (IdP). One to ten groups can be used to create a single private work team. See Cognito Member Definition details below.
	// +kubebuilder:validation:Optional
	oidcMemberDefinition?: [...#OidcMemberDefinitionParameters] @go(OidcMemberDefinition,[]OidcMemberDefinitionParameters)
}

#NotificationConfigurationInitParameters: {
	// The ARN for the SNS topic to which notifications should be published.
	notificationTopicArn?: null | string @go(NotificationTopicArn,*string)
}

#NotificationConfigurationObservation: {
	// The ARN for the SNS topic to which notifications should be published.
	notificationTopicArn?: null | string @go(NotificationTopicArn,*string)
}

#NotificationConfigurationParameters: {
	// The ARN for the SNS topic to which notifications should be published.
	// +kubebuilder:validation:Optional
	notificationTopicArn?: null | string @go(NotificationTopicArn,*string)
}

#OidcMemberDefinitionInitParameters: {
	// A list of comma separated strings that identifies user groups in your OIDC IdP. Each user group is made up of a group of private workers.
	groups?: [...null | string] @go(Groups,[]*string)
}

#OidcMemberDefinitionObservation: {
	// A list of comma separated strings that identifies user groups in your OIDC IdP. Each user group is made up of a group of private workers.
	groups?: [...null | string] @go(Groups,[]*string)
}

#OidcMemberDefinitionParameters: {
	// A list of comma separated strings that identifies user groups in your OIDC IdP. Each user group is made up of a group of private workers.
	// +kubebuilder:validation:Optional
	groups: [...null | string] @go(Groups,[]*string)
}

#WorkteamInitParameters: {
	// A description of the work team.
	description?: null | string @go(Description,*string)

	// A list of Member Definitions that contains objects that identify the workers that make up the work team. Workforces can be created using Amazon Cognito or your own OIDC Identity Provider (IdP). For private workforces created using Amazon Cognito use cognito_member_definition. For workforces created using your own OIDC identity provider (IdP) use oidc_member_definition. Do not provide input for both of these parameters in a single request. see Member Definition details below.
	memberDefinition?: [...#MemberDefinitionInitParameters] @go(MemberDefinition,[]MemberDefinitionInitParameters)

	// Configures notification of workers regarding available or expiring work items. see Notification Configuration details below.
	notificationConfiguration?: [...#NotificationConfigurationInitParameters] @go(NotificationConfiguration,[]NotificationConfigurationInitParameters)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#WorkteamObservation: {
	// The Amazon Resource Name (ARN) assigned by AWS to this Workteam.
	arn?: null | string @go(Arn,*string)

	// A description of the work team.
	description?: null | string @go(Description,*string)

	// The name of the Workteam.
	id?: null | string @go(ID,*string)

	// A list of Member Definitions that contains objects that identify the workers that make up the work team. Workforces can be created using Amazon Cognito or your own OIDC Identity Provider (IdP). For private workforces created using Amazon Cognito use cognito_member_definition. For workforces created using your own OIDC identity provider (IdP) use oidc_member_definition. Do not provide input for both of these parameters in a single request. see Member Definition details below.
	memberDefinition?: [...#MemberDefinitionObservation] @go(MemberDefinition,[]MemberDefinitionObservation)

	// Configures notification of workers regarding available or expiring work items. see Notification Configuration details below.
	notificationConfiguration?: [...#NotificationConfigurationObservation] @go(NotificationConfiguration,[]NotificationConfigurationObservation)

	// The subdomain for your OIDC Identity Provider.
	subdomain?: null | string @go(Subdomain,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// The name of the Workteam (must be unique).
	workforceName?: null | string @go(WorkforceName,*string)
}

#WorkteamParameters: {
	// A description of the work team.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// A list of Member Definitions that contains objects that identify the workers that make up the work team. Workforces can be created using Amazon Cognito or your own OIDC Identity Provider (IdP). For private workforces created using Amazon Cognito use cognito_member_definition. For workforces created using your own OIDC identity provider (IdP) use oidc_member_definition. Do not provide input for both of these parameters in a single request. see Member Definition details below.
	// +kubebuilder:validation:Optional
	memberDefinition?: [...#MemberDefinitionParameters] @go(MemberDefinition,[]MemberDefinitionParameters)

	// Configures notification of workers regarding available or expiring work items. see Notification Configuration details below.
	// +kubebuilder:validation:Optional
	notificationConfiguration?: [...#NotificationConfigurationParameters] @go(NotificationConfiguration,[]NotificationConfigurationParameters)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// The name of the Workteam (must be unique).
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/sagemaker/v1beta1.Workforce
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	workforceName?: null | string @go(WorkforceName,*string)

	// Reference to a Workforce in sagemaker to populate workforceName.
	// +kubebuilder:validation:Optional
	workforceNameRef?: null | v1.#Reference @go(WorkforceNameRef,*v1.Reference)

	// Selector for a Workforce in sagemaker to populate workforceName.
	// +kubebuilder:validation:Optional
	workforceNameSelector?: null | v1.#Selector @go(WorkforceNameSelector,*v1.Selector)
}

// WorkteamSpec defines the desired state of Workteam
#WorkteamSpec: {
	v1.#ResourceSpec
	forProvider: #WorkteamParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #WorkteamInitParameters @go(InitProvider)
}

// WorkteamStatus defines the observed state of Workteam.
#WorkteamStatus: {
	v1.#ResourceStatus
	atProvider?: #WorkteamObservation @go(AtProvider)
}

// Workteam is the Schema for the Workteams API. Provides a SageMaker Workteam resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Workteam: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.description) || (has(self.initProvider) && has(self.initProvider.description))",message="spec.forProvider.description is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.memberDefinition) || (has(self.initProvider) && has(self.initProvider.memberDefinition))",message="spec.forProvider.memberDefinition is a required parameter"
	spec:    #WorkteamSpec   @go(Spec)
	status?: #WorkteamStatus @go(Status)
}

// WorkteamList contains a list of Workteams
#WorkteamList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Workteam] @go(Items,[]Workteam)
}
