// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/sagemaker/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#CodeRepositoryInitParameters: {
	// Specifies details about the repository. see Git Config details below.
	gitConfig?: [...#GitConfigInitParameters] @go(GitConfig,[]GitConfigInitParameters)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#CodeRepositoryObservation: {
	// The Amazon Resource Name (ARN) assigned by AWS to this Code Repository.
	arn?: null | string @go(Arn,*string)

	// Specifies details about the repository. see Git Config details below.
	gitConfig?: [...#GitConfigObservation] @go(GitConfig,[]GitConfigObservation)

	// The name of the Code Repository.
	id?: null | string @go(ID,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#CodeRepositoryParameters: {
	// Specifies details about the repository. see Git Config details below.
	// +kubebuilder:validation:Optional
	gitConfig?: [...#GitConfigParameters] @go(GitConfig,[]GitConfigParameters)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#GitConfigInitParameters: {
	// The default branch for the Git repository.
	branch?: null | string @go(Branch,*string)

	// The URL where the Git repository is located.
	repositoryUrl?: null | string @go(RepositoryURL,*string)
}

#GitConfigObservation: {
	// The default branch for the Git repository.
	branch?: null | string @go(Branch,*string)

	// The URL where the Git repository is located.
	repositoryUrl?: null | string @go(RepositoryURL,*string)

	// The Amazon Resource Name (ARN) of the AWS Secrets Manager secret that contains the credentials used to access the git repository. The secret must have a staging label of AWSCURRENT and must be in the following format: {"username": UserName, "password": Password}
	secretArn?: null | string @go(SecretArn,*string)
}

#GitConfigParameters: {
	// The default branch for the Git repository.
	// +kubebuilder:validation:Optional
	branch?: null | string @go(Branch,*string)

	// The URL where the Git repository is located.
	// +kubebuilder:validation:Optional
	repositoryUrl?: null | string @go(RepositoryURL,*string)

	// The Amazon Resource Name (ARN) of the AWS Secrets Manager secret that contains the credentials used to access the git repository. The secret must have a staging label of AWSCURRENT and must be in the following format: {"username": UserName, "password": Password}
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/secretsmanager/v1beta1.Secret
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	secretArn?: null | string @go(SecretArn,*string)

	// Reference to a Secret in secretsmanager to populate secretArn.
	// +kubebuilder:validation:Optional
	secretArnRef?: null | v1.#Reference @go(SecretArnRef,*v1.Reference)

	// Selector for a Secret in secretsmanager to populate secretArn.
	// +kubebuilder:validation:Optional
	secretArnSelector?: null | v1.#Selector @go(SecretArnSelector,*v1.Selector)
}

// CodeRepositorySpec defines the desired state of CodeRepository
#CodeRepositorySpec: {
	v1.#ResourceSpec
	forProvider: #CodeRepositoryParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #CodeRepositoryInitParameters @go(InitProvider)
}

// CodeRepositoryStatus defines the observed state of CodeRepository.
#CodeRepositoryStatus: {
	v1.#ResourceStatus
	atProvider?: #CodeRepositoryObservation @go(AtProvider)
}

// CodeRepository is the Schema for the CodeRepositorys API. Provides a SageMaker Code Repository resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#CodeRepository: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.gitConfig) || (has(self.initProvider) && has(self.initProvider.gitConfig))",message="spec.forProvider.gitConfig is a required parameter"
	spec:    #CodeRepositorySpec   @go(Spec)
	status?: #CodeRepositoryStatus @go(Status)
}

// CodeRepositoryList contains a list of CodeRepositorys
#CodeRepositoryList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#CodeRepository] @go(Items,[]CodeRepository)
}
