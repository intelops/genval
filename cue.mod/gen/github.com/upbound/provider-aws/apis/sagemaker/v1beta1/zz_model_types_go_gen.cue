// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/sagemaker/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#ContainerInitParameters: {
	// The DNS host name for the container.
	containerHostname?: null | string @go(ContainerHostname,*string)

	// Environment variables for the Docker container.
	// A list of key value pairs.
	environment?: {[string]: null | string} @go(Environment,map[string]*string)

	// The registry path where the inference code image is stored in Amazon ECR.
	image?: null | string @go(Image,*string)

	// Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). For more information see Using a Private Docker Registry for Real-Time Inference Containers. see Image Config.
	imageConfig?: [...#ImageConfigInitParameters] @go(ImageConfig,[]ImageConfigInitParameters)

	// The container hosts value SingleModel/MultiModel. The default value is SingleModel.
	mode?: null | string @go(Mode,*string)

	// The URL for the S3 location where model artifacts are stored.
	modelDataUrl?: null | string @go(ModelDataURL,*string)
}

#ContainerObservation: {
	// The DNS host name for the container.
	containerHostname?: null | string @go(ContainerHostname,*string)

	// Environment variables for the Docker container.
	// A list of key value pairs.
	environment?: {[string]: null | string} @go(Environment,map[string]*string)

	// The registry path where the inference code image is stored in Amazon ECR.
	image?: null | string @go(Image,*string)

	// Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). For more information see Using a Private Docker Registry for Real-Time Inference Containers. see Image Config.
	imageConfig?: [...#ImageConfigObservation] @go(ImageConfig,[]ImageConfigObservation)

	// The container hosts value SingleModel/MultiModel. The default value is SingleModel.
	mode?: null | string @go(Mode,*string)

	// The URL for the S3 location where model artifacts are stored.
	modelDataUrl?: null | string @go(ModelDataURL,*string)
}

#ContainerParameters: {
	// The DNS host name for the container.
	// +kubebuilder:validation:Optional
	containerHostname?: null | string @go(ContainerHostname,*string)

	// Environment variables for the Docker container.
	// A list of key value pairs.
	// +kubebuilder:validation:Optional
	environment?: {[string]: null | string} @go(Environment,map[string]*string)

	// The registry path where the inference code image is stored in Amazon ECR.
	// +kubebuilder:validation:Optional
	image?: null | string @go(Image,*string)

	// Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). For more information see Using a Private Docker Registry for Real-Time Inference Containers. see Image Config.
	// +kubebuilder:validation:Optional
	imageConfig?: [...#ImageConfigParameters] @go(ImageConfig,[]ImageConfigParameters)

	// The container hosts value SingleModel/MultiModel. The default value is SingleModel.
	// +kubebuilder:validation:Optional
	mode?: null | string @go(Mode,*string)

	// The URL for the S3 location where model artifacts are stored.
	// +kubebuilder:validation:Optional
	modelDataUrl?: null | string @go(ModelDataURL,*string)
}

#ImageConfigInitParameters: {
	// Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). Allowed values are: Platform and Vpc.
	repositoryAccessMode?: null | string @go(RepositoryAccessMode,*string)

	// Specifies an authentication configuration for the private docker registry where your model image is hosted. Specify a value for this property only if you specified Vpc as the value for the RepositoryAccessMode field, and the private Docker registry where the model image is hosted requires authentication. see Repository Auth Config.
	repositoryAuthConfig?: [...#RepositoryAuthConfigInitParameters] @go(RepositoryAuthConfig,[]RepositoryAuthConfigInitParameters)
}

#ImageConfigObservation: {
	// Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). Allowed values are: Platform and Vpc.
	repositoryAccessMode?: null | string @go(RepositoryAccessMode,*string)

	// Specifies an authentication configuration for the private docker registry where your model image is hosted. Specify a value for this property only if you specified Vpc as the value for the RepositoryAccessMode field, and the private Docker registry where the model image is hosted requires authentication. see Repository Auth Config.
	repositoryAuthConfig?: [...#RepositoryAuthConfigObservation] @go(RepositoryAuthConfig,[]RepositoryAuthConfigObservation)
}

#ImageConfigParameters: {
	// Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). Allowed values are: Platform and Vpc.
	// +kubebuilder:validation:Optional
	repositoryAccessMode?: null | string @go(RepositoryAccessMode,*string)

	// Specifies an authentication configuration for the private docker registry where your model image is hosted. Specify a value for this property only if you specified Vpc as the value for the RepositoryAccessMode field, and the private Docker registry where the model image is hosted requires authentication. see Repository Auth Config.
	// +kubebuilder:validation:Optional
	repositoryAuthConfig?: [...#RepositoryAuthConfigParameters] @go(RepositoryAuthConfig,[]RepositoryAuthConfigParameters)
}

#ImageConfigRepositoryAuthConfigInitParameters: {
	// The Amazon Resource Name (ARN) of an AWS Lambda function that provides credentials to authenticate to the private Docker registry where your model image is hosted. For information about how to create an AWS Lambda function, see Create a Lambda function with the console in the AWS Lambda Developer Guide.
	repositoryCredentialsProviderArn?: null | string @go(RepositoryCredentialsProviderArn,*string)
}

#ImageConfigRepositoryAuthConfigObservation: {
	// The Amazon Resource Name (ARN) of an AWS Lambda function that provides credentials to authenticate to the private Docker registry where your model image is hosted. For information about how to create an AWS Lambda function, see Create a Lambda function with the console in the AWS Lambda Developer Guide.
	repositoryCredentialsProviderArn?: null | string @go(RepositoryCredentialsProviderArn,*string)
}

#ImageConfigRepositoryAuthConfigParameters: {
	// The Amazon Resource Name (ARN) of an AWS Lambda function that provides credentials to authenticate to the private Docker registry where your model image is hosted. For information about how to create an AWS Lambda function, see Create a Lambda function with the console in the AWS Lambda Developer Guide.
	// +kubebuilder:validation:Optional
	repositoryCredentialsProviderArn?: null | string @go(RepositoryCredentialsProviderArn,*string)
}

#InferenceExecutionConfigInitParameters: {
	// The container hosts value SingleModel/MultiModel. The default value is SingleModel.
	mode?: null | string @go(Mode,*string)
}

#InferenceExecutionConfigObservation: {
	// The container hosts value SingleModel/MultiModel. The default value is SingleModel.
	mode?: null | string @go(Mode,*string)
}

#InferenceExecutionConfigParameters: {
	// The container hosts value SingleModel/MultiModel. The default value is SingleModel.
	// +kubebuilder:validation:Optional
	mode?: null | string @go(Mode,*string)
}

#ModelInitParameters: {
	// Specifies containers in the inference pipeline. If not specified, the primary_container argument is required. Fields are documented below.
	container?: [...#ContainerInitParameters] @go(Container,[]ContainerInitParameters)

	// Isolates the model container. No inbound or outbound network calls can be made to or from the model container.
	enableNetworkIsolation?: null | bool @go(EnableNetworkIsolation,*bool)

	// Specifies details of how containers in a multi-container endpoint are called. see Inference Execution Config.
	inferenceExecutionConfig?: [...#InferenceExecutionConfigInitParameters] @go(InferenceExecutionConfig,[]InferenceExecutionConfigInitParameters)

	// The primary docker image containing inference code that is used when the model is deployed for predictions.  If not specified, the container argument is required. Fields are documented below.
	primaryContainer?: [...#PrimaryContainerInitParameters] @go(PrimaryContainer,[]PrimaryContainerInitParameters)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Specifies the VPC that you want your model to connect to. VpcConfig is used in hosting services and in batch transform.
	vpcConfig?: [...#VPCConfigInitParameters] @go(VPCConfig,[]VPCConfigInitParameters)
}

#ModelObservation: {
	// The Amazon Resource Name (ARN) assigned by AWS to this model.
	arn?: null | string @go(Arn,*string)

	// Specifies containers in the inference pipeline. If not specified, the primary_container argument is required. Fields are documented below.
	container?: [...#ContainerObservation] @go(Container,[]ContainerObservation)

	// Isolates the model container. No inbound or outbound network calls can be made to or from the model container.
	enableNetworkIsolation?: null | bool @go(EnableNetworkIsolation,*bool)

	// A role that SageMaker can assume to access model artifacts and docker images for deployment.
	executionRoleArn?: null | string @go(ExecutionRoleArn,*string)
	id?:               null | string @go(ID,*string)

	// Specifies details of how containers in a multi-container endpoint are called. see Inference Execution Config.
	inferenceExecutionConfig?: [...#InferenceExecutionConfigObservation] @go(InferenceExecutionConfig,[]InferenceExecutionConfigObservation)

	// The primary docker image containing inference code that is used when the model is deployed for predictions.  If not specified, the container argument is required. Fields are documented below.
	primaryContainer?: [...#PrimaryContainerObservation] @go(PrimaryContainer,[]PrimaryContainerObservation)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// Specifies the VPC that you want your model to connect to. VpcConfig is used in hosting services and in batch transform.
	vpcConfig?: [...#VPCConfigObservation] @go(VPCConfig,[]VPCConfigObservation)
}

#ModelParameters: {
	// Specifies containers in the inference pipeline. If not specified, the primary_container argument is required. Fields are documented below.
	// +kubebuilder:validation:Optional
	container?: [...#ContainerParameters] @go(Container,[]ContainerParameters)

	// Isolates the model container. No inbound or outbound network calls can be made to or from the model container.
	// +kubebuilder:validation:Optional
	enableNetworkIsolation?: null | bool @go(EnableNetworkIsolation,*bool)

	// A role that SageMaker can assume to access model artifacts and docker images for deployment.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	executionRoleArn?: null | string @go(ExecutionRoleArn,*string)

	// Reference to a Role in iam to populate executionRoleArn.
	// +kubebuilder:validation:Optional
	executionRoleArnRef?: null | v1.#Reference @go(ExecutionRoleArnRef,*v1.Reference)

	// Selector for a Role in iam to populate executionRoleArn.
	// +kubebuilder:validation:Optional
	executionRoleArnSelector?: null | v1.#Selector @go(ExecutionRoleArnSelector,*v1.Selector)

	// Specifies details of how containers in a multi-container endpoint are called. see Inference Execution Config.
	// +kubebuilder:validation:Optional
	inferenceExecutionConfig?: [...#InferenceExecutionConfigParameters] @go(InferenceExecutionConfig,[]InferenceExecutionConfigParameters)

	// The primary docker image containing inference code that is used when the model is deployed for predictions.  If not specified, the container argument is required. Fields are documented below.
	// +kubebuilder:validation:Optional
	primaryContainer?: [...#PrimaryContainerParameters] @go(PrimaryContainer,[]PrimaryContainerParameters)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Specifies the VPC that you want your model to connect to. VpcConfig is used in hosting services and in batch transform.
	// +kubebuilder:validation:Optional
	vpcConfig?: [...#VPCConfigParameters] @go(VPCConfig,[]VPCConfigParameters)
}

#PrimaryContainerImageConfigInitParameters: {
	// Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). Allowed values are: Platform and Vpc.
	repositoryAccessMode?: null | string @go(RepositoryAccessMode,*string)

	// Specifies an authentication configuration for the private docker registry where your model image is hosted. Specify a value for this property only if you specified Vpc as the value for the RepositoryAccessMode field, and the private Docker registry where the model image is hosted requires authentication. see Repository Auth Config.
	repositoryAuthConfig?: [...#ImageConfigRepositoryAuthConfigInitParameters] @go(RepositoryAuthConfig,[]ImageConfigRepositoryAuthConfigInitParameters)
}

#PrimaryContainerImageConfigObservation: {
	// Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). Allowed values are: Platform and Vpc.
	repositoryAccessMode?: null | string @go(RepositoryAccessMode,*string)

	// Specifies an authentication configuration for the private docker registry where your model image is hosted. Specify a value for this property only if you specified Vpc as the value for the RepositoryAccessMode field, and the private Docker registry where the model image is hosted requires authentication. see Repository Auth Config.
	repositoryAuthConfig?: [...#ImageConfigRepositoryAuthConfigObservation] @go(RepositoryAuthConfig,[]ImageConfigRepositoryAuthConfigObservation)
}

#PrimaryContainerImageConfigParameters: {
	// Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). Allowed values are: Platform and Vpc.
	// +kubebuilder:validation:Optional
	repositoryAccessMode?: null | string @go(RepositoryAccessMode,*string)

	// Specifies an authentication configuration for the private docker registry where your model image is hosted. Specify a value for this property only if you specified Vpc as the value for the RepositoryAccessMode field, and the private Docker registry where the model image is hosted requires authentication. see Repository Auth Config.
	// +kubebuilder:validation:Optional
	repositoryAuthConfig?: [...#ImageConfigRepositoryAuthConfigParameters] @go(RepositoryAuthConfig,[]ImageConfigRepositoryAuthConfigParameters)
}

#PrimaryContainerInitParameters: {
	// The DNS host name for the container.
	containerHostname?: null | string @go(ContainerHostname,*string)

	// Environment variables for the Docker container.
	// A list of key value pairs.
	environment?: {[string]: null | string} @go(Environment,map[string]*string)

	// The registry path where the inference code image is stored in Amazon ECR.
	image?: null | string @go(Image,*string)

	// Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). For more information see Using a Private Docker Registry for Real-Time Inference Containers. see Image Config.
	imageConfig?: [...#PrimaryContainerImageConfigInitParameters] @go(ImageConfig,[]PrimaryContainerImageConfigInitParameters)

	// The container hosts value SingleModel/MultiModel. The default value is SingleModel.
	mode?: null | string @go(Mode,*string)

	// The URL for the S3 location where model artifacts are stored.
	modelDataUrl?: null | string @go(ModelDataURL,*string)
}

#PrimaryContainerObservation: {
	// The DNS host name for the container.
	containerHostname?: null | string @go(ContainerHostname,*string)

	// Environment variables for the Docker container.
	// A list of key value pairs.
	environment?: {[string]: null | string} @go(Environment,map[string]*string)

	// The registry path where the inference code image is stored in Amazon ECR.
	image?: null | string @go(Image,*string)

	// Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). For more information see Using a Private Docker Registry for Real-Time Inference Containers. see Image Config.
	imageConfig?: [...#PrimaryContainerImageConfigObservation] @go(ImageConfig,[]PrimaryContainerImageConfigObservation)

	// The container hosts value SingleModel/MultiModel. The default value is SingleModel.
	mode?: null | string @go(Mode,*string)

	// The URL for the S3 location where model artifacts are stored.
	modelDataUrl?: null | string @go(ModelDataURL,*string)
}

#PrimaryContainerParameters: {
	// The DNS host name for the container.
	// +kubebuilder:validation:Optional
	containerHostname?: null | string @go(ContainerHostname,*string)

	// Environment variables for the Docker container.
	// A list of key value pairs.
	// +kubebuilder:validation:Optional
	environment?: {[string]: null | string} @go(Environment,map[string]*string)

	// The registry path where the inference code image is stored in Amazon ECR.
	// +kubebuilder:validation:Optional
	image?: null | string @go(Image,*string)

	// Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). For more information see Using a Private Docker Registry for Real-Time Inference Containers. see Image Config.
	// +kubebuilder:validation:Optional
	imageConfig?: [...#PrimaryContainerImageConfigParameters] @go(ImageConfig,[]PrimaryContainerImageConfigParameters)

	// The container hosts value SingleModel/MultiModel. The default value is SingleModel.
	// +kubebuilder:validation:Optional
	mode?: null | string @go(Mode,*string)

	// The URL for the S3 location where model artifacts are stored.
	// +kubebuilder:validation:Optional
	modelDataUrl?: null | string @go(ModelDataURL,*string)
}

#RepositoryAuthConfigInitParameters: {
	// The Amazon Resource Name (ARN) of an AWS Lambda function that provides credentials to authenticate to the private Docker registry where your model image is hosted. For information about how to create an AWS Lambda function, see Create a Lambda function with the console in the AWS Lambda Developer Guide.
	repositoryCredentialsProviderArn?: null | string @go(RepositoryCredentialsProviderArn,*string)
}

#RepositoryAuthConfigObservation: {
	// The Amazon Resource Name (ARN) of an AWS Lambda function that provides credentials to authenticate to the private Docker registry where your model image is hosted. For information about how to create an AWS Lambda function, see Create a Lambda function with the console in the AWS Lambda Developer Guide.
	repositoryCredentialsProviderArn?: null | string @go(RepositoryCredentialsProviderArn,*string)
}

#RepositoryAuthConfigParameters: {
	// The Amazon Resource Name (ARN) of an AWS Lambda function that provides credentials to authenticate to the private Docker registry where your model image is hosted. For information about how to create an AWS Lambda function, see Create a Lambda function with the console in the AWS Lambda Developer Guide.
	// +kubebuilder:validation:Optional
	repositoryCredentialsProviderArn?: null | string @go(RepositoryCredentialsProviderArn,*string)
}

#VPCConfigInitParameters: {
	securityGroupIds?: [...null | string] @go(SecurityGroupIds,[]*string)
	subnets?: [...null | string] @go(Subnets,[]*string)
}

#VPCConfigObservation: {
	securityGroupIds?: [...null | string] @go(SecurityGroupIds,[]*string)
	subnets?: [...null | string] @go(Subnets,[]*string)
}

#VPCConfigParameters: {
	// +kubebuilder:validation:Optional
	securityGroupIds: [...null | string] @go(SecurityGroupIds,[]*string)

	// +kubebuilder:validation:Optional
	subnets: [...null | string] @go(Subnets,[]*string)
}

// ModelSpec defines the desired state of Model
#ModelSpec: {
	v1.#ResourceSpec
	forProvider: #ModelParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ModelInitParameters @go(InitProvider)
}

// ModelStatus defines the observed state of Model.
#ModelStatus: {
	v1.#ResourceStatus
	atProvider?: #ModelObservation @go(AtProvider)
}

// Model is the Schema for the Models API. Provides a SageMaker model resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Model: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec:      #ModelSpec         @go(Spec)
	status?:   #ModelStatus       @go(Status)
}

// ModelList contains a list of Models
#ModelList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Model] @go(Items,[]Model)
}
