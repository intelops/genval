// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/apprunner/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#ObservabilityConfigurationInitParameters: {
	// Name of the observability configuration.
	observabilityConfigurationName?: null | string @go(ObservabilityConfigurationName,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Configuration of the tracing feature within this observability configuration. If you don't specify it, App Runner doesn't enable tracing. See Trace Configuration below for more details.
	traceConfiguration?: [...#TraceConfigurationInitParameters] @go(TraceConfiguration,[]TraceConfigurationInitParameters)
}

#ObservabilityConfigurationObservation: {
	// ARN of this observability configuration.
	arn?: null | string @go(Arn,*string)
	id?:  null | string @go(ID,*string)

	// Whether the observability configuration has the highest observability_configuration_revision among all configurations that share the same observability_configuration_name.
	latest?: null | bool @go(Latest,*bool)

	// Name of the observability configuration.
	observabilityConfigurationName?: null | string @go(ObservabilityConfigurationName,*string)

	// The revision of this observability configuration.
	observabilityConfigurationRevision?: null | float64 @go(ObservabilityConfigurationRevision,*float64)

	// Current state of the observability configuration. An INACTIVE configuration revision has been deleted and can't be used. It is permanently removed some time after deletion.
	status?: null | string @go(Status,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// Configuration of the tracing feature within this observability configuration. If you don't specify it, App Runner doesn't enable tracing. See Trace Configuration below for more details.
	traceConfiguration?: [...#TraceConfigurationObservation] @go(TraceConfiguration,[]TraceConfigurationObservation)
}

#ObservabilityConfigurationParameters: {
	// Name of the observability configuration.
	// +kubebuilder:validation:Optional
	observabilityConfigurationName?: null | string @go(ObservabilityConfigurationName,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Configuration of the tracing feature within this observability configuration. If you don't specify it, App Runner doesn't enable tracing. See Trace Configuration below for more details.
	// +kubebuilder:validation:Optional
	traceConfiguration?: [...#TraceConfigurationParameters] @go(TraceConfiguration,[]TraceConfigurationParameters)
}

#TraceConfigurationInitParameters: {
	// Implementation provider chosen for tracing App Runner services. Valid values: AWSXRAY.
	vendor?: null | string @go(Vendor,*string)
}

#TraceConfigurationObservation: {
	// Implementation provider chosen for tracing App Runner services. Valid values: AWSXRAY.
	vendor?: null | string @go(Vendor,*string)
}

#TraceConfigurationParameters: {
	// Implementation provider chosen for tracing App Runner services. Valid values: AWSXRAY.
	// +kubebuilder:validation:Optional
	vendor?: null | string @go(Vendor,*string)
}

// ObservabilityConfigurationSpec defines the desired state of ObservabilityConfiguration
#ObservabilityConfigurationSpec: {
	v1.#ResourceSpec
	forProvider: #ObservabilityConfigurationParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ObservabilityConfigurationInitParameters @go(InitProvider)
}

// ObservabilityConfigurationStatus defines the observed state of ObservabilityConfiguration.
#ObservabilityConfigurationStatus: {
	v1.#ResourceStatus
	atProvider?: #ObservabilityConfigurationObservation @go(AtProvider)
}

// ObservabilityConfiguration is the Schema for the ObservabilityConfigurations API. Manages an App Runner Observability Configuration.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#ObservabilityConfiguration: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.observabilityConfigurationName) || (has(self.initProvider) && has(self.initProvider.observabilityConfigurationName))",message="spec.forProvider.observabilityConfigurationName is a required parameter"
	spec:    #ObservabilityConfigurationSpec   @go(Spec)
	status?: #ObservabilityConfigurationStatus @go(Status)
}

// ObservabilityConfigurationList contains a list of ObservabilityConfigurations
#ObservabilityConfigurationList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#ObservabilityConfiguration] @go(Items,[]ObservabilityConfiguration)
}
