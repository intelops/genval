// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/networkmanager/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#BandwidthInitParameters: {
	// Download speed in Mbps.
	downloadSpeed?: null | float64 @go(DownloadSpeed,*float64)

	// Upload speed in Mbps.
	uploadSpeed?: null | float64 @go(UploadSpeed,*float64)
}

#BandwidthObservation: {
	// Download speed in Mbps.
	downloadSpeed?: null | float64 @go(DownloadSpeed,*float64)

	// Upload speed in Mbps.
	uploadSpeed?: null | float64 @go(UploadSpeed,*float64)
}

#BandwidthParameters: {
	// Download speed in Mbps.
	// +kubebuilder:validation:Optional
	downloadSpeed?: null | float64 @go(DownloadSpeed,*float64)

	// Upload speed in Mbps.
	// +kubebuilder:validation:Optional
	uploadSpeed?: null | float64 @go(UploadSpeed,*float64)
}

#LinkInitParameters: {
	// The upload speed and download speed in Mbps. Documented below.
	bandwidth?: [...#BandwidthInitParameters] @go(Bandwidth,[]BandwidthInitParameters)

	// A description of the link.
	description?: null | string @go(Description,*string)

	// The provider of the link.
	providerName?: null | string @go(ProviderName,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// The type of the link.
	type?: null | string @go(Type,*string)
}

#LinkObservation: {
	// Link Amazon Resource Name (ARN).
	arn?: null | string @go(Arn,*string)

	// The upload speed and download speed in Mbps. Documented below.
	bandwidth?: [...#BandwidthObservation] @go(Bandwidth,[]BandwidthObservation)

	// A description of the link.
	description?: null | string @go(Description,*string)

	// The ID of the global network.
	globalNetworkId?: null | string @go(GlobalNetworkID,*string)
	id?:              null | string @go(ID,*string)

	// The provider of the link.
	providerName?: null | string @go(ProviderName,*string)

	// The ID of the site.
	siteId?: null | string @go(SiteID,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// The type of the link.
	type?: null | string @go(Type,*string)
}

#LinkParameters: {
	// The upload speed and download speed in Mbps. Documented below.
	// +kubebuilder:validation:Optional
	bandwidth?: [...#BandwidthParameters] @go(Bandwidth,[]BandwidthParameters)

	// A description of the link.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// The ID of the global network.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/networkmanager/v1beta1.GlobalNetwork
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	globalNetworkId?: null | string @go(GlobalNetworkID,*string)

	// Reference to a GlobalNetwork in networkmanager to populate globalNetworkId.
	// +kubebuilder:validation:Optional
	globalNetworkIdRef?: null | v1.#Reference @go(GlobalNetworkIDRef,*v1.Reference)

	// Selector for a GlobalNetwork in networkmanager to populate globalNetworkId.
	// +kubebuilder:validation:Optional
	globalNetworkIdSelector?: null | v1.#Selector @go(GlobalNetworkIDSelector,*v1.Selector)

	// The provider of the link.
	// +kubebuilder:validation:Optional
	providerName?: null | string @go(ProviderName,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The ID of the site.
	// +crossplane:generate:reference:type=Site
	// +kubebuilder:validation:Optional
	siteId?: null | string @go(SiteID,*string)

	// Reference to a Site to populate siteId.
	// +kubebuilder:validation:Optional
	siteIdRef?: null | v1.#Reference @go(SiteIDRef,*v1.Reference)

	// Selector for a Site to populate siteId.
	// +kubebuilder:validation:Optional
	siteIdSelector?: null | v1.#Selector @go(SiteIDSelector,*v1.Selector)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// The type of the link.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

// LinkSpec defines the desired state of Link
#LinkSpec: {
	v1.#ResourceSpec
	forProvider: #LinkParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #LinkInitParameters @go(InitProvider)
}

// LinkStatus defines the observed state of Link.
#LinkStatus: {
	v1.#ResourceStatus
	atProvider?: #LinkObservation @go(AtProvider)
}

// Link is the Schema for the Links API. Creates a link for a site.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Link: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.bandwidth) || (has(self.initProvider) && has(self.initProvider.bandwidth))",message="spec.forProvider.bandwidth is a required parameter"
	spec:    #LinkSpec   @go(Spec)
	status?: #LinkStatus @go(Status)
}

// LinkList contains a list of Links
#LinkList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Link] @go(Items,[]Link)
}
