// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/cloudwatch/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#CompositeAlarmInitParameters: {
	// Indicates whether actions should be executed during any changes to the alarm state of the composite alarm. Defaults to true.
	actionsEnabled?: null | bool @go(ActionsEnabled,*bool)

	// The description for the composite alarm.
	alarmDescription?: null | string @go(AlarmDescription,*string)

	// An expression that specifies which other alarms are to be evaluated to determine this composite alarm's state. For syntax, see Creating a Composite Alarm. The maximum length is 10240 characters.
	alarmRule?: null | string @go(AlarmRule,*string)

	// The set of actions to execute when this alarm transitions to the INSUFFICIENT_DATA state from any other state. Each action is specified as an ARN. Up to 5 actions are allowed.
	insufficientDataActions?: [...null | string] @go(InsufficientDataActions,[]*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#CompositeAlarmObservation: {
	// Indicates whether actions should be executed during any changes to the alarm state of the composite alarm. Defaults to true.
	actionsEnabled?: null | bool @go(ActionsEnabled,*bool)

	// The set of actions to execute when this alarm transitions to the ALARM state from any other state. Each action is specified as an ARN. Up to 5 actions are allowed.
	alarmActions?: [...null | string] @go(AlarmActions,[]*string)

	// The description for the composite alarm.
	alarmDescription?: null | string @go(AlarmDescription,*string)

	// An expression that specifies which other alarms are to be evaluated to determine this composite alarm's state. For syntax, see Creating a Composite Alarm. The maximum length is 10240 characters.
	alarmRule?: null | string @go(AlarmRule,*string)

	// The ARN of the composite alarm.
	arn?: null | string @go(Arn,*string)

	// The ID of the composite alarm resource, which is equivalent to its alarm_name.
	id?: null | string @go(ID,*string)

	// The set of actions to execute when this alarm transitions to the INSUFFICIENT_DATA state from any other state. Each action is specified as an ARN. Up to 5 actions are allowed.
	insufficientDataActions?: [...null | string] @go(InsufficientDataActions,[]*string)

	// The set of actions to execute when this alarm transitions to an OK state from any other state. Each action is specified as an ARN. Up to 5 actions are allowed.
	okActions?: [...null | string] @go(OkActions,[]*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#CompositeAlarmParameters: {
	// Indicates whether actions should be executed during any changes to the alarm state of the composite alarm. Defaults to true.
	// +kubebuilder:validation:Optional
	actionsEnabled?: null | bool @go(ActionsEnabled,*bool)

	// The set of actions to execute when this alarm transitions to the ALARM state from any other state. Each action is specified as an ARN. Up to 5 actions are allowed.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/sns/v1beta1.Topic
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	alarmActions?: [...null | string] @go(AlarmActions,[]*string)

	// References to Topic in sns to populate alarmActions.
	// +kubebuilder:validation:Optional
	alarmActionsRefs?: [...v1.#Reference] @go(AlarmActionsRefs,[]v1.Reference)

	// Selector for a list of Topic in sns to populate alarmActions.
	// +kubebuilder:validation:Optional
	alarmActionsSelector?: null | v1.#Selector @go(AlarmActionsSelector,*v1.Selector)

	// The description for the composite alarm.
	// +kubebuilder:validation:Optional
	alarmDescription?: null | string @go(AlarmDescription,*string)

	// An expression that specifies which other alarms are to be evaluated to determine this composite alarm's state. For syntax, see Creating a Composite Alarm. The maximum length is 10240 characters.
	// +kubebuilder:validation:Optional
	alarmRule?: null | string @go(AlarmRule,*string)

	// The set of actions to execute when this alarm transitions to the INSUFFICIENT_DATA state from any other state. Each action is specified as an ARN. Up to 5 actions are allowed.
	// +kubebuilder:validation:Optional
	insufficientDataActions?: [...null | string] @go(InsufficientDataActions,[]*string)

	// The set of actions to execute when this alarm transitions to an OK state from any other state. Each action is specified as an ARN. Up to 5 actions are allowed.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/sns/v1beta1.Topic
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	okActions?: [...null | string] @go(OkActions,[]*string)

	// References to Topic in sns to populate okActions.
	// +kubebuilder:validation:Optional
	okActionsRefs?: [...v1.#Reference] @go(OkActionsRefs,[]v1.Reference)

	// Selector for a list of Topic in sns to populate okActions.
	// +kubebuilder:validation:Optional
	okActionsSelector?: null | v1.#Selector @go(OkActionsSelector,*v1.Selector)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// CompositeAlarmSpec defines the desired state of CompositeAlarm
#CompositeAlarmSpec: {
	v1.#ResourceSpec
	forProvider: #CompositeAlarmParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #CompositeAlarmInitParameters @go(InitProvider)
}

// CompositeAlarmStatus defines the observed state of CompositeAlarm.
#CompositeAlarmStatus: {
	v1.#ResourceStatus
	atProvider?: #CompositeAlarmObservation @go(AtProvider)
}

// CompositeAlarm is the Schema for the CompositeAlarms API. Provides a CloudWatch Composite Alarm resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#CompositeAlarm: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.alarmRule) || (has(self.initProvider) && has(self.initProvider.alarmRule))",message="spec.forProvider.alarmRule is a required parameter"
	spec:    #CompositeAlarmSpec   @go(Spec)
	status?: #CompositeAlarmStatus @go(Status)
}

// CompositeAlarmList contains a list of CompositeAlarms
#CompositeAlarmList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#CompositeAlarm] @go(Items,[]CompositeAlarm)
}
