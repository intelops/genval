// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/kms/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#CiphertextInitParameters: {
	// An optional mapping that makes up the encryption context.
	context?: {[string]: null | string} @go(Context,map[string]*string)
}

#CiphertextObservation: {
	// Base64 encoded ciphertext
	ciphertextBlob?: null | string @go(CiphertextBlob,*string)

	// An optional mapping that makes up the encryption context.
	context?: {[string]: null | string} @go(Context,map[string]*string)
	id?: null | string @go(ID,*string)

	// Globally unique key ID for the customer master key.
	keyId?: null | string @go(KeyID,*string)
}

#CiphertextParameters: {
	// An optional mapping that makes up the encryption context.
	// +kubebuilder:validation:Optional
	context?: {[string]: null | string} @go(Context,map[string]*string)

	// Globally unique key ID for the customer master key.
	// +crossplane:generate:reference:type=Key
	// +kubebuilder:validation:Optional
	keyId?: null | string @go(KeyID,*string)

	// Reference to a Key to populate keyId.
	// +kubebuilder:validation:Optional
	keyIdRef?: null | v1.#Reference @go(KeyIDRef,*v1.Reference)

	// Selector for a Key to populate keyId.
	// +kubebuilder:validation:Optional
	keyIdSelector?: null | v1.#Selector @go(KeyIDSelector,*v1.Selector)

	// Data to be encrypted. Note that this may show up in logs, and it will be stored in the state file.
	// +kubebuilder:validation:Optional
	plaintextSecretRef: v1.#SecretKeySelector @go(PlaintextSecretRef)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)
}

// CiphertextSpec defines the desired state of Ciphertext
#CiphertextSpec: {
	v1.#ResourceSpec
	forProvider: #CiphertextParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #CiphertextInitParameters @go(InitProvider)
}

// CiphertextStatus defines the observed state of Ciphertext.
#CiphertextStatus: {
	v1.#ResourceStatus
	atProvider?: #CiphertextObservation @go(AtProvider)
}

// Ciphertext is the Schema for the Ciphertexts API. Provides ciphertext encrypted using a KMS key
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Ciphertext: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.plaintextSecretRef)",message="spec.forProvider.plaintextSecretRef is a required parameter"
	spec:    #CiphertextSpec   @go(Spec)
	status?: #CiphertextStatus @go(Status)
}

// CiphertextList contains a list of Ciphertexts
#CiphertextList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Ciphertext] @go(Items,[]Ciphertext)
}
