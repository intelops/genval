// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/kms/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#AliasInitParameters: {
}

#AliasObservation: {
	// The Amazon Resource Name (ARN) of the key alias.
	arn?: null | string @go(Arn,*string)
	id?:  null | string @go(ID,*string)

	// The Amazon Resource Name (ARN) of the target key identifier.
	targetKeyArn?: null | string @go(TargetKeyArn,*string)

	// Identifier for the key for which the alias is for, can be either an ARN or key_id.
	targetKeyId?: null | string @go(TargetKeyID,*string)
}

#AliasParameters: {
	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Identifier for the key for which the alias is for, can be either an ARN or key_id.
	// +crossplane:generate:reference:type=Key
	// +kubebuilder:validation:Optional
	targetKeyId?: null | string @go(TargetKeyID,*string)

	// Reference to a Key to populate targetKeyId.
	// +kubebuilder:validation:Optional
	targetKeyIdRef?: null | v1.#Reference @go(TargetKeyIDRef,*v1.Reference)

	// Selector for a Key to populate targetKeyId.
	// +kubebuilder:validation:Optional
	targetKeyIdSelector?: null | v1.#Selector @go(TargetKeyIDSelector,*v1.Selector)
}

// AliasSpec defines the desired state of Alias
#AliasSpec: {
	v1.#ResourceSpec
	forProvider: #AliasParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #AliasInitParameters @go(InitProvider)
}

// AliasStatus defines the observed state of Alias.
#AliasStatus: {
	v1.#ResourceStatus
	atProvider?: #AliasObservation @go(AtProvider)
}

// Alias is the Schema for the Aliass API. Provides a display name for a customer master key.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Alias: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec:      #AliasSpec         @go(Spec)
	status?:   #AliasStatus       @go(Status)
}

// AliasList contains a list of Aliass
#AliasList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Alias] @go(Items,[]Alias)
}
