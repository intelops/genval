// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/appsync/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#AuthorizationConfigInitParameters: {
	// Authorization type that the HTTP endpoint requires. Default values is AWS_IAM.
	authorizationType?: null | string @go(AuthorizationType,*string)

	// Identity and Access Management (IAM) settings. See AWS IAM Config.
	awsIamConfig?: [...#AwsIAMConfigInitParameters] @go(AwsIAMConfig,[]AwsIAMConfigInitParameters)
}

#AuthorizationConfigObservation: {
	// Authorization type that the HTTP endpoint requires. Default values is AWS_IAM.
	authorizationType?: null | string @go(AuthorizationType,*string)

	// Identity and Access Management (IAM) settings. See AWS IAM Config.
	awsIamConfig?: [...#AwsIAMConfigObservation] @go(AwsIAMConfig,[]AwsIAMConfigObservation)
}

#AuthorizationConfigParameters: {
	// Authorization type that the HTTP endpoint requires. Default values is AWS_IAM.
	// +kubebuilder:validation:Optional
	authorizationType?: null | string @go(AuthorizationType,*string)

	// Identity and Access Management (IAM) settings. See AWS IAM Config.
	// +kubebuilder:validation:Optional
	awsIamConfig?: [...#AwsIAMConfigParameters] @go(AwsIAMConfig,[]AwsIAMConfigParameters)
}

#AwsIAMConfigInitParameters: {
	// Signing Amazon Web Services Region for IAM authorization.
	signingRegion?: null | string @go(SigningRegion,*string)

	// Signing service name for IAM authorization.
	signingServiceName?: null | string @go(SigningServiceName,*string)
}

#AwsIAMConfigObservation: {
	// Signing Amazon Web Services Region for IAM authorization.
	signingRegion?: null | string @go(SigningRegion,*string)

	// Signing service name for IAM authorization.
	signingServiceName?: null | string @go(SigningServiceName,*string)
}

#AwsIAMConfigParameters: {
	// Signing Amazon Web Services Region for IAM authorization.
	// +kubebuilder:validation:Optional
	signingRegion?: null | string @go(SigningRegion,*string)

	// Signing service name for IAM authorization.
	// +kubebuilder:validation:Optional
	signingServiceName?: null | string @go(SigningServiceName,*string)
}

#DatasourceInitParameters: {
	// Description of the data source.
	description?: null | string @go(Description,*string)

	// DynamoDB settings. See below
	dynamodbConfig?: [...#DynamodbConfigInitParameters] @go(DynamodbConfig,[]DynamodbConfigInitParameters)

	// Amazon Elasticsearch settings. See below
	elasticsearchConfig?: [...#ElasticsearchConfigInitParameters] @go(ElasticsearchConfig,[]ElasticsearchConfigInitParameters)

	// AWS EventBridge settings. See below
	eventBridgeConfig?: [...#EventBridgeConfigInitParameters] @go(EventBridgeConfig,[]EventBridgeConfigInitParameters)

	// HTTP settings. See below
	httpConfig?: [...#HTTPConfigInitParameters] @go(HTTPConfig,[]HTTPConfigInitParameters)

	// AWS Lambda settings. See below
	lambdaConfig?: [...#LambdaConfigInitParameters] @go(LambdaConfig,[]LambdaConfigInitParameters)

	// Amazon OpenSearch Service settings. See below
	opensearchserviceConfig?: [...#OpensearchserviceConfigInitParameters] @go(OpensearchserviceConfig,[]OpensearchserviceConfigInitParameters)

	// AWS RDS settings. See Relational Database Config
	relationalDatabaseConfig?: [...#RelationalDatabaseConfigInitParameters] @go(RelationalDatabaseConfig,[]RelationalDatabaseConfigInitParameters)

	// Type of the Data Source. Valid values: AWS_LAMBDA, AMAZON_DYNAMODB, AMAZON_ELASTICSEARCH, HTTP, NONE, RELATIONAL_DATABASE, AMAZON_EVENTBRIDGE.
	type?: null | string @go(Type,*string)
}

#DatasourceObservation: {
	// API ID for the GraphQL API for the data source.
	apiId?: null | string @go(APIID,*string)

	// ARN
	arn?: null | string @go(Arn,*string)

	// Description of the data source.
	description?: null | string @go(Description,*string)

	// DynamoDB settings. See below
	dynamodbConfig?: [...#DynamodbConfigObservation] @go(DynamodbConfig,[]DynamodbConfigObservation)

	// Amazon Elasticsearch settings. See below
	elasticsearchConfig?: [...#ElasticsearchConfigObservation] @go(ElasticsearchConfig,[]ElasticsearchConfigObservation)

	// AWS EventBridge settings. See below
	eventBridgeConfig?: [...#EventBridgeConfigObservation] @go(EventBridgeConfig,[]EventBridgeConfigObservation)

	// HTTP settings. See below
	httpConfig?: [...#HTTPConfigObservation] @go(HTTPConfig,[]HTTPConfigObservation)
	id?: null | string @go(ID,*string)

	// AWS Lambda settings. See below
	lambdaConfig?: [...#LambdaConfigObservation] @go(LambdaConfig,[]LambdaConfigObservation)

	// Amazon OpenSearch Service settings. See below
	opensearchserviceConfig?: [...#OpensearchserviceConfigObservation] @go(OpensearchserviceConfig,[]OpensearchserviceConfigObservation)

	// AWS RDS settings. See Relational Database Config
	relationalDatabaseConfig?: [...#RelationalDatabaseConfigObservation] @go(RelationalDatabaseConfig,[]RelationalDatabaseConfigObservation)

	// IAM service role ARN for the data source.
	serviceRoleArn?: null | string @go(ServiceRoleArn,*string)

	// Type of the Data Source. Valid values: AWS_LAMBDA, AMAZON_DYNAMODB, AMAZON_ELASTICSEARCH, HTTP, NONE, RELATIONAL_DATABASE, AMAZON_EVENTBRIDGE.
	type?: null | string @go(Type,*string)
}

#DatasourceParameters: {
	// API ID for the GraphQL API for the data source.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/appsync/v1beta1.GraphQLAPI
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	apiId?: null | string @go(APIID,*string)

	// Reference to a GraphQLAPI in appsync to populate apiId.
	// +kubebuilder:validation:Optional
	apiIdRef?: null | v1.#Reference @go(APIIDRef,*v1.Reference)

	// Selector for a GraphQLAPI in appsync to populate apiId.
	// +kubebuilder:validation:Optional
	apiIdSelector?: null | v1.#Selector @go(APIIDSelector,*v1.Selector)

	// Description of the data source.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// DynamoDB settings. See below
	// +kubebuilder:validation:Optional
	dynamodbConfig?: [...#DynamodbConfigParameters] @go(DynamodbConfig,[]DynamodbConfigParameters)

	// Amazon Elasticsearch settings. See below
	// +kubebuilder:validation:Optional
	elasticsearchConfig?: [...#ElasticsearchConfigParameters] @go(ElasticsearchConfig,[]ElasticsearchConfigParameters)

	// AWS EventBridge settings. See below
	// +kubebuilder:validation:Optional
	eventBridgeConfig?: [...#EventBridgeConfigParameters] @go(EventBridgeConfig,[]EventBridgeConfigParameters)

	// HTTP settings. See below
	// +kubebuilder:validation:Optional
	httpConfig?: [...#HTTPConfigParameters] @go(HTTPConfig,[]HTTPConfigParameters)

	// AWS Lambda settings. See below
	// +kubebuilder:validation:Optional
	lambdaConfig?: [...#LambdaConfigParameters] @go(LambdaConfig,[]LambdaConfigParameters)

	// Amazon OpenSearch Service settings. See below
	// +kubebuilder:validation:Optional
	opensearchserviceConfig?: [...#OpensearchserviceConfigParameters] @go(OpensearchserviceConfig,[]OpensearchserviceConfigParameters)

	// AWS Region for RDS HTTP endpoint. Defaults to current region.
	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// AWS RDS settings. See Relational Database Config
	// +kubebuilder:validation:Optional
	relationalDatabaseConfig?: [...#RelationalDatabaseConfigParameters] @go(RelationalDatabaseConfig,[]RelationalDatabaseConfigParameters)

	// IAM service role ARN for the data source.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	serviceRoleArn?: null | string @go(ServiceRoleArn,*string)

	// Reference to a Role in iam to populate serviceRoleArn.
	// +kubebuilder:validation:Optional
	serviceRoleArnRef?: null | v1.#Reference @go(ServiceRoleArnRef,*v1.Reference)

	// Selector for a Role in iam to populate serviceRoleArn.
	// +kubebuilder:validation:Optional
	serviceRoleArnSelector?: null | v1.#Selector @go(ServiceRoleArnSelector,*v1.Selector)

	// Type of the Data Source. Valid values: AWS_LAMBDA, AMAZON_DYNAMODB, AMAZON_ELASTICSEARCH, HTTP, NONE, RELATIONAL_DATABASE, AMAZON_EVENTBRIDGE.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

#DeltaSyncConfigInitParameters: {
	baseTableTtl?: null | float64 @go(BaseTableTTL,*float64)

	// User-supplied name for the data source.
	deltaSyncTableName?: null | string  @go(DeltaSyncTableName,*string)
	deltaSyncTableTtl?:  null | float64 @go(DeltaSyncTableTTL,*float64)
}

#DeltaSyncConfigObservation: {
	baseTableTtl?: null | float64 @go(BaseTableTTL,*float64)

	// User-supplied name for the data source.
	deltaSyncTableName?: null | string  @go(DeltaSyncTableName,*string)
	deltaSyncTableTtl?:  null | float64 @go(DeltaSyncTableTTL,*float64)
}

#DeltaSyncConfigParameters: {
	// +kubebuilder:validation:Optional
	baseTableTtl?: null | float64 @go(BaseTableTTL,*float64)

	// User-supplied name for the data source.
	// +kubebuilder:validation:Optional
	deltaSyncTableName?: null | string @go(DeltaSyncTableName,*string)

	// +kubebuilder:validation:Optional
	deltaSyncTableTtl?: null | float64 @go(DeltaSyncTableTTL,*float64)
}

#DynamodbConfigInitParameters: {
	deltaSyncConfig?: [...#DeltaSyncConfigInitParameters] @go(DeltaSyncConfig,[]DeltaSyncConfigInitParameters)

	// Set to true to use Amazon Cognito credentials with this data source.
	useCallerCredentials?: null | bool @go(UseCallerCredentials,*bool)
	versioned?:            null | bool @go(Versioned,*bool)
}

#DynamodbConfigObservation: {
	deltaSyncConfig?: [...#DeltaSyncConfigObservation] @go(DeltaSyncConfig,[]DeltaSyncConfigObservation)

	// AWS region of the DynamoDB table. Defaults to current region.
	region?: null | string @go(Region,*string)

	// Name of the DynamoDB table.
	tableName?: null | string @go(TableName,*string)

	// Set to true to use Amazon Cognito credentials with this data source.
	useCallerCredentials?: null | bool @go(UseCallerCredentials,*bool)
	versioned?:            null | bool @go(Versioned,*bool)
}

#DynamodbConfigParameters: {
	// +kubebuilder:validation:Optional
	deltaSyncConfig?: [...#DeltaSyncConfigParameters] @go(DeltaSyncConfig,[]DeltaSyncConfigParameters)

	// AWS region of the DynamoDB table. Defaults to current region.
	// +kubebuilder:validation:Optional
	region?: null | string @go(Region,*string)

	// Name of the DynamoDB table.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/dynamodb/v1beta1.Table
	// +kubebuilder:validation:Optional
	tableName?: null | string @go(TableName,*string)

	// Reference to a Table in dynamodb to populate tableName.
	// +kubebuilder:validation:Optional
	tableNameRef?: null | v1.#Reference @go(TableNameRef,*v1.Reference)

	// Selector for a Table in dynamodb to populate tableName.
	// +kubebuilder:validation:Optional
	tableNameSelector?: null | v1.#Selector @go(TableNameSelector,*v1.Selector)

	// Set to true to use Amazon Cognito credentials with this data source.
	// +kubebuilder:validation:Optional
	useCallerCredentials?: null | bool @go(UseCallerCredentials,*bool)

	// +kubebuilder:validation:Optional
	versioned?: null | bool @go(Versioned,*bool)
}

#ElasticsearchConfigInitParameters: {
	// HTTP endpoint of the Elasticsearch domain.
	endpoint?: null | string @go(Endpoint,*string)
}

#ElasticsearchConfigObservation: {
	// HTTP endpoint of the Elasticsearch domain.
	endpoint?: null | string @go(Endpoint,*string)

	// AWS region of Elasticsearch domain. Defaults to current region.
	region?: null | string @go(Region,*string)
}

#ElasticsearchConfigParameters: {
	// HTTP endpoint of the Elasticsearch domain.
	// +kubebuilder:validation:Optional
	endpoint?: null | string @go(Endpoint,*string)

	// AWS region of Elasticsearch domain. Defaults to current region.
	// +kubebuilder:validation:Optional
	region?: null | string @go(Region,*string)
}

#EventBridgeConfigInitParameters: {
	// ARN for the EventBridge bus.
	eventBusArn?: null | string @go(EventBusArn,*string)
}

#EventBridgeConfigObservation: {
	// ARN for the EventBridge bus.
	eventBusArn?: null | string @go(EventBusArn,*string)
}

#EventBridgeConfigParameters: {
	// ARN for the EventBridge bus.
	// +kubebuilder:validation:Optional
	eventBusArn?: null | string @go(EventBusArn,*string)
}

#HTTPConfigInitParameters: {
	// Authorization configuration in case the HTTP endpoint requires authorization. See Authorization Config.
	authorizationConfig?: [...#AuthorizationConfigInitParameters] @go(AuthorizationConfig,[]AuthorizationConfigInitParameters)

	// HTTP URL.
	endpoint?: null | string @go(Endpoint,*string)
}

#HTTPConfigObservation: {
	// Authorization configuration in case the HTTP endpoint requires authorization. See Authorization Config.
	authorizationConfig?: [...#AuthorizationConfigObservation] @go(AuthorizationConfig,[]AuthorizationConfigObservation)

	// HTTP URL.
	endpoint?: null | string @go(Endpoint,*string)
}

#HTTPConfigParameters: {
	// Authorization configuration in case the HTTP endpoint requires authorization. See Authorization Config.
	// +kubebuilder:validation:Optional
	authorizationConfig?: [...#AuthorizationConfigParameters] @go(AuthorizationConfig,[]AuthorizationConfigParameters)

	// HTTP URL.
	// +kubebuilder:validation:Optional
	endpoint?: null | string @go(Endpoint,*string)
}

#HTTPEndpointConfigInitParameters: {
	// AWS secret store ARN for database credentials.
	awsSecretStoreArn?: null | string @go(AwsSecretStoreArn,*string)

	// Amazon RDS cluster identifier.
	dbClusterIdentifier?: null | string @go(DBClusterIdentifier,*string)

	// Logical database name.
	databaseName?: null | string @go(DatabaseName,*string)

	// Logical schema name.
	schema?: null | string @go(Schema,*string)
}

#HTTPEndpointConfigObservation: {
	// AWS secret store ARN for database credentials.
	awsSecretStoreArn?: null | string @go(AwsSecretStoreArn,*string)

	// Amazon RDS cluster identifier.
	dbClusterIdentifier?: null | string @go(DBClusterIdentifier,*string)

	// Logical database name.
	databaseName?: null | string @go(DatabaseName,*string)

	// AWS Region for RDS HTTP endpoint. Defaults to current region.
	region?: null | string @go(Region,*string)

	// Logical schema name.
	schema?: null | string @go(Schema,*string)
}

#HTTPEndpointConfigParameters: {
	// AWS secret store ARN for database credentials.
	// +kubebuilder:validation:Optional
	awsSecretStoreArn?: null | string @go(AwsSecretStoreArn,*string)

	// Amazon RDS cluster identifier.
	// +kubebuilder:validation:Optional
	dbClusterIdentifier?: null | string @go(DBClusterIdentifier,*string)

	// Logical database name.
	// +kubebuilder:validation:Optional
	databaseName?: null | string @go(DatabaseName,*string)

	// AWS Region for RDS HTTP endpoint. Defaults to current region.
	// +kubebuilder:validation:Optional
	region?: null | string @go(Region,*string)

	// Logical schema name.
	// +kubebuilder:validation:Optional
	schema?: null | string @go(Schema,*string)
}

#LambdaConfigInitParameters: {
	// ARN for the Lambda function.
	functionArn?: null | string @go(FunctionArn,*string)
}

#LambdaConfigObservation: {
	// ARN for the Lambda function.
	functionArn?: null | string @go(FunctionArn,*string)
}

#LambdaConfigParameters: {
	// ARN for the Lambda function.
	// +kubebuilder:validation:Optional
	functionArn?: null | string @go(FunctionArn,*string)
}

#OpensearchserviceConfigInitParameters: {
	// HTTP endpoint of the OpenSearch domain.
	endpoint?: null | string @go(Endpoint,*string)
}

#OpensearchserviceConfigObservation: {
	// HTTP endpoint of the OpenSearch domain.
	endpoint?: null | string @go(Endpoint,*string)

	// AWS region of the OpenSearch domain. Defaults to current region.
	region?: null | string @go(Region,*string)
}

#OpensearchserviceConfigParameters: {
	// HTTP endpoint of the OpenSearch domain.
	// +kubebuilder:validation:Optional
	endpoint?: null | string @go(Endpoint,*string)

	// AWS region of the OpenSearch domain. Defaults to current region.
	// +kubebuilder:validation:Optional
	region?: null | string @go(Region,*string)
}

#RelationalDatabaseConfigInitParameters: {
	// Amazon RDS HTTP endpoint configuration. See HTTP Endpoint Config.
	httpEndpointConfig?: [...#HTTPEndpointConfigInitParameters] @go(HTTPEndpointConfig,[]HTTPEndpointConfigInitParameters)

	// Source type for the relational database. Valid values: RDS_HTTP_ENDPOINT.
	sourceType?: null | string @go(SourceType,*string)
}

#RelationalDatabaseConfigObservation: {
	// Amazon RDS HTTP endpoint configuration. See HTTP Endpoint Config.
	httpEndpointConfig?: [...#HTTPEndpointConfigObservation] @go(HTTPEndpointConfig,[]HTTPEndpointConfigObservation)

	// Source type for the relational database. Valid values: RDS_HTTP_ENDPOINT.
	sourceType?: null | string @go(SourceType,*string)
}

#RelationalDatabaseConfigParameters: {
	// Amazon RDS HTTP endpoint configuration. See HTTP Endpoint Config.
	// +kubebuilder:validation:Optional
	httpEndpointConfig?: [...#HTTPEndpointConfigParameters] @go(HTTPEndpointConfig,[]HTTPEndpointConfigParameters)

	// Source type for the relational database. Valid values: RDS_HTTP_ENDPOINT.
	// +kubebuilder:validation:Optional
	sourceType?: null | string @go(SourceType,*string)
}

// DatasourceSpec defines the desired state of Datasource
#DatasourceSpec: {
	v1.#ResourceSpec
	forProvider: #DatasourceParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #DatasourceInitParameters @go(InitProvider)
}

// DatasourceStatus defines the observed state of Datasource.
#DatasourceStatus: {
	v1.#ResourceStatus
	atProvider?: #DatasourceObservation @go(AtProvider)
}

// Datasource is the Schema for the Datasources API. Provides an AppSync Data Source.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Datasource: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	spec:    #DatasourceSpec   @go(Spec)
	status?: #DatasourceStatus @go(Status)
}

// DatasourceList contains a list of Datasources
#DatasourceList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Datasource] @go(Items,[]Datasource)
}
