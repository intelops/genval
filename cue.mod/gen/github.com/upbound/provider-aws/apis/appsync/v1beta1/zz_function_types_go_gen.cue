// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/appsync/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#FunctionInitParameters: {
	// The function code that contains the request and response functions. When code is used, the runtime is required. The runtime value must be APPSYNC_JS.
	code?: null | string @go(Code,*string)

	// Function description.
	description?: null | string @go(Description,*string)

	// Version of the request mapping template. Currently the supported value is 2018-05-29. Does not apply when specifying code.
	functionVersion?: null | string @go(FunctionVersion,*string)

	// Maximum batching size for a resolver. Valid values are between 0 and 2000.
	maxBatchSize?: null | float64 @go(MaxBatchSize,*float64)

	// Function name. The function name does not have to be unique.
	name?: null | string @go(Name,*string)

	// Function request mapping template. Functions support only the 2018-05-29 version of the request mapping template.
	requestMappingTemplate?: null | string @go(RequestMappingTemplate,*string)

	// Function response mapping template.
	responseMappingTemplate?: null | string @go(ResponseMappingTemplate,*string)

	// Describes a runtime used by an AWS AppSync pipeline resolver or AWS AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified. See Runtime.
	runtime?: [...#RuntimeInitParameters] @go(Runtime,[]RuntimeInitParameters)

	// Describes a Sync configuration for a resolver. See Sync Config.
	syncConfig?: [...#SyncConfigInitParameters] @go(SyncConfig,[]SyncConfigInitParameters)
}

#FunctionObservation: {
	// ID of the associated AppSync API.
	apiId?: null | string @go(APIID,*string)

	// ARN of the Function object.
	arn?: null | string @go(Arn,*string)

	// The function code that contains the request and response functions. When code is used, the runtime is required. The runtime value must be APPSYNC_JS.
	code?: null | string @go(Code,*string)

	// Function data source name.
	dataSource?: null | string @go(DataSource,*string)

	// Function description.
	description?: null | string @go(Description,*string)

	// Unique ID representing the Function object.
	functionId?: null | string @go(FunctionID,*string)

	// Version of the request mapping template. Currently the supported value is 2018-05-29. Does not apply when specifying code.
	functionVersion?: null | string @go(FunctionVersion,*string)

	// API Function ID (Formatted as ApiId-FunctionId)
	id?: null | string @go(ID,*string)

	// Maximum batching size for a resolver. Valid values are between 0 and 2000.
	maxBatchSize?: null | float64 @go(MaxBatchSize,*float64)

	// Function name. The function name does not have to be unique.
	name?: null | string @go(Name,*string)

	// Function request mapping template. Functions support only the 2018-05-29 version of the request mapping template.
	requestMappingTemplate?: null | string @go(RequestMappingTemplate,*string)

	// Function response mapping template.
	responseMappingTemplate?: null | string @go(ResponseMappingTemplate,*string)

	// Describes a runtime used by an AWS AppSync pipeline resolver or AWS AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified. See Runtime.
	runtime?: [...#RuntimeObservation] @go(Runtime,[]RuntimeObservation)

	// Describes a Sync configuration for a resolver. See Sync Config.
	syncConfig?: [...#SyncConfigObservation] @go(SyncConfig,[]SyncConfigObservation)
}

#FunctionParameters: {
	// ID of the associated AppSync API.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/appsync/v1beta1.GraphQLAPI
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	apiId?: null | string @go(APIID,*string)

	// Reference to a GraphQLAPI in appsync to populate apiId.
	// +kubebuilder:validation:Optional
	apiIdRef?: null | v1.#Reference @go(APIIDRef,*v1.Reference)

	// Selector for a GraphQLAPI in appsync to populate apiId.
	// +kubebuilder:validation:Optional
	apiIdSelector?: null | v1.#Selector @go(APIIDSelector,*v1.Selector)

	// The function code that contains the request and response functions. When code is used, the runtime is required. The runtime value must be APPSYNC_JS.
	// +kubebuilder:validation:Optional
	code?: null | string @go(Code,*string)

	// Function data source name.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/appsync/v1beta1.Datasource
	// +kubebuilder:validation:Optional
	dataSource?: null | string @go(DataSource,*string)

	// Reference to a Datasource in appsync to populate dataSource.
	// +kubebuilder:validation:Optional
	dataSourceRef?: null | v1.#Reference @go(DataSourceRef,*v1.Reference)

	// Selector for a Datasource in appsync to populate dataSource.
	// +kubebuilder:validation:Optional
	dataSourceSelector?: null | v1.#Selector @go(DataSourceSelector,*v1.Selector)

	// Function description.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Version of the request mapping template. Currently the supported value is 2018-05-29. Does not apply when specifying code.
	// +kubebuilder:validation:Optional
	functionVersion?: null | string @go(FunctionVersion,*string)

	// Maximum batching size for a resolver. Valid values are between 0 and 2000.
	// +kubebuilder:validation:Optional
	maxBatchSize?: null | float64 @go(MaxBatchSize,*float64)

	// Function name. The function name does not have to be unique.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Function request mapping template. Functions support only the 2018-05-29 version of the request mapping template.
	// +kubebuilder:validation:Optional
	requestMappingTemplate?: null | string @go(RequestMappingTemplate,*string)

	// Function response mapping template.
	// +kubebuilder:validation:Optional
	responseMappingTemplate?: null | string @go(ResponseMappingTemplate,*string)

	// Describes a runtime used by an AWS AppSync pipeline resolver or AWS AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified. See Runtime.
	// +kubebuilder:validation:Optional
	runtime?: [...#RuntimeParameters] @go(Runtime,[]RuntimeParameters)

	// Describes a Sync configuration for a resolver. See Sync Config.
	// +kubebuilder:validation:Optional
	syncConfig?: [...#SyncConfigParameters] @go(SyncConfig,[]SyncConfigParameters)
}

#LambdaConflictHandlerConfigInitParameters: {
	// ARN for the Lambda function to use as the Conflict Handler.
	lambdaConflictHandlerArn?: null | string @go(LambdaConflictHandlerArn,*string)
}

#LambdaConflictHandlerConfigObservation: {
	// ARN for the Lambda function to use as the Conflict Handler.
	lambdaConflictHandlerArn?: null | string @go(LambdaConflictHandlerArn,*string)
}

#LambdaConflictHandlerConfigParameters: {
	// ARN for the Lambda function to use as the Conflict Handler.
	// +kubebuilder:validation:Optional
	lambdaConflictHandlerArn?: null | string @go(LambdaConflictHandlerArn,*string)
}

#RuntimeInitParameters: {
	// Function name. The function name does not have to be unique.
	name?: null | string @go(Name,*string)

	// The version of the runtime to use. Currently, the only allowed version is 1.0.0.
	runtimeVersion?: null | string @go(RuntimeVersion,*string)
}

#RuntimeObservation: {
	// Function name. The function name does not have to be unique.
	name?: null | string @go(Name,*string)

	// The version of the runtime to use. Currently, the only allowed version is 1.0.0.
	runtimeVersion?: null | string @go(RuntimeVersion,*string)
}

#RuntimeParameters: {
	// Function name. The function name does not have to be unique.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The version of the runtime to use. Currently, the only allowed version is 1.0.0.
	// +kubebuilder:validation:Optional
	runtimeVersion?: null | string @go(RuntimeVersion,*string)
}

#SyncConfigInitParameters: {
	// Conflict Detection strategy to use. Valid values are NONE and VERSION.
	conflictDetection?: null | string @go(ConflictDetection,*string)

	// Conflict Resolution strategy to perform in the event of a conflict. Valid values are NONE, OPTIMISTIC_CONCURRENCY, AUTOMERGE, and LAMBDA.
	conflictHandler?: null | string @go(ConflictHandler,*string)

	// Lambda Conflict Handler Config when configuring LAMBDA as the Conflict Handler. See Lambda Conflict Handler Config.
	lambdaConflictHandlerConfig?: [...#LambdaConflictHandlerConfigInitParameters] @go(LambdaConflictHandlerConfig,[]LambdaConflictHandlerConfigInitParameters)
}

#SyncConfigObservation: {
	// Conflict Detection strategy to use. Valid values are NONE and VERSION.
	conflictDetection?: null | string @go(ConflictDetection,*string)

	// Conflict Resolution strategy to perform in the event of a conflict. Valid values are NONE, OPTIMISTIC_CONCURRENCY, AUTOMERGE, and LAMBDA.
	conflictHandler?: null | string @go(ConflictHandler,*string)

	// Lambda Conflict Handler Config when configuring LAMBDA as the Conflict Handler. See Lambda Conflict Handler Config.
	lambdaConflictHandlerConfig?: [...#LambdaConflictHandlerConfigObservation] @go(LambdaConflictHandlerConfig,[]LambdaConflictHandlerConfigObservation)
}

#SyncConfigParameters: {
	// Conflict Detection strategy to use. Valid values are NONE and VERSION.
	// +kubebuilder:validation:Optional
	conflictDetection?: null | string @go(ConflictDetection,*string)

	// Conflict Resolution strategy to perform in the event of a conflict. Valid values are NONE, OPTIMISTIC_CONCURRENCY, AUTOMERGE, and LAMBDA.
	// +kubebuilder:validation:Optional
	conflictHandler?: null | string @go(ConflictHandler,*string)

	// Lambda Conflict Handler Config when configuring LAMBDA as the Conflict Handler. See Lambda Conflict Handler Config.
	// +kubebuilder:validation:Optional
	lambdaConflictHandlerConfig?: [...#LambdaConflictHandlerConfigParameters] @go(LambdaConflictHandlerConfig,[]LambdaConflictHandlerConfigParameters)
}

// FunctionSpec defines the desired state of Function
#FunctionSpec: {
	v1.#ResourceSpec
	forProvider: #FunctionParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #FunctionInitParameters @go(InitProvider)
}

// FunctionStatus defines the observed state of Function.
#FunctionStatus: {
	v1.#ResourceStatus
	atProvider?: #FunctionObservation @go(AtProvider)
}

// Function is the Schema for the Functions API. Provides an AppSync Function.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Function: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	spec:    #FunctionSpec   @go(Spec)
	status?: #FunctionStatus @go(Status)
}

// FunctionList contains a list of Functions
#FunctionList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Function] @go(Items,[]Function)
}
