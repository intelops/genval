// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/globalaccelerator/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#ListenerInitParameters: {
	// Direct all requests from a user to the same endpoint. Valid values are NONE, SOURCE_IP. Default: NONE. If NONE, Global Accelerator uses the "five-tuple" properties of source IP address, source port, destination IP address, destination port, and protocol to select the hash value. If SOURCE_IP, Global Accelerator uses the "two-tuple" properties of source (client) IP address and destination IP address to select the hash value.
	clientAffinity?: null | string @go(ClientAffinity,*string)

	// The list of port ranges for the connections from clients to the accelerator. Fields documented below.
	portRange?: [...#PortRangeInitParameters] @go(PortRange,[]PortRangeInitParameters)

	// The protocol for the connections from clients to the accelerator. Valid values are TCP, UDP.
	protocol?: null | string @go(Protocol,*string)
}

#ListenerObservation: {
	// The Amazon Resource Name (ARN) of your accelerator.
	acceleratorArn?: null | string @go(AcceleratorArn,*string)

	// Direct all requests from a user to the same endpoint. Valid values are NONE, SOURCE_IP. Default: NONE. If NONE, Global Accelerator uses the "five-tuple" properties of source IP address, source port, destination IP address, destination port, and protocol to select the hash value. If SOURCE_IP, Global Accelerator uses the "two-tuple" properties of source (client) IP address and destination IP address to select the hash value.
	clientAffinity?: null | string @go(ClientAffinity,*string)

	// The Amazon Resource Name (ARN) of the listener.
	id?: null | string @go(ID,*string)

	// The list of port ranges for the connections from clients to the accelerator. Fields documented below.
	portRange?: [...#PortRangeObservation] @go(PortRange,[]PortRangeObservation)

	// The protocol for the connections from clients to the accelerator. Valid values are TCP, UDP.
	protocol?: null | string @go(Protocol,*string)
}

#ListenerParameters: {
	// The Amazon Resource Name (ARN) of your accelerator.
	// +crossplane:generate:reference:type=Accelerator
	// +kubebuilder:validation:Optional
	acceleratorArn?: null | string @go(AcceleratorArn,*string)

	// Reference to a Accelerator to populate acceleratorArn.
	// +kubebuilder:validation:Optional
	acceleratorArnRef?: null | v1.#Reference @go(AcceleratorArnRef,*v1.Reference)

	// Selector for a Accelerator to populate acceleratorArn.
	// +kubebuilder:validation:Optional
	acceleratorArnSelector?: null | v1.#Selector @go(AcceleratorArnSelector,*v1.Selector)

	// Direct all requests from a user to the same endpoint. Valid values are NONE, SOURCE_IP. Default: NONE. If NONE, Global Accelerator uses the "five-tuple" properties of source IP address, source port, destination IP address, destination port, and protocol to select the hash value. If SOURCE_IP, Global Accelerator uses the "two-tuple" properties of source (client) IP address and destination IP address to select the hash value.
	// +kubebuilder:validation:Optional
	clientAffinity?: null | string @go(ClientAffinity,*string)

	// The list of port ranges for the connections from clients to the accelerator. Fields documented below.
	// +kubebuilder:validation:Optional
	portRange?: [...#PortRangeParameters] @go(PortRange,[]PortRangeParameters)

	// The protocol for the connections from clients to the accelerator. Valid values are TCP, UDP.
	// +kubebuilder:validation:Optional
	protocol?: null | string @go(Protocol,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)
}

#PortRangeInitParameters: {
	// The first port in the range of ports, inclusive.
	fromPort?: null | float64 @go(FromPort,*float64)

	// The last port in the range of ports, inclusive.
	toPort?: null | float64 @go(ToPort,*float64)
}

#PortRangeObservation: {
	// The first port in the range of ports, inclusive.
	fromPort?: null | float64 @go(FromPort,*float64)

	// The last port in the range of ports, inclusive.
	toPort?: null | float64 @go(ToPort,*float64)
}

#PortRangeParameters: {
	// The first port in the range of ports, inclusive.
	// +kubebuilder:validation:Optional
	fromPort?: null | float64 @go(FromPort,*float64)

	// The last port in the range of ports, inclusive.
	// +kubebuilder:validation:Optional
	toPort?: null | float64 @go(ToPort,*float64)
}

// ListenerSpec defines the desired state of Listener
#ListenerSpec: {
	v1.#ResourceSpec
	forProvider: #ListenerParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ListenerInitParameters @go(InitProvider)
}

// ListenerStatus defines the observed state of Listener.
#ListenerStatus: {
	v1.#ResourceStatus
	atProvider?: #ListenerObservation @go(AtProvider)
}

// Listener is the Schema for the Listeners API. Provides a Global Accelerator listener.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Listener: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.portRange) || (has(self.initProvider) && has(self.initProvider.portRange))",message="spec.forProvider.portRange is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.protocol) || (has(self.initProvider) && has(self.initProvider.protocol))",message="spec.forProvider.protocol is a required parameter"
	spec:    #ListenerSpec   @go(Spec)
	status?: #ListenerStatus @go(Status)
}

// ListenerList contains a list of Listeners
#ListenerList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Listener] @go(Items,[]Listener)
}
