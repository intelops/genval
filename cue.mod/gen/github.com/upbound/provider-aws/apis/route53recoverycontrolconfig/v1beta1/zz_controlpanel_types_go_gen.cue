// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/route53recoverycontrolconfig/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#ControlPanelInitParameters: {
	// Name describing the control panel.
	name?: null | string @go(Name,*string)
}

#ControlPanelObservation: {
	// ARN of the control panel.
	arn?: null | string @go(Arn,*string)

	// ARN of the cluster in which this control panel will reside.
	clusterArn?: null | string @go(ClusterArn,*string)

	// Whether a control panel is default.
	defaultControlPanel?: null | bool   @go(DefaultControlPanel,*bool)
	id?:                  null | string @go(ID,*string)

	// Name describing the control panel.
	name?: null | string @go(Name,*string)

	// Number routing controls in a control panel.
	routingControlCount?: null | float64 @go(RoutingControlCount,*float64)

	// Status of control panel: PENDING when it is being created/updated, PENDING_DELETION when it is being deleted, and DEPLOYED otherwise.
	status?: null | string @go(Status,*string)
}

#ControlPanelParameters: {
	// ARN of the cluster in which this control panel will reside.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/route53recoverycontrolconfig/v1beta1.Cluster
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.TerraformID()
	// +kubebuilder:validation:Optional
	clusterArn?: null | string @go(ClusterArn,*string)

	// Reference to a Cluster in route53recoverycontrolconfig to populate clusterArn.
	// +kubebuilder:validation:Optional
	clusterArnRef?: null | v1.#Reference @go(ClusterArnRef,*v1.Reference)

	// Selector for a Cluster in route53recoverycontrolconfig to populate clusterArn.
	// +kubebuilder:validation:Optional
	clusterArnSelector?: null | v1.#Selector @go(ClusterArnSelector,*v1.Selector)

	// Name describing the control panel.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)
}

// ControlPanelSpec defines the desired state of ControlPanel
#ControlPanelSpec: {
	v1.#ResourceSpec
	forProvider: #ControlPanelParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ControlPanelInitParameters @go(InitProvider)
}

// ControlPanelStatus defines the observed state of ControlPanel.
#ControlPanelStatus: {
	v1.#ResourceStatus
	atProvider?: #ControlPanelObservation @go(AtProvider)
}

// ControlPanel is the Schema for the ControlPanels API. Provides an AWS Route 53 Recovery Control Config Control Panel
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#ControlPanel: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	spec:    #ControlPanelSpec   @go(Spec)
	status?: #ControlPanelStatus @go(Status)
}

// ControlPanelList contains a list of ControlPanels
#ControlPanelList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#ControlPanel] @go(Items,[]ControlPanel)
}
