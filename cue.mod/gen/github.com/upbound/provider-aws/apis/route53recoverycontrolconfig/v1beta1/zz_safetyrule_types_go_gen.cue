// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/route53recoverycontrolconfig/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#RuleConfigInitParameters: {
	// Logical negation of the rule.
	inverted?: null | bool @go(Inverted,*bool)

	// Number of controls that must be set when you specify an ATLEAST type rule.
	threshold?: null | float64 @go(Threshold,*float64)

	// Rule type. Valid values are ATLEAST, AND, and OR.
	type?: null | string @go(Type,*string)
}

#RuleConfigObservation: {
	// Logical negation of the rule.
	inverted?: null | bool @go(Inverted,*bool)

	// Number of controls that must be set when you specify an ATLEAST type rule.
	threshold?: null | float64 @go(Threshold,*float64)

	// Rule type. Valid values are ATLEAST, AND, and OR.
	type?: null | string @go(Type,*string)
}

#RuleConfigParameters: {
	// Logical negation of the rule.
	// +kubebuilder:validation:Optional
	inverted?: null | bool @go(Inverted,*bool)

	// Number of controls that must be set when you specify an ATLEAST type rule.
	// +kubebuilder:validation:Optional
	threshold?: null | float64 @go(Threshold,*float64)

	// Rule type. Valid values are ATLEAST, AND, and OR.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

#SafetyRuleInitParameters: {
	// Gating controls for the new gating rule. That is, routing controls that are evaluated by the rule configuration that you specify.
	gatingControls?: [...null | string] @go(GatingControls,[]*string)

	// Name describing the safety rule.
	name?: null | string @go(Name,*string)

	// Configuration block for safety rule criteria. See below.
	ruleConfig?: [...#RuleConfigInitParameters] @go(RuleConfig,[]RuleConfigInitParameters)

	// Routing controls that can only be set or unset if the specified rule_config evaluates to true for the specified gating_controls.
	targetControls?: [...null | string] @go(TargetControls,[]*string)

	// Evaluation period, in milliseconds (ms), during which any request against the target routing controls will fail.
	waitPeriodMs?: null | float64 @go(WaitPeriodMs,*float64)
}

#SafetyRuleObservation: {
	// ARN of the safety rule.
	arn?: null | string @go(Arn,*string)

	// Routing controls that are part of transactions that are evaluated to determine if a request to change a routing control state is allowed.
	assertedControls?: [...null | string] @go(AssertedControls,[]*string)

	// ARN of the control panel in which this safety rule will reside.
	controlPanelArn?: null | string @go(ControlPanelArn,*string)

	// Gating controls for the new gating rule. That is, routing controls that are evaluated by the rule configuration that you specify.
	gatingControls?: [...null | string] @go(GatingControls,[]*string)
	id?: null | string @go(ID,*string)

	// Name describing the safety rule.
	name?: null | string @go(Name,*string)

	// Configuration block for safety rule criteria. See below.
	ruleConfig?: [...#RuleConfigObservation] @go(RuleConfig,[]RuleConfigObservation)

	// Status of the safety rule. PENDING when it is being created/updated, PENDING_DELETION when it is being deleted, and DEPLOYED otherwise.
	status?: null | string @go(Status,*string)

	// Routing controls that can only be set or unset if the specified rule_config evaluates to true for the specified gating_controls.
	targetControls?: [...null | string] @go(TargetControls,[]*string)

	// Evaluation period, in milliseconds (ms), during which any request against the target routing controls will fail.
	waitPeriodMs?: null | float64 @go(WaitPeriodMs,*float64)
}

#SafetyRuleParameters: {
	// Routing controls that are part of transactions that are evaluated to determine if a request to change a routing control state is allowed.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/route53recoverycontrolconfig/v1beta1.RoutingControl
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.TerraformID()
	// +kubebuilder:validation:Optional
	assertedControls?: [...null | string] @go(AssertedControls,[]*string)

	// References to RoutingControl in route53recoverycontrolconfig to populate assertedControls.
	// +kubebuilder:validation:Optional
	assertedControlsRefs?: [...v1.#Reference] @go(AssertedControlsRefs,[]v1.Reference)

	// Selector for a list of RoutingControl in route53recoverycontrolconfig to populate assertedControls.
	// +kubebuilder:validation:Optional
	assertedControlsSelector?: null | v1.#Selector @go(AssertedControlsSelector,*v1.Selector)

	// ARN of the control panel in which this safety rule will reside.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/route53recoverycontrolconfig/v1beta1.ControlPanel
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.TerraformID()
	// +kubebuilder:validation:Optional
	controlPanelArn?: null | string @go(ControlPanelArn,*string)

	// Reference to a ControlPanel in route53recoverycontrolconfig to populate controlPanelArn.
	// +kubebuilder:validation:Optional
	controlPanelArnRef?: null | v1.#Reference @go(ControlPanelArnRef,*v1.Reference)

	// Selector for a ControlPanel in route53recoverycontrolconfig to populate controlPanelArn.
	// +kubebuilder:validation:Optional
	controlPanelArnSelector?: null | v1.#Selector @go(ControlPanelArnSelector,*v1.Selector)

	// Gating controls for the new gating rule. That is, routing controls that are evaluated by the rule configuration that you specify.
	// +kubebuilder:validation:Optional
	gatingControls?: [...null | string] @go(GatingControls,[]*string)

	// Name describing the safety rule.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Configuration block for safety rule criteria. See below.
	// +kubebuilder:validation:Optional
	ruleConfig?: [...#RuleConfigParameters] @go(RuleConfig,[]RuleConfigParameters)

	// Routing controls that can only be set or unset if the specified rule_config evaluates to true for the specified gating_controls.
	// +kubebuilder:validation:Optional
	targetControls?: [...null | string] @go(TargetControls,[]*string)

	// Evaluation period, in milliseconds (ms), during which any request against the target routing controls will fail.
	// +kubebuilder:validation:Optional
	waitPeriodMs?: null | float64 @go(WaitPeriodMs,*float64)
}

// SafetyRuleSpec defines the desired state of SafetyRule
#SafetyRuleSpec: {
	v1.#ResourceSpec
	forProvider: #SafetyRuleParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #SafetyRuleInitParameters @go(InitProvider)
}

// SafetyRuleStatus defines the observed state of SafetyRule.
#SafetyRuleStatus: {
	v1.#ResourceStatus
	atProvider?: #SafetyRuleObservation @go(AtProvider)
}

// SafetyRule is the Schema for the SafetyRules API. Provides an AWS Route 53 Recovery Control Config Safety Rule
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#SafetyRule: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.ruleConfig) || (has(self.initProvider) && has(self.initProvider.ruleConfig))",message="spec.forProvider.ruleConfig is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.waitPeriodMs) || (has(self.initProvider) && has(self.initProvider.waitPeriodMs))",message="spec.forProvider.waitPeriodMs is a required parameter"
	spec:    #SafetyRuleSpec   @go(Spec)
	status?: #SafetyRuleStatus @go(Status)
}

// SafetyRuleList contains a list of SafetyRules
#SafetyRuleList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#SafetyRule] @go(Items,[]SafetyRule)
}
