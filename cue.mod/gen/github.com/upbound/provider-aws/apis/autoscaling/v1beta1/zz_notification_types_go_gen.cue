// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/autoscaling/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#NotificationInitParameters: {
	// List of AutoScaling Group Names
	groupNames?: [...null | string] @go(GroupNames,[]*string)

	// List of Notification Types that trigger
	// notifications. Acceptable values are documented in the AWS documentation here
	notifications?: [...null | string] @go(Notifications,[]*string)
}

#NotificationObservation: {
	// List of AutoScaling Group Names
	groupNames?: [...null | string] @go(GroupNames,[]*string)
	id?: null | string @go(ID,*string)

	// List of Notification Types that trigger
	// notifications. Acceptable values are documented in the AWS documentation here
	notifications?: [...null | string] @go(Notifications,[]*string)

	// Topic ARN for notifications to be sent through
	topicArn?: null | string @go(TopicArn,*string)
}

#NotificationParameters: {
	// List of AutoScaling Group Names
	// +kubebuilder:validation:Optional
	groupNames?: [...null | string] @go(GroupNames,[]*string)

	// List of Notification Types that trigger
	// notifications. Acceptable values are documented in the AWS documentation here
	// +kubebuilder:validation:Optional
	notifications?: [...null | string] @go(Notifications,[]*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Topic ARN for notifications to be sent through
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/sns/v1beta1.Topic
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	topicArn?: null | string @go(TopicArn,*string)

	// Reference to a Topic in sns to populate topicArn.
	// +kubebuilder:validation:Optional
	topicArnRef?: null | v1.#Reference @go(TopicArnRef,*v1.Reference)

	// Selector for a Topic in sns to populate topicArn.
	// +kubebuilder:validation:Optional
	topicArnSelector?: null | v1.#Selector @go(TopicArnSelector,*v1.Selector)
}

// NotificationSpec defines the desired state of Notification
#NotificationSpec: {
	v1.#ResourceSpec
	forProvider: #NotificationParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #NotificationInitParameters @go(InitProvider)
}

// NotificationStatus defines the observed state of Notification.
#NotificationStatus: {
	v1.#ResourceStatus
	atProvider?: #NotificationObservation @go(AtProvider)
}

// Notification is the Schema for the Notifications API. Provides an AutoScaling Group with Notification support
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Notification: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.groupNames) || (has(self.initProvider) && has(self.initProvider.groupNames))",message="spec.forProvider.groupNames is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.notifications) || (has(self.initProvider) && has(self.initProvider.notifications))",message="spec.forProvider.notifications is a required parameter"
	spec:    #NotificationSpec   @go(Spec)
	status?: #NotificationStatus @go(Status)
}

// NotificationList contains a list of Notifications
#NotificationList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Notification] @go(Items,[]Notification)
}
