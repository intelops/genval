// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/ecr/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#PullThroughCacheRuleInitParameters: {
	// The repository name prefix to use when caching images from the source registry.
	ecrRepositoryPrefix?: null | string @go(EcrRepositoryPrefix,*string)

	// The registry URL of the upstream public registry to use as the source.
	upstreamRegistryUrl?: null | string @go(UpstreamRegistryURL,*string)
}

#PullThroughCacheRuleObservation: {
	// The repository name prefix to use when caching images from the source registry.
	ecrRepositoryPrefix?: null | string @go(EcrRepositoryPrefix,*string)
	id?:                  null | string @go(ID,*string)

	// The registry ID where the repository was created.
	registryId?: null | string @go(RegistryID,*string)

	// The registry URL of the upstream public registry to use as the source.
	upstreamRegistryUrl?: null | string @go(UpstreamRegistryURL,*string)
}

#PullThroughCacheRuleParameters: {
	// The repository name prefix to use when caching images from the source registry.
	// +kubebuilder:validation:Optional
	ecrRepositoryPrefix?: null | string @go(EcrRepositoryPrefix,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The registry URL of the upstream public registry to use as the source.
	// +kubebuilder:validation:Optional
	upstreamRegistryUrl?: null | string @go(UpstreamRegistryURL,*string)
}

// PullThroughCacheRuleSpec defines the desired state of PullThroughCacheRule
#PullThroughCacheRuleSpec: {
	v1.#ResourceSpec
	forProvider: #PullThroughCacheRuleParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #PullThroughCacheRuleInitParameters @go(InitProvider)
}

// PullThroughCacheRuleStatus defines the observed state of PullThroughCacheRule.
#PullThroughCacheRuleStatus: {
	v1.#ResourceStatus
	atProvider?: #PullThroughCacheRuleObservation @go(AtProvider)
}

// PullThroughCacheRule is the Schema for the PullThroughCacheRules API. Provides an Elastic Container Registry Pull Through Cache Rule.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#PullThroughCacheRule: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.ecrRepositoryPrefix) || (has(self.initProvider) && has(self.initProvider.ecrRepositoryPrefix))",message="spec.forProvider.ecrRepositoryPrefix is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.upstreamRegistryUrl) || (has(self.initProvider) && has(self.initProvider.upstreamRegistryUrl))",message="spec.forProvider.upstreamRegistryUrl is a required parameter"
	spec:    #PullThroughCacheRuleSpec   @go(Spec)
	status?: #PullThroughCacheRuleStatus @go(Status)
}

// PullThroughCacheRuleList contains a list of PullThroughCacheRules
#PullThroughCacheRuleList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#PullThroughCacheRule] @go(Items,[]PullThroughCacheRule)
}
