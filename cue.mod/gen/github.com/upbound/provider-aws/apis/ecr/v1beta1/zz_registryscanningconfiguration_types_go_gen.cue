// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/ecr/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#RegistryScanningConfigurationInitParameters: {
	// One or multiple blocks specifying scanning rules to determine which repository filters are used and at what frequency scanning will occur. See below for schema.
	rule?: [...#RuleInitParameters] @go(Rule,[]RuleInitParameters)

	// the scanning type to set for the registry. Can be either ENHANCED or BASIC.
	scanType?: null | string @go(ScanType,*string)
}

#RegistryScanningConfigurationObservation: {
	id?: null | string @go(ID,*string)

	// The registry ID the scanning configuration applies to.
	registryId?: null | string @go(RegistryID,*string)

	// One or multiple blocks specifying scanning rules to determine which repository filters are used and at what frequency scanning will occur. See below for schema.
	rule?: [...#RuleObservation] @go(Rule,[]RuleObservation)

	// the scanning type to set for the registry. Can be either ENHANCED or BASIC.
	scanType?: null | string @go(ScanType,*string)
}

#RegistryScanningConfigurationParameters: {
	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// One or multiple blocks specifying scanning rules to determine which repository filters are used and at what frequency scanning will occur. See below for schema.
	// +kubebuilder:validation:Optional
	rule?: [...#RuleParameters] @go(Rule,[]RuleParameters)

	// the scanning type to set for the registry. Can be either ENHANCED or BASIC.
	// +kubebuilder:validation:Optional
	scanType?: null | string @go(ScanType,*string)
}

#RepositoryFilterInitParameters: {
	filter?:     null | string @go(Filter,*string)
	filterType?: null | string @go(FilterType,*string)
}

#RepositoryFilterObservation: {
	filter?:     null | string @go(Filter,*string)
	filterType?: null | string @go(FilterType,*string)
}

#RepositoryFilterParameters: {
	// +kubebuilder:validation:Optional
	filter?: null | string @go(Filter,*string)

	// +kubebuilder:validation:Optional
	filterType?: null | string @go(FilterType,*string)
}

#RuleInitParameters: {
	// One or more repository filter blocks, containing a filter  and a filter_type .
	repositoryFilter?: [...#RepositoryFilterInitParameters] @go(RepositoryFilter,[]RepositoryFilterInitParameters)

	// The frequency that scans are performed at for a private registry. Can be SCAN_ON_PUSH, CONTINUOUS_SCAN, or MANUAL.
	scanFrequency?: null | string @go(ScanFrequency,*string)
}

#RuleObservation: {
	// One or more repository filter blocks, containing a filter  and a filter_type .
	repositoryFilter?: [...#RepositoryFilterObservation] @go(RepositoryFilter,[]RepositoryFilterObservation)

	// The frequency that scans are performed at for a private registry. Can be SCAN_ON_PUSH, CONTINUOUS_SCAN, or MANUAL.
	scanFrequency?: null | string @go(ScanFrequency,*string)
}

#RuleParameters: {
	// One or more repository filter blocks, containing a filter  and a filter_type .
	// +kubebuilder:validation:Optional
	repositoryFilter: [...#RepositoryFilterParameters] @go(RepositoryFilter,[]RepositoryFilterParameters)

	// The frequency that scans are performed at for a private registry. Can be SCAN_ON_PUSH, CONTINUOUS_SCAN, or MANUAL.
	// +kubebuilder:validation:Optional
	scanFrequency?: null | string @go(ScanFrequency,*string)
}

// RegistryScanningConfigurationSpec defines the desired state of RegistryScanningConfiguration
#RegistryScanningConfigurationSpec: {
	v1.#ResourceSpec
	forProvider: #RegistryScanningConfigurationParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #RegistryScanningConfigurationInitParameters @go(InitProvider)
}

// RegistryScanningConfigurationStatus defines the observed state of RegistryScanningConfiguration.
#RegistryScanningConfigurationStatus: {
	v1.#ResourceStatus
	atProvider?: #RegistryScanningConfigurationObservation @go(AtProvider)
}

// RegistryScanningConfiguration is the Schema for the RegistryScanningConfigurations API. Provides an Elastic Container Registry Scanning Configuration.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#RegistryScanningConfiguration: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.scanType) || (has(self.initProvider) && has(self.initProvider.scanType))",message="spec.forProvider.scanType is a required parameter"
	spec:    #RegistryScanningConfigurationSpec   @go(Spec)
	status?: #RegistryScanningConfigurationStatus @go(Status)
}

// RegistryScanningConfigurationList contains a list of RegistryScanningConfigurations
#RegistryScanningConfigurationList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#RegistryScanningConfiguration] @go(Items,[]RegistryScanningConfiguration)
}
