// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/connect/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#LambdaFunctionAssociationInitParameters: {
}

#LambdaFunctionAssociationObservation: {
	// Amazon Resource Name (ARN) of the Lambda Function, omitting any version or alias qualifier.
	functionArn?: null | string @go(FunctionArn,*string)

	// The Amazon Connect instance ID and Lambda Function ARN separated by a comma (,).
	id?: null | string @go(ID,*string)

	// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
	instanceId?: null | string @go(InstanceID,*string)
}

#LambdaFunctionAssociationParameters: {
	// Amazon Resource Name (ARN) of the Lambda Function, omitting any version or alias qualifier.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/lambda/v1beta1.Function
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	functionArn?: null | string @go(FunctionArn,*string)

	// Reference to a Function in lambda to populate functionArn.
	// +kubebuilder:validation:Optional
	functionArnRef?: null | v1.#Reference @go(FunctionArnRef,*v1.Reference)

	// Selector for a Function in lambda to populate functionArn.
	// +kubebuilder:validation:Optional
	functionArnSelector?: null | v1.#Selector @go(FunctionArnSelector,*v1.Selector)

	// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/connect/v1beta1.Instance
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	instanceId?: null | string @go(InstanceID,*string)

	// Reference to a Instance in connect to populate instanceId.
	// +kubebuilder:validation:Optional
	instanceIdRef?: null | v1.#Reference @go(InstanceIDRef,*v1.Reference)

	// Selector for a Instance in connect to populate instanceId.
	// +kubebuilder:validation:Optional
	instanceIdSelector?: null | v1.#Selector @go(InstanceIDSelector,*v1.Selector)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)
}

// LambdaFunctionAssociationSpec defines the desired state of LambdaFunctionAssociation
#LambdaFunctionAssociationSpec: {
	v1.#ResourceSpec
	forProvider: #LambdaFunctionAssociationParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #LambdaFunctionAssociationInitParameters @go(InitProvider)
}

// LambdaFunctionAssociationStatus defines the observed state of LambdaFunctionAssociation.
#LambdaFunctionAssociationStatus: {
	v1.#ResourceStatus
	atProvider?: #LambdaFunctionAssociationObservation @go(AtProvider)
}

// LambdaFunctionAssociation is the Schema for the LambdaFunctionAssociations API. Provides details about a specific Connect Lambda Function Association.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#LambdaFunctionAssociation: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta               @go(ObjectMeta)
	spec:      #LambdaFunctionAssociationSpec   @go(Spec)
	status?:   #LambdaFunctionAssociationStatus @go(Status)
}

// LambdaFunctionAssociationList contains a list of LambdaFunctionAssociations
#LambdaFunctionAssociationList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#LambdaFunctionAssociation] @go(Items,[]LambdaFunctionAssociation)
}
