// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/connect/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#BotAssociationInitParameters: {
	// Configuration information of an Amazon Lex (V1) bot. Detailed below.
	lexBot?: [...#LexBotInitParameters] @go(LexBot,[]LexBotInitParameters)
}

#BotAssociationObservation: {
	// The Amazon Connect instance ID, Lex (V1) bot name, and Lex (V1) bot region separated by colons (:).
	id?: null | string @go(ID,*string)

	// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
	instanceId?: null | string @go(InstanceID,*string)

	// Configuration information of an Amazon Lex (V1) bot. Detailed below.
	lexBot?: [...#LexBotObservation] @go(LexBot,[]LexBotObservation)
}

#BotAssociationParameters: {
	// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/connect/v1beta1.Instance
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	instanceId?: null | string @go(InstanceID,*string)

	// Reference to a Instance in connect to populate instanceId.
	// +kubebuilder:validation:Optional
	instanceIdRef?: null | v1.#Reference @go(InstanceIDRef,*v1.Reference)

	// Selector for a Instance in connect to populate instanceId.
	// +kubebuilder:validation:Optional
	instanceIdSelector?: null | v1.#Selector @go(InstanceIDSelector,*v1.Selector)

	// Configuration information of an Amazon Lex (V1) bot. Detailed below.
	// +kubebuilder:validation:Optional
	lexBot?: [...#LexBotParameters] @go(LexBot,[]LexBotParameters)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)
}

#LexBotInitParameters: {
	// The Region that the Amazon Lex (V1) bot was created in. Defaults to current region.
	lexRegion?: null | string @go(LexRegion,*string)
}

#LexBotObservation: {
	// The Region that the Amazon Lex (V1) bot was created in. Defaults to current region.
	lexRegion?: null | string @go(LexRegion,*string)

	// The name of the Amazon Lex (V1) bot.
	name?: null | string @go(Name,*string)
}

#LexBotParameters: {
	// The Region that the Amazon Lex (V1) bot was created in. Defaults to current region.
	// +kubebuilder:validation:Optional
	lexRegion?: null | string @go(LexRegion,*string)

	// The name of the Amazon Lex (V1) bot.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/lexmodels/v1beta1.Bot
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Reference to a Bot in lexmodels to populate name.
	// +kubebuilder:validation:Optional
	nameRef?: null | v1.#Reference @go(NameRef,*v1.Reference)

	// Selector for a Bot in lexmodels to populate name.
	// +kubebuilder:validation:Optional
	nameSelector?: null | v1.#Selector @go(NameSelector,*v1.Selector)
}

// BotAssociationSpec defines the desired state of BotAssociation
#BotAssociationSpec: {
	v1.#ResourceSpec
	forProvider: #BotAssociationParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #BotAssociationInitParameters @go(InitProvider)
}

// BotAssociationStatus defines the observed state of BotAssociation.
#BotAssociationStatus: {
	v1.#ResourceStatus
	atProvider?: #BotAssociationObservation @go(AtProvider)
}

// BotAssociation is the Schema for the BotAssociations API. Associates an Amazon Connect instance to an Amazon Lex (V1) bot
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#BotAssociation: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.lexBot) || (has(self.initProvider) && has(self.initProvider.lexBot))",message="spec.forProvider.lexBot is a required parameter"
	spec:    #BotAssociationSpec   @go(Spec)
	status?: #BotAssociationStatus @go(Status)
}

// BotAssociationList contains a list of BotAssociations
#BotAssociationList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#BotAssociation] @go(Items,[]BotAssociation)
}
