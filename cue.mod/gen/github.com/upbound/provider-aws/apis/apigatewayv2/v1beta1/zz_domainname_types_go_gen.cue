// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/apigatewayv2/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#DomainNameConfigurationInitParameters: {
	// Endpoint type. Valid values: REGIONAL.
	endpointType?: null | string @go(EndpointType,*string)

	// ARN of the AWS-issued certificate used to validate custom domain ownership (when certificate_arn is issued via an ACM Private CA or mutual_tls_authentication is configured with an ACM-imported certificate.)
	ownershipVerificationCertificateArn?: null | string @go(OwnershipVerificationCertificateArn,*string)

	// Transport Layer Security (TLS) version of the security policy for the domain name. Valid values: TLS_1_2.
	securityPolicy?: null | string @go(SecurityPolicy,*string)
}

#DomainNameConfigurationObservation: {
	// ARN of an AWS-managed certificate that will be used by the endpoint for the domain name. AWS Certificate Manager is the only supported source. Use the aws_acm_certificate resource to configure an ACM certificate.
	certificateArn?: null | string @go(CertificateArn,*string)

	// Endpoint type. Valid values: REGIONAL.
	endpointType?: null | string @go(EndpointType,*string)

	// (Computed) Amazon Route 53 Hosted Zone ID of the endpoint.
	hostedZoneId?: null | string @go(HostedZoneID,*string)

	// ARN of the AWS-issued certificate used to validate custom domain ownership (when certificate_arn is issued via an ACM Private CA or mutual_tls_authentication is configured with an ACM-imported certificate.)
	ownershipVerificationCertificateArn?: null | string @go(OwnershipVerificationCertificateArn,*string)

	// Transport Layer Security (TLS) version of the security policy for the domain name. Valid values: TLS_1_2.
	securityPolicy?: null | string @go(SecurityPolicy,*string)

	// (Computed) Target domain name.
	targetDomainName?: null | string @go(TargetDomainName,*string)
}

#DomainNameConfigurationParameters: {
	// ARN of an AWS-managed certificate that will be used by the endpoint for the domain name. AWS Certificate Manager is the only supported source. Use the aws_acm_certificate resource to configure an ACM certificate.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/acm/v1beta1.Certificate
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	certificateArn?: null | string @go(CertificateArn,*string)

	// Reference to a Certificate in acm to populate certificateArn.
	// +kubebuilder:validation:Optional
	certificateArnRef?: null | v1.#Reference @go(CertificateArnRef,*v1.Reference)

	// Selector for a Certificate in acm to populate certificateArn.
	// +kubebuilder:validation:Optional
	certificateArnSelector?: null | v1.#Selector @go(CertificateArnSelector,*v1.Selector)

	// Endpoint type. Valid values: REGIONAL.
	// +kubebuilder:validation:Optional
	endpointType?: null | string @go(EndpointType,*string)

	// ARN of the AWS-issued certificate used to validate custom domain ownership (when certificate_arn is issued via an ACM Private CA or mutual_tls_authentication is configured with an ACM-imported certificate.)
	// +kubebuilder:validation:Optional
	ownershipVerificationCertificateArn?: null | string @go(OwnershipVerificationCertificateArn,*string)

	// Transport Layer Security (TLS) version of the security policy for the domain name. Valid values: TLS_1_2.
	// +kubebuilder:validation:Optional
	securityPolicy?: null | string @go(SecurityPolicy,*string)
}

#DomainNameInitParameters: {
	// Domain name configuration. See below.
	domainNameConfiguration?: [...#DomainNameConfigurationInitParameters] @go(DomainNameConfiguration,[]DomainNameConfigurationInitParameters)

	// Mutual TLS authentication configuration for the domain name.
	mutualTlsAuthentication?: [...#MutualTLSAuthenticationInitParameters] @go(MutualTLSAuthentication,[]MutualTLSAuthenticationInitParameters)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#DomainNameObservation: {
	// API mapping selection expression for the domain name.
	apiMappingSelectionExpression?: null | string @go(APIMappingSelectionExpression,*string)

	// ARN of the domain name.
	arn?: null | string @go(Arn,*string)

	// Domain name configuration. See below.
	domainNameConfiguration?: [...#DomainNameConfigurationObservation] @go(DomainNameConfiguration,[]DomainNameConfigurationObservation)

	// Domain name identifier.
	id?: null | string @go(ID,*string)

	// Mutual TLS authentication configuration for the domain name.
	mutualTlsAuthentication?: [...#MutualTLSAuthenticationObservation] @go(MutualTLSAuthentication,[]MutualTLSAuthenticationObservation)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#DomainNameParameters: {
	// Domain name configuration. See below.
	// +kubebuilder:validation:Optional
	domainNameConfiguration?: [...#DomainNameConfigurationParameters] @go(DomainNameConfiguration,[]DomainNameConfigurationParameters)

	// Mutual TLS authentication configuration for the domain name.
	// +kubebuilder:validation:Optional
	mutualTlsAuthentication?: [...#MutualTLSAuthenticationParameters] @go(MutualTLSAuthentication,[]MutualTLSAuthenticationParameters)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#MutualTLSAuthenticationInitParameters: {
	// Amazon S3 URL that specifies the truststore for mutual TLS authentication, for example, s3://bucket-name/key-name. The truststore can contain certificates from public or private certificate authorities. To update the truststore, upload a new version to S3, and then update your custom domain name to use the new version.
	truststoreUri?: null | string @go(TruststoreURI,*string)

	// Version of the S3 object that contains the truststore. To specify a version, you must have versioning enabled for the S3 bucket.
	truststoreVersion?: null | string @go(TruststoreVersion,*string)
}

#MutualTLSAuthenticationObservation: {
	// Amazon S3 URL that specifies the truststore for mutual TLS authentication, for example, s3://bucket-name/key-name. The truststore can contain certificates from public or private certificate authorities. To update the truststore, upload a new version to S3, and then update your custom domain name to use the new version.
	truststoreUri?: null | string @go(TruststoreURI,*string)

	// Version of the S3 object that contains the truststore. To specify a version, you must have versioning enabled for the S3 bucket.
	truststoreVersion?: null | string @go(TruststoreVersion,*string)
}

#MutualTLSAuthenticationParameters: {
	// Amazon S3 URL that specifies the truststore for mutual TLS authentication, for example, s3://bucket-name/key-name. The truststore can contain certificates from public or private certificate authorities. To update the truststore, upload a new version to S3, and then update your custom domain name to use the new version.
	// +kubebuilder:validation:Optional
	truststoreUri?: null | string @go(TruststoreURI,*string)

	// Version of the S3 object that contains the truststore. To specify a version, you must have versioning enabled for the S3 bucket.
	// +kubebuilder:validation:Optional
	truststoreVersion?: null | string @go(TruststoreVersion,*string)
}

// DomainNameSpec defines the desired state of DomainName
#DomainNameSpec: {
	v1.#ResourceSpec
	forProvider: #DomainNameParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #DomainNameInitParameters @go(InitProvider)
}

// DomainNameStatus defines the observed state of DomainName.
#DomainNameStatus: {
	v1.#ResourceStatus
	atProvider?: #DomainNameObservation @go(AtProvider)
}

// DomainName is the Schema for the DomainNames API. Manages an Amazon API Gateway Version 2 domain name.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#DomainName: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.domainNameConfiguration) || (has(self.initProvider) && has(self.initProvider.domainNameConfiguration))",message="spec.forProvider.domainNameConfiguration is a required parameter"
	spec:    #DomainNameSpec   @go(Spec)
	status?: #DomainNameStatus @go(Status)
}

// DomainNameList contains a list of DomainNames
#DomainNameList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#DomainName] @go(Items,[]DomainName)
}
