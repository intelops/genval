// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/apigatewayv2/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#ModelInitParameters: {
	// The content-type for the model, for example, application/json. Must be between 1 and 256 characters in length.
	contentType?: null | string @go(ContentType,*string)

	// Description of the model. Must be between 1 and 128 characters in length.
	description?: null | string @go(Description,*string)

	// Name of the model. Must be alphanumeric. Must be between 1 and 128 characters in length.
	name?: null | string @go(Name,*string)

	// Schema for the model. This should be a JSON schema draft 4 model. Must be less than or equal to 32768 characters in length.
	schema?: null | string @go(Schema,*string)
}

#ModelObservation: {
	// API identifier.
	apiId?: null | string @go(APIID,*string)

	// The content-type for the model, for example, application/json. Must be between 1 and 256 characters in length.
	contentType?: null | string @go(ContentType,*string)

	// Description of the model. Must be between 1 and 128 characters in length.
	description?: null | string @go(Description,*string)

	// Model identifier.
	id?: null | string @go(ID,*string)

	// Name of the model. Must be alphanumeric. Must be between 1 and 128 characters in length.
	name?: null | string @go(Name,*string)

	// Schema for the model. This should be a JSON schema draft 4 model. Must be less than or equal to 32768 characters in length.
	schema?: null | string @go(Schema,*string)
}

#ModelParameters: {
	// API identifier.
	// +crossplane:generate:reference:type=API
	// +kubebuilder:validation:Optional
	apiId?: null | string @go(APIID,*string)

	// Reference to a API to populate apiId.
	// +kubebuilder:validation:Optional
	apiIdRef?: null | v1.#Reference @go(APIIDRef,*v1.Reference)

	// Selector for a API to populate apiId.
	// +kubebuilder:validation:Optional
	apiIdSelector?: null | v1.#Selector @go(APIIDSelector,*v1.Selector)

	// The content-type for the model, for example, application/json. Must be between 1 and 256 characters in length.
	// +kubebuilder:validation:Optional
	contentType?: null | string @go(ContentType,*string)

	// Description of the model. Must be between 1 and 128 characters in length.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Name of the model. Must be alphanumeric. Must be between 1 and 128 characters in length.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Schema for the model. This should be a JSON schema draft 4 model. Must be less than or equal to 32768 characters in length.
	// +kubebuilder:validation:Optional
	schema?: null | string @go(Schema,*string)
}

// ModelSpec defines the desired state of Model
#ModelSpec: {
	v1.#ResourceSpec
	forProvider: #ModelParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ModelInitParameters @go(InitProvider)
}

// ModelStatus defines the observed state of Model.
#ModelStatus: {
	v1.#ResourceStatus
	atProvider?: #ModelObservation @go(AtProvider)
}

// Model is the Schema for the Models API. Manages an Amazon API Gateway Version 2 model.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Model: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.contentType) || (has(self.initProvider) && has(self.initProvider.contentType))",message="spec.forProvider.contentType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.schema) || (has(self.initProvider) && has(self.initProvider.schema))",message="spec.forProvider.schema is a required parameter"
	spec:    #ModelSpec   @go(Spec)
	status?: #ModelStatus @go(Status)
}

// ModelList contains a list of Models
#ModelList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Model] @go(Items,[]Model)
}
