// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/apigatewayv2/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#RequestParameterInitParameters: {
	// Request parameter key. This is a request data mapping parameter.
	requestParameterKey?: null | string @go(RequestParameterKey,*string)

	// Boolean whether or not the parameter is required.
	required?: null | bool @go(Required,*bool)
}

#RequestParameterObservation: {
	// Request parameter key. This is a request data mapping parameter.
	requestParameterKey?: null | string @go(RequestParameterKey,*string)

	// Boolean whether or not the parameter is required.
	required?: null | bool @go(Required,*bool)
}

#RequestParameterParameters: {
	// Request parameter key. This is a request data mapping parameter.
	// +kubebuilder:validation:Optional
	requestParameterKey?: null | string @go(RequestParameterKey,*string)

	// Boolean whether or not the parameter is required.
	// +kubebuilder:validation:Optional
	required?: null | bool @go(Required,*bool)
}

#RouteInitParameters: {
	// Boolean whether an API key is required for the route. Defaults to false. Supported only for WebSocket APIs.
	apiKeyRequired?: null | bool @go(APIKeyRequired,*bool)

	// Authorization scopes supported by this route. The scopes are used with a JWT authorizer to authorize the method invocation.
	authorizationScopes?: [...null | string] @go(AuthorizationScopes,[]*string)

	// Authorization type for the route.
	// For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer.
	// For HTTP APIs, valid values are NONE for open access, JWT for using JSON Web Tokens, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer.
	// Defaults to NONE.
	authorizationType?: null | string @go(AuthorizationType,*string)

	// The model selection expression for the route. Supported only for WebSocket APIs.
	modelSelectionExpression?: null | string @go(ModelSelectionExpression,*string)

	// Operation name for the route. Must be between 1 and 64 characters in length.
	operationName?: null | string @go(OperationName,*string)

	// Request models for the route. Supported only for WebSocket APIs.
	requestModels?: {[string]: null | string} @go(RequestModels,map[string]*string)

	// Request parameters for the route. Supported only for WebSocket APIs.
	requestParameter?: [...#RequestParameterInitParameters] @go(RequestParameter,[]RequestParameterInitParameters)

	// Route key for the route. For HTTP APIs, the route key can be either $default, or a combination of an HTTP method and resource path, for example, GET /pets.
	routeKey?: null | string @go(RouteKey,*string)

	// The route response selection expression for the route. Supported only for WebSocket APIs.
	routeResponseSelectionExpression?: null | string @go(RouteResponseSelectionExpression,*string)
}

#RouteObservation: {
	// API identifier.
	apiId?: null | string @go(APIID,*string)

	// Boolean whether an API key is required for the route. Defaults to false. Supported only for WebSocket APIs.
	apiKeyRequired?: null | bool @go(APIKeyRequired,*bool)

	// Authorization scopes supported by this route. The scopes are used with a JWT authorizer to authorize the method invocation.
	authorizationScopes?: [...null | string] @go(AuthorizationScopes,[]*string)

	// Authorization type for the route.
	// For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer.
	// For HTTP APIs, valid values are NONE for open access, JWT for using JSON Web Tokens, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer.
	// Defaults to NONE.
	authorizationType?: null | string @go(AuthorizationType,*string)

	// Identifier of the aws_apigatewayv2_authorizer resource to be associated with this route.
	authorizerId?: null | string @go(AuthorizerID,*string)

	// Route identifier.
	id?: null | string @go(ID,*string)

	// The model selection expression for the route. Supported only for WebSocket APIs.
	modelSelectionExpression?: null | string @go(ModelSelectionExpression,*string)

	// Operation name for the route. Must be between 1 and 64 characters in length.
	operationName?: null | string @go(OperationName,*string)

	// Request models for the route. Supported only for WebSocket APIs.
	requestModels?: {[string]: null | string} @go(RequestModels,map[string]*string)

	// Request parameters for the route. Supported only for WebSocket APIs.
	requestParameter?: [...#RequestParameterObservation] @go(RequestParameter,[]RequestParameterObservation)

	// Route key for the route. For HTTP APIs, the route key can be either $default, or a combination of an HTTP method and resource path, for example, GET /pets.
	routeKey?: null | string @go(RouteKey,*string)

	// The route response selection expression for the route. Supported only for WebSocket APIs.
	routeResponseSelectionExpression?: null | string @go(RouteResponseSelectionExpression,*string)

	// Target for the route, of the form integrations/IntegrationID, where IntegrationID is the identifier of an aws_apigatewayv2_integration resource.
	target?: null | string @go(Target,*string)
}

#RouteParameters: {
	// API identifier.
	// +crossplane:generate:reference:type=API
	// +kubebuilder:validation:Optional
	apiId?: null | string @go(APIID,*string)

	// Reference to a API to populate apiId.
	// +kubebuilder:validation:Optional
	apiIdRef?: null | v1.#Reference @go(APIIDRef,*v1.Reference)

	// Selector for a API to populate apiId.
	// +kubebuilder:validation:Optional
	apiIdSelector?: null | v1.#Selector @go(APIIDSelector,*v1.Selector)

	// Boolean whether an API key is required for the route. Defaults to false. Supported only for WebSocket APIs.
	// +kubebuilder:validation:Optional
	apiKeyRequired?: null | bool @go(APIKeyRequired,*bool)

	// Authorization scopes supported by this route. The scopes are used with a JWT authorizer to authorize the method invocation.
	// +kubebuilder:validation:Optional
	authorizationScopes?: [...null | string] @go(AuthorizationScopes,[]*string)

	// Authorization type for the route.
	// For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer.
	// For HTTP APIs, valid values are NONE for open access, JWT for using JSON Web Tokens, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer.
	// Defaults to NONE.
	// +kubebuilder:validation:Optional
	authorizationType?: null | string @go(AuthorizationType,*string)

	// Identifier of the aws_apigatewayv2_authorizer resource to be associated with this route.
	// +crossplane:generate:reference:type=Authorizer
	// +kubebuilder:validation:Optional
	authorizerId?: null | string @go(AuthorizerID,*string)

	// Reference to a Authorizer to populate authorizerId.
	// +kubebuilder:validation:Optional
	authorizerIdRef?: null | v1.#Reference @go(AuthorizerIDRef,*v1.Reference)

	// Selector for a Authorizer to populate authorizerId.
	// +kubebuilder:validation:Optional
	authorizerIdSelector?: null | v1.#Selector @go(AuthorizerIDSelector,*v1.Selector)

	// The model selection expression for the route. Supported only for WebSocket APIs.
	// +kubebuilder:validation:Optional
	modelSelectionExpression?: null | string @go(ModelSelectionExpression,*string)

	// Operation name for the route. Must be between 1 and 64 characters in length.
	// +kubebuilder:validation:Optional
	operationName?: null | string @go(OperationName,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Request models for the route. Supported only for WebSocket APIs.
	// +kubebuilder:validation:Optional
	requestModels?: {[string]: null | string} @go(RequestModels,map[string]*string)

	// Request parameters for the route. Supported only for WebSocket APIs.
	// +kubebuilder:validation:Optional
	requestParameter?: [...#RequestParameterParameters] @go(RequestParameter,[]RequestParameterParameters)

	// Route key for the route. For HTTP APIs, the route key can be either $default, or a combination of an HTTP method and resource path, for example, GET /pets.
	// +kubebuilder:validation:Optional
	routeKey?: null | string @go(RouteKey,*string)

	// The route response selection expression for the route. Supported only for WebSocket APIs.
	// +kubebuilder:validation:Optional
	routeResponseSelectionExpression?: null | string @go(RouteResponseSelectionExpression,*string)

	// Target for the route, of the form integrations/IntegrationID, where IntegrationID is the identifier of an aws_apigatewayv2_integration resource.
	// +crossplane:generate:reference:type=Integration
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/apis/apigatewayv2/v1beta1.IntegrationIDPrefixed()
	// +kubebuilder:validation:Optional
	target?: null | string @go(Target,*string)

	// Reference to a Integration to populate target.
	// +kubebuilder:validation:Optional
	targetRef?: null | v1.#Reference @go(TargetRef,*v1.Reference)

	// Selector for a Integration to populate target.
	// +kubebuilder:validation:Optional
	targetSelector?: null | v1.#Selector @go(TargetSelector,*v1.Selector)
}

// RouteSpec defines the desired state of Route
#RouteSpec: {
	v1.#ResourceSpec
	forProvider: #RouteParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #RouteInitParameters @go(InitProvider)
}

// RouteStatus defines the observed state of Route.
#RouteStatus: {
	v1.#ResourceStatus
	atProvider?: #RouteObservation @go(AtProvider)
}

// Route is the Schema for the Routes API. Manages an Amazon API Gateway Version 2 route.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Route: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.routeKey) || (has(self.initProvider) && has(self.initProvider.routeKey))",message="spec.forProvider.routeKey is a required parameter"
	spec:    #RouteSpec   @go(Spec)
	status?: #RouteStatus @go(Status)
}

// RouteList contains a list of Routes
#RouteList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Route] @go(Items,[]Route)
}
