// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/codestarnotifications/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#NotificationRuleInitParameters: {
	// The level of detail to include in the notifications for this resource. Possible values are BASIC and FULL.
	detailType?: null | string @go(DetailType,*string)

	// A list of event types associated with this notification rule.
	// For list of allowed events see here.
	eventTypeIds?: [...null | string] @go(EventTypeIds,[]*string)

	// The name of notification rule.
	name?: null | string @go(Name,*string)

	// The status of the notification rule. Possible values are ENABLED and DISABLED, default is ENABLED.
	status?: null | string @go(Status,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Configuration blocks containing notification target information. Can be specified multiple times. At least one target must be specified on creation.
	target?: [...#TargetInitParameters] @go(Target,[]TargetInitParameters)
}

#NotificationRuleObservation: {
	// The codestar notification rule ARN.
	arn?: null | string @go(Arn,*string)

	// The level of detail to include in the notifications for this resource. Possible values are BASIC and FULL.
	detailType?: null | string @go(DetailType,*string)

	// A list of event types associated with this notification rule.
	// For list of allowed events see here.
	eventTypeIds?: [...null | string] @go(EventTypeIds,[]*string)

	// The codestar notification rule ARN.
	id?: null | string @go(ID,*string)

	// The name of notification rule.
	name?: null | string @go(Name,*string)

	// The ARN of the resource to associate with the notification rule.
	resource?: null | string @go(Resource,*string)

	// The status of the notification rule. Possible values are ENABLED and DISABLED, default is ENABLED.
	status?: null | string @go(Status,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// Configuration blocks containing notification target information. Can be specified multiple times. At least one target must be specified on creation.
	target?: [...#TargetObservation] @go(Target,[]TargetObservation)
}

#NotificationRuleParameters: {
	// The level of detail to include in the notifications for this resource. Possible values are BASIC and FULL.
	// +kubebuilder:validation:Optional
	detailType?: null | string @go(DetailType,*string)

	// A list of event types associated with this notification rule.
	// For list of allowed events see here.
	// +kubebuilder:validation:Optional
	eventTypeIds?: [...null | string] @go(EventTypeIds,[]*string)

	// The name of notification rule.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The ARN of the resource to associate with the notification rule.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/codecommit/v1beta1.Repository
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	resource?: null | string @go(Resource,*string)

	// Reference to a Repository in codecommit to populate resource.
	// +kubebuilder:validation:Optional
	resourceRef?: null | v1.#Reference @go(ResourceRef,*v1.Reference)

	// Selector for a Repository in codecommit to populate resource.
	// +kubebuilder:validation:Optional
	resourceSelector?: null | v1.#Selector @go(ResourceSelector,*v1.Selector)

	// The status of the notification rule. Possible values are ENABLED and DISABLED, default is ENABLED.
	// +kubebuilder:validation:Optional
	status?: null | string @go(Status,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Configuration blocks containing notification target information. Can be specified multiple times. At least one target must be specified on creation.
	// +kubebuilder:validation:Optional
	target?: [...#TargetParameters] @go(Target,[]TargetParameters)
}

#TargetInitParameters: {
	// The type of the notification target. Default value is SNS.
	type?: null | string @go(Type,*string)
}

#TargetObservation: {
	// The ARN of notification rule target. For example, a SNS Topic ARN.
	address?: null | string @go(Address,*string)

	// The status of the notification rule. Possible values are ENABLED and DISABLED, default is ENABLED.
	status?: null | string @go(Status,*string)

	// The type of the notification target. Default value is SNS.
	type?: null | string @go(Type,*string)
}

#TargetParameters: {
	// The ARN of notification rule target. For example, a SNS Topic ARN.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/sns/v1beta1.Topic
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	address?: null | string @go(Address,*string)

	// Reference to a Topic in sns to populate address.
	// +kubebuilder:validation:Optional
	addressRef?: null | v1.#Reference @go(AddressRef,*v1.Reference)

	// Selector for a Topic in sns to populate address.
	// +kubebuilder:validation:Optional
	addressSelector?: null | v1.#Selector @go(AddressSelector,*v1.Selector)

	// The type of the notification target. Default value is SNS.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

// NotificationRuleSpec defines the desired state of NotificationRule
#NotificationRuleSpec: {
	v1.#ResourceSpec
	forProvider: #NotificationRuleParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #NotificationRuleInitParameters @go(InitProvider)
}

// NotificationRuleStatus defines the observed state of NotificationRule.
#NotificationRuleStatus: {
	v1.#ResourceStatus
	atProvider?: #NotificationRuleObservation @go(AtProvider)
}

// NotificationRule is the Schema for the NotificationRules API. Provides a CodeStar Notifications Rule
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#NotificationRule: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.detailType) || (has(self.initProvider) && has(self.initProvider.detailType))",message="spec.forProvider.detailType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.eventTypeIds) || (has(self.initProvider) && has(self.initProvider.eventTypeIds))",message="spec.forProvider.eventTypeIds is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	spec:    #NotificationRuleSpec   @go(Spec)
	status?: #NotificationRuleStatus @go(Status)
}

// NotificationRuleList contains a list of NotificationRules
#NotificationRuleList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#NotificationRule] @go(Items,[]NotificationRule)
}
