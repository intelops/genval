// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/mediapackage/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#ChannelInitParameters: {
	// A unique identifier describing the channel
	channelId?: null | string @go(ChannelID,*string)

	// A description of the channel
	description?: null | string @go(Description,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#ChannelObservation: {
	// The ARN of the channel
	arn?: null | string @go(Arn,*string)

	// A unique identifier describing the channel
	channelId?: null | string @go(ChannelID,*string)

	// A description of the channel
	description?: null | string @go(Description,*string)

	// A single item list of HLS ingest information
	hlsIngest?: [...#HlsIngestObservation] @go(HlsIngest,[]HlsIngestObservation)

	// The same as channel_id
	id?: null | string @go(ID,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#ChannelParameters: {
	// A unique identifier describing the channel
	// +kubebuilder:validation:Optional
	channelId?: null | string @go(ChannelID,*string)

	// A description of the channel
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#HlsIngestInitParameters: {
}

#HlsIngestObservation: {
	// A list of the ingest endpoints
	ingestEndpoints?: [...#IngestEndpointsObservation] @go(IngestEndpoints,[]IngestEndpointsObservation)
}

#HlsIngestParameters: {
}

#IngestEndpointsInitParameters: {
}

#IngestEndpointsObservation: {
	// The password
	password?: null | string @go(Password,*string)

	// The URL
	url?: null | string @go(URL,*string)

	// The username
	username?: null | string @go(Username,*string)
}

#IngestEndpointsParameters: {
}

// ChannelSpec defines the desired state of Channel
#ChannelSpec: {
	v1.#ResourceSpec
	forProvider: #ChannelParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ChannelInitParameters @go(InitProvider)
}

// ChannelStatus defines the observed state of Channel.
#ChannelStatus: {
	v1.#ResourceStatus
	atProvider?: #ChannelObservation @go(AtProvider)
}

// Channel is the Schema for the Channels API. Provides an AWS Elemental MediaPackage Channel.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Channel: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.channelId) || (has(self.initProvider) && has(self.initProvider.channelId))",message="spec.forProvider.channelId is a required parameter"
	spec:    #ChannelSpec   @go(Spec)
	status?: #ChannelStatus @go(Status)
}

// ChannelList contains a list of Channels
#ChannelList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Channel] @go(Items,[]Channel)
}
