// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/elasticbeanstalk/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#ConfigurationTemplateInitParameters: {
	// Short description of the Template
	description?: null | string @go(Description,*string)

	// –  The ID of the environment used with this configuration template
	environmentId?: null | string @go(EnvironmentID,*string)

	// –  Option settings to configure the new Environment. These
	// override specific values that are set as defaults. The format is detailed
	// below in Option Settings
	setting?: [...#SettingInitParameters] @go(Setting,[]SettingInitParameters)

	// –  A solution stack to base your Template
	// off of. Example stacks can be found in the Amazon API documentation
	solutionStackName?: null | string @go(SolutionStackName,*string)
}

#ConfigurationTemplateObservation: {
	// –  name of the application to associate with this configuration template
	application?: null | string @go(Application,*string)

	// Short description of the Template
	description?: null | string @go(Description,*string)

	// –  The ID of the environment used with this configuration template
	environmentId?: null | string @go(EnvironmentID,*string)
	id?:            null | string @go(ID,*string)

	// –  Option settings to configure the new Environment. These
	// override specific values that are set as defaults. The format is detailed
	// below in Option Settings
	setting?: [...#SettingObservation] @go(Setting,[]SettingObservation)

	// –  A solution stack to base your Template
	// off of. Example stacks can be found in the Amazon API documentation
	solutionStackName?: null | string @go(SolutionStackName,*string)
}

#ConfigurationTemplateParameters: {
	// –  name of the application to associate with this configuration template
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/elasticbeanstalk/v1beta1.Application
	// +kubebuilder:validation:Optional
	application?: null | string @go(Application,*string)

	// Reference to a Application in elasticbeanstalk to populate application.
	// +kubebuilder:validation:Optional
	applicationRef?: null | v1.#Reference @go(ApplicationRef,*v1.Reference)

	// Selector for a Application in elasticbeanstalk to populate application.
	// +kubebuilder:validation:Optional
	applicationSelector?: null | v1.#Selector @go(ApplicationSelector,*v1.Selector)

	// Short description of the Template
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// –  The ID of the environment used with this configuration template
	// +kubebuilder:validation:Optional
	environmentId?: null | string @go(EnvironmentID,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// –  Option settings to configure the new Environment. These
	// override specific values that are set as defaults. The format is detailed
	// below in Option Settings
	// +kubebuilder:validation:Optional
	setting?: [...#SettingParameters] @go(Setting,[]SettingParameters)

	// –  A solution stack to base your Template
	// off of. Example stacks can be found in the Amazon API documentation
	// +kubebuilder:validation:Optional
	solutionStackName?: null | string @go(SolutionStackName,*string)
}

#SettingInitParameters: {
	// A unique name for this Template.
	name?: null | string @go(Name,*string)

	// unique namespace identifying the option's associated AWS resource
	namespace?: null | string @go(Namespace,*string)

	// resource name for scheduled action
	resource?: null | string @go(Resource,*string)

	// value for the configuration option
	value?: null | string @go(Value,*string)
}

#SettingObservation: {
	// A unique name for this Template.
	name?: null | string @go(Name,*string)

	// unique namespace identifying the option's associated AWS resource
	namespace?: null | string @go(Namespace,*string)

	// resource name for scheduled action
	resource?: null | string @go(Resource,*string)

	// value for the configuration option
	value?: null | string @go(Value,*string)
}

#SettingParameters: {
	// A unique name for this Template.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// unique namespace identifying the option's associated AWS resource
	// +kubebuilder:validation:Optional
	namespace?: null | string @go(Namespace,*string)

	// resource name for scheduled action
	// +kubebuilder:validation:Optional
	resource?: null | string @go(Resource,*string)

	// value for the configuration option
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

// ConfigurationTemplateSpec defines the desired state of ConfigurationTemplate
#ConfigurationTemplateSpec: {
	v1.#ResourceSpec
	forProvider: #ConfigurationTemplateParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ConfigurationTemplateInitParameters @go(InitProvider)
}

// ConfigurationTemplateStatus defines the observed state of ConfigurationTemplate.
#ConfigurationTemplateStatus: {
	v1.#ResourceStatus
	atProvider?: #ConfigurationTemplateObservation @go(AtProvider)
}

// ConfigurationTemplate is the Schema for the ConfigurationTemplates API. Provides an Elastic Beanstalk Configuration Template
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#ConfigurationTemplate: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta           @go(ObjectMeta)
	spec:      #ConfigurationTemplateSpec   @go(Spec)
	status?:   #ConfigurationTemplateStatus @go(Status)
}

// ConfigurationTemplateList contains a list of ConfigurationTemplates
#ConfigurationTemplateList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#ConfigurationTemplate] @go(Items,[]ConfigurationTemplate)
}
