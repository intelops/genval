// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/ec2/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#VPCPeeringConnectionOptionsAccepterInitParameters: {
	// Allow a local linked EC2-Classic instance to communicate
	// with instances in a peer VPC. This enables an outbound communication from the local ClassicLink connection
	// to the remote VPC. This option is not supported for inter-region VPC peering.
	allowClassicLinkToRemoteVpc?: null | bool @go(AllowClassicLinkToRemoteVPC,*bool)

	// Allow a local VPC to resolve public DNS hostnames to
	// private IP addresses when queried from instances in the peer VPC.
	allowRemoteVpcDnsResolution?: null | bool @go(AllowRemoteVPCDNSResolution,*bool)

	// Allow a local VPC to communicate with a linked EC2-Classic
	// instance in a peer VPC. This enables an outbound communication from the local VPC to the remote ClassicLink
	// connection. This option is not supported for inter-region VPC peering.
	allowVpcToRemoteClassicLink?: null | bool @go(AllowVPCToRemoteClassicLink,*bool)
}

#VPCPeeringConnectionOptionsAccepterObservation: {
	// Allow a local linked EC2-Classic instance to communicate
	// with instances in a peer VPC. This enables an outbound communication from the local ClassicLink connection
	// to the remote VPC. This option is not supported for inter-region VPC peering.
	allowClassicLinkToRemoteVpc?: null | bool @go(AllowClassicLinkToRemoteVPC,*bool)

	// Allow a local VPC to resolve public DNS hostnames to
	// private IP addresses when queried from instances in the peer VPC.
	allowRemoteVpcDnsResolution?: null | bool @go(AllowRemoteVPCDNSResolution,*bool)

	// Allow a local VPC to communicate with a linked EC2-Classic
	// instance in a peer VPC. This enables an outbound communication from the local VPC to the remote ClassicLink
	// connection. This option is not supported for inter-region VPC peering.
	allowVpcToRemoteClassicLink?: null | bool @go(AllowVPCToRemoteClassicLink,*bool)
}

#VPCPeeringConnectionOptionsAccepterParameters: {
	// Allow a local linked EC2-Classic instance to communicate
	// with instances in a peer VPC. This enables an outbound communication from the local ClassicLink connection
	// to the remote VPC. This option is not supported for inter-region VPC peering.
	// +kubebuilder:validation:Optional
	allowClassicLinkToRemoteVpc?: null | bool @go(AllowClassicLinkToRemoteVPC,*bool)

	// Allow a local VPC to resolve public DNS hostnames to
	// private IP addresses when queried from instances in the peer VPC.
	// +kubebuilder:validation:Optional
	allowRemoteVpcDnsResolution?: null | bool @go(AllowRemoteVPCDNSResolution,*bool)

	// Allow a local VPC to communicate with a linked EC2-Classic
	// instance in a peer VPC. This enables an outbound communication from the local VPC to the remote ClassicLink
	// connection. This option is not supported for inter-region VPC peering.
	// +kubebuilder:validation:Optional
	allowVpcToRemoteClassicLink?: null | bool @go(AllowVPCToRemoteClassicLink,*bool)
}

#VPCPeeringConnectionOptionsInitParameters: {
	// An optional configuration block that allows for [VPC Peering Connection]
	// (https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options to be set for the VPC that accepts
	// the peering connection (a maximum of one).
	accepter?: [...#VPCPeeringConnectionOptionsAccepterInitParameters] @go(Accepter,[]VPCPeeringConnectionOptionsAccepterInitParameters)

	// A optional configuration block that allows for [VPC Peering Connection]
	// (https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options to be set for the VPC that requests
	// the peering connection (a maximum of one).
	requester?: [...#VPCPeeringConnectionOptionsRequesterInitParameters] @go(Requester,[]VPCPeeringConnectionOptionsRequesterInitParameters)
}

#VPCPeeringConnectionOptionsObservation: {
	// An optional configuration block that allows for [VPC Peering Connection]
	// (https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options to be set for the VPC that accepts
	// the peering connection (a maximum of one).
	accepter?: [...#VPCPeeringConnectionOptionsAccepterObservation] @go(Accepter,[]VPCPeeringConnectionOptionsAccepterObservation)

	// The ID of the VPC Peering Connection Options.
	id?: null | string @go(ID,*string)

	// A optional configuration block that allows for [VPC Peering Connection]
	// (https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options to be set for the VPC that requests
	// the peering connection (a maximum of one).
	requester?: [...#VPCPeeringConnectionOptionsRequesterObservation] @go(Requester,[]VPCPeeringConnectionOptionsRequesterObservation)

	// The ID of the requester VPC peering connection.
	vpcPeeringConnectionId?: null | string @go(VPCPeeringConnectionID,*string)
}

#VPCPeeringConnectionOptionsParameters: {
	// An optional configuration block that allows for [VPC Peering Connection]
	// (https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options to be set for the VPC that accepts
	// the peering connection (a maximum of one).
	// +kubebuilder:validation:Optional
	accepter?: [...#VPCPeeringConnectionOptionsAccepterParameters] @go(Accepter,[]VPCPeeringConnectionOptionsAccepterParameters)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// A optional configuration block that allows for [VPC Peering Connection]
	// (https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options to be set for the VPC that requests
	// the peering connection (a maximum of one).
	// +kubebuilder:validation:Optional
	requester?: [...#VPCPeeringConnectionOptionsRequesterParameters] @go(Requester,[]VPCPeeringConnectionOptionsRequesterParameters)

	// The ID of the requester VPC peering connection.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.VPCPeeringConnection
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	vpcPeeringConnectionId?: null | string @go(VPCPeeringConnectionID,*string)

	// Reference to a VPCPeeringConnection in ec2 to populate vpcPeeringConnectionId.
	// +kubebuilder:validation:Optional
	vpcPeeringConnectionIdRef?: null | v1.#Reference @go(VPCPeeringConnectionIDRef,*v1.Reference)

	// Selector for a VPCPeeringConnection in ec2 to populate vpcPeeringConnectionId.
	// +kubebuilder:validation:Optional
	vpcPeeringConnectionIdSelector?: null | v1.#Selector @go(VPCPeeringConnectionIDSelector,*v1.Selector)
}

#VPCPeeringConnectionOptionsRequesterInitParameters: {
	// Allow a local linked EC2-Classic instance to communicate
	// with instances in a peer VPC. This enables an outbound communication from the local ClassicLink connection
	// to the remote VPC. This option is not supported for inter-region VPC peering.
	allowClassicLinkToRemoteVpc?: null | bool @go(AllowClassicLinkToRemoteVPC,*bool)

	// Allow a local VPC to resolve public DNS hostnames to
	// private IP addresses when queried from instances in the peer VPC.
	allowRemoteVpcDnsResolution?: null | bool @go(AllowRemoteVPCDNSResolution,*bool)

	// Allow a local VPC to communicate with a linked EC2-Classic
	// instance in a peer VPC. This enables an outbound communication from the local VPC to the remote ClassicLink
	// connection. This option is not supported for inter-region VPC peering.
	allowVpcToRemoteClassicLink?: null | bool @go(AllowVPCToRemoteClassicLink,*bool)
}

#VPCPeeringConnectionOptionsRequesterObservation: {
	// Allow a local linked EC2-Classic instance to communicate
	// with instances in a peer VPC. This enables an outbound communication from the local ClassicLink connection
	// to the remote VPC. This option is not supported for inter-region VPC peering.
	allowClassicLinkToRemoteVpc?: null | bool @go(AllowClassicLinkToRemoteVPC,*bool)

	// Allow a local VPC to resolve public DNS hostnames to
	// private IP addresses when queried from instances in the peer VPC.
	allowRemoteVpcDnsResolution?: null | bool @go(AllowRemoteVPCDNSResolution,*bool)

	// Allow a local VPC to communicate with a linked EC2-Classic
	// instance in a peer VPC. This enables an outbound communication from the local VPC to the remote ClassicLink
	// connection. This option is not supported for inter-region VPC peering.
	allowVpcToRemoteClassicLink?: null | bool @go(AllowVPCToRemoteClassicLink,*bool)
}

#VPCPeeringConnectionOptionsRequesterParameters: {
	// Allow a local linked EC2-Classic instance to communicate
	// with instances in a peer VPC. This enables an outbound communication from the local ClassicLink connection
	// to the remote VPC. This option is not supported for inter-region VPC peering.
	// +kubebuilder:validation:Optional
	allowClassicLinkToRemoteVpc?: null | bool @go(AllowClassicLinkToRemoteVPC,*bool)

	// Allow a local VPC to resolve public DNS hostnames to
	// private IP addresses when queried from instances in the peer VPC.
	// +kubebuilder:validation:Optional
	allowRemoteVpcDnsResolution?: null | bool @go(AllowRemoteVPCDNSResolution,*bool)

	// Allow a local VPC to communicate with a linked EC2-Classic
	// instance in a peer VPC. This enables an outbound communication from the local VPC to the remote ClassicLink
	// connection. This option is not supported for inter-region VPC peering.
	// +kubebuilder:validation:Optional
	allowVpcToRemoteClassicLink?: null | bool @go(AllowVPCToRemoteClassicLink,*bool)
}

// VPCPeeringConnectionOptionsSpec defines the desired state of VPCPeeringConnectionOptions
#VPCPeeringConnectionOptionsSpec: {
	v1.#ResourceSpec
	forProvider: #VPCPeeringConnectionOptionsParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #VPCPeeringConnectionOptionsInitParameters @go(InitProvider)
}

// VPCPeeringConnectionOptionsStatus defines the observed state of VPCPeeringConnectionOptions.
#VPCPeeringConnectionOptionsStatus: {
	v1.#ResourceStatus
	atProvider?: #VPCPeeringConnectionOptionsObservation @go(AtProvider)
}

// VPCPeeringConnectionOptions is the Schema for the VPCPeeringConnectionOptionss API. Provides a resource to manage VPC peering connection options.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#VPCPeeringConnectionOptions: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta                 @go(ObjectMeta)
	spec:      #VPCPeeringConnectionOptionsSpec   @go(Spec)
	status?:   #VPCPeeringConnectionOptionsStatus @go(Status)
}

// VPCPeeringConnectionOptionsList contains a list of VPCPeeringConnectionOptionss
#VPCPeeringConnectionOptionsList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#VPCPeeringConnectionOptions] @go(Items,[]VPCPeeringConnectionOptions)
}
