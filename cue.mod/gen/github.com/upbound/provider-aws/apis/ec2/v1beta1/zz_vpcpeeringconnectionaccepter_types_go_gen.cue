// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/ec2/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#VPCPeeringConnectionAccepterAccepterInitParameters: {
	// Indicates whether a local ClassicLink connection can communicate
	// with the peer VPC over the VPC Peering Connection.
	allowClassicLinkToRemoteVpc?: null | bool @go(AllowClassicLinkToRemoteVPC,*bool)

	// Indicates whether a local VPC can resolve public DNS hostnames to
	// private IP addresses when queried from instances in a peer VPC.
	allowRemoteVpcDnsResolution?: null | bool @go(AllowRemoteVPCDNSResolution,*bool)

	// Indicates whether a local VPC can communicate with a ClassicLink
	// connection in the peer VPC over the VPC Peering Connection.
	allowVpcToRemoteClassicLink?: null | bool @go(AllowVPCToRemoteClassicLink,*bool)
}

#VPCPeeringConnectionAccepterAccepterObservation: {
	// Indicates whether a local ClassicLink connection can communicate
	// with the peer VPC over the VPC Peering Connection.
	allowClassicLinkToRemoteVpc?: null | bool @go(AllowClassicLinkToRemoteVPC,*bool)

	// Indicates whether a local VPC can resolve public DNS hostnames to
	// private IP addresses when queried from instances in a peer VPC.
	allowRemoteVpcDnsResolution?: null | bool @go(AllowRemoteVPCDNSResolution,*bool)

	// Indicates whether a local VPC can communicate with a ClassicLink
	// connection in the peer VPC over the VPC Peering Connection.
	allowVpcToRemoteClassicLink?: null | bool @go(AllowVPCToRemoteClassicLink,*bool)
}

#VPCPeeringConnectionAccepterAccepterParameters: {
	// Indicates whether a local ClassicLink connection can communicate
	// with the peer VPC over the VPC Peering Connection.
	// +kubebuilder:validation:Optional
	allowClassicLinkToRemoteVpc?: null | bool @go(AllowClassicLinkToRemoteVPC,*bool)

	// Indicates whether a local VPC can resolve public DNS hostnames to
	// private IP addresses when queried from instances in a peer VPC.
	// +kubebuilder:validation:Optional
	allowRemoteVpcDnsResolution?: null | bool @go(AllowRemoteVPCDNSResolution,*bool)

	// Indicates whether a local VPC can communicate with a ClassicLink
	// connection in the peer VPC over the VPC Peering Connection.
	// +kubebuilder:validation:Optional
	allowVpcToRemoteClassicLink?: null | bool @go(AllowVPCToRemoteClassicLink,*bool)
}

#VPCPeeringConnectionAccepterInitParameters: {
	// A configuration block that describes [VPC Peering Connection]
	// (https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options set for the accepter VPC.
	accepter?: [...#VPCPeeringConnectionAccepterAccepterInitParameters] @go(Accepter,[]VPCPeeringConnectionAccepterAccepterInitParameters)

	// Whether or not to accept the peering request. Defaults to false.
	autoAccept?: null | bool @go(AutoAccept,*bool)

	// A configuration block that describes [VPC Peering Connection]
	// (https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options set for the requester VPC.
	requester?: [...#VPCPeeringConnectionAccepterRequesterInitParameters] @go(Requester,[]VPCPeeringConnectionAccepterRequesterInitParameters)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#VPCPeeringConnectionAccepterObservation: {
	// The status of the VPC Peering Connection request.
	acceptStatus?: null | string @go(AcceptStatus,*string)

	// A configuration block that describes [VPC Peering Connection]
	// (https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options set for the accepter VPC.
	accepter?: [...#VPCPeeringConnectionAccepterAccepterObservation] @go(Accepter,[]VPCPeeringConnectionAccepterAccepterObservation)

	// Whether or not to accept the peering request. Defaults to false.
	autoAccept?: null | bool @go(AutoAccept,*bool)

	// The ID of the VPC Peering Connection.
	id?: null | string @go(ID,*string)

	// The AWS account ID of the owner of the requester VPC.
	peerOwnerId?: null | string @go(PeerOwnerID,*string)

	// The region of the accepter VPC.
	peerRegion?: null | string @go(PeerRegion,*string)

	// The ID of the requester VPC.
	peerVpcId?: null | string @go(PeerVPCID,*string)

	// A configuration block that describes [VPC Peering Connection]
	// (https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options set for the requester VPC.
	requester?: [...#VPCPeeringConnectionAccepterRequesterObservation] @go(Requester,[]VPCPeeringConnectionAccepterRequesterObservation)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// The ID of the accepter VPC.
	vpcId?: null | string @go(VPCID,*string)

	// The VPC Peering Connection ID to manage.
	vpcPeeringConnectionId?: null | string @go(VPCPeeringConnectionID,*string)
}

#VPCPeeringConnectionAccepterParameters: {
	// A configuration block that describes [VPC Peering Connection]
	// (https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options set for the accepter VPC.
	// +kubebuilder:validation:Optional
	accepter?: [...#VPCPeeringConnectionAccepterAccepterParameters] @go(Accepter,[]VPCPeeringConnectionAccepterAccepterParameters)

	// Whether or not to accept the peering request. Defaults to false.
	// +kubebuilder:validation:Optional
	autoAccept?: null | bool @go(AutoAccept,*bool)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// A configuration block that describes [VPC Peering Connection]
	// (https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options set for the requester VPC.
	// +kubebuilder:validation:Optional
	requester?: [...#VPCPeeringConnectionAccepterRequesterParameters] @go(Requester,[]VPCPeeringConnectionAccepterRequesterParameters)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// The VPC Peering Connection ID to manage.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.VPCPeeringConnection
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	vpcPeeringConnectionId?: null | string @go(VPCPeeringConnectionID,*string)

	// Reference to a VPCPeeringConnection in ec2 to populate vpcPeeringConnectionId.
	// +kubebuilder:validation:Optional
	vpcPeeringConnectionIdRef?: null | v1.#Reference @go(VPCPeeringConnectionIDRef,*v1.Reference)

	// Selector for a VPCPeeringConnection in ec2 to populate vpcPeeringConnectionId.
	// +kubebuilder:validation:Optional
	vpcPeeringConnectionIdSelector?: null | v1.#Selector @go(VPCPeeringConnectionIDSelector,*v1.Selector)
}

#VPCPeeringConnectionAccepterRequesterInitParameters: {
	// Indicates whether a local ClassicLink connection can communicate
	// with the peer VPC over the VPC Peering Connection.
	allowClassicLinkToRemoteVpc?: null | bool @go(AllowClassicLinkToRemoteVPC,*bool)

	// Indicates whether a local VPC can resolve public DNS hostnames to
	// private IP addresses when queried from instances in a peer VPC.
	allowRemoteVpcDnsResolution?: null | bool @go(AllowRemoteVPCDNSResolution,*bool)

	// Indicates whether a local VPC can communicate with a ClassicLink
	// connection in the peer VPC over the VPC Peering Connection.
	allowVpcToRemoteClassicLink?: null | bool @go(AllowVPCToRemoteClassicLink,*bool)
}

#VPCPeeringConnectionAccepterRequesterObservation: {
	// Indicates whether a local ClassicLink connection can communicate
	// with the peer VPC over the VPC Peering Connection.
	allowClassicLinkToRemoteVpc?: null | bool @go(AllowClassicLinkToRemoteVPC,*bool)

	// Indicates whether a local VPC can resolve public DNS hostnames to
	// private IP addresses when queried from instances in a peer VPC.
	allowRemoteVpcDnsResolution?: null | bool @go(AllowRemoteVPCDNSResolution,*bool)

	// Indicates whether a local VPC can communicate with a ClassicLink
	// connection in the peer VPC over the VPC Peering Connection.
	allowVpcToRemoteClassicLink?: null | bool @go(AllowVPCToRemoteClassicLink,*bool)
}

#VPCPeeringConnectionAccepterRequesterParameters: {
	// Indicates whether a local ClassicLink connection can communicate
	// with the peer VPC over the VPC Peering Connection.
	// +kubebuilder:validation:Optional
	allowClassicLinkToRemoteVpc?: null | bool @go(AllowClassicLinkToRemoteVPC,*bool)

	// Indicates whether a local VPC can resolve public DNS hostnames to
	// private IP addresses when queried from instances in a peer VPC.
	// +kubebuilder:validation:Optional
	allowRemoteVpcDnsResolution?: null | bool @go(AllowRemoteVPCDNSResolution,*bool)

	// Indicates whether a local VPC can communicate with a ClassicLink
	// connection in the peer VPC over the VPC Peering Connection.
	// +kubebuilder:validation:Optional
	allowVpcToRemoteClassicLink?: null | bool @go(AllowVPCToRemoteClassicLink,*bool)
}

// VPCPeeringConnectionAccepterSpec defines the desired state of VPCPeeringConnectionAccepter
#VPCPeeringConnectionAccepterSpec: {
	v1.#ResourceSpec
	forProvider: #VPCPeeringConnectionAccepterParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #VPCPeeringConnectionAccepterInitParameters @go(InitProvider)
}

// VPCPeeringConnectionAccepterStatus defines the observed state of VPCPeeringConnectionAccepter.
#VPCPeeringConnectionAccepterStatus: {
	v1.#ResourceStatus
	atProvider?: #VPCPeeringConnectionAccepterObservation @go(AtProvider)
}

// VPCPeeringConnectionAccepter is the Schema for the VPCPeeringConnectionAccepters API. Manage the accepter's side of a VPC Peering Connection.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#VPCPeeringConnectionAccepter: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta                  @go(ObjectMeta)
	spec:      #VPCPeeringConnectionAccepterSpec   @go(Spec)
	status?:   #VPCPeeringConnectionAccepterStatus @go(Status)
}

// VPCPeeringConnectionAccepterList contains a list of VPCPeeringConnectionAccepters
#VPCPeeringConnectionAccepterList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#VPCPeeringConnectionAccepter] @go(Items,[]VPCPeeringConnectionAccepter)
}
