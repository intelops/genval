// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/ec2/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#DefaultSubnetInitParameters: {
	assignIpv6AddressOnCreation?: null | bool @go(AssignIPv6AddressOnCreation,*bool)

	// is required
	availabilityZone?:                        null | string @go(AvailabilityZone,*string)
	customerOwnedIpv4Pool?:                   null | string @go(CustomerOwnedIPv4Pool,*string)
	enableDns64?:                             null | bool   @go(EnableDns64,*bool)
	enableResourceNameDnsARecordOnLaunch?:    null | bool   @go(EnableResourceNameDNSARecordOnLaunch,*bool)
	enableResourceNameDnsAaaaRecordOnLaunch?: null | bool   @go(EnableResourceNameDNSAaaaRecordOnLaunch,*bool)

	// Whether destroying the resource deletes the default subnet. Default: false
	forceDestroy?: null | bool @go(ForceDestroy,*bool)

	// The IPv4 CIDR block assigned to the subnet
	ipv6CidrBlock?:              null | string @go(IPv6CidrBlock,*string)
	ipv6Native?:                 null | bool   @go(IPv6Native,*bool)
	mapCustomerOwnedIpOnLaunch?: null | bool   @go(MapCustomerOwnedIPOnLaunch,*bool)

	// is true
	mapPublicIpOnLaunch?:            null | bool   @go(MapPublicIPOnLaunch,*bool)
	privateDnsHostnameTypeOnLaunch?: null | string @go(PrivateDNSHostnameTypeOnLaunch,*string)
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#DefaultSubnetObservation: {
	arn?:                         null | string @go(Arn,*string)
	assignIpv6AddressOnCreation?: null | bool   @go(AssignIPv6AddressOnCreation,*bool)

	// is required
	availabilityZone?: null | string @go(AvailabilityZone,*string)

	// , cidr_block and vpc_id arguments become computed attributes
	availabilityZoneId?: null | string @go(AvailabilityZoneID,*string)

	// The IPv4 CIDR block assigned to the subnet
	cidrBlock?:                               null | string  @go(CidrBlock,*string)
	customerOwnedIpv4Pool?:                   null | string  @go(CustomerOwnedIPv4Pool,*string)
	enableDns64?:                             null | bool    @go(EnableDns64,*bool)
	enableLniAtDeviceIndex?:                  null | float64 @go(EnableLniAtDeviceIndex,*float64)
	enableResourceNameDnsARecordOnLaunch?:    null | bool    @go(EnableResourceNameDNSARecordOnLaunch,*bool)
	enableResourceNameDnsAaaaRecordOnLaunch?: null | bool    @go(EnableResourceNameDNSAaaaRecordOnLaunch,*bool)
	existingDefaultSubnet?:                   null | bool    @go(ExistingDefaultSubnet,*bool)

	// Whether destroying the resource deletes the default subnet. Default: false
	forceDestroy?: null | bool   @go(ForceDestroy,*bool)
	id?:           null | string @go(ID,*string)

	// The IPv4 CIDR block assigned to the subnet
	ipv6CidrBlock?:              null | string @go(IPv6CidrBlock,*string)
	ipv6CidrBlockAssociationId?: null | string @go(IPv6CidrBlockAssociationID,*string)
	ipv6Native?:                 null | bool   @go(IPv6Native,*bool)
	mapCustomerOwnedIpOnLaunch?: null | bool   @go(MapCustomerOwnedIPOnLaunch,*bool)

	// is true
	mapPublicIpOnLaunch?:            null | bool   @go(MapPublicIPOnLaunch,*bool)
	outpostArn?:                     null | string @go(OutpostArn,*string)
	ownerId?:                        null | string @go(OwnerID,*string)
	privateDnsHostnameTypeOnLaunch?: null | string @go(PrivateDNSHostnameTypeOnLaunch,*string)
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// The ID of the VPC the subnet is in
	vpcId?: null | string @go(VPCID,*string)
}

#DefaultSubnetParameters: {
	// +kubebuilder:validation:Optional
	assignIpv6AddressOnCreation?: null | bool @go(AssignIPv6AddressOnCreation,*bool)

	// is required
	// +kubebuilder:validation:Optional
	availabilityZone?: null | string @go(AvailabilityZone,*string)

	// +kubebuilder:validation:Optional
	customerOwnedIpv4Pool?: null | string @go(CustomerOwnedIPv4Pool,*string)

	// +kubebuilder:validation:Optional
	enableDns64?: null | bool @go(EnableDns64,*bool)

	// +kubebuilder:validation:Optional
	enableResourceNameDnsARecordOnLaunch?: null | bool @go(EnableResourceNameDNSARecordOnLaunch,*bool)

	// +kubebuilder:validation:Optional
	enableResourceNameDnsAaaaRecordOnLaunch?: null | bool @go(EnableResourceNameDNSAaaaRecordOnLaunch,*bool)

	// Whether destroying the resource deletes the default subnet. Default: false
	// +kubebuilder:validation:Optional
	forceDestroy?: null | bool @go(ForceDestroy,*bool)

	// The IPv4 CIDR block assigned to the subnet
	// +kubebuilder:validation:Optional
	ipv6CidrBlock?: null | string @go(IPv6CidrBlock,*string)

	// +kubebuilder:validation:Optional
	ipv6Native?: null | bool @go(IPv6Native,*bool)

	// +kubebuilder:validation:Optional
	mapCustomerOwnedIpOnLaunch?: null | bool @go(MapCustomerOwnedIPOnLaunch,*bool)

	// is true
	// +kubebuilder:validation:Optional
	mapPublicIpOnLaunch?: null | bool @go(MapPublicIPOnLaunch,*bool)

	// +kubebuilder:validation:Optional
	privateDnsHostnameTypeOnLaunch?: null | string @go(PrivateDNSHostnameTypeOnLaunch,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// DefaultSubnetSpec defines the desired state of DefaultSubnet
#DefaultSubnetSpec: {
	v1.#ResourceSpec
	forProvider: #DefaultSubnetParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #DefaultSubnetInitParameters @go(InitProvider)
}

// DefaultSubnetStatus defines the observed state of DefaultSubnet.
#DefaultSubnetStatus: {
	v1.#ResourceStatus
	atProvider?: #DefaultSubnetObservation @go(AtProvider)
}

// DefaultSubnet is the Schema for the DefaultSubnets API. Manage a default subnet resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#DefaultSubnet: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.availabilityZone) || (has(self.initProvider) && has(self.initProvider.availabilityZone))",message="spec.forProvider.availabilityZone is a required parameter"
	spec:    #DefaultSubnetSpec   @go(Spec)
	status?: #DefaultSubnetStatus @go(Status)
}

// DefaultSubnetList contains a list of DefaultSubnets
#DefaultSubnetList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#DefaultSubnet] @go(Items,[]DefaultSubnet)
}
