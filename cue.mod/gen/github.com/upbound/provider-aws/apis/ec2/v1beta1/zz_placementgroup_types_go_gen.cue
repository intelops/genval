// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/ec2/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#PlacementGroupInitParameters: {
	// The number of partitions to create in the
	// placement group.  Can only be specified when the strategy is set to
	// partition.  Valid values are 1 - 7 (default is 2).
	partitionCount?: null | float64 @go(PartitionCount,*float64)

	// Determines how placement groups spread instances. Can only be used
	// when the strategy is set to spread. Can be host or rack. host can only be used for Outpost placement groups. Defaults to rack.
	spreadLevel?: null | string @go(SpreadLevel,*string)

	// The placement strategy. Can be cluster, partition or spread.
	strategy?: null | string @go(Strategy,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#PlacementGroupObservation: {
	// Amazon Resource Name (ARN) of the placement group.
	arn?: null | string @go(Arn,*string)

	// The name of the placement group.
	id?: null | string @go(ID,*string)

	// The number of partitions to create in the
	// placement group.  Can only be specified when the strategy is set to
	// partition.  Valid values are 1 - 7 (default is 2).
	partitionCount?: null | float64 @go(PartitionCount,*float64)

	// The ID of the placement group.
	placementGroupId?: null | string @go(PlacementGroupID,*string)

	// Determines how placement groups spread instances. Can only be used
	// when the strategy is set to spread. Can be host or rack. host can only be used for Outpost placement groups. Defaults to rack.
	spreadLevel?: null | string @go(SpreadLevel,*string)

	// The placement strategy. Can be cluster, partition or spread.
	strategy?: null | string @go(Strategy,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#PlacementGroupParameters: {
	// The number of partitions to create in the
	// placement group.  Can only be specified when the strategy is set to
	// partition.  Valid values are 1 - 7 (default is 2).
	// +kubebuilder:validation:Optional
	partitionCount?: null | float64 @go(PartitionCount,*float64)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Determines how placement groups spread instances. Can only be used
	// when the strategy is set to spread. Can be host or rack. host can only be used for Outpost placement groups. Defaults to rack.
	// +kubebuilder:validation:Optional
	spreadLevel?: null | string @go(SpreadLevel,*string)

	// The placement strategy. Can be cluster, partition or spread.
	// +kubebuilder:validation:Optional
	strategy?: null | string @go(Strategy,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// PlacementGroupSpec defines the desired state of PlacementGroup
#PlacementGroupSpec: {
	v1.#ResourceSpec
	forProvider: #PlacementGroupParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #PlacementGroupInitParameters @go(InitProvider)
}

// PlacementGroupStatus defines the observed state of PlacementGroup.
#PlacementGroupStatus: {
	v1.#ResourceStatus
	atProvider?: #PlacementGroupObservation @go(AtProvider)
}

// PlacementGroup is the Schema for the PlacementGroups API. Provides an EC2 placement group.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#PlacementGroup: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.strategy) || (has(self.initProvider) && has(self.initProvider.strategy))",message="spec.forProvider.strategy is a required parameter"
	spec:    #PlacementGroupSpec   @go(Spec)
	status?: #PlacementGroupStatus @go(Status)
}

// PlacementGroupList contains a list of PlacementGroups
#PlacementGroupList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#PlacementGroup] @go(Items,[]PlacementGroup)
}
