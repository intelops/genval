// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/ec2/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#EBSVolumeInitParameters: {
	// The AZ where the EBS volume will exist.
	availabilityZone?: null | string @go(AvailabilityZone,*string)

	// If true, the disk will be encrypted.
	encrypted?: null | bool @go(Encrypted,*bool)

	// If true, snapshot will be created before volume deletion. Any tags on the volume will be migrated to the snapshot. By default set to false
	finalSnapshot?: null | bool @go(FinalSnapshot,*bool)

	// The amount of IOPS to provision for the disk. Only valid for type of io1, io2 or gp3.
	iops?: null | float64 @go(Iops,*float64)

	// Specifies whether to enable Amazon EBS Multi-Attach. Multi-Attach is supported on io1 and io2 volumes.
	multiAttachEnabled?: null | bool @go(MultiAttachEnabled,*bool)

	// The Amazon Resource Name (ARN) of the Outpost.
	outpostArn?: null | string @go(OutpostArn,*string)

	// The size of the drive in GiBs.
	size?: null | float64 @go(Size,*float64)

	// A snapshot to base the EBS volume off of.
	snapshotId?: null | string @go(SnapshotID,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// The throughput that the volume supports, in MiB/s. Only valid for type of gp3.
	throughput?: null | float64 @go(Throughput,*float64)

	// The type of EBS volume. Can be standard, gp2, gp3, io1, io2, sc1 or st1 (Default: gp2).
	type?: null | string @go(Type,*string)
}

#EBSVolumeObservation: {
	// The volume ARN (e.g., arn:aws:ec2:us-east-1:0123456789012:volume/vol-59fcb34e).
	arn?: null | string @go(Arn,*string)

	// The AZ where the EBS volume will exist.
	availabilityZone?: null | string @go(AvailabilityZone,*string)

	// If true, the disk will be encrypted.
	encrypted?: null | bool @go(Encrypted,*bool)

	// If true, snapshot will be created before volume deletion. Any tags on the volume will be migrated to the snapshot. By default set to false
	finalSnapshot?: null | bool @go(FinalSnapshot,*bool)

	// The volume ID (e.g., vol-59fcb34e).
	id?: null | string @go(ID,*string)

	// The amount of IOPS to provision for the disk. Only valid for type of io1, io2 or gp3.
	iops?: null | float64 @go(Iops,*float64)

	// The ARN for the KMS encryption key. When specifying kms_key_id, encrypted needs to be set to true.
	kmsKeyId?: null | string @go(KMSKeyID,*string)

	// Specifies whether to enable Amazon EBS Multi-Attach. Multi-Attach is supported on io1 and io2 volumes.
	multiAttachEnabled?: null | bool @go(MultiAttachEnabled,*bool)

	// The Amazon Resource Name (ARN) of the Outpost.
	outpostArn?: null | string @go(OutpostArn,*string)

	// The size of the drive in GiBs.
	size?: null | float64 @go(Size,*float64)

	// A snapshot to base the EBS volume off of.
	snapshotId?: null | string @go(SnapshotID,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// The throughput that the volume supports, in MiB/s. Only valid for type of gp3.
	throughput?: null | float64 @go(Throughput,*float64)

	// The type of EBS volume. Can be standard, gp2, gp3, io1, io2, sc1 or st1 (Default: gp2).
	type?: null | string @go(Type,*string)
}

#EBSVolumeParameters: {
	// The AZ where the EBS volume will exist.
	// +kubebuilder:validation:Optional
	availabilityZone?: null | string @go(AvailabilityZone,*string)

	// If true, the disk will be encrypted.
	// +kubebuilder:validation:Optional
	encrypted?: null | bool @go(Encrypted,*bool)

	// If true, snapshot will be created before volume deletion. Any tags on the volume will be migrated to the snapshot. By default set to false
	// +kubebuilder:validation:Optional
	finalSnapshot?: null | bool @go(FinalSnapshot,*bool)

	// The amount of IOPS to provision for the disk. Only valid for type of io1, io2 or gp3.
	// +kubebuilder:validation:Optional
	iops?: null | float64 @go(Iops,*float64)

	// The ARN for the KMS encryption key. When specifying kms_key_id, encrypted needs to be set to true.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/kms/v1beta1.Key
	// +kubebuilder:validation:Optional
	kmsKeyId?: null | string @go(KMSKeyID,*string)

	// Reference to a Key in kms to populate kmsKeyId.
	// +kubebuilder:validation:Optional
	kmsKeyIdRef?: null | v1.#Reference @go(KMSKeyIDRef,*v1.Reference)

	// Selector for a Key in kms to populate kmsKeyId.
	// +kubebuilder:validation:Optional
	kmsKeyIdSelector?: null | v1.#Selector @go(KMSKeyIDSelector,*v1.Selector)

	// Specifies whether to enable Amazon EBS Multi-Attach. Multi-Attach is supported on io1 and io2 volumes.
	// +kubebuilder:validation:Optional
	multiAttachEnabled?: null | bool @go(MultiAttachEnabled,*bool)

	// The Amazon Resource Name (ARN) of the Outpost.
	// +kubebuilder:validation:Optional
	outpostArn?: null | string @go(OutpostArn,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The size of the drive in GiBs.
	// +kubebuilder:validation:Optional
	size?: null | float64 @go(Size,*float64)

	// A snapshot to base the EBS volume off of.
	// +kubebuilder:validation:Optional
	snapshotId?: null | string @go(SnapshotID,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// The throughput that the volume supports, in MiB/s. Only valid for type of gp3.
	// +kubebuilder:validation:Optional
	throughput?: null | float64 @go(Throughput,*float64)

	// The type of EBS volume. Can be standard, gp2, gp3, io1, io2, sc1 or st1 (Default: gp2).
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

// EBSVolumeSpec defines the desired state of EBSVolume
#EBSVolumeSpec: {
	v1.#ResourceSpec
	forProvider: #EBSVolumeParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #EBSVolumeInitParameters @go(InitProvider)
}

// EBSVolumeStatus defines the observed state of EBSVolume.
#EBSVolumeStatus: {
	v1.#ResourceStatus
	atProvider?: #EBSVolumeObservation @go(AtProvider)
}

// EBSVolume is the Schema for the EBSVolumes API. Provides an elastic block storage resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#EBSVolume: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.availabilityZone) || (has(self.initProvider) && has(self.initProvider.availabilityZone))",message="spec.forProvider.availabilityZone is a required parameter"
	spec:    #EBSVolumeSpec   @go(Spec)
	status?: #EBSVolumeStatus @go(Status)
}

// EBSVolumeList contains a list of EBSVolumes
#EBSVolumeList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#EBSVolume] @go(Items,[]EBSVolume)
}
