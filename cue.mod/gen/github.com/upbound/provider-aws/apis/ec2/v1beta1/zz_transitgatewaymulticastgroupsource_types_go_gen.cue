// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/ec2/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#TransitGatewayMulticastGroupSourceInitParameters: {
	// The IP address assigned to the transit gateway multicast group.
	groupIpAddress?: null | string @go(GroupIPAddress,*string)
}

#TransitGatewayMulticastGroupSourceObservation: {
	// The IP address assigned to the transit gateway multicast group.
	groupIpAddress?: null | string @go(GroupIPAddress,*string)

	// EC2 Transit Gateway Multicast Group Member identifier.
	id?: null | string @go(ID,*string)

	// The group members' network interface ID to register with the transit gateway multicast group.
	networkInterfaceId?: null | string @go(NetworkInterfaceID,*string)

	// The ID of the transit gateway multicast domain.
	transitGatewayMulticastDomainId?: null | string @go(TransitGatewayMulticastDomainID,*string)
}

#TransitGatewayMulticastGroupSourceParameters: {
	// The IP address assigned to the transit gateway multicast group.
	// +kubebuilder:validation:Optional
	groupIpAddress?: null | string @go(GroupIPAddress,*string)

	// The group members' network interface ID to register with the transit gateway multicast group.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.NetworkInterface
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	networkInterfaceId?: null | string @go(NetworkInterfaceID,*string)

	// Reference to a NetworkInterface in ec2 to populate networkInterfaceId.
	// +kubebuilder:validation:Optional
	networkInterfaceIdRef?: null | v1.#Reference @go(NetworkInterfaceIDRef,*v1.Reference)

	// Selector for a NetworkInterface in ec2 to populate networkInterfaceId.
	// +kubebuilder:validation:Optional
	networkInterfaceIdSelector?: null | v1.#Selector @go(NetworkInterfaceIDSelector,*v1.Selector)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The ID of the transit gateway multicast domain.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.TransitGatewayMulticastDomain
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	transitGatewayMulticastDomainId?: null | string @go(TransitGatewayMulticastDomainID,*string)

	// Reference to a TransitGatewayMulticastDomain in ec2 to populate transitGatewayMulticastDomainId.
	// +kubebuilder:validation:Optional
	transitGatewayMulticastDomainIdRef?: null | v1.#Reference @go(TransitGatewayMulticastDomainIDRef,*v1.Reference)

	// Selector for a TransitGatewayMulticastDomain in ec2 to populate transitGatewayMulticastDomainId.
	// +kubebuilder:validation:Optional
	transitGatewayMulticastDomainIdSelector?: null | v1.#Selector @go(TransitGatewayMulticastDomainIDSelector,*v1.Selector)
}

// TransitGatewayMulticastGroupSourceSpec defines the desired state of TransitGatewayMulticastGroupSource
#TransitGatewayMulticastGroupSourceSpec: {
	v1.#ResourceSpec
	forProvider: #TransitGatewayMulticastGroupSourceParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #TransitGatewayMulticastGroupSourceInitParameters @go(InitProvider)
}

// TransitGatewayMulticastGroupSourceStatus defines the observed state of TransitGatewayMulticastGroupSource.
#TransitGatewayMulticastGroupSourceStatus: {
	v1.#ResourceStatus
	atProvider?: #TransitGatewayMulticastGroupSourceObservation @go(AtProvider)
}

// TransitGatewayMulticastGroupSource is the Schema for the TransitGatewayMulticastGroupSources API. Manages an EC2 Transit Gateway Multicast Group Source
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#TransitGatewayMulticastGroupSource: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.groupIpAddress) || (has(self.initProvider) && has(self.initProvider.groupIpAddress))",message="spec.forProvider.groupIpAddress is a required parameter"
	spec:    #TransitGatewayMulticastGroupSourceSpec   @go(Spec)
	status?: #TransitGatewayMulticastGroupSourceStatus @go(Status)
}

// TransitGatewayMulticastGroupSourceList contains a list of TransitGatewayMulticastGroupSources
#TransitGatewayMulticastGroupSourceList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#TransitGatewayMulticastGroupSource] @go(Items,[]TransitGatewayMulticastGroupSource)
}
