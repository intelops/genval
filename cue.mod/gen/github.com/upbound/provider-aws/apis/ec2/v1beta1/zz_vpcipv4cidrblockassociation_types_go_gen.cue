// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/ec2/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#VPCIPv4CidrBlockAssociationInitParameters: {
	// The IPv4 CIDR block for the VPC. CIDR can be explicitly set or it can be derived from IPAM using ipv4_netmask_length.
	cidrBlock?: null | string @go(CidrBlock,*string)

	// The ID of an IPv4 IPAM pool you want to use for allocating this VPC's CIDR. IPAM is a VPC feature that you can use to automate your IP address management workflows including assigning, tracking, troubleshooting, and auditing IP addresses across AWS Regions and accounts. Using IPAM you can monitor IP address usage throughout your AWS Organization.
	ipv4IpamPoolId?: null | string @go(IPv4IpamPoolID,*string)

	// The netmask length of the IPv4 CIDR you want to allocate to this VPC. Requires specifying a ipv4_ipam_pool_id.
	ipv4NetmaskLength?: null | float64 @go(IPv4NetmaskLength,*float64)
}

#VPCIPv4CidrBlockAssociationObservation: {
	// The IPv4 CIDR block for the VPC. CIDR can be explicitly set or it can be derived from IPAM using ipv4_netmask_length.
	cidrBlock?: null | string @go(CidrBlock,*string)

	// The ID of the VPC CIDR association
	id?: null | string @go(ID,*string)

	// The ID of an IPv4 IPAM pool you want to use for allocating this VPC's CIDR. IPAM is a VPC feature that you can use to automate your IP address management workflows including assigning, tracking, troubleshooting, and auditing IP addresses across AWS Regions and accounts. Using IPAM you can monitor IP address usage throughout your AWS Organization.
	ipv4IpamPoolId?: null | string @go(IPv4IpamPoolID,*string)

	// The netmask length of the IPv4 CIDR you want to allocate to this VPC. Requires specifying a ipv4_ipam_pool_id.
	ipv4NetmaskLength?: null | float64 @go(IPv4NetmaskLength,*float64)

	// The ID of the VPC to make the association with.
	vpcId?: null | string @go(VPCID,*string)
}

#VPCIPv4CidrBlockAssociationParameters: {
	// The IPv4 CIDR block for the VPC. CIDR can be explicitly set or it can be derived from IPAM using ipv4_netmask_length.
	// +kubebuilder:validation:Optional
	cidrBlock?: null | string @go(CidrBlock,*string)

	// The ID of an IPv4 IPAM pool you want to use for allocating this VPC's CIDR. IPAM is a VPC feature that you can use to automate your IP address management workflows including assigning, tracking, troubleshooting, and auditing IP addresses across AWS Regions and accounts. Using IPAM you can monitor IP address usage throughout your AWS Organization.
	// +kubebuilder:validation:Optional
	ipv4IpamPoolId?: null | string @go(IPv4IpamPoolID,*string)

	// The netmask length of the IPv4 CIDR you want to allocate to this VPC. Requires specifying a ipv4_ipam_pool_id.
	// +kubebuilder:validation:Optional
	ipv4NetmaskLength?: null | float64 @go(IPv4NetmaskLength,*float64)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The ID of the VPC to make the association with.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.VPC
	// +kubebuilder:validation:Optional
	vpcId?: null | string @go(VPCID,*string)

	// Reference to a VPC in ec2 to populate vpcId.
	// +kubebuilder:validation:Optional
	vpcIdRef?: null | v1.#Reference @go(VPCIDRef,*v1.Reference)

	// Selector for a VPC in ec2 to populate vpcId.
	// +kubebuilder:validation:Optional
	vpcIdSelector?: null | v1.#Selector @go(VPCIDSelector,*v1.Selector)
}

// VPCIPv4CidrBlockAssociationSpec defines the desired state of VPCIPv4CidrBlockAssociation
#VPCIPv4CidrBlockAssociationSpec: {
	v1.#ResourceSpec
	forProvider: #VPCIPv4CidrBlockAssociationParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #VPCIPv4CidrBlockAssociationInitParameters @go(InitProvider)
}

// VPCIPv4CidrBlockAssociationStatus defines the observed state of VPCIPv4CidrBlockAssociation.
#VPCIPv4CidrBlockAssociationStatus: {
	v1.#ResourceStatus
	atProvider?: #VPCIPv4CidrBlockAssociationObservation @go(AtProvider)
}

// VPCIPv4CidrBlockAssociation is the Schema for the VPCIPv4CidrBlockAssociations API. Associate additional IPv4 CIDR blocks with a VPC
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#VPCIPv4CidrBlockAssociation: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta                 @go(ObjectMeta)
	spec:      #VPCIPv4CidrBlockAssociationSpec   @go(Spec)
	status?:   #VPCIPv4CidrBlockAssociationStatus @go(Status)
}

// VPCIPv4CidrBlockAssociationList contains a list of VPCIPv4CidrBlockAssociations
#VPCIPv4CidrBlockAssociationList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#VPCIPv4CidrBlockAssociation] @go(Items,[]VPCIPv4CidrBlockAssociation)
}
