// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/ec2/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#VPCIpamPoolCidrAllocationInitParameters: {
	// The CIDR you want to assign to the pool.
	cidr?: null | string @go(Cidr,*string)

	// The description for the allocation.
	description?: null | string @go(Description,*string)

	// Exclude a particular CIDR range from being returned by the pool.
	disallowedCidrs?: [...null | string] @go(DisallowedCidrs,[]*string)

	// The netmask length of the CIDR you would like to allocate to the IPAM pool. Valid Values: 0-128.
	netmaskLength?: null | float64 @go(NetmaskLength,*float64)
}

#VPCIpamPoolCidrAllocationObservation: {
	// The CIDR you want to assign to the pool.
	cidr?: null | string @go(Cidr,*string)

	// The description for the allocation.
	description?: null | string @go(Description,*string)

	// Exclude a particular CIDR range from being returned by the pool.
	disallowedCidrs?: [...null | string] @go(DisallowedCidrs,[]*string)

	// The ID of the allocation.
	id?: null | string @go(ID,*string)

	// The ID of the allocation.
	ipamPoolAllocationId?: null | string @go(IpamPoolAllocationID,*string)

	// The ID of the pool to which you want to assign a CIDR.
	ipamPoolId?: null | string @go(IpamPoolID,*string)

	// The netmask length of the CIDR you would like to allocate to the IPAM pool. Valid Values: 0-128.
	netmaskLength?: null | float64 @go(NetmaskLength,*float64)

	// The ID of the resource.
	resourceId?: null | string @go(ResourceID,*string)

	// The owner of the resource.
	resourceOwner?: null | string @go(ResourceOwner,*string)

	// The type of the resource.
	resourceType?: null | string @go(ResourceType,*string)
}

#VPCIpamPoolCidrAllocationParameters: {
	// The CIDR you want to assign to the pool.
	// +kubebuilder:validation:Optional
	cidr?: null | string @go(Cidr,*string)

	// The description for the allocation.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Exclude a particular CIDR range from being returned by the pool.
	// +kubebuilder:validation:Optional
	disallowedCidrs?: [...null | string] @go(DisallowedCidrs,[]*string)

	// The ID of the pool to which you want to assign a CIDR.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.VPCIpamPool
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ipamPoolId?: null | string @go(IpamPoolID,*string)

	// Reference to a VPCIpamPool in ec2 to populate ipamPoolId.
	// +kubebuilder:validation:Optional
	ipamPoolIdRef?: null | v1.#Reference @go(IpamPoolIDRef,*v1.Reference)

	// Selector for a VPCIpamPool in ec2 to populate ipamPoolId.
	// +kubebuilder:validation:Optional
	ipamPoolIdSelector?: null | v1.#Selector @go(IpamPoolIDSelector,*v1.Selector)

	// The netmask length of the CIDR you would like to allocate to the IPAM pool. Valid Values: 0-128.
	// +kubebuilder:validation:Optional
	netmaskLength?: null | float64 @go(NetmaskLength,*float64)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)
}

// VPCIpamPoolCidrAllocationSpec defines the desired state of VPCIpamPoolCidrAllocation
#VPCIpamPoolCidrAllocationSpec: {
	v1.#ResourceSpec
	forProvider: #VPCIpamPoolCidrAllocationParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #VPCIpamPoolCidrAllocationInitParameters @go(InitProvider)
}

// VPCIpamPoolCidrAllocationStatus defines the observed state of VPCIpamPoolCidrAllocation.
#VPCIpamPoolCidrAllocationStatus: {
	v1.#ResourceStatus
	atProvider?: #VPCIpamPoolCidrAllocationObservation @go(AtProvider)
}

// VPCIpamPoolCidrAllocation is the Schema for the VPCIpamPoolCidrAllocations API. Allocates (reserves) a CIDR from an IPAM address pool, preventing usage by IPAM.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#VPCIpamPoolCidrAllocation: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta               @go(ObjectMeta)
	spec:      #VPCIpamPoolCidrAllocationSpec   @go(Spec)
	status?:   #VPCIpamPoolCidrAllocationStatus @go(Status)
}

// VPCIpamPoolCidrAllocationList contains a list of VPCIpamPoolCidrAllocations
#VPCIpamPoolCidrAllocationList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#VPCIpamPoolCidrAllocation] @go(Items,[]VPCIpamPoolCidrAllocation)
}
