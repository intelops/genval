// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/ec2/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#AccepterInitParameters: {
}

#AccepterObservation: {
	// Allow a local linked EC2-Classic instance to communicate
	// with instances in a peer VPC. This enables an outbound communication from the local ClassicLink connection
	// to the remote VPC.
	allowClassicLinkToRemoteVpc?: null | bool @go(AllowClassicLinkToRemoteVPC,*bool)

	// Allow a local VPC to resolve public DNS hostnames to
	// private IP addresses when queried from instances in the peer VPC.
	allowRemoteVpcDnsResolution?: null | bool @go(AllowRemoteVPCDNSResolution,*bool)

	// Allow a local VPC to communicate with a linked EC2-Classic
	// instance in a peer VPC. This enables an outbound communication from the local VPC to the remote ClassicLink
	// connection.
	allowVpcToRemoteClassicLink?: null | bool @go(AllowVPCToRemoteClassicLink,*bool)
}

#AccepterParameters: {
}

#RequesterInitParameters: {
}

#RequesterObservation: {
	// Allow a local linked EC2-Classic instance to communicate
	// with instances in a peer VPC. This enables an outbound communication from the local ClassicLink connection
	// to the remote VPC.
	allowClassicLinkToRemoteVpc?: null | bool @go(AllowClassicLinkToRemoteVPC,*bool)

	// Allow a local VPC to resolve public DNS hostnames to
	// private IP addresses when queried from instances in the peer VPC.
	allowRemoteVpcDnsResolution?: null | bool @go(AllowRemoteVPCDNSResolution,*bool)

	// Allow a local VPC to communicate with a linked EC2-Classic
	// instance in a peer VPC. This enables an outbound communication from the local VPC to the remote ClassicLink
	// connection.
	allowVpcToRemoteClassicLink?: null | bool @go(AllowVPCToRemoteClassicLink,*bool)
}

#RequesterParameters: {
}

#VPCPeeringConnectionInitParameters_2: {
	// Accept the peering (both VPCs need to be in the same AWS account and region).
	autoAccept?: null | bool @go(AutoAccept,*bool)

	// The AWS account ID of the owner of the peer VPC.
	// Defaults to the account ID the AWS provider is currently connected to.
	peerOwnerId?: null | string @go(PeerOwnerID,*string)

	// The region of the accepter VPC of the VPC Peering Connection. auto_accept must be false,
	// and use the aws_vpc_peering_connection_accepter to manage the accepter side.
	peerRegion?: null | string @go(PeerRegion,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#VPCPeeringConnectionObservation_2: {
	// The status of the VPC Peering Connection request.
	acceptStatus?: null | string @go(AcceptStatus,*string)

	// An optional configuration block that allows for VPC Peering Connection options to be set for the VPC that accepts
	// the peering connection (a maximum of one).
	accepter?: [...#AccepterObservation] @go(Accepter,[]AccepterObservation)

	// Accept the peering (both VPCs need to be in the same AWS account and region).
	autoAccept?: null | bool @go(AutoAccept,*bool)

	// The ID of the VPC Peering Connection.
	id?: null | string @go(ID,*string)

	// The AWS account ID of the owner of the peer VPC.
	// Defaults to the account ID the AWS provider is currently connected to.
	peerOwnerId?: null | string @go(PeerOwnerID,*string)

	// The region of the accepter VPC of the VPC Peering Connection. auto_accept must be false,
	// and use the aws_vpc_peering_connection_accepter to manage the accepter side.
	peerRegion?: null | string @go(PeerRegion,*string)

	// The ID of the VPC with which you are creating the VPC Peering Connection.
	peerVpcId?: null | string @go(PeerVPCID,*string)

	// A optional configuration block that allows for VPC Peering Connection options to be set for the VPC that requests
	// the peering connection (a maximum of one).
	requester?: [...#RequesterObservation] @go(Requester,[]RequesterObservation)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// The ID of the requester VPC.
	vpcId?: null | string @go(VPCID,*string)
}

#VPCPeeringConnectionParameters_2: {
	// Accept the peering (both VPCs need to be in the same AWS account and region).
	// +kubebuilder:validation:Optional
	autoAccept?: null | bool @go(AutoAccept,*bool)

	// The AWS account ID of the owner of the peer VPC.
	// Defaults to the account ID the AWS provider is currently connected to.
	// +kubebuilder:validation:Optional
	peerOwnerId?: null | string @go(PeerOwnerID,*string)

	// The region of the accepter VPC of the VPC Peering Connection. auto_accept must be false,
	// and use the aws_vpc_peering_connection_accepter to manage the accepter side.
	// +kubebuilder:validation:Optional
	peerRegion?: null | string @go(PeerRegion,*string)

	// The ID of the VPC with which you are creating the VPC Peering Connection.
	// +crossplane:generate:reference:type=VPC
	// +kubebuilder:validation:Optional
	peerVpcId?: null | string @go(PeerVPCID,*string)

	// Reference to a VPC to populate peerVpcId.
	// +kubebuilder:validation:Optional
	peerVpcIdRef?: null | v1.#Reference @go(PeerVPCIDRef,*v1.Reference)

	// Selector for a VPC to populate peerVpcId.
	// +kubebuilder:validation:Optional
	peerVpcIdSelector?: null | v1.#Selector @go(PeerVPCIDSelector,*v1.Selector)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// The ID of the requester VPC.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.VPC
	// +kubebuilder:validation:Optional
	vpcId?: null | string @go(VPCID,*string)

	// Reference to a VPC in ec2 to populate vpcId.
	// +kubebuilder:validation:Optional
	vpcIdRef?: null | v1.#Reference @go(VPCIDRef,*v1.Reference)

	// Selector for a VPC in ec2 to populate vpcId.
	// +kubebuilder:validation:Optional
	vpcIdSelector?: null | v1.#Selector @go(VPCIDSelector,*v1.Selector)
}

// VPCPeeringConnectionSpec defines the desired state of VPCPeeringConnection
#VPCPeeringConnectionSpec: {
	v1.#ResourceSpec
	forProvider: #VPCPeeringConnectionParameters_2 @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #VPCPeeringConnectionInitParameters_2 @go(InitProvider)
}

// VPCPeeringConnectionStatus defines the observed state of VPCPeeringConnection.
#VPCPeeringConnectionStatus: {
	v1.#ResourceStatus
	atProvider?: #VPCPeeringConnectionObservation_2 @go(AtProvider)
}

// VPCPeeringConnection is the Schema for the VPCPeeringConnections API. Provides a resource to manage a VPC peering connection.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#VPCPeeringConnection: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta          @go(ObjectMeta)
	spec:      #VPCPeeringConnectionSpec   @go(Spec)
	status?:   #VPCPeeringConnectionStatus @go(Status)
}

// VPCPeeringConnectionList contains a list of VPCPeeringConnections
#VPCPeeringConnectionList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#VPCPeeringConnection] @go(Items,[]VPCPeeringConnection)
}
