// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/ec2/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#MainRouteTableAssociationInitParameters: {
}

#MainRouteTableAssociationObservation: {
	// The ID of the Route Table Association
	id?: null | string @go(ID,*string)

	// Used internally, see Notes below
	originalRouteTableId?: null | string @go(OriginalRouteTableID,*string)

	// The ID of the Route Table to set as the new
	// main route table for the target VPC
	routeTableId?: null | string @go(RouteTableID,*string)

	// The ID of the VPC whose main route table should be set
	vpcId?: null | string @go(VPCID,*string)
}

#MainRouteTableAssociationParameters: {
	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The ID of the Route Table to set as the new
	// main route table for the target VPC
	// +crossplane:generate:reference:type=RouteTable
	// +kubebuilder:validation:Optional
	routeTableId?: null | string @go(RouteTableID,*string)

	// Reference to a RouteTable to populate routeTableId.
	// +kubebuilder:validation:Optional
	routeTableIdRef?: null | v1.#Reference @go(RouteTableIDRef,*v1.Reference)

	// Selector for a RouteTable to populate routeTableId.
	// +kubebuilder:validation:Optional
	routeTableIdSelector?: null | v1.#Selector @go(RouteTableIDSelector,*v1.Selector)

	// The ID of the VPC whose main route table should be set
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.VPC
	// +kubebuilder:validation:Optional
	vpcId?: null | string @go(VPCID,*string)

	// Reference to a VPC in ec2 to populate vpcId.
	// +kubebuilder:validation:Optional
	vpcIdRef?: null | v1.#Reference @go(VPCIDRef,*v1.Reference)

	// Selector for a VPC in ec2 to populate vpcId.
	// +kubebuilder:validation:Optional
	vpcIdSelector?: null | v1.#Selector @go(VPCIDSelector,*v1.Selector)
}

// MainRouteTableAssociationSpec defines the desired state of MainRouteTableAssociation
#MainRouteTableAssociationSpec: {
	v1.#ResourceSpec
	forProvider: #MainRouteTableAssociationParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #MainRouteTableAssociationInitParameters @go(InitProvider)
}

// MainRouteTableAssociationStatus defines the observed state of MainRouteTableAssociation.
#MainRouteTableAssociationStatus: {
	v1.#ResourceStatus
	atProvider?: #MainRouteTableAssociationObservation @go(AtProvider)
}

// MainRouteTableAssociation is the Schema for the MainRouteTableAssociations API. Provides a resource for managing the main routing table of a VPC.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#MainRouteTableAssociation: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta               @go(ObjectMeta)
	spec:      #MainRouteTableAssociationSpec   @go(Spec)
	status?:   #MainRouteTableAssociationStatus @go(Status)
}

// MainRouteTableAssociationList contains a list of MainRouteTableAssociations
#MainRouteTableAssociationList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#MainRouteTableAssociation] @go(Items,[]MainRouteTableAssociation)
}
