// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/ec2/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#NetworkACLEgressInitParameters: {
}

#NetworkACLEgressObservation: {
	// The action to take.
	action?: null | string @go(Action,*string)

	// The CIDR block to match. This must be a
	// valid network mask.
	cidrBlock?: null | string @go(CidrBlock,*string)

	// The from port to match.
	fromPort?: null | float64 @go(FromPort,*float64)

	// The IPv6 CIDR block.
	ipv6CidrBlock?: null | string @go(IPv6CidrBlock,*string)

	// The ICMP type code to be used. Default 0.
	icmpCode?: null | float64 @go(IcmpCode,*float64)

	// The ICMP type to be used. Default 0.
	icmpType?: null | float64 @go(IcmpType,*float64)

	// The protocol to match. If using the -1 'all'
	// protocol, you must specify a from and to port of 0.
	protocol?: null | string @go(Protocol,*string)

	// The rule number. Used for ordering.
	ruleNo?: null | float64 @go(RuleNo,*float64)

	// The to port to match.
	toPort?: null | float64 @go(ToPort,*float64)
}

#NetworkACLEgressParameters: {
}

#NetworkACLIngressInitParameters: {
}

#NetworkACLIngressObservation: {
	// The action to take.
	action?: null | string @go(Action,*string)

	// The CIDR block to match. This must be a
	// valid network mask.
	cidrBlock?: null | string @go(CidrBlock,*string)

	// The from port to match.
	fromPort?: null | float64 @go(FromPort,*float64)

	// The IPv6 CIDR block.
	ipv6CidrBlock?: null | string @go(IPv6CidrBlock,*string)

	// The ICMP type code to be used. Default 0.
	icmpCode?: null | float64 @go(IcmpCode,*float64)

	// The ICMP type to be used. Default 0.
	icmpType?: null | float64 @go(IcmpType,*float64)

	// The protocol to match. If using the -1 'all'
	// protocol, you must specify a from and to port of 0.
	protocol?: null | string @go(Protocol,*string)

	// The rule number. Used for ordering.
	ruleNo?: null | float64 @go(RuleNo,*float64)

	// The to port to match.
	toPort?: null | float64 @go(ToPort,*float64)
}

#NetworkACLIngressParameters: {
}

#NetworkACLInitParameters: {
	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#NetworkACLObservation: {
	// The ARN of the network ACL
	arn?: null | string @go(Arn,*string)

	// Specifies an egress rule. Parameters defined below.
	// This argument is processed in attribute-as-blocks mode.
	egress?: [...#NetworkACLEgressObservation] @go(Egress,[]NetworkACLEgressObservation)

	// The ID of the network ACL
	id?: null | string @go(ID,*string)

	// Specifies an ingress rule. Parameters defined below.
	// This argument is processed in attribute-as-blocks mode.
	ingress?: [...#NetworkACLIngressObservation] @go(Ingress,[]NetworkACLIngressObservation)

	// The ID of the AWS account that owns the network ACL.
	ownerId?: null | string @go(OwnerID,*string)

	// A list of Subnet IDs to apply the ACL to
	subnetIds?: [...null | string] @go(SubnetIds,[]*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// The ID of the associated VPC.
	vpcId?: null | string @go(VPCID,*string)
}

#NetworkACLParameters: {
	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// References to Subnet in ec2 to populate subnetIds.
	// +kubebuilder:validation:Optional
	subnetIdRefs?: [...v1.#Reference] @go(SubnetIDRefs,[]v1.Reference)

	// Selector for a list of Subnet in ec2 to populate subnetIds.
	// +kubebuilder:validation:Optional
	subnetIdSelector?: null | v1.#Selector @go(SubnetIDSelector,*v1.Selector)

	// A list of Subnet IDs to apply the ACL to
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.Subnet
	// +crossplane:generate:reference:refFieldName=SubnetIDRefs
	// +crossplane:generate:reference:selectorFieldName=SubnetIDSelector
	// +kubebuilder:validation:Optional
	subnetIds?: [...null | string] @go(SubnetIds,[]*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// The ID of the associated VPC.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.VPC
	// +kubebuilder:validation:Optional
	vpcId?: null | string @go(VPCID,*string)

	// Reference to a VPC in ec2 to populate vpcId.
	// +kubebuilder:validation:Optional
	vpcIdRef?: null | v1.#Reference @go(VPCIDRef,*v1.Reference)

	// Selector for a VPC in ec2 to populate vpcId.
	// +kubebuilder:validation:Optional
	vpcIdSelector?: null | v1.#Selector @go(VPCIDSelector,*v1.Selector)
}

// NetworkACLSpec defines the desired state of NetworkACL
#NetworkACLSpec: {
	v1.#ResourceSpec
	forProvider: #NetworkACLParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #NetworkACLInitParameters @go(InitProvider)
}

// NetworkACLStatus defines the observed state of NetworkACL.
#NetworkACLStatus: {
	v1.#ResourceStatus
	atProvider?: #NetworkACLObservation @go(AtProvider)
}

// NetworkACL is the Schema for the NetworkACLs API. Provides an network ACL resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#NetworkACL: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec:      #NetworkACLSpec    @go(Spec)
	status?:   #NetworkACLStatus  @go(Status)
}

// NetworkACLList contains a list of NetworkACLs
#NetworkACLList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#NetworkACL] @go(Items,[]NetworkACL)
}
