// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/ec2/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#VPNGatewayRoutePropagationInitParameters: {
}

#VPNGatewayRoutePropagationObservation: {
	id?: null | string @go(ID,*string)

	// The id of the aws_route_table to propagate routes into.
	routeTableId?: null | string @go(RouteTableID,*string)

	// The id of the aws_vpn_gateway to propagate routes from.
	vpnGatewayId?: null | string @go(VPNGatewayID,*string)
}

#VPNGatewayRoutePropagationParameters: {
	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The id of the aws_route_table to propagate routes into.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.RouteTable
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	routeTableId?: null | string @go(RouteTableID,*string)

	// Reference to a RouteTable in ec2 to populate routeTableId.
	// +kubebuilder:validation:Optional
	routeTableIdRef?: null | v1.#Reference @go(RouteTableIDRef,*v1.Reference)

	// Selector for a RouteTable in ec2 to populate routeTableId.
	// +kubebuilder:validation:Optional
	routeTableIdSelector?: null | v1.#Selector @go(RouteTableIDSelector,*v1.Selector)

	// The id of the aws_vpn_gateway to propagate routes from.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.VPNGateway
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	vpnGatewayId?: null | string @go(VPNGatewayID,*string)

	// Reference to a VPNGateway in ec2 to populate vpnGatewayId.
	// +kubebuilder:validation:Optional
	vpnGatewayIdRef?: null | v1.#Reference @go(VPNGatewayIDRef,*v1.Reference)

	// Selector for a VPNGateway in ec2 to populate vpnGatewayId.
	// +kubebuilder:validation:Optional
	vpnGatewayIdSelector?: null | v1.#Selector @go(VPNGatewayIDSelector,*v1.Selector)
}

// VPNGatewayRoutePropagationSpec defines the desired state of VPNGatewayRoutePropagation
#VPNGatewayRoutePropagationSpec: {
	v1.#ResourceSpec
	forProvider: #VPNGatewayRoutePropagationParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #VPNGatewayRoutePropagationInitParameters @go(InitProvider)
}

// VPNGatewayRoutePropagationStatus defines the observed state of VPNGatewayRoutePropagation.
#VPNGatewayRoutePropagationStatus: {
	v1.#ResourceStatus
	atProvider?: #VPNGatewayRoutePropagationObservation @go(AtProvider)
}

// VPNGatewayRoutePropagation is the Schema for the VPNGatewayRoutePropagations API. Requests automatic route propagation between a VPN gateway and a route table.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#VPNGatewayRoutePropagation: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta                @go(ObjectMeta)
	spec:      #VPNGatewayRoutePropagationSpec   @go(Spec)
	status?:   #VPNGatewayRoutePropagationStatus @go(Status)
}

// VPNGatewayRoutePropagationList contains a list of VPNGatewayRoutePropagations
#VPNGatewayRoutePropagationList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#VPNGatewayRoutePropagation] @go(Items,[]VPNGatewayRoutePropagation)
}
