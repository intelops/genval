// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/ec2/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#SecurityGroupRuleInitParameters_2: {
	// List of CIDR blocks. Cannot be specified with source_security_group_id or self.
	cidrBlocks?: [...null | string] @go(CidrBlocks,[]*string)

	// Description of the rule.
	description?: null | string @go(Description,*string)

	// Start port (or ICMP type number if protocol is "icmp" or "icmpv6").
	fromPort?: null | float64 @go(FromPort,*float64)

	// List of IPv6 CIDR blocks. Cannot be specified with source_security_group_id or self.
	ipv6CidrBlocks?: [...null | string] @go(IPv6CidrBlocks,[]*string)

	// Protocol. If not icmp, icmpv6, tcp, udp, or all use the protocol number
	protocol?: null | string @go(Protocol,*string)

	// Whether the security group itself will be added as a source to this ingress rule. Cannot be specified with cidr_blocks, ipv6_cidr_blocks, or source_security_group_id.
	self?: null | bool @go(Self,*bool)

	// End port (or ICMP code if protocol is "icmp").
	toPort?: null | float64 @go(ToPort,*float64)

	// Type of rule being created. Valid options are ingress (inbound)
	// or egress (outbound).
	type?: null | string @go(Type,*string)
}

#SecurityGroupRuleObservation_2: {
	// List of CIDR blocks. Cannot be specified with source_security_group_id or self.
	cidrBlocks?: [...null | string] @go(CidrBlocks,[]*string)

	// Description of the rule.
	description?: null | string @go(Description,*string)

	// Start port (or ICMP type number if protocol is "icmp" or "icmpv6").
	fromPort?: null | float64 @go(FromPort,*float64)

	// ID of the security group rule.
	id?: null | string @go(ID,*string)

	// List of IPv6 CIDR blocks. Cannot be specified with source_security_group_id or self.
	ipv6CidrBlocks?: [...null | string] @go(IPv6CidrBlocks,[]*string)

	// List of Prefix List IDs.
	prefixListIds?: [...null | string] @go(PrefixListIds,[]*string)

	// Protocol. If not icmp, icmpv6, tcp, udp, or all use the protocol number
	protocol?: null | string @go(Protocol,*string)

	// Security group to apply this rule to.
	securityGroupId?: null | string @go(SecurityGroupID,*string)

	// If the aws_security_group_rule resource has a single source or destination then this is the AWS Security Group Rule resource ID. Otherwise it is empty.
	securityGroupRuleId?: null | string @go(SecurityGroupRuleID,*string)

	// Whether the security group itself will be added as a source to this ingress rule. Cannot be specified with cidr_blocks, ipv6_cidr_blocks, or source_security_group_id.
	self?: null | bool @go(Self,*bool)

	// Security group id to allow access to/from, depending on the type. Cannot be specified with cidr_blocks, ipv6_cidr_blocks, or self.
	sourceSecurityGroupId?: null | string @go(SourceSecurityGroupID,*string)

	// End port (or ICMP code if protocol is "icmp").
	toPort?: null | float64 @go(ToPort,*float64)

	// Type of rule being created. Valid options are ingress (inbound)
	// or egress (outbound).
	type?: null | string @go(Type,*string)
}

#SecurityGroupRuleParameters_2: {
	// List of CIDR blocks. Cannot be specified with source_security_group_id or self.
	// +kubebuilder:validation:Optional
	cidrBlocks?: [...null | string] @go(CidrBlocks,[]*string)

	// Description of the rule.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Start port (or ICMP type number if protocol is "icmp" or "icmpv6").
	// +kubebuilder:validation:Optional
	fromPort?: null | float64 @go(FromPort,*float64)

	// List of IPv6 CIDR blocks. Cannot be specified with source_security_group_id or self.
	// +kubebuilder:validation:Optional
	ipv6CidrBlocks?: [...null | string] @go(IPv6CidrBlocks,[]*string)

	// References to ManagedPrefixList in ec2 to populate prefixListIds.
	// +kubebuilder:validation:Optional
	prefixListIdRefs?: [...v1.#Reference] @go(PrefixListIDRefs,[]v1.Reference)

	// Selector for a list of ManagedPrefixList in ec2 to populate prefixListIds.
	// +kubebuilder:validation:Optional
	prefixListIdSelector?: null | v1.#Selector @go(PrefixListIDSelector,*v1.Selector)

	// List of Prefix List IDs.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.ManagedPrefixList
	// +crossplane:generate:reference:refFieldName=PrefixListIDRefs
	// +crossplane:generate:reference:selectorFieldName=PrefixListIDSelector
	// +kubebuilder:validation:Optional
	prefixListIds?: [...null | string] @go(PrefixListIds,[]*string)

	// Protocol. If not icmp, icmpv6, tcp, udp, or all use the protocol number
	// +kubebuilder:validation:Optional
	protocol?: null | string @go(Protocol,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Security group to apply this rule to.
	// +crossplane:generate:reference:type=SecurityGroup
	// +kubebuilder:validation:Optional
	securityGroupId?: null | string @go(SecurityGroupID,*string)

	// Reference to a SecurityGroup to populate securityGroupId.
	// +kubebuilder:validation:Optional
	securityGroupIdRef?: null | v1.#Reference @go(SecurityGroupIDRef,*v1.Reference)

	// Selector for a SecurityGroup to populate securityGroupId.
	// +kubebuilder:validation:Optional
	securityGroupIdSelector?: null | v1.#Selector @go(SecurityGroupIDSelector,*v1.Selector)

	// Whether the security group itself will be added as a source to this ingress rule. Cannot be specified with cidr_blocks, ipv6_cidr_blocks, or source_security_group_id.
	// +kubebuilder:validation:Optional
	self?: null | bool @go(Self,*bool)

	// Security group id to allow access to/from, depending on the type. Cannot be specified with cidr_blocks, ipv6_cidr_blocks, or self.
	// +crossplane:generate:reference:type=SecurityGroup
	// +kubebuilder:validation:Optional
	sourceSecurityGroupId?: null | string @go(SourceSecurityGroupID,*string)

	// Reference to a SecurityGroup to populate sourceSecurityGroupId.
	// +kubebuilder:validation:Optional
	sourceSecurityGroupIdRef?: null | v1.#Reference @go(SourceSecurityGroupIDRef,*v1.Reference)

	// Selector for a SecurityGroup to populate sourceSecurityGroupId.
	// +kubebuilder:validation:Optional
	sourceSecurityGroupIdSelector?: null | v1.#Selector @go(SourceSecurityGroupIDSelector,*v1.Selector)

	// End port (or ICMP code if protocol is "icmp").
	// +kubebuilder:validation:Optional
	toPort?: null | float64 @go(ToPort,*float64)

	// Type of rule being created. Valid options are ingress (inbound)
	// or egress (outbound).
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

// SecurityGroupRuleSpec defines the desired state of SecurityGroupRule
#SecurityGroupRuleSpec: {
	v1.#ResourceSpec
	forProvider: #SecurityGroupRuleParameters_2 @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #SecurityGroupRuleInitParameters_2 @go(InitProvider)
}

// SecurityGroupRuleStatus defines the observed state of SecurityGroupRule.
#SecurityGroupRuleStatus: {
	v1.#ResourceStatus
	atProvider?: #SecurityGroupRuleObservation_2 @go(AtProvider)
}

// SecurityGroupRule is the Schema for the SecurityGroupRules API. Provides an security group rule resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#SecurityGroupRule: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.fromPort) || (has(self.initProvider) && has(self.initProvider.fromPort))",message="spec.forProvider.fromPort is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.protocol) || (has(self.initProvider) && has(self.initProvider.protocol))",message="spec.forProvider.protocol is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.toPort) || (has(self.initProvider) && has(self.initProvider.toPort))",message="spec.forProvider.toPort is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	spec:    #SecurityGroupRuleSpec   @go(Spec)
	status?: #SecurityGroupRuleStatus @go(Status)
}

// SecurityGroupRuleList contains a list of SecurityGroupRules
#SecurityGroupRuleList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#SecurityGroupRule] @go(Items,[]SecurityGroupRule)
}
