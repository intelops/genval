// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/ec2/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#NATGatewayInitParameters_2: {
	// Connectivity type for the gateway. Valid values are private and public. Defaults to public.
	connectivityType?: null | string @go(ConnectivityType,*string)

	// The private IPv4 address to assign to the NAT gateway. If you don't provide an address, a private IPv4 address will be automatically assigned.
	privateIp?: null | string @go(PrivateIP,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#NATGatewayObservation_2: {
	// The Allocation ID of the Elastic IP address for the gateway. Required for connectivity_type of public.
	allocationId?: null | string @go(AllocationID,*string)

	// The association ID of the Elastic IP address that's associated with the NAT gateway. Only available when connectivity_type is public.
	associationId?: null | string @go(AssociationID,*string)

	// Connectivity type for the gateway. Valid values are private and public. Defaults to public.
	connectivityType?: null | string @go(ConnectivityType,*string)

	// The ID of the NAT Gateway.
	id?: null | string @go(ID,*string)

	// The ID of the network interface associated with the NAT gateway.
	networkInterfaceId?: null | string @go(NetworkInterfaceID,*string)

	// The private IPv4 address to assign to the NAT gateway. If you don't provide an address, a private IPv4 address will be automatically assigned.
	privateIp?: null | string @go(PrivateIP,*string)

	// The Elastic IP address associated with the NAT gateway.
	publicIp?: null | string @go(PublicIP,*string)

	// The Subnet ID of the subnet in which to place the gateway.
	subnetId?: null | string @go(SubnetID,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#NATGatewayParameters_2: {
	// The Allocation ID of the Elastic IP address for the gateway. Required for connectivity_type of public.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.EIP
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	allocationId?: null | string @go(AllocationID,*string)

	// Reference to a EIP in ec2 to populate allocationId.
	// +kubebuilder:validation:Optional
	allocationIdRef?: null | v1.#Reference @go(AllocationIDRef,*v1.Reference)

	// Selector for a EIP in ec2 to populate allocationId.
	// +kubebuilder:validation:Optional
	allocationIdSelector?: null | v1.#Selector @go(AllocationIDSelector,*v1.Selector)

	// Connectivity type for the gateway. Valid values are private and public. Defaults to public.
	// +kubebuilder:validation:Optional
	connectivityType?: null | string @go(ConnectivityType,*string)

	// The private IPv4 address to assign to the NAT gateway. If you don't provide an address, a private IPv4 address will be automatically assigned.
	// +kubebuilder:validation:Optional
	privateIp?: null | string @go(PrivateIP,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The Subnet ID of the subnet in which to place the gateway.
	// +crossplane:generate:reference:type=Subnet
	// +kubebuilder:validation:Optional
	subnetId?: null | string @go(SubnetID,*string)

	// Reference to a Subnet to populate subnetId.
	// +kubebuilder:validation:Optional
	subnetIdRef?: null | v1.#Reference @go(SubnetIDRef,*v1.Reference)

	// Selector for a Subnet to populate subnetId.
	// +kubebuilder:validation:Optional
	subnetIdSelector?: null | v1.#Selector @go(SubnetIDSelector,*v1.Selector)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// NATGatewaySpec defines the desired state of NATGateway
#NATGatewaySpec: {
	v1.#ResourceSpec
	forProvider: #NATGatewayParameters_2 @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #NATGatewayInitParameters_2 @go(InitProvider)
}

// NATGatewayStatus defines the observed state of NATGateway.
#NATGatewayStatus: {
	v1.#ResourceStatus
	atProvider?: #NATGatewayObservation_2 @go(AtProvider)
}

// NATGateway is the Schema for the NATGateways API. Provides a resource to create a VPC NAT Gateway.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#NATGateway: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec:      #NATGatewaySpec    @go(Spec)
	status?:   #NATGatewayStatus  @go(Status)
}

// NATGatewayList contains a list of NATGateways
#NATGatewayList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#NATGateway] @go(Items,[]NATGateway)
}
