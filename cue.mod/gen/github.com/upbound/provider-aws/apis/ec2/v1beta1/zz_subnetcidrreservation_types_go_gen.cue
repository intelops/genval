// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/ec2/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#SubnetCidrReservationInitParameters: {
	// The CIDR block for the reservation.
	cidrBlock?: null | string @go(CidrBlock,*string)

	// A brief description of the reservation.
	description?: null | string @go(Description,*string)

	// The type of reservation to create. Valid values: explicit, prefix
	reservationType?: null | string @go(ReservationType,*string)
}

#SubnetCidrReservationObservation: {
	// The CIDR block for the reservation.
	cidrBlock?: null | string @go(CidrBlock,*string)

	// A brief description of the reservation.
	description?: null | string @go(Description,*string)

	// ID of the CIDR reservation.
	id?: null | string @go(ID,*string)

	// ID of the AWS account that owns this CIDR reservation.
	ownerId?: null | string @go(OwnerID,*string)

	// The type of reservation to create. Valid values: explicit, prefix
	reservationType?: null | string @go(ReservationType,*string)

	// The ID of the subnet to create the reservation for.
	subnetId?: null | string @go(SubnetID,*string)
}

#SubnetCidrReservationParameters: {
	// The CIDR block for the reservation.
	// +kubebuilder:validation:Optional
	cidrBlock?: null | string @go(CidrBlock,*string)

	// A brief description of the reservation.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The type of reservation to create. Valid values: explicit, prefix
	// +kubebuilder:validation:Optional
	reservationType?: null | string @go(ReservationType,*string)

	// The ID of the subnet to create the reservation for.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.Subnet
	// +kubebuilder:validation:Optional
	subnetId?: null | string @go(SubnetID,*string)

	// Reference to a Subnet in ec2 to populate subnetId.
	// +kubebuilder:validation:Optional
	subnetIdRef?: null | v1.#Reference @go(SubnetIDRef,*v1.Reference)

	// Selector for a Subnet in ec2 to populate subnetId.
	// +kubebuilder:validation:Optional
	subnetIdSelector?: null | v1.#Selector @go(SubnetIDSelector,*v1.Selector)
}

// SubnetCidrReservationSpec defines the desired state of SubnetCidrReservation
#SubnetCidrReservationSpec: {
	v1.#ResourceSpec
	forProvider: #SubnetCidrReservationParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #SubnetCidrReservationInitParameters @go(InitProvider)
}

// SubnetCidrReservationStatus defines the observed state of SubnetCidrReservation.
#SubnetCidrReservationStatus: {
	v1.#ResourceStatus
	atProvider?: #SubnetCidrReservationObservation @go(AtProvider)
}

// SubnetCidrReservation is the Schema for the SubnetCidrReservations API. Provides a subnet CIDR reservation resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#SubnetCidrReservation: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.cidrBlock) || (has(self.initProvider) && has(self.initProvider.cidrBlock))",message="spec.forProvider.cidrBlock is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.reservationType) || (has(self.initProvider) && has(self.initProvider.reservationType))",message="spec.forProvider.reservationType is a required parameter"
	spec:    #SubnetCidrReservationSpec   @go(Spec)
	status?: #SubnetCidrReservationStatus @go(Status)
}

// SubnetCidrReservationList contains a list of SubnetCidrReservations
#SubnetCidrReservationList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#SubnetCidrReservation] @go(Items,[]SubnetCidrReservation)
}
