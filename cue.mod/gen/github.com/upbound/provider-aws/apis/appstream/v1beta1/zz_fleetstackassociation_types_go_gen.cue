// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/appstream/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#FleetStackAssociationInitParameters: {
}

#FleetStackAssociationObservation: {
	// Name of the fleet.
	fleetName?: null | string @go(FleetName,*string)

	// Unique ID of the appstream stack fleet association, composed of the fleet_name and stack_name separated by a slash (/).
	id?: null | string @go(ID,*string)

	// Name of the stack.
	stackName?: null | string @go(StackName,*string)
}

#FleetStackAssociationParameters: {
	// Name of the fleet.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/appstream/v1beta1.Fleet
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("name",false)
	// +kubebuilder:validation:Optional
	fleetName?: null | string @go(FleetName,*string)

	// Reference to a Fleet in appstream to populate fleetName.
	// +kubebuilder:validation:Optional
	fleetNameRef?: null | v1.#Reference @go(FleetNameRef,*v1.Reference)

	// Selector for a Fleet in appstream to populate fleetName.
	// +kubebuilder:validation:Optional
	fleetNameSelector?: null | v1.#Selector @go(FleetNameSelector,*v1.Selector)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Name of the stack.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/appstream/v1beta1.Stack
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("name",false)
	// +kubebuilder:validation:Optional
	stackName?: null | string @go(StackName,*string)

	// Reference to a Stack in appstream to populate stackName.
	// +kubebuilder:validation:Optional
	stackNameRef?: null | v1.#Reference @go(StackNameRef,*v1.Reference)

	// Selector for a Stack in appstream to populate stackName.
	// +kubebuilder:validation:Optional
	stackNameSelector?: null | v1.#Selector @go(StackNameSelector,*v1.Selector)
}

// FleetStackAssociationSpec defines the desired state of FleetStackAssociation
#FleetStackAssociationSpec: {
	v1.#ResourceSpec
	forProvider: #FleetStackAssociationParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #FleetStackAssociationInitParameters @go(InitProvider)
}

// FleetStackAssociationStatus defines the observed state of FleetStackAssociation.
#FleetStackAssociationStatus: {
	v1.#ResourceStatus
	atProvider?: #FleetStackAssociationObservation @go(AtProvider)
}

// FleetStackAssociation is the Schema for the FleetStackAssociations API. Manages an AppStream Fleet Stack association.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#FleetStackAssociation: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta           @go(ObjectMeta)
	spec:      #FleetStackAssociationSpec   @go(Spec)
	status?:   #FleetStackAssociationStatus @go(Status)
}

// FleetStackAssociationList contains a list of FleetStackAssociations
#FleetStackAssociationList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#FleetStackAssociation] @go(Items,[]FleetStackAssociation)
}
