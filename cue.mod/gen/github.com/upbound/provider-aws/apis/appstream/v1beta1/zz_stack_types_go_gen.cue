// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/appstream/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#AccessEndpointsInitParameters: {
	// Type of the interface endpoint.
	// See the AccessEndpoint AWS API documentation for valid values.
	endpointType?: null | string @go(EndpointType,*string)

	// ID of the VPC in which the interface endpoint is used.
	vpceId?: null | string @go(VpceID,*string)
}

#AccessEndpointsObservation: {
	// Type of the interface endpoint.
	// See the AccessEndpoint AWS API documentation for valid values.
	endpointType?: null | string @go(EndpointType,*string)

	// ID of the VPC in which the interface endpoint is used.
	vpceId?: null | string @go(VpceID,*string)
}

#AccessEndpointsParameters: {
	// Type of the interface endpoint.
	// See the AccessEndpoint AWS API documentation for valid values.
	// +kubebuilder:validation:Optional
	endpointType?: null | string @go(EndpointType,*string)

	// ID of the VPC in which the interface endpoint is used.
	// +kubebuilder:validation:Optional
	vpceId?: null | string @go(VpceID,*string)
}

#ApplicationSettingsInitParameters: {
	// Whether application settings should be persisted.
	enabled?: null | bool @go(Enabled,*bool)

	// Name of the settings group.
	// Required when enabled is true.
	// Can be up to 100 characters.
	settingsGroup?: null | string @go(SettingsGroup,*string)
}

#ApplicationSettingsObservation: {
	// Whether application settings should be persisted.
	enabled?: null | bool @go(Enabled,*bool)

	// Name of the settings group.
	// Required when enabled is true.
	// Can be up to 100 characters.
	settingsGroup?: null | string @go(SettingsGroup,*string)
}

#ApplicationSettingsParameters: {
	// Whether application settings should be persisted.
	// +kubebuilder:validation:Optional
	enabled?: null | bool @go(Enabled,*bool)

	// Name of the settings group.
	// Required when enabled is true.
	// Can be up to 100 characters.
	// +kubebuilder:validation:Optional
	settingsGroup?: null | string @go(SettingsGroup,*string)
}

#StackInitParameters: {
	// Set of configuration blocks defining the interface VPC endpoints. Users of the stack can connect to AppStream 2.0 only through the specified endpoints.
	// See access_endpoints below.
	accessEndpoints?: [...#AccessEndpointsInitParameters] @go(AccessEndpoints,[]AccessEndpointsInitParameters)

	// Settings for application settings persistence.
	// See application_settings below.
	applicationSettings?: [...#ApplicationSettingsInitParameters] @go(ApplicationSettings,[]ApplicationSettingsInitParameters)

	// Description for the AppStream stack.
	description?: null | string @go(Description,*string)

	// Stack name to display.
	displayName?: null | string @go(DisplayName,*string)

	// Domains where AppStream 2.0 streaming sessions can be embedded in an iframe. You must approve the domains that you want to host embedded AppStream 2.0 streaming sessions.
	embedHostDomains?: [...null | string] @go(EmbedHostDomains,[]*string)

	// URL that users are redirected to after they click the Send Feedback link. If no URL is specified, no Send Feedback link is displayed. .
	feedbackUrl?: null | string @go(FeedbackURL,*string)

	// Unique name for the AppStream stack.
	name?: null | string @go(Name,*string)

	// URL that users are redirected to after their streaming session ends.
	redirectUrl?: null | string @go(RedirectURL,*string)

	// Configuration block for the storage connectors to enable.
	// See storage_connectors below.
	storageConnectors?: [...#StorageConnectorsInitParameters] @go(StorageConnectors,[]StorageConnectorsInitParameters)

	// The streaming protocol you want your stack to prefer. This can be UDP or TCP. Currently, UDP is only supported in the Windows native client.
	// See streaming_experience_settings below.
	streamingExperienceSettings?: [...#StreamingExperienceSettingsInitParameters] @go(StreamingExperienceSettings,[]StreamingExperienceSettingsInitParameters)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Configuration block for the actions that are enabled or disabled for users during their streaming sessions. If not provided, these settings are configured automatically by AWS.
	// See user_settings below.
	userSettings?: [...#UserSettingsInitParameters] @go(UserSettings,[]UserSettingsInitParameters)
}

#StackObservation: {
	// Set of configuration blocks defining the interface VPC endpoints. Users of the stack can connect to AppStream 2.0 only through the specified endpoints.
	// See access_endpoints below.
	accessEndpoints?: [...#AccessEndpointsObservation] @go(AccessEndpoints,[]AccessEndpointsObservation)

	// Settings for application settings persistence.
	// See application_settings below.
	applicationSettings?: [...#ApplicationSettingsObservation] @go(ApplicationSettings,[]ApplicationSettingsObservation)

	// ARN of the appstream stack.
	arn?: null | string @go(Arn,*string)

	// Date and time, in UTC and extended RFC 3339 format, when the stack was created.
	createdTime?: null | string @go(CreatedTime,*string)

	// Description for the AppStream stack.
	description?: null | string @go(Description,*string)

	// Stack name to display.
	displayName?: null | string @go(DisplayName,*string)

	// Domains where AppStream 2.0 streaming sessions can be embedded in an iframe. You must approve the domains that you want to host embedded AppStream 2.0 streaming sessions.
	embedHostDomains?: [...null | string] @go(EmbedHostDomains,[]*string)

	// URL that users are redirected to after they click the Send Feedback link. If no URL is specified, no Send Feedback link is displayed. .
	feedbackUrl?: null | string @go(FeedbackURL,*string)

	// Unique ID of the appstream stack.
	id?: null | string @go(ID,*string)

	// Unique name for the AppStream stack.
	name?: null | string @go(Name,*string)

	// URL that users are redirected to after their streaming session ends.
	redirectUrl?: null | string @go(RedirectURL,*string)

	// Configuration block for the storage connectors to enable.
	// See storage_connectors below.
	storageConnectors?: [...#StorageConnectorsObservation] @go(StorageConnectors,[]StorageConnectorsObservation)

	// The streaming protocol you want your stack to prefer. This can be UDP or TCP. Currently, UDP is only supported in the Windows native client.
	// See streaming_experience_settings below.
	streamingExperienceSettings?: [...#StreamingExperienceSettingsObservation] @go(StreamingExperienceSettings,[]StreamingExperienceSettingsObservation)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// Configuration block for the actions that are enabled or disabled for users during their streaming sessions. If not provided, these settings are configured automatically by AWS.
	// See user_settings below.
	userSettings?: [...#UserSettingsObservation] @go(UserSettings,[]UserSettingsObservation)
}

#StackParameters: {
	// Set of configuration blocks defining the interface VPC endpoints. Users of the stack can connect to AppStream 2.0 only through the specified endpoints.
	// See access_endpoints below.
	// +kubebuilder:validation:Optional
	accessEndpoints?: [...#AccessEndpointsParameters] @go(AccessEndpoints,[]AccessEndpointsParameters)

	// Settings for application settings persistence.
	// See application_settings below.
	// +kubebuilder:validation:Optional
	applicationSettings?: [...#ApplicationSettingsParameters] @go(ApplicationSettings,[]ApplicationSettingsParameters)

	// Description for the AppStream stack.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Stack name to display.
	// +kubebuilder:validation:Optional
	displayName?: null | string @go(DisplayName,*string)

	// Domains where AppStream 2.0 streaming sessions can be embedded in an iframe. You must approve the domains that you want to host embedded AppStream 2.0 streaming sessions.
	// +kubebuilder:validation:Optional
	embedHostDomains?: [...null | string] @go(EmbedHostDomains,[]*string)

	// URL that users are redirected to after they click the Send Feedback link. If no URL is specified, no Send Feedback link is displayed. .
	// +kubebuilder:validation:Optional
	feedbackUrl?: null | string @go(FeedbackURL,*string)

	// Unique name for the AppStream stack.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// URL that users are redirected to after their streaming session ends.
	// +kubebuilder:validation:Optional
	redirectUrl?: null | string @go(RedirectURL,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Configuration block for the storage connectors to enable.
	// See storage_connectors below.
	// +kubebuilder:validation:Optional
	storageConnectors?: [...#StorageConnectorsParameters] @go(StorageConnectors,[]StorageConnectorsParameters)

	// The streaming protocol you want your stack to prefer. This can be UDP or TCP. Currently, UDP is only supported in the Windows native client.
	// See streaming_experience_settings below.
	// +kubebuilder:validation:Optional
	streamingExperienceSettings?: [...#StreamingExperienceSettingsParameters] @go(StreamingExperienceSettings,[]StreamingExperienceSettingsParameters)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Configuration block for the actions that are enabled or disabled for users during their streaming sessions. If not provided, these settings are configured automatically by AWS.
	// See user_settings below.
	// +kubebuilder:validation:Optional
	userSettings?: [...#UserSettingsParameters] @go(UserSettings,[]UserSettingsParameters)
}

#StorageConnectorsInitParameters: {
	// Type of storage connector.
	// Valid values are HOMEFOLDERS, GOOGLE_DRIVE, or ONE_DRIVE.
	connectorType?: null | string @go(ConnectorType,*string)

	// Names of the domains for the account.
	domains?: [...null | string] @go(Domains,[]*string)

	// ARN of the storage connector.
	resourceIdentifier?: null | string @go(ResourceIdentifier,*string)
}

#StorageConnectorsObservation: {
	// Type of storage connector.
	// Valid values are HOMEFOLDERS, GOOGLE_DRIVE, or ONE_DRIVE.
	connectorType?: null | string @go(ConnectorType,*string)

	// Names of the domains for the account.
	domains?: [...null | string] @go(Domains,[]*string)

	// ARN of the storage connector.
	resourceIdentifier?: null | string @go(ResourceIdentifier,*string)
}

#StorageConnectorsParameters: {
	// Type of storage connector.
	// Valid values are HOMEFOLDERS, GOOGLE_DRIVE, or ONE_DRIVE.
	// +kubebuilder:validation:Optional
	connectorType?: null | string @go(ConnectorType,*string)

	// Names of the domains for the account.
	// +kubebuilder:validation:Optional
	domains?: [...null | string] @go(Domains,[]*string)

	// ARN of the storage connector.
	// +kubebuilder:validation:Optional
	resourceIdentifier?: null | string @go(ResourceIdentifier,*string)
}

#StreamingExperienceSettingsInitParameters: {
	// The preferred protocol that you want to use while streaming your application.
	// Valid values are TCP and UDP.
	preferredProtocol?: null | string @go(PreferredProtocol,*string)
}

#StreamingExperienceSettingsObservation: {
	// The preferred protocol that you want to use while streaming your application.
	// Valid values are TCP and UDP.
	preferredProtocol?: null | string @go(PreferredProtocol,*string)
}

#StreamingExperienceSettingsParameters: {
	// The preferred protocol that you want to use while streaming your application.
	// Valid values are TCP and UDP.
	// +kubebuilder:validation:Optional
	preferredProtocol?: null | string @go(PreferredProtocol,*string)
}

#UserSettingsInitParameters: {
	// Action that is enabled or disabled.
	// Valid values are CLIPBOARD_COPY_FROM_LOCAL_DEVICE,  CLIPBOARD_COPY_TO_LOCAL_DEVICE, FILE_UPLOAD, FILE_DOWNLOAD, PRINTING_TO_LOCAL_DEVICE, DOMAIN_PASSWORD_SIGNIN, or DOMAIN_SMART_CARD_SIGNIN.
	action?: null | string @go(Action,*string)

	// Whether the action is enabled or disabled.
	// Valid values are ENABLED or DISABLED.
	permission?: null | string @go(Permission,*string)
}

#UserSettingsObservation: {
	// Action that is enabled or disabled.
	// Valid values are CLIPBOARD_COPY_FROM_LOCAL_DEVICE,  CLIPBOARD_COPY_TO_LOCAL_DEVICE, FILE_UPLOAD, FILE_DOWNLOAD, PRINTING_TO_LOCAL_DEVICE, DOMAIN_PASSWORD_SIGNIN, or DOMAIN_SMART_CARD_SIGNIN.
	action?: null | string @go(Action,*string)

	// Whether the action is enabled or disabled.
	// Valid values are ENABLED or DISABLED.
	permission?: null | string @go(Permission,*string)
}

#UserSettingsParameters: {
	// Action that is enabled or disabled.
	// Valid values are CLIPBOARD_COPY_FROM_LOCAL_DEVICE,  CLIPBOARD_COPY_TO_LOCAL_DEVICE, FILE_UPLOAD, FILE_DOWNLOAD, PRINTING_TO_LOCAL_DEVICE, DOMAIN_PASSWORD_SIGNIN, or DOMAIN_SMART_CARD_SIGNIN.
	// +kubebuilder:validation:Optional
	action?: null | string @go(Action,*string)

	// Whether the action is enabled or disabled.
	// Valid values are ENABLED or DISABLED.
	// +kubebuilder:validation:Optional
	permission?: null | string @go(Permission,*string)
}

// StackSpec defines the desired state of Stack
#StackSpec: {
	v1.#ResourceSpec
	forProvider: #StackParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #StackInitParameters @go(InitProvider)
}

// StackStatus defines the observed state of Stack.
#StackStatus: {
	v1.#ResourceStatus
	atProvider?: #StackObservation @go(AtProvider)
}

// Stack is the Schema for the Stacks API. Provides an AppStream stack
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Stack: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	spec:    #StackSpec   @go(Spec)
	status?: #StackStatus @go(Status)
}

// StackList contains a list of Stacks
#StackList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Stack] @go(Items,[]Stack)
}
