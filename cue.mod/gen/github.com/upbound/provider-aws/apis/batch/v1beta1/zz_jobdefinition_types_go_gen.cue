// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/batch/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#EvaluateOnExitInitParameters: {
	// Specifies the action to take if all of the specified conditions are met. The values are not case sensitive. Valid values: RETRY, EXIT.
	action?: null | string @go(Action,*string)

	// A glob pattern to match against the decimal representation of the exit code returned for a job.
	onExitCode?: null | string @go(OnExitCode,*string)

	// A glob pattern to match against the reason returned for a job.
	onReason?: null | string @go(OnReason,*string)

	// A glob pattern to match against the status reason returned for a job.
	onStatusReason?: null | string @go(OnStatusReason,*string)
}

#EvaluateOnExitObservation: {
	// Specifies the action to take if all of the specified conditions are met. The values are not case sensitive. Valid values: RETRY, EXIT.
	action?: null | string @go(Action,*string)

	// A glob pattern to match against the decimal representation of the exit code returned for a job.
	onExitCode?: null | string @go(OnExitCode,*string)

	// A glob pattern to match against the reason returned for a job.
	onReason?: null | string @go(OnReason,*string)

	// A glob pattern to match against the status reason returned for a job.
	onStatusReason?: null | string @go(OnStatusReason,*string)
}

#EvaluateOnExitParameters: {
	// Specifies the action to take if all of the specified conditions are met. The values are not case sensitive. Valid values: RETRY, EXIT.
	// +kubebuilder:validation:Optional
	action?: null | string @go(Action,*string)

	// A glob pattern to match against the decimal representation of the exit code returned for a job.
	// +kubebuilder:validation:Optional
	onExitCode?: null | string @go(OnExitCode,*string)

	// A glob pattern to match against the reason returned for a job.
	// +kubebuilder:validation:Optional
	onReason?: null | string @go(OnReason,*string)

	// A glob pattern to match against the status reason returned for a job.
	// +kubebuilder:validation:Optional
	onStatusReason?: null | string @go(OnStatusReason,*string)
}

#JobDefinitionInitParameters: {
	// A valid container properties
	// provided as a single valid JSON document. This parameter is required if the type parameter is container.
	containerProperties?: null | string @go(ContainerProperties,*string)

	// Specifies the name of the job definition.
	name?: null | string @go(Name,*string)

	// Specifies the parameter substitution placeholders to set in the job definition.
	parameters?: {[string]: null | string} @go(Parameters,map[string]*string)

	// The platform capabilities required by the job definition. If no value is specified, it defaults to EC2. To run the job on Fargate resources, specify FARGATE.
	platformCapabilities?: [...null | string] @go(PlatformCapabilities,[]*string)

	// Specifies whether to propagate the tags from the job definition to the corresponding Amazon ECS task. Default is false.
	propagateTags?: null | bool @go(PropagateTags,*bool)

	// Specifies the retry strategy to use for failed jobs that are submitted with this job definition.
	// Maximum number of retry_strategy is 1.  Defined below.
	retryStrategy?: [...#RetryStrategyInitParameters] @go(RetryStrategy,[]RetryStrategyInitParameters)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Specifies the timeout for jobs so that if a job runs longer, AWS Batch terminates the job. Maximum number of timeout is 1. Defined below.
	timeout?: [...#TimeoutInitParameters] @go(Timeout,[]TimeoutInitParameters)

	// The type of job definition. Must be container.
	type?: null | string @go(Type,*string)
}

#JobDefinitionObservation: {
	// The Amazon Resource Name of the job definition.
	arn?: null | string @go(Arn,*string)

	// A valid container properties
	// provided as a single valid JSON document. This parameter is required if the type parameter is container.
	containerProperties?: null | string @go(ContainerProperties,*string)
	id?:                  null | string @go(ID,*string)

	// Specifies the name of the job definition.
	name?: null | string @go(Name,*string)

	// Specifies the parameter substitution placeholders to set in the job definition.
	parameters?: {[string]: null | string} @go(Parameters,map[string]*string)

	// The platform capabilities required by the job definition. If no value is specified, it defaults to EC2. To run the job on Fargate resources, specify FARGATE.
	platformCapabilities?: [...null | string] @go(PlatformCapabilities,[]*string)

	// Specifies whether to propagate the tags from the job definition to the corresponding Amazon ECS task. Default is false.
	propagateTags?: null | bool @go(PropagateTags,*bool)

	// Specifies the retry strategy to use for failed jobs that are submitted with this job definition.
	// Maximum number of retry_strategy is 1.  Defined below.
	retryStrategy?: [...#RetryStrategyObservation] @go(RetryStrategy,[]RetryStrategyObservation)

	// The revision of the job definition.
	revision?: null | float64 @go(Revision,*float64)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// Specifies the timeout for jobs so that if a job runs longer, AWS Batch terminates the job. Maximum number of timeout is 1. Defined below.
	timeout?: [...#TimeoutObservation] @go(Timeout,[]TimeoutObservation)

	// The type of job definition. Must be container.
	type?: null | string @go(Type,*string)
}

#JobDefinitionParameters: {
	// A valid container properties
	// provided as a single valid JSON document. This parameter is required if the type parameter is container.
	// +kubebuilder:validation:Optional
	containerProperties?: null | string @go(ContainerProperties,*string)

	// Specifies the name of the job definition.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Specifies the parameter substitution placeholders to set in the job definition.
	// +kubebuilder:validation:Optional
	parameters?: {[string]: null | string} @go(Parameters,map[string]*string)

	// The platform capabilities required by the job definition. If no value is specified, it defaults to EC2. To run the job on Fargate resources, specify FARGATE.
	// +kubebuilder:validation:Optional
	platformCapabilities?: [...null | string] @go(PlatformCapabilities,[]*string)

	// Specifies whether to propagate the tags from the job definition to the corresponding Amazon ECS task. Default is false.
	// +kubebuilder:validation:Optional
	propagateTags?: null | bool @go(PropagateTags,*bool)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Specifies the retry strategy to use for failed jobs that are submitted with this job definition.
	// Maximum number of retry_strategy is 1.  Defined below.
	// +kubebuilder:validation:Optional
	retryStrategy?: [...#RetryStrategyParameters] @go(RetryStrategy,[]RetryStrategyParameters)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Specifies the timeout for jobs so that if a job runs longer, AWS Batch terminates the job. Maximum number of timeout is 1. Defined below.
	// +kubebuilder:validation:Optional
	timeout?: [...#TimeoutParameters] @go(Timeout,[]TimeoutParameters)

	// The type of job definition. Must be container.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

#RetryStrategyInitParameters: {
	// The number of times to move a job to the RUNNABLE status. You may specify between 1 and 10 attempts.
	attempts?: null | float64 @go(Attempts,*float64)

	// The evaluate on exit conditions under which the job should be retried or failed. If this parameter is specified, then the attempts parameter must also be specified. You may specify up to 5 configuration blocks.
	evaluateOnExit?: [...#EvaluateOnExitInitParameters] @go(EvaluateOnExit,[]EvaluateOnExitInitParameters)
}

#RetryStrategyObservation: {
	// The number of times to move a job to the RUNNABLE status. You may specify between 1 and 10 attempts.
	attempts?: null | float64 @go(Attempts,*float64)

	// The evaluate on exit conditions under which the job should be retried or failed. If this parameter is specified, then the attempts parameter must also be specified. You may specify up to 5 configuration blocks.
	evaluateOnExit?: [...#EvaluateOnExitObservation] @go(EvaluateOnExit,[]EvaluateOnExitObservation)
}

#RetryStrategyParameters: {
	// The number of times to move a job to the RUNNABLE status. You may specify between 1 and 10 attempts.
	// +kubebuilder:validation:Optional
	attempts?: null | float64 @go(Attempts,*float64)

	// The evaluate on exit conditions under which the job should be retried or failed. If this parameter is specified, then the attempts parameter must also be specified. You may specify up to 5 configuration blocks.
	// +kubebuilder:validation:Optional
	evaluateOnExit?: [...#EvaluateOnExitParameters] @go(EvaluateOnExit,[]EvaluateOnExitParameters)
}

#TimeoutInitParameters: {
	// The time duration in seconds after which AWS Batch terminates your jobs if they have not finished. The minimum value for the timeout is 60 seconds.
	attemptDurationSeconds?: null | float64 @go(AttemptDurationSeconds,*float64)
}

#TimeoutObservation: {
	// The time duration in seconds after which AWS Batch terminates your jobs if they have not finished. The minimum value for the timeout is 60 seconds.
	attemptDurationSeconds?: null | float64 @go(AttemptDurationSeconds,*float64)
}

#TimeoutParameters: {
	// The time duration in seconds after which AWS Batch terminates your jobs if they have not finished. The minimum value for the timeout is 60 seconds.
	// +kubebuilder:validation:Optional
	attemptDurationSeconds?: null | float64 @go(AttemptDurationSeconds,*float64)
}

// JobDefinitionSpec defines the desired state of JobDefinition
#JobDefinitionSpec: {
	v1.#ResourceSpec
	forProvider: #JobDefinitionParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #JobDefinitionInitParameters @go(InitProvider)
}

// JobDefinitionStatus defines the observed state of JobDefinition.
#JobDefinitionStatus: {
	v1.#ResourceStatus
	atProvider?: #JobDefinitionObservation @go(AtProvider)
}

// JobDefinition is the Schema for the JobDefinitions API. Provides a Batch Job Definition resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#JobDefinition: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	spec:    #JobDefinitionSpec   @go(Spec)
	status?: #JobDefinitionStatus @go(Status)
}

// JobDefinitionList contains a list of JobDefinitions
#JobDefinitionList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#JobDefinition] @go(Items,[]JobDefinition)
}
