// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/route53resolver/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#RuleAssociationInitParameters: {
	// A name for the association that you're creating between a resolver rule and a VPC.
	name?: null | string @go(Name,*string)
}

#RuleAssociationObservation: {
	// The ID of the resolver rule association.
	id?: null | string @go(ID,*string)

	// A name for the association that you're creating between a resolver rule and a VPC.
	name?: null | string @go(Name,*string)

	// The ID of the resolver rule that you want to associate with the VPC.
	resolverRuleId?: null | string @go(ResolverRuleID,*string)

	// The ID of the VPC that you want to associate the resolver rule with.
	vpcId?: null | string @go(VPCID,*string)
}

#RuleAssociationParameters: {
	// A name for the association that you're creating between a resolver rule and a VPC.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The ID of the resolver rule that you want to associate with the VPC.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/route53resolver/v1beta1.Rule
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	resolverRuleId?: null | string @go(ResolverRuleID,*string)

	// Reference to a Rule in route53resolver to populate resolverRuleId.
	// +kubebuilder:validation:Optional
	resolverRuleIdRef?: null | v1.#Reference @go(ResolverRuleIDRef,*v1.Reference)

	// Selector for a Rule in route53resolver to populate resolverRuleId.
	// +kubebuilder:validation:Optional
	resolverRuleIdSelector?: null | v1.#Selector @go(ResolverRuleIDSelector,*v1.Selector)

	// The ID of the VPC that you want to associate the resolver rule with.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.VPC
	// +kubebuilder:validation:Optional
	vpcId?: null | string @go(VPCID,*string)

	// Reference to a VPC in ec2 to populate vpcId.
	// +kubebuilder:validation:Optional
	vpcIdRef?: null | v1.#Reference @go(VPCIDRef,*v1.Reference)

	// Selector for a VPC in ec2 to populate vpcId.
	// +kubebuilder:validation:Optional
	vpcIdSelector?: null | v1.#Selector @go(VPCIDSelector,*v1.Selector)
}

// RuleAssociationSpec defines the desired state of RuleAssociation
#RuleAssociationSpec: {
	v1.#ResourceSpec
	forProvider: #RuleAssociationParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #RuleAssociationInitParameters @go(InitProvider)
}

// RuleAssociationStatus defines the observed state of RuleAssociation.
#RuleAssociationStatus: {
	v1.#ResourceStatus
	atProvider?: #RuleAssociationObservation @go(AtProvider)
}

// RuleAssociation is the Schema for the RuleAssociations API. Provides a Route53 Resolver rule association.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#RuleAssociation: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta     @go(ObjectMeta)
	spec:      #RuleAssociationSpec   @go(Spec)
	status?:   #RuleAssociationStatus @go(Status)
}

// RuleAssociationList contains a list of RuleAssociations
#RuleAssociationList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#RuleAssociation] @go(Items,[]RuleAssociation)
}
