// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/route53resolver/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#RuleInitParameters: {
	// DNS queries for this domain name are forwarded to the IP addresses that are specified using target_ip.
	domainName?: null | string @go(DomainName,*string)

	// A friendly name that lets you easily find a rule in the Resolver dashboard in the Route 53 console.
	name?: null | string @go(Name,*string)

	// The rule type. Valid values are FORWARD, SYSTEM and RECURSIVE.
	ruleType?: null | string @go(RuleType,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Configuration block(s) indicating the IPs that you want Resolver to forward DNS queries to (documented below).
	// This argument should only be specified for FORWARD type rules.
	targetIp?: [...#TargetIPInitParameters] @go(TargetIP,[]TargetIPInitParameters)
}

#RuleObservation: {
	// The ARN (Amazon Resource Name) for the resolver rule.
	arn?: null | string @go(Arn,*string)

	// DNS queries for this domain name are forwarded to the IP addresses that are specified using target_ip.
	domainName?: null | string @go(DomainName,*string)

	// The ID of the resolver rule.
	id?: null | string @go(ID,*string)

	// A friendly name that lets you easily find a rule in the Resolver dashboard in the Route 53 console.
	name?: null | string @go(Name,*string)

	// When a rule is shared with another AWS account, the account ID of the account that the rule is shared with.
	ownerId?: null | string @go(OwnerID,*string)

	// The ID of the outbound resolver endpoint that you want to use to route DNS queries to the IP addresses that you specify using target_ip.
	// This argument should only be specified for FORWARD type rules.
	resolverEndpointId?: null | string @go(ResolverEndpointID,*string)

	// The rule type. Valid values are FORWARD, SYSTEM and RECURSIVE.
	ruleType?: null | string @go(RuleType,*string)

	// Whether the rules is shared and, if so, whether the current account is sharing the rule with another account, or another account is sharing the rule with the current account.
	// Values are NOT_SHARED, SHARED_BY_ME or SHARED_WITH_ME
	shareStatus?: null | string @go(ShareStatus,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// Configuration block(s) indicating the IPs that you want Resolver to forward DNS queries to (documented below).
	// This argument should only be specified for FORWARD type rules.
	targetIp?: [...#TargetIPObservation] @go(TargetIP,[]TargetIPObservation)
}

#RuleParameters: {
	// DNS queries for this domain name are forwarded to the IP addresses that are specified using target_ip.
	// +kubebuilder:validation:Optional
	domainName?: null | string @go(DomainName,*string)

	// A friendly name that lets you easily find a rule in the Resolver dashboard in the Route 53 console.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The ID of the outbound resolver endpoint that you want to use to route DNS queries to the IP addresses that you specify using target_ip.
	// This argument should only be specified for FORWARD type rules.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/route53resolver/v1beta1.Endpoint
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	resolverEndpointId?: null | string @go(ResolverEndpointID,*string)

	// Reference to a Endpoint in route53resolver to populate resolverEndpointId.
	// +kubebuilder:validation:Optional
	resolverEndpointIdRef?: null | v1.#Reference @go(ResolverEndpointIDRef,*v1.Reference)

	// Selector for a Endpoint in route53resolver to populate resolverEndpointId.
	// +kubebuilder:validation:Optional
	resolverEndpointIdSelector?: null | v1.#Selector @go(ResolverEndpointIDSelector,*v1.Selector)

	// The rule type. Valid values are FORWARD, SYSTEM and RECURSIVE.
	// +kubebuilder:validation:Optional
	ruleType?: null | string @go(RuleType,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Configuration block(s) indicating the IPs that you want Resolver to forward DNS queries to (documented below).
	// This argument should only be specified for FORWARD type rules.
	// +kubebuilder:validation:Optional
	targetIp?: [...#TargetIPParameters] @go(TargetIP,[]TargetIPParameters)
}

#TargetIPInitParameters: {
	// One IP address that you want to forward DNS queries to. You can specify only IPv4 addresses.
	ip?: null | string @go(IP,*string)

	// The port at ip that you want to forward DNS queries to. Default value is 53
	port?: null | float64 @go(Port,*float64)
}

#TargetIPObservation: {
	// One IP address that you want to forward DNS queries to. You can specify only IPv4 addresses.
	ip?: null | string @go(IP,*string)

	// The port at ip that you want to forward DNS queries to. Default value is 53
	port?: null | float64 @go(Port,*float64)
}

#TargetIPParameters: {
	// One IP address that you want to forward DNS queries to. You can specify only IPv4 addresses.
	// +kubebuilder:validation:Optional
	ip?: null | string @go(IP,*string)

	// The port at ip that you want to forward DNS queries to. Default value is 53
	// +kubebuilder:validation:Optional
	port?: null | float64 @go(Port,*float64)
}

// RuleSpec defines the desired state of Rule
#RuleSpec: {
	v1.#ResourceSpec
	forProvider: #RuleParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #RuleInitParameters @go(InitProvider)
}

// RuleStatus defines the observed state of Rule.
#RuleStatus: {
	v1.#ResourceStatus
	atProvider?: #RuleObservation @go(AtProvider)
}

// Rule is the Schema for the Rules API. Provides a Route53 Resolver rule.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Rule: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.domainName) || (has(self.initProvider) && has(self.initProvider.domainName))",message="spec.forProvider.domainName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.ruleType) || (has(self.initProvider) && has(self.initProvider.ruleType))",message="spec.forProvider.ruleType is a required parameter"
	spec:    #RuleSpec   @go(Spec)
	status?: #RuleStatus @go(Status)
}

// RuleList contains a list of Rules
#RuleList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Rule] @go(Items,[]Rule)
}
