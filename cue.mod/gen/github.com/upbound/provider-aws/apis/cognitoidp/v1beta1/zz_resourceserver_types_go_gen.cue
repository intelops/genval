// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/cognitoidp/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#ResourceServerInitParameters: {
	// An identifier for the resource server.
	identifier?: null | string @go(Identifier,*string)

	// A name for the resource server.
	name?: null | string @go(Name,*string)

	// A list of Authorization Scope.
	scope?: [...#ScopeInitParameters] @go(Scope,[]ScopeInitParameters)
}

#ResourceServerObservation: {
	id?: null | string @go(ID,*string)

	// An identifier for the resource server.
	identifier?: null | string @go(Identifier,*string)

	// A name for the resource server.
	name?: null | string @go(Name,*string)

	// A list of Authorization Scope.
	scope?: [...#ScopeObservation] @go(Scope,[]ScopeObservation)

	// A list of all scopes configured for this resource server in the format identifier/scope_name.
	scopeIdentifiers?: [...null | string] @go(ScopeIdentifiers,[]*string)
	userPoolId?: null | string @go(UserPoolID,*string)
}

#ResourceServerParameters: {
	// An identifier for the resource server.
	// +kubebuilder:validation:Optional
	identifier?: null | string @go(Identifier,*string)

	// A name for the resource server.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// A list of Authorization Scope.
	// +kubebuilder:validation:Optional
	scope?: [...#ScopeParameters] @go(Scope,[]ScopeParameters)

	// +crossplane:generate:reference:type=UserPool
	// +kubebuilder:validation:Optional
	userPoolId?: null | string @go(UserPoolID,*string)

	// Reference to a UserPool to populate userPoolId.
	// +kubebuilder:validation:Optional
	userPoolIdRef?: null | v1.#Reference @go(UserPoolIDRef,*v1.Reference)

	// Selector for a UserPool to populate userPoolId.
	// +kubebuilder:validation:Optional
	userPoolIdSelector?: null | v1.#Selector @go(UserPoolIDSelector,*v1.Selector)
}

#ScopeInitParameters: {
	// The scope description.
	scopeDescription?: null | string @go(ScopeDescription,*string)

	// The scope name.
	scopeName?: null | string @go(ScopeName,*string)
}

#ScopeObservation: {
	// The scope description.
	scopeDescription?: null | string @go(ScopeDescription,*string)

	// The scope name.
	scopeName?: null | string @go(ScopeName,*string)
}

#ScopeParameters: {
	// The scope description.
	// +kubebuilder:validation:Optional
	scopeDescription?: null | string @go(ScopeDescription,*string)

	// The scope name.
	// +kubebuilder:validation:Optional
	scopeName?: null | string @go(ScopeName,*string)
}

// ResourceServerSpec defines the desired state of ResourceServer
#ResourceServerSpec: {
	v1.#ResourceSpec
	forProvider: #ResourceServerParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ResourceServerInitParameters @go(InitProvider)
}

// ResourceServerStatus defines the observed state of ResourceServer.
#ResourceServerStatus: {
	v1.#ResourceStatus
	atProvider?: #ResourceServerObservation @go(AtProvider)
}

// ResourceServer is the Schema for the ResourceServers API. Provides a Cognito Resource Server.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#ResourceServer: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.identifier) || (has(self.initProvider) && has(self.initProvider.identifier))",message="spec.forProvider.identifier is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	spec:    #ResourceServerSpec   @go(Spec)
	status?: #ResourceServerStatus @go(Status)
}

// ResourceServerList contains a list of ResourceServers
#ResourceServerList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#ResourceServer] @go(Items,[]ResourceServer)
}
