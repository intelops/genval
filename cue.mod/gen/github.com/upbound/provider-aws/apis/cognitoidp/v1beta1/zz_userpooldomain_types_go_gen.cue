// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/cognitoidp/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#UserPoolDomainInitParameters: {
	// For custom domains, this is the fully-qualified domain name, such as auth.example.com. For Amazon Cognito prefix domains, this is the prefix alone, such as auth.
	domain?: null | string @go(Domain,*string)
}

#UserPoolDomainObservation: {
	// The AWS account ID for the user pool owner.
	awsAccountId?: null | string @go(AwsAccountID,*string)

	// The ARN of an ISSUED ACM certificate in us-east-1 for a custom domain.
	certificateArn?: null | string @go(CertificateArn,*string)

	// The Amazon CloudFront endpoint (e.g. dpp0gtxikpq3y.cloudfront.net) that you use as the target of the alias that you set up with your Domain Name Service (DNS) provider.
	cloudfrontDistribution?: null | string @go(CloudfrontDistribution,*string)

	// The URL of the CloudFront distribution. This is required to generate the ALIAS aws_route53_record
	cloudfrontDistributionArn?: null | string @go(CloudfrontDistributionArn,*string)

	// The Route 53 hosted zone ID of the CloudFront distribution.
	cloudfrontDistributionZoneId?: null | string @go(CloudfrontDistributionZoneID,*string)

	// For custom domains, this is the fully-qualified domain name, such as auth.example.com. For Amazon Cognito prefix domains, this is the prefix alone, such as auth.
	domain?: null | string @go(Domain,*string)
	id?:     null | string @go(ID,*string)

	// The S3 bucket where the static files for this domain are stored.
	s3Bucket?: null | string @go(S3Bucket,*string)

	// The user pool ID.
	userPoolId?: null | string @go(UserPoolID,*string)

	// The app version.
	version?: null | string @go(Version,*string)
}

#UserPoolDomainParameters: {
	// The ARN of an ISSUED ACM certificate in us-east-1 for a custom domain.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/acm/v1beta1.Certificate
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	certificateArn?: null | string @go(CertificateArn,*string)

	// Reference to a Certificate in acm to populate certificateArn.
	// +kubebuilder:validation:Optional
	certificateArnRef?: null | v1.#Reference @go(CertificateArnRef,*v1.Reference)

	// Selector for a Certificate in acm to populate certificateArn.
	// +kubebuilder:validation:Optional
	certificateArnSelector?: null | v1.#Selector @go(CertificateArnSelector,*v1.Selector)

	// For custom domains, this is the fully-qualified domain name, such as auth.example.com. For Amazon Cognito prefix domains, this is the prefix alone, such as auth.
	// +kubebuilder:validation:Optional
	domain?: null | string @go(Domain,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The user pool ID.
	// +crossplane:generate:reference:type=UserPool
	// +kubebuilder:validation:Optional
	userPoolId?: null | string @go(UserPoolID,*string)

	// Reference to a UserPool to populate userPoolId.
	// +kubebuilder:validation:Optional
	userPoolIdRef?: null | v1.#Reference @go(UserPoolIDRef,*v1.Reference)

	// Selector for a UserPool to populate userPoolId.
	// +kubebuilder:validation:Optional
	userPoolIdSelector?: null | v1.#Selector @go(UserPoolIDSelector,*v1.Selector)
}

// UserPoolDomainSpec defines the desired state of UserPoolDomain
#UserPoolDomainSpec: {
	v1.#ResourceSpec
	forProvider: #UserPoolDomainParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #UserPoolDomainInitParameters @go(InitProvider)
}

// UserPoolDomainStatus defines the observed state of UserPoolDomain.
#UserPoolDomainStatus: {
	v1.#ResourceStatus
	atProvider?: #UserPoolDomainObservation @go(AtProvider)
}

// UserPoolDomain is the Schema for the UserPoolDomains API. Provides a Cognito User Pool Domain resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#UserPoolDomain: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.domain) || (has(self.initProvider) && has(self.initProvider.domain))",message="spec.forProvider.domain is a required parameter"
	spec:    #UserPoolDomainSpec   @go(Spec)
	status?: #UserPoolDomainStatus @go(Status)
}

// UserPoolDomainList contains a list of UserPoolDomains
#UserPoolDomainList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#UserPoolDomain] @go(Items,[]UserPoolDomain)
}
