// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/cognitoidp/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#IdentityProviderInitParameters: {
	// The map of attribute mapping of user pool attributes. AttributeMapping in AWS API documentation
	attributeMapping?: {[string]: null | string} @go(AttributeMapping,map[string]*string)

	// The list of identity providers.
	idpIdentifiers?: [...null | string] @go(IdpIdentifiers,[]*string)

	// The map of identity details, such as access token
	providerDetails?: {[string]: null | string} @go(ProviderDetails,map[string]*string)

	// The provider name
	providerName?: null | string @go(ProviderName,*string)

	// The provider type.  See AWS API for valid values
	providerType?: null | string @go(ProviderType,*string)
}

#IdentityProviderObservation: {
	// The map of attribute mapping of user pool attributes. AttributeMapping in AWS API documentation
	attributeMapping?: {[string]: null | string} @go(AttributeMapping,map[string]*string)
	id?: null | string @go(ID,*string)

	// The list of identity providers.
	idpIdentifiers?: [...null | string] @go(IdpIdentifiers,[]*string)

	// The map of identity details, such as access token
	providerDetails?: {[string]: null | string} @go(ProviderDetails,map[string]*string)

	// The provider name
	providerName?: null | string @go(ProviderName,*string)

	// The provider type.  See AWS API for valid values
	providerType?: null | string @go(ProviderType,*string)

	// The user pool id
	userPoolId?: null | string @go(UserPoolID,*string)
}

#IdentityProviderParameters: {
	// The map of attribute mapping of user pool attributes. AttributeMapping in AWS API documentation
	// +kubebuilder:validation:Optional
	attributeMapping?: {[string]: null | string} @go(AttributeMapping,map[string]*string)

	// The list of identity providers.
	// +kubebuilder:validation:Optional
	idpIdentifiers?: [...null | string] @go(IdpIdentifiers,[]*string)

	// The map of identity details, such as access token
	// +kubebuilder:validation:Optional
	providerDetails?: {[string]: null | string} @go(ProviderDetails,map[string]*string)

	// The provider name
	// +kubebuilder:validation:Optional
	providerName?: null | string @go(ProviderName,*string)

	// The provider type.  See AWS API for valid values
	// +kubebuilder:validation:Optional
	providerType?: null | string @go(ProviderType,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The user pool id
	// +crossplane:generate:reference:type=UserPool
	// +kubebuilder:validation:Optional
	userPoolId?: null | string @go(UserPoolID,*string)

	// Reference to a UserPool to populate userPoolId.
	// +kubebuilder:validation:Optional
	userPoolIdRef?: null | v1.#Reference @go(UserPoolIDRef,*v1.Reference)

	// Selector for a UserPool to populate userPoolId.
	// +kubebuilder:validation:Optional
	userPoolIdSelector?: null | v1.#Selector @go(UserPoolIDSelector,*v1.Selector)
}

// IdentityProviderSpec defines the desired state of IdentityProvider
#IdentityProviderSpec: {
	v1.#ResourceSpec
	forProvider: #IdentityProviderParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #IdentityProviderInitParameters @go(InitProvider)
}

// IdentityProviderStatus defines the observed state of IdentityProvider.
#IdentityProviderStatus: {
	v1.#ResourceStatus
	atProvider?: #IdentityProviderObservation @go(AtProvider)
}

// IdentityProvider is the Schema for the IdentityProviders API. Provides a Cognito User Identity Provider resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#IdentityProvider: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.providerDetails) || (has(self.initProvider) && has(self.initProvider.providerDetails))",message="spec.forProvider.providerDetails is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.providerName) || (has(self.initProvider) && has(self.initProvider.providerName))",message="spec.forProvider.providerName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.providerType) || (has(self.initProvider) && has(self.initProvider.providerType))",message="spec.forProvider.providerType is a required parameter"
	spec:    #IdentityProviderSpec   @go(Spec)
	status?: #IdentityProviderStatus @go(Status)
}

// IdentityProviderList contains a list of IdentityProviders
#IdentityProviderList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#IdentityProvider] @go(Items,[]IdentityProvider)
}
