// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/cognitoidp/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#UserInGroupInitParameters: {
}

#UserInGroupObservation: {
	// The name of the group to which the user is to be added.
	groupName?: null | string @go(GroupName,*string)
	id?:        null | string @go(ID,*string)

	// The user pool ID of the user and group.
	userPoolId?: null | string @go(UserPoolID,*string)

	// The username of the user to be added to the group.
	username?: null | string @go(Username,*string)
}

#UserInGroupParameters: {
	// The name of the group to which the user is to be added.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/cognitoidp/v1beta1.UserGroup
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("name",false)
	// +kubebuilder:validation:Optional
	groupName?: null | string @go(GroupName,*string)

	// Reference to a UserGroup in cognitoidp to populate groupName.
	// +kubebuilder:validation:Optional
	groupNameRef?: null | v1.#Reference @go(GroupNameRef,*v1.Reference)

	// Selector for a UserGroup in cognitoidp to populate groupName.
	// +kubebuilder:validation:Optional
	groupNameSelector?: null | v1.#Selector @go(GroupNameSelector,*v1.Selector)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The user pool ID of the user and group.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/cognitoidp/v1beta1.UserPool
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	userPoolId?: null | string @go(UserPoolID,*string)

	// Reference to a UserPool in cognitoidp to populate userPoolId.
	// +kubebuilder:validation:Optional
	userPoolIdRef?: null | v1.#Reference @go(UserPoolIDRef,*v1.Reference)

	// Selector for a UserPool in cognitoidp to populate userPoolId.
	// +kubebuilder:validation:Optional
	userPoolIdSelector?: null | v1.#Selector @go(UserPoolIDSelector,*v1.Selector)

	// The username of the user to be added to the group.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/cognitoidp/v1beta1.User
	// +kubebuilder:validation:Optional
	username?: null | string @go(Username,*string)

	// Reference to a User in cognitoidp to populate username.
	// +kubebuilder:validation:Optional
	usernameRef?: null | v1.#Reference @go(UsernameRef,*v1.Reference)

	// Selector for a User in cognitoidp to populate username.
	// +kubebuilder:validation:Optional
	usernameSelector?: null | v1.#Selector @go(UsernameSelector,*v1.Selector)
}

// UserInGroupSpec defines the desired state of UserInGroup
#UserInGroupSpec: {
	v1.#ResourceSpec
	forProvider: #UserInGroupParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #UserInGroupInitParameters @go(InitProvider)
}

// UserInGroupStatus defines the observed state of UserInGroup.
#UserInGroupStatus: {
	v1.#ResourceStatus
	atProvider?: #UserInGroupObservation @go(AtProvider)
}

// UserInGroup is the Schema for the UserInGroups API. Adds the specified user to the specified group.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#UserInGroup: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec:      #UserInGroupSpec   @go(Spec)
	status?:   #UserInGroupStatus @go(Status)
}

// UserInGroupList contains a list of UserInGroups
#UserInGroupList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#UserInGroup] @go(Items,[]UserInGroup)
}
