// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/ds/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#SharedDirectoryInitParameters: {
	// Method used when sharing a directory. Valid values are ORGANIZATIONS and HANDSHAKE. Default is HANDSHAKE.
	method?: null | string @go(Method,*string)

	// Identifier for the directory consumer account with whom the directory is to be shared. See below.
	target?: [...#TargetInitParameters] @go(Target,[]TargetInitParameters)
}

#SharedDirectoryObservation: {
	// Identifier of the Managed Microsoft AD directory that you want to share with other accounts.
	directoryId?: null | string @go(DirectoryID,*string)

	// Identifier of the shared directory.
	id?: null | string @go(ID,*string)

	// Method used when sharing a directory. Valid values are ORGANIZATIONS and HANDSHAKE. Default is HANDSHAKE.
	method?: null | string @go(Method,*string)

	// Identifier of the directory that is stored in the directory consumer account that corresponds to the shared directory in the owner account.
	sharedDirectoryId?: null | string @go(SharedDirectoryID,*string)

	// Identifier for the directory consumer account with whom the directory is to be shared. See below.
	target?: [...#TargetObservation] @go(Target,[]TargetObservation)
}

#SharedDirectoryParameters: {
	// Identifier of the Managed Microsoft AD directory that you want to share with other accounts.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ds/v1beta1.Directory
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	directoryId?: null | string @go(DirectoryID,*string)

	// Reference to a Directory in ds to populate directoryId.
	// +kubebuilder:validation:Optional
	directoryIdRef?: null | v1.#Reference @go(DirectoryIDRef,*v1.Reference)

	// Selector for a Directory in ds to populate directoryId.
	// +kubebuilder:validation:Optional
	directoryIdSelector?: null | v1.#Selector @go(DirectoryIDSelector,*v1.Selector)

	// Method used when sharing a directory. Valid values are ORGANIZATIONS and HANDSHAKE. Default is HANDSHAKE.
	// +kubebuilder:validation:Optional
	method?: null | string @go(Method,*string)

	// Message sent by the directory owner to the directory consumer to help the directory consumer administrator determine whether to approve or reject the share invitation.
	// +kubebuilder:validation:Optional
	notesSecretRef?: null | v1.#SecretKeySelector @go(NotesSecretRef,*v1.SecretKeySelector)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Identifier for the directory consumer account with whom the directory is to be shared. See below.
	// +kubebuilder:validation:Optional
	target?: [...#TargetParameters] @go(Target,[]TargetParameters)
}

#TargetInitParameters: {
	// Identifier of the directory consumer account.
	id?: null | string @go(ID,*string)

	// Type of identifier to be used in the id field. Valid value is ACCOUNT. Default is ACCOUNT.
	type?: null | string @go(Type,*string)
}

#TargetObservation: {
	// Identifier of the directory consumer account.
	id?: null | string @go(ID,*string)

	// Type of identifier to be used in the id field. Valid value is ACCOUNT. Default is ACCOUNT.
	type?: null | string @go(Type,*string)
}

#TargetParameters: {
	// Identifier of the directory consumer account.
	// +kubebuilder:validation:Optional
	id?: null | string @go(ID,*string)

	// Type of identifier to be used in the id field. Valid value is ACCOUNT. Default is ACCOUNT.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

// SharedDirectorySpec defines the desired state of SharedDirectory
#SharedDirectorySpec: {
	v1.#ResourceSpec
	forProvider: #SharedDirectoryParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #SharedDirectoryInitParameters @go(InitProvider)
}

// SharedDirectoryStatus defines the observed state of SharedDirectory.
#SharedDirectoryStatus: {
	v1.#ResourceStatus
	atProvider?: #SharedDirectoryObservation @go(AtProvider)
}

// SharedDirectory is the Schema for the SharedDirectorys API. Manages a directory in your account (directory owner) shared with another account (directory consumer).
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#SharedDirectory: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.target) || (has(self.initProvider) && has(self.initProvider.target))",message="spec.forProvider.target is a required parameter"
	spec:    #SharedDirectorySpec   @go(Spec)
	status?: #SharedDirectoryStatus @go(Status)
}

// SharedDirectoryList contains a list of SharedDirectorys
#SharedDirectoryList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#SharedDirectory] @go(Items,[]SharedDirectory)
}
