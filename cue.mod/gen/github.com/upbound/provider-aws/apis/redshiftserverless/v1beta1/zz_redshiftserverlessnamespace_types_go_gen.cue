// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/redshiftserverless/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#RedshiftServerlessNamespaceInitParameters: {
	// The name of the first database created in the namespace.
	dbName?: null | string @go(DBName,*string)

	// The types of logs the namespace can export. Available export types are userlog, connectionlog, and useractivitylog.
	logExports?: [...null | string] @go(LogExports,[]*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#RedshiftServerlessNamespaceObservation: {
	// Amazon Resource Name (ARN) of the Redshift Serverless Namespace.
	arn?: null | string @go(Arn,*string)

	// The name of the first database created in the namespace.
	dbName?: null | string @go(DBName,*string)

	// The Amazon Resource Name (ARN) of the IAM role to set as a default in the namespace. When specifying default_iam_role_arn, it also must be part of iam_roles.
	defaultIamRoleArn?: null | string @go(DefaultIAMRoleArn,*string)

	// A list of IAM roles to associate with the namespace.
	iamRoles?: [...null | string] @go(IAMRoles,[]*string)

	// The Redshift Namespace Name.
	id?: null | string @go(ID,*string)

	// The ARN of the Amazon Web Services Key Management Service key used to encrypt your data.
	kmsKeyId?: null | string @go(KMSKeyID,*string)

	// The types of logs the namespace can export. Available export types are userlog, connectionlog, and useractivitylog.
	logExports?: [...null | string] @go(LogExports,[]*string)

	// The Redshift Namespace ID.
	namespaceId?: null | string @go(NamespaceID,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#RedshiftServerlessNamespaceParameters: {
	// The password of the administrator for the first database created in the namespace.
	// +kubebuilder:validation:Optional
	adminUserPasswordSecretRef?: null | v1.#SecretKeySelector @go(AdminUserPasswordSecretRef,*v1.SecretKeySelector)

	// The username of the administrator for the first database created in the namespace.
	// +kubebuilder:validation:Optional
	adminUsernameSecretRef?: null | v1.#SecretKeySelector @go(AdminUsernameSecretRef,*v1.SecretKeySelector)

	// The name of the first database created in the namespace.
	// +kubebuilder:validation:Optional
	dbName?: null | string @go(DBName,*string)

	// The Amazon Resource Name (ARN) of the IAM role to set as a default in the namespace. When specifying default_iam_role_arn, it also must be part of iam_roles.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	defaultIamRoleArn?: null | string @go(DefaultIAMRoleArn,*string)

	// Reference to a Role in iam to populate defaultIamRoleArn.
	// +kubebuilder:validation:Optional
	defaultIamRoleArnRef?: null | v1.#Reference @go(DefaultIAMRoleArnRef,*v1.Reference)

	// Selector for a Role in iam to populate defaultIamRoleArn.
	// +kubebuilder:validation:Optional
	defaultIamRoleArnSelector?: null | v1.#Selector @go(DefaultIAMRoleArnSelector,*v1.Selector)

	// References to Role in iam to populate iamRoles.
	// +kubebuilder:validation:Optional
	iamRoleRefs?: [...v1.#Reference] @go(IAMRoleRefs,[]v1.Reference)

	// Selector for a list of Role in iam to populate iamRoles.
	// +kubebuilder:validation:Optional
	iamRoleSelector?: null | v1.#Selector @go(IAMRoleSelector,*v1.Selector)

	// A list of IAM roles to associate with the namespace.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:refFieldName=IAMRoleRefs
	// +crossplane:generate:reference:selectorFieldName=IAMRoleSelector
	// +kubebuilder:validation:Optional
	iamRoles?: [...null | string] @go(IAMRoles,[]*string)

	// The ARN of the Amazon Web Services Key Management Service key used to encrypt your data.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/kms/v1beta1.Key
	// +kubebuilder:validation:Optional
	kmsKeyId?: null | string @go(KMSKeyID,*string)

	// Reference to a Key in kms to populate kmsKeyId.
	// +kubebuilder:validation:Optional
	kmsKeyIdRef?: null | v1.#Reference @go(KMSKeyIDRef,*v1.Reference)

	// Selector for a Key in kms to populate kmsKeyId.
	// +kubebuilder:validation:Optional
	kmsKeyIdSelector?: null | v1.#Selector @go(KMSKeyIDSelector,*v1.Selector)

	// The types of logs the namespace can export. Available export types are userlog, connectionlog, and useractivitylog.
	// +kubebuilder:validation:Optional
	logExports?: [...null | string] @go(LogExports,[]*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// RedshiftServerlessNamespaceSpec defines the desired state of RedshiftServerlessNamespace
#RedshiftServerlessNamespaceSpec: {
	v1.#ResourceSpec
	forProvider: #RedshiftServerlessNamespaceParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #RedshiftServerlessNamespaceInitParameters @go(InitProvider)
}

// RedshiftServerlessNamespaceStatus defines the observed state of RedshiftServerlessNamespace.
#RedshiftServerlessNamespaceStatus: {
	v1.#ResourceStatus
	atProvider?: #RedshiftServerlessNamespaceObservation @go(AtProvider)
}

// RedshiftServerlessNamespace is the Schema for the RedshiftServerlessNamespaces API. Provides a Redshift Serverless Namespace resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#RedshiftServerlessNamespace: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta                 @go(ObjectMeta)
	spec:      #RedshiftServerlessNamespaceSpec   @go(Spec)
	status?:   #RedshiftServerlessNamespaceStatus @go(Status)
}

// RedshiftServerlessNamespaceList contains a list of RedshiftServerlessNamespaces
#RedshiftServerlessNamespaceList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#RedshiftServerlessNamespace] @go(Items,[]RedshiftServerlessNamespace)
}
