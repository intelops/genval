// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/redshiftserverless/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#ConfigParameterInitParameters: {
	// The key of the parameter. The options are datestyle, enable_user_activity_logging, query_group, search_path, and max_query_execution_time.
	parameterKey?: null | string @go(ParameterKey,*string)

	// The value of the parameter to set.
	parameterValue?: null | string @go(ParameterValue,*string)
}

#ConfigParameterObservation: {
	// The key of the parameter. The options are datestyle, enable_user_activity_logging, query_group, search_path, and max_query_execution_time.
	parameterKey?: null | string @go(ParameterKey,*string)

	// The value of the parameter to set.
	parameterValue?: null | string @go(ParameterValue,*string)
}

#ConfigParameterParameters: {
	// The key of the parameter. The options are datestyle, enable_user_activity_logging, query_group, search_path, and max_query_execution_time.
	// +kubebuilder:validation:Optional
	parameterKey?: null | string @go(ParameterKey,*string)

	// The value of the parameter to set.
	// +kubebuilder:validation:Optional
	parameterValue?: null | string @go(ParameterValue,*string)
}

#EndpointInitParameters: {
}

#EndpointObservation: {
	// The DNS address of the VPC endpoint.
	address?: null | string @go(Address,*string)

	// The port that Amazon Redshift Serverless listens on.
	port?: null | float64 @go(Port,*float64)

	// The VPC endpoint or the Redshift Serverless workgroup. See VPC Endpoint below.
	vpcEndpoint?: [...#EndpointVPCEndpointObservation] @go(VPCEndpoint,[]EndpointVPCEndpointObservation)
}

#EndpointParameters: {
}

#EndpointVPCEndpointInitParameters: {
}

#EndpointVPCEndpointObservation: {
	// The network interfaces of the endpoint.. See Network Interface below.
	networkInterface?: [...#VPCEndpointNetworkInterfaceObservation] @go(NetworkInterface,[]VPCEndpointNetworkInterfaceObservation)

	// The DNS address of the VPC endpoint.
	vpcEndpointId?: null | string @go(VPCEndpointID,*string)

	// The port that Amazon Redshift Serverless listens on.
	vpcId?: null | string @go(VPCID,*string)
}

#EndpointVPCEndpointParameters: {
}

#VPCEndpointNetworkInterfaceInitParameters: {
}

#VPCEndpointNetworkInterfaceObservation: {
	// The availability Zone.
	availabilityZone?: null | string @go(AvailabilityZone,*string)

	// The unique identifier of the network interface.
	networkInterfaceId?: null | string @go(NetworkInterfaceID,*string)

	// The IPv4 address of the network interface within the subnet.
	privateIpAddress?: null | string @go(PrivateIPAddress,*string)

	// The unique identifier of the subnet.
	subnetId?: null | string @go(SubnetID,*string)
}

#VPCEndpointNetworkInterfaceParameters: {
}

#WorkgroupInitParameters: {
	// The base data warehouse capacity of the workgroup in Redshift Processing Units (RPUs).
	baseCapacity?: null | float64 @go(BaseCapacity,*float64)

	// An array of parameters to set for more control over a serverless database. See Config Parameter below.
	configParameter?: [...#ConfigParameterInitParameters] @go(ConfigParameter,[]ConfigParameterInitParameters)

	// The value that specifies whether to turn on enhanced virtual private cloud (VPC) routing, which forces Amazon Redshift Serverless to route traffic through your VPC instead of over the internet.
	enhancedVpcRouting?: null | bool @go(EnhancedVPCRouting,*bool)

	// The name of the namespace.
	namespaceName?: null | string @go(NamespaceName,*string)

	// A value that specifies whether the workgroup can be accessed from a public network.
	publiclyAccessible?: null | bool @go(PubliclyAccessible,*bool)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#WorkgroupObservation: {
	// Amazon Resource Name (ARN) of the Redshift Serverless Workgroup.
	arn?: null | string @go(Arn,*string)

	// The base data warehouse capacity of the workgroup in Redshift Processing Units (RPUs).
	baseCapacity?: null | float64 @go(BaseCapacity,*float64)

	// An array of parameters to set for more control over a serverless database. See Config Parameter below.
	configParameter?: [...#ConfigParameterObservation] @go(ConfigParameter,[]ConfigParameterObservation)

	// The endpoint that is created from the workgroup. See Endpoint below.
	endpoint?: [...#EndpointObservation] @go(Endpoint,[]EndpointObservation)

	// The value that specifies whether to turn on enhanced virtual private cloud (VPC) routing, which forces Amazon Redshift Serverless to route traffic through your VPC instead of over the internet.
	enhancedVpcRouting?: null | bool @go(EnhancedVPCRouting,*bool)

	// The Redshift Workgroup Name.
	id?: null | string @go(ID,*string)

	// The name of the namespace.
	namespaceName?: null | string @go(NamespaceName,*string)

	// A value that specifies whether the workgroup can be accessed from a public network.
	publiclyAccessible?: null | bool @go(PubliclyAccessible,*bool)

	// An array of security group IDs to associate with the workgroup.
	securityGroupIds?: [...null | string] @go(SecurityGroupIds,[]*string)

	// An array of VPC subnet IDs to associate with the workgroup. When set, must contain at least three subnets spanning three Availability Zones. A minimum number of IP addresses is required and scales with the Base Capacity. For more information, see the following AWS document.
	subnetIds?: [...null | string] @go(SubnetIds,[]*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// The Redshift Workgroup ID.
	workgroupId?: null | string @go(WorkgroupID,*string)
}

#WorkgroupParameters: {
	// The base data warehouse capacity of the workgroup in Redshift Processing Units (RPUs).
	// +kubebuilder:validation:Optional
	baseCapacity?: null | float64 @go(BaseCapacity,*float64)

	// An array of parameters to set for more control over a serverless database. See Config Parameter below.
	// +kubebuilder:validation:Optional
	configParameter?: [...#ConfigParameterParameters] @go(ConfigParameter,[]ConfigParameterParameters)

	// The value that specifies whether to turn on enhanced virtual private cloud (VPC) routing, which forces Amazon Redshift Serverless to route traffic through your VPC instead of over the internet.
	// +kubebuilder:validation:Optional
	enhancedVpcRouting?: null | bool @go(EnhancedVPCRouting,*bool)

	// The name of the namespace.
	// +kubebuilder:validation:Optional
	namespaceName?: null | string @go(NamespaceName,*string)

	// A value that specifies whether the workgroup can be accessed from a public network.
	// +kubebuilder:validation:Optional
	publiclyAccessible?: null | bool @go(PubliclyAccessible,*bool)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// References to SecurityGroup in ec2 to populate securityGroupIds.
	// +kubebuilder:validation:Optional
	securityGroupIdRefs?: [...v1.#Reference] @go(SecurityGroupIDRefs,[]v1.Reference)

	// Selector for a list of SecurityGroup in ec2 to populate securityGroupIds.
	// +kubebuilder:validation:Optional
	securityGroupIdSelector?: null | v1.#Selector @go(SecurityGroupIDSelector,*v1.Selector)

	// An array of security group IDs to associate with the workgroup.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.SecurityGroup
	// +crossplane:generate:reference:refFieldName=SecurityGroupIDRefs
	// +crossplane:generate:reference:selectorFieldName=SecurityGroupIDSelector
	// +kubebuilder:validation:Optional
	securityGroupIds?: [...null | string] @go(SecurityGroupIds,[]*string)

	// References to Subnet in ec2 to populate subnetIds.
	// +kubebuilder:validation:Optional
	subnetIdRefs?: [...v1.#Reference] @go(SubnetIDRefs,[]v1.Reference)

	// Selector for a list of Subnet in ec2 to populate subnetIds.
	// +kubebuilder:validation:Optional
	subnetIdSelector?: null | v1.#Selector @go(SubnetIDSelector,*v1.Selector)

	// An array of VPC subnet IDs to associate with the workgroup. When set, must contain at least three subnets spanning three Availability Zones. A minimum number of IP addresses is required and scales with the Base Capacity. For more information, see the following AWS document.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.Subnet
	// +crossplane:generate:reference:refFieldName=SubnetIDRefs
	// +crossplane:generate:reference:selectorFieldName=SubnetIDSelector
	// +kubebuilder:validation:Optional
	subnetIds?: [...null | string] @go(SubnetIds,[]*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// WorkgroupSpec defines the desired state of Workgroup
#WorkgroupSpec: {
	v1.#ResourceSpec
	forProvider: #WorkgroupParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #WorkgroupInitParameters @go(InitProvider)
}

// WorkgroupStatus defines the observed state of Workgroup.
#WorkgroupStatus: {
	v1.#ResourceStatus
	atProvider?: #WorkgroupObservation @go(AtProvider)
}

// Workgroup is the Schema for the Workgroups API. Provides a Redshift Serverless Workgroup resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Workgroup: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.namespaceName) || (has(self.initProvider) && has(self.initProvider.namespaceName))",message="spec.forProvider.namespaceName is a required parameter"
	spec:    #WorkgroupSpec   @go(Spec)
	status?: #WorkgroupStatus @go(Status)
}

// WorkgroupList contains a list of Workgroups
#WorkgroupList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Workgroup] @go(Items,[]Workgroup)
}
