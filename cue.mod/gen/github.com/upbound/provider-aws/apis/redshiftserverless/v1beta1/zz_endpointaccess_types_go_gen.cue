// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/redshiftserverless/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#EndpointAccessInitParameters: {
	// The name of the workgroup.
	workgroupName?: null | string @go(WorkgroupName,*string)
}

#EndpointAccessObservation: {
	// The DNS address of the VPC endpoint.
	address?: null | string @go(Address,*string)

	// Amazon Resource Name (ARN) of the Redshift Serverless Endpoint Access.
	arn?: null | string @go(Arn,*string)

	// The Redshift Endpoint Access Name.
	id?: null | string @go(ID,*string)

	// The port that Amazon Redshift Serverless listens on.
	port?: null | float64 @go(Port,*float64)

	// An array of VPC subnet IDs to associate with the endpoint.
	subnetIds?: [...null | string] @go(SubnetIds,[]*string)

	// The VPC endpoint or the Redshift Serverless workgroup. See VPC Endpoint below.
	vpcEndpoint?: [...#VPCEndpointObservation] @go(VPCEndpoint,[]VPCEndpointObservation)

	// An array of security group IDs to associate with the workgroup.
	vpcSecurityGroupIds?: [...null | string] @go(VPCSecurityGroupIds,[]*string)

	// The name of the workgroup.
	workgroupName?: null | string @go(WorkgroupName,*string)
}

#EndpointAccessParameters: {
	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// References to Subnet in ec2 to populate subnetIds.
	// +kubebuilder:validation:Optional
	subnetIdRefs?: [...v1.#Reference] @go(SubnetIDRefs,[]v1.Reference)

	// Selector for a list of Subnet in ec2 to populate subnetIds.
	// +kubebuilder:validation:Optional
	subnetIdSelector?: null | v1.#Selector @go(SubnetIDSelector,*v1.Selector)

	// An array of VPC subnet IDs to associate with the endpoint.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.Subnet
	// +crossplane:generate:reference:refFieldName=SubnetIDRefs
	// +crossplane:generate:reference:selectorFieldName=SubnetIDSelector
	// +kubebuilder:validation:Optional
	subnetIds?: [...null | string] @go(SubnetIds,[]*string)

	// References to SecurityGroup in ec2 to populate vpcSecurityGroupIds.
	// +kubebuilder:validation:Optional
	vpcSecurityGroupIdRefs?: [...v1.#Reference] @go(VPCSecurityGroupIDRefs,[]v1.Reference)

	// Selector for a list of SecurityGroup in ec2 to populate vpcSecurityGroupIds.
	// +kubebuilder:validation:Optional
	vpcSecurityGroupIdSelector?: null | v1.#Selector @go(VPCSecurityGroupIDSelector,*v1.Selector)

	// An array of security group IDs to associate with the workgroup.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.SecurityGroup
	// +crossplane:generate:reference:refFieldName=VPCSecurityGroupIDRefs
	// +crossplane:generate:reference:selectorFieldName=VPCSecurityGroupIDSelector
	// +kubebuilder:validation:Optional
	vpcSecurityGroupIds?: [...null | string] @go(VPCSecurityGroupIds,[]*string)

	// The name of the workgroup.
	// +kubebuilder:validation:Optional
	workgroupName?: null | string @go(WorkgroupName,*string)
}

#NetworkInterfaceInitParameters: {
}

#NetworkInterfaceObservation: {
	// The availability Zone.
	availabilityZone?: null | string @go(AvailabilityZone,*string)

	// The unique identifier of the network interface.
	networkInterfaceId?: null | string @go(NetworkInterfaceID,*string)

	// The IPv4 address of the network interface within the subnet.
	privateIpAddress?: null | string @go(PrivateIPAddress,*string)

	// The unique identifier of the subnet.
	subnetId?: null | string @go(SubnetID,*string)
}

#NetworkInterfaceParameters: {
}

#VPCEndpointInitParameters: {
}

#VPCEndpointObservation: {
	// The network interfaces of the endpoint.. See Network Interface below.
	networkInterface?: [...#NetworkInterfaceObservation] @go(NetworkInterface,[]NetworkInterfaceObservation)

	// The DNS address of the VPC endpoint.
	vpcEndpointId?: null | string @go(VPCEndpointID,*string)

	// The port that Amazon Redshift Serverless listens on.
	vpcId?: null | string @go(VPCID,*string)
}

#VPCEndpointParameters: {
}

// EndpointAccessSpec defines the desired state of EndpointAccess
#EndpointAccessSpec: {
	v1.#ResourceSpec
	forProvider: #EndpointAccessParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #EndpointAccessInitParameters @go(InitProvider)
}

// EndpointAccessStatus defines the observed state of EndpointAccess.
#EndpointAccessStatus: {
	v1.#ResourceStatus
	atProvider?: #EndpointAccessObservation @go(AtProvider)
}

// EndpointAccess is the Schema for the EndpointAccesss API. Provides a Redshift Serverless Endpoint Access resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#EndpointAccess: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.workgroupName) || (has(self.initProvider) && has(self.initProvider.workgroupName))",message="spec.forProvider.workgroupName is a required parameter"
	spec:    #EndpointAccessSpec   @go(Spec)
	status?: #EndpointAccessStatus @go(Status)
}

// EndpointAccessList contains a list of EndpointAccesss
#EndpointAccessList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#EndpointAccess] @go(Items,[]EndpointAccess)
}
