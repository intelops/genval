// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/redshiftserverless/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#SnapshotInitParameters: {
	// How long to retain the created snapshot. Default value is -1.
	retentionPeriod?: null | float64 @go(RetentionPeriod,*float64)
}

#SnapshotObservation: {
	// All of the Amazon Web Services accounts that have access to restore a snapshot to a provisioned cluster.
	accountsWithProvisionedRestoreAccess?: [...null | string] @go(AccountsWithProvisionedRestoreAccess,[]*string)

	// All of the Amazon Web Services accounts that have access to restore a snapshot to a namespace.
	accountsWithRestoreAccess?: [...null | string] @go(AccountsWithRestoreAccess,[]*string)

	// The username of the database within a snapshot.
	adminUsername?: null | string @go(AdminUsername,*string)

	// The Amazon Resource Name (ARN) of the snapshot.
	arn?: null | string @go(Arn,*string)

	// The name of the snapshot.
	id?: null | string @go(ID,*string)

	// The unique identifier of the KMS key used to encrypt the snapshot.
	kmsKeyId?: null | string @go(KMSKeyID,*string)

	// The Amazon Resource Name (ARN) of the namespace the snapshot was created from.
	namespaceArn?: null | string @go(NamespaceArn,*string)

	// The namespace to create a snapshot for.
	namespaceName?: null | string @go(NamespaceName,*string)

	// The owner Amazon Web Services; account of the snapshot.
	ownerAccount?: null | string @go(OwnerAccount,*string)

	// How long to retain the created snapshot. Default value is -1.
	retentionPeriod?: null | float64 @go(RetentionPeriod,*float64)
}

#SnapshotParameters: {
	// The namespace to create a snapshot for.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/redshiftserverless/v1beta1.Workgroup
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("namespace_name",false)
	// +kubebuilder:validation:Optional
	namespaceName?: null | string @go(NamespaceName,*string)

	// Reference to a Workgroup in redshiftserverless to populate namespaceName.
	// +kubebuilder:validation:Optional
	namespaceNameRef?: null | v1.#Reference @go(NamespaceNameRef,*v1.Reference)

	// Selector for a Workgroup in redshiftserverless to populate namespaceName.
	// +kubebuilder:validation:Optional
	namespaceNameSelector?: null | v1.#Selector @go(NamespaceNameSelector,*v1.Selector)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// How long to retain the created snapshot. Default value is -1.
	// +kubebuilder:validation:Optional
	retentionPeriod?: null | float64 @go(RetentionPeriod,*float64)
}

// SnapshotSpec defines the desired state of Snapshot
#SnapshotSpec: {
	v1.#ResourceSpec
	forProvider: #SnapshotParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #SnapshotInitParameters @go(InitProvider)
}

// SnapshotStatus defines the observed state of Snapshot.
#SnapshotStatus: {
	v1.#ResourceStatus
	atProvider?: #SnapshotObservation @go(AtProvider)
}

// Snapshot is the Schema for the Snapshots API. Provides a Redshift Serverless Snapshot resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Snapshot: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec:      #SnapshotSpec      @go(Spec)
	status?:   #SnapshotStatus    @go(Status)
}

// SnapshotList contains a list of Snapshots
#SnapshotList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Snapshot] @go(Items,[]Snapshot)
}
