// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/kendra/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#ThesaurusInitParameters: {
	// The description for a thesaurus.
	description?: null | string @go(Description,*string)

	// The name for the thesaurus.
	name?: null | string @go(Name,*string)

	// The S3 path where your thesaurus file sits in S3. Detailed below.
	sourceS3Path?: [...#ThesaurusSourceS3PathInitParameters] @go(SourceS3Path,[]ThesaurusSourceS3PathInitParameters)

	// Key-value map of resource tags. If configured with a provider default_tags configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#ThesaurusObservation: {
	// ARN of the thesaurus.
	arn?: null | string @go(Arn,*string)

	// The description for a thesaurus.
	description?: null | string @go(Description,*string)

	// The unique identifiers of the thesaurus and index separated by a slash (/).
	id?: null | string @go(ID,*string)

	// The identifier of the index for a thesaurus.
	indexId?: null | string @go(IndexID,*string)

	// The name for the thesaurus.
	name?: null | string @go(Name,*string)

	// The IAM (Identity and Access Management) role used to access the thesaurus file in S3.
	roleArn?: null | string @go(RoleArn,*string)

	// The S3 path where your thesaurus file sits in S3. Detailed below.
	sourceS3Path?: [...#ThesaurusSourceS3PathObservation] @go(SourceS3Path,[]ThesaurusSourceS3PathObservation)

	// The current status of the thesaurus.
	status?: null | string @go(Status,*string)

	// Key-value map of resource tags. If configured with a provider default_tags configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// The unique identifiers of the thesaurus and index separated by a slash (/).
	thesaurusId?: null | string @go(ThesaurusID,*string)
}

#ThesaurusParameters: {
	// The description for a thesaurus.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// The identifier of the index for a thesaurus.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/kendra/v1beta1.Index
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	indexId?: null | string @go(IndexID,*string)

	// Reference to a Index in kendra to populate indexId.
	// +kubebuilder:validation:Optional
	indexIdRef?: null | v1.#Reference @go(IndexIDRef,*v1.Reference)

	// Selector for a Index in kendra to populate indexId.
	// +kubebuilder:validation:Optional
	indexIdSelector?: null | v1.#Selector @go(IndexIDSelector,*v1.Selector)

	// The name for the thesaurus.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The IAM (Identity and Access Management) role used to access the thesaurus file in S3.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	roleArn?: null | string @go(RoleArn,*string)

	// Reference to a Role in iam to populate roleArn.
	// +kubebuilder:validation:Optional
	roleArnRef?: null | v1.#Reference @go(RoleArnRef,*v1.Reference)

	// Selector for a Role in iam to populate roleArn.
	// +kubebuilder:validation:Optional
	roleArnSelector?: null | v1.#Selector @go(RoleArnSelector,*v1.Selector)

	// The S3 path where your thesaurus file sits in S3. Detailed below.
	// +kubebuilder:validation:Optional
	sourceS3Path?: [...#ThesaurusSourceS3PathParameters] @go(SourceS3Path,[]ThesaurusSourceS3PathParameters)

	// Key-value map of resource tags. If configured with a provider default_tags configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#ThesaurusSourceS3PathInitParameters: {
}

#ThesaurusSourceS3PathObservation: {
	// The name of the S3 bucket that contains the file.
	bucket?: null | string @go(Bucket,*string)

	// The name of the file.
	key?: null | string @go(Key,*string)
}

#ThesaurusSourceS3PathParameters: {
	// The name of the S3 bucket that contains the file.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/s3/v1beta1.Bucket
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	bucket?: null | string @go(Bucket,*string)

	// Reference to a Bucket in s3 to populate bucket.
	// +kubebuilder:validation:Optional
	bucketRef?: null | v1.#Reference @go(BucketRef,*v1.Reference)

	// Selector for a Bucket in s3 to populate bucket.
	// +kubebuilder:validation:Optional
	bucketSelector?: null | v1.#Selector @go(BucketSelector,*v1.Selector)

	// The name of the file.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/s3/v1beta1.Object
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("key",false)
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)

	// Reference to a Object in s3 to populate key.
	// +kubebuilder:validation:Optional
	keyRef?: null | v1.#Reference @go(KeyRef,*v1.Reference)

	// Selector for a Object in s3 to populate key.
	// +kubebuilder:validation:Optional
	keySelector?: null | v1.#Selector @go(KeySelector,*v1.Selector)
}

// ThesaurusSpec defines the desired state of Thesaurus
#ThesaurusSpec: {
	v1.#ResourceSpec
	forProvider: #ThesaurusParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ThesaurusInitParameters @go(InitProvider)
}

// ThesaurusStatus defines the observed state of Thesaurus.
#ThesaurusStatus: {
	v1.#ResourceStatus
	atProvider?: #ThesaurusObservation @go(AtProvider)
}

// Thesaurus is the Schema for the Thesauruss API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws},path=thesaurus
#Thesaurus: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.sourceS3Path) || (has(self.initProvider) && has(self.initProvider.sourceS3Path))",message="spec.forProvider.sourceS3Path is a required parameter"
	spec:    #ThesaurusSpec   @go(Spec)
	status?: #ThesaurusStatus @go(Status)
}

// ThesaurusList contains a list of Thesauruss
#ThesaurusList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Thesaurus] @go(Items,[]Thesaurus)
}
