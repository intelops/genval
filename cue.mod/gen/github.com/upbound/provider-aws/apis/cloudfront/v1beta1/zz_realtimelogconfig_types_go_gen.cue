// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/cloudfront/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#EndpointInitParameters: {
	// The Amazon Kinesis data stream configuration.
	kinesisStreamConfig?: [...#KinesisStreamConfigInitParameters] @go(KinesisStreamConfig,[]KinesisStreamConfigInitParameters)

	// The type of data stream where real-time log data is sent. The only valid value is Kinesis.
	streamType?: null | string @go(StreamType,*string)
}

#EndpointObservation: {
	// The Amazon Kinesis data stream configuration.
	kinesisStreamConfig?: [...#KinesisStreamConfigObservation] @go(KinesisStreamConfig,[]KinesisStreamConfigObservation)

	// The type of data stream where real-time log data is sent. The only valid value is Kinesis.
	streamType?: null | string @go(StreamType,*string)
}

#EndpointParameters: {
	// The Amazon Kinesis data stream configuration.
	// +kubebuilder:validation:Optional
	kinesisStreamConfig: [...#KinesisStreamConfigParameters] @go(KinesisStreamConfig,[]KinesisStreamConfigParameters)

	// The type of data stream where real-time log data is sent. The only valid value is Kinesis.
	// +kubebuilder:validation:Optional
	streamType?: null | string @go(StreamType,*string)
}

#KinesisStreamConfigInitParameters: {
}

#KinesisStreamConfigObservation: {
	// The ARN of an IAM role that CloudFront can use to send real-time log data to the Kinesis data stream.
	// See the AWS documentation for more information.
	roleArn?: null | string @go(RoleArn,*string)

	// The ARN of the Kinesis data stream.
	streamArn?: null | string @go(StreamArn,*string)
}

#KinesisStreamConfigParameters: {
	// The ARN of an IAM role that CloudFront can use to send real-time log data to the Kinesis data stream.
	// See the AWS documentation for more information.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	roleArn?: null | string @go(RoleArn,*string)

	// Reference to a Role in iam to populate roleArn.
	// +kubebuilder:validation:Optional
	roleArnRef?: null | v1.#Reference @go(RoleArnRef,*v1.Reference)

	// Selector for a Role in iam to populate roleArn.
	// +kubebuilder:validation:Optional
	roleArnSelector?: null | v1.#Selector @go(RoleArnSelector,*v1.Selector)

	// The ARN of the Kinesis data stream.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/kinesis/v1beta1.Stream
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.TerraformID()
	// +kubebuilder:validation:Optional
	streamArn?: null | string @go(StreamArn,*string)

	// Reference to a Stream in kinesis to populate streamArn.
	// +kubebuilder:validation:Optional
	streamArnRef?: null | v1.#Reference @go(StreamArnRef,*v1.Reference)

	// Selector for a Stream in kinesis to populate streamArn.
	// +kubebuilder:validation:Optional
	streamArnSelector?: null | v1.#Selector @go(StreamArnSelector,*v1.Selector)
}

#RealtimeLogConfigInitParameters: {
	// The Amazon Kinesis data streams where real-time log data is sent.
	endpoint?: [...#EndpointInitParameters] @go(Endpoint,[]EndpointInitParameters)

	// The fields that are included in each real-time log record. See the AWS documentation for supported values.
	fields?: [...null | string] @go(Fields,[]*string)

	// The unique name to identify this real-time log configuration.
	name?: null | string @go(Name,*string)

	// The sampling rate for this real-time log configuration. The sampling rate determines the percentage of viewer requests that are represented in the real-time log data. An integer between 1 and 100, inclusive.
	samplingRate?: null | float64 @go(SamplingRate,*float64)
}

#RealtimeLogConfigObservation: {
	// The ARN (Amazon Resource Name) of the CloudFront real-time log configuration.
	arn?: null | string @go(Arn,*string)

	// The Amazon Kinesis data streams where real-time log data is sent.
	endpoint?: [...#EndpointObservation] @go(Endpoint,[]EndpointObservation)

	// The fields that are included in each real-time log record. See the AWS documentation for supported values.
	fields?: [...null | string] @go(Fields,[]*string)

	// The ID of the CloudFront real-time log configuration.
	id?: null | string @go(ID,*string)

	// The unique name to identify this real-time log configuration.
	name?: null | string @go(Name,*string)

	// The sampling rate for this real-time log configuration. The sampling rate determines the percentage of viewer requests that are represented in the real-time log data. An integer between 1 and 100, inclusive.
	samplingRate?: null | float64 @go(SamplingRate,*float64)
}

#RealtimeLogConfigParameters: {
	// The Amazon Kinesis data streams where real-time log data is sent.
	// +kubebuilder:validation:Optional
	endpoint?: [...#EndpointParameters] @go(Endpoint,[]EndpointParameters)

	// The fields that are included in each real-time log record. See the AWS documentation for supported values.
	// +kubebuilder:validation:Optional
	fields?: [...null | string] @go(Fields,[]*string)

	// The unique name to identify this real-time log configuration.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The sampling rate for this real-time log configuration. The sampling rate determines the percentage of viewer requests that are represented in the real-time log data. An integer between 1 and 100, inclusive.
	// +kubebuilder:validation:Optional
	samplingRate?: null | float64 @go(SamplingRate,*float64)
}

// RealtimeLogConfigSpec defines the desired state of RealtimeLogConfig
#RealtimeLogConfigSpec: {
	v1.#ResourceSpec
	forProvider: #RealtimeLogConfigParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #RealtimeLogConfigInitParameters @go(InitProvider)
}

// RealtimeLogConfigStatus defines the observed state of RealtimeLogConfig.
#RealtimeLogConfigStatus: {
	v1.#ResourceStatus
	atProvider?: #RealtimeLogConfigObservation @go(AtProvider)
}

// RealtimeLogConfig is the Schema for the RealtimeLogConfigs API. Provides a CloudFront real-time log configuration resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#RealtimeLogConfig: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.endpoint) || (has(self.initProvider) && has(self.initProvider.endpoint))",message="spec.forProvider.endpoint is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.fields) || (has(self.initProvider) && has(self.initProvider.fields))",message="spec.forProvider.fields is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.samplingRate) || (has(self.initProvider) && has(self.initProvider.samplingRate))",message="spec.forProvider.samplingRate is a required parameter"
	spec:    #RealtimeLogConfigSpec   @go(Spec)
	status?: #RealtimeLogConfigStatus @go(Status)
}

// RealtimeLogConfigList contains a list of RealtimeLogConfigs
#RealtimeLogConfigList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#RealtimeLogConfig] @go(Items,[]RealtimeLogConfig)
}
