// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/cloudfront/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#EncryptionEntitiesInitParameters: {
	items?: [...#EncryptionEntitiesItemsInitParameters] @go(Items,[]EncryptionEntitiesItemsInitParameters)
}

#EncryptionEntitiesItemsInitParameters: {
	// Object that contains an attribute items that contains the list of field patterns in a field-level encryption content type profile specify the fields that you want to be encrypted.
	fieldPatterns?: [...#FieldPatternsInitParameters] @go(FieldPatterns,[]FieldPatternsInitParameters)

	// The provider associated with the public key being used for encryption.
	providerId?: null | string @go(ProviderID,*string)
}

#EncryptionEntitiesItemsObservation: {
	// Object that contains an attribute items that contains the list of field patterns in a field-level encryption content type profile specify the fields that you want to be encrypted.
	fieldPatterns?: [...#FieldPatternsObservation] @go(FieldPatterns,[]FieldPatternsObservation)

	// The provider associated with the public key being used for encryption.
	providerId?: null | string @go(ProviderID,*string)

	// The public key associated with a set of field-level encryption patterns, to be used when encrypting the fields that match the patterns.
	publicKeyId?: null | string @go(PublicKeyID,*string)
}

#EncryptionEntitiesItemsParameters: {
	// Object that contains an attribute items that contains the list of field patterns in a field-level encryption content type profile specify the fields that you want to be encrypted.
	// +kubebuilder:validation:Optional
	fieldPatterns: [...#FieldPatternsParameters] @go(FieldPatterns,[]FieldPatternsParameters)

	// The provider associated with the public key being used for encryption.
	// +kubebuilder:validation:Optional
	providerId?: null | string @go(ProviderID,*string)

	// The public key associated with a set of field-level encryption patterns, to be used when encrypting the fields that match the patterns.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/cloudfront/v1beta1.PublicKey
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	publicKeyId?: null | string @go(PublicKeyID,*string)

	// Reference to a PublicKey in cloudfront to populate publicKeyId.
	// +kubebuilder:validation:Optional
	publicKeyIdRef?: null | v1.#Reference @go(PublicKeyIDRef,*v1.Reference)

	// Selector for a PublicKey in cloudfront to populate publicKeyId.
	// +kubebuilder:validation:Optional
	publicKeyIdSelector?: null | v1.#Selector @go(PublicKeyIDSelector,*v1.Selector)
}

#EncryptionEntitiesObservation: {
	items?: [...#EncryptionEntitiesItemsObservation] @go(Items,[]EncryptionEntitiesItemsObservation)
}

#EncryptionEntitiesParameters: {
	// +kubebuilder:validation:Optional
	items?: [...#EncryptionEntitiesItemsParameters] @go(Items,[]EncryptionEntitiesItemsParameters)
}

#FieldLevelEncryptionProfileInitParameters: {
	// An optional comment about the Field Level Encryption Profile.
	comment?: null | string @go(Comment,*string)

	// The encryption entities config block for field-level encryption profiles that contains an attribute items which includes the encryption key and field pattern specifications.
	encryptionEntities?: [...#EncryptionEntitiesInitParameters] @go(EncryptionEntities,[]EncryptionEntitiesInitParameters)

	// The name of the Field Level Encryption Profile.
	name?: null | string @go(Name,*string)
}

#FieldLevelEncryptionProfileObservation: {
	// Internal value used by CloudFront to allow future updates to the Field Level Encryption Profile.
	callerReference?: null | string @go(CallerReference,*string)

	// An optional comment about the Field Level Encryption Profile.
	comment?: null | string @go(Comment,*string)

	// The encryption entities config block for field-level encryption profiles that contains an attribute items which includes the encryption key and field pattern specifications.
	encryptionEntities?: [...#EncryptionEntitiesObservation] @go(EncryptionEntities,[]EncryptionEntitiesObservation)

	// The current version of the Field Level Encryption Profile. For example: E2QWRUHAPOMQZL.
	etag?: null | string @go(Etag,*string)

	// The identifier for the Field Level Encryption Profile. For example: K3D5EWEUDCCXON.
	id?: null | string @go(ID,*string)

	// The name of the Field Level Encryption Profile.
	name?: null | string @go(Name,*string)
}

#FieldLevelEncryptionProfileParameters: {
	// An optional comment about the Field Level Encryption Profile.
	// +kubebuilder:validation:Optional
	comment?: null | string @go(Comment,*string)

	// The encryption entities config block for field-level encryption profiles that contains an attribute items which includes the encryption key and field pattern specifications.
	// +kubebuilder:validation:Optional
	encryptionEntities?: [...#EncryptionEntitiesParameters] @go(EncryptionEntities,[]EncryptionEntitiesParameters)

	// The name of the Field Level Encryption Profile.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)
}

#FieldPatternsInitParameters: {
	items?: [...null | string] @go(Items,[]*string)
}

#FieldPatternsObservation: {
	items?: [...null | string] @go(Items,[]*string)
}

#FieldPatternsParameters: {
	// +kubebuilder:validation:Optional
	items?: [...null | string] @go(Items,[]*string)
}

// FieldLevelEncryptionProfileSpec defines the desired state of FieldLevelEncryptionProfile
#FieldLevelEncryptionProfileSpec: {
	v1.#ResourceSpec
	forProvider: #FieldLevelEncryptionProfileParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #FieldLevelEncryptionProfileInitParameters @go(InitProvider)
}

// FieldLevelEncryptionProfileStatus defines the observed state of FieldLevelEncryptionProfile.
#FieldLevelEncryptionProfileStatus: {
	v1.#ResourceStatus
	atProvider?: #FieldLevelEncryptionProfileObservation @go(AtProvider)
}

// FieldLevelEncryptionProfile is the Schema for the FieldLevelEncryptionProfiles API. Provides a CloudFront Field-level Encryption Profile resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#FieldLevelEncryptionProfile: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.encryptionEntities) || (has(self.initProvider) && has(self.initProvider.encryptionEntities))",message="spec.forProvider.encryptionEntities is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	spec:    #FieldLevelEncryptionProfileSpec   @go(Spec)
	status?: #FieldLevelEncryptionProfileStatus @go(Status)
}

// FieldLevelEncryptionProfileList contains a list of FieldLevelEncryptionProfiles
#FieldLevelEncryptionProfileList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#FieldLevelEncryptionProfile] @go(Items,[]FieldLevelEncryptionProfile)
}
