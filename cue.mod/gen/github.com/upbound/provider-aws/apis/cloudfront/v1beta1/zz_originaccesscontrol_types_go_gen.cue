// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/cloudfront/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#OriginAccessControlInitParameters: {
	// The description of the Origin Access Control.
	description?: null | string @go(Description,*string)

	// A name that identifies the Origin Access Control.
	name?: null | string @go(Name,*string)

	// The type of origin that this Origin Access Control is for. Valid values are s3, and mediastore.
	originAccessControlOriginType?: null | string @go(OriginAccessControlOriginType,*string)

	// Specifies which requests CloudFront signs. Specify always for the most common use case. Allowed values: always, never, and no-override.
	signingBehavior?: null | string @go(SigningBehavior,*string)

	// Determines how CloudFront signs (authenticates) requests. The only valid value is sigv4.
	signingProtocol?: null | string @go(SigningProtocol,*string)
}

#OriginAccessControlObservation: {
	// The description of the Origin Access Control.
	description?: null | string @go(Description,*string)

	// The current version of this Origin Access Control.
	etag?: null | string @go(Etag,*string)

	// The unique identifier of this Origin Access Control.
	id?: null | string @go(ID,*string)

	// A name that identifies the Origin Access Control.
	name?: null | string @go(Name,*string)

	// The type of origin that this Origin Access Control is for. Valid values are s3, and mediastore.
	originAccessControlOriginType?: null | string @go(OriginAccessControlOriginType,*string)

	// Specifies which requests CloudFront signs. Specify always for the most common use case. Allowed values: always, never, and no-override.
	signingBehavior?: null | string @go(SigningBehavior,*string)

	// Determines how CloudFront signs (authenticates) requests. The only valid value is sigv4.
	signingProtocol?: null | string @go(SigningProtocol,*string)
}

#OriginAccessControlParameters: {
	// The description of the Origin Access Control.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// A name that identifies the Origin Access Control.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The type of origin that this Origin Access Control is for. Valid values are s3, and mediastore.
	// +kubebuilder:validation:Optional
	originAccessControlOriginType?: null | string @go(OriginAccessControlOriginType,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Specifies which requests CloudFront signs. Specify always for the most common use case. Allowed values: always, never, and no-override.
	// +kubebuilder:validation:Optional
	signingBehavior?: null | string @go(SigningBehavior,*string)

	// Determines how CloudFront signs (authenticates) requests. The only valid value is sigv4.
	// +kubebuilder:validation:Optional
	signingProtocol?: null | string @go(SigningProtocol,*string)
}

// OriginAccessControlSpec defines the desired state of OriginAccessControl
#OriginAccessControlSpec: {
	v1.#ResourceSpec
	forProvider: #OriginAccessControlParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #OriginAccessControlInitParameters @go(InitProvider)
}

// OriginAccessControlStatus defines the observed state of OriginAccessControl.
#OriginAccessControlStatus: {
	v1.#ResourceStatus
	atProvider?: #OriginAccessControlObservation @go(AtProvider)
}

// OriginAccessControl is the Schema for the OriginAccessControls API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#OriginAccessControl: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.originAccessControlOriginType) || (has(self.initProvider) && has(self.initProvider.originAccessControlOriginType))",message="spec.forProvider.originAccessControlOriginType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.signingBehavior) || (has(self.initProvider) && has(self.initProvider.signingBehavior))",message="spec.forProvider.signingBehavior is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.signingProtocol) || (has(self.initProvider) && has(self.initProvider.signingProtocol))",message="spec.forProvider.signingProtocol is a required parameter"
	spec:    #OriginAccessControlSpec   @go(Spec)
	status?: #OriginAccessControlStatus @go(Status)
}

// OriginAccessControlList contains a list of OriginAccessControls
#OriginAccessControlList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#OriginAccessControl] @go(Items,[]OriginAccessControl)
}
