// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/redshift/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#UsageLimitInitParameters: {
	// The limit amount. If time-based, this amount is in minutes. If data-based, this amount is in terabytes (TB). The value must be a positive number.
	amount?: null | float64 @go(Amount,*float64)

	// The action that Amazon Redshift takes when the limit is reached. The default is log. Valid values are log, emit-metric, and disable.
	breachAction?: null | string @go(BreachAction,*string)

	// The Amazon Redshift feature that you want to limit. Valid values are spectrum, concurrency-scaling, and cross-region-datasharing.
	featureType?: null | string @go(FeatureType,*string)

	// The type of limit. Depending on the feature type, this can be based on a time duration or data size. If FeatureType is spectrum, then LimitType must be data-scanned. If FeatureType is concurrency-scaling, then LimitType must be time. If FeatureType is cross-region-datasharing, then LimitType must be data-scanned. Valid values are data-scanned, and time.
	limitType?: null | string @go(LimitType,*string)

	// The time period that the amount applies to. A weekly period begins on Sunday. The default is monthly. Valid values are daily, weekly, and monthly.
	period?: null | string @go(Period,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#UsageLimitObservation: {
	// The limit amount. If time-based, this amount is in minutes. If data-based, this amount is in terabytes (TB). The value must be a positive number.
	amount?: null | float64 @go(Amount,*float64)

	// Amazon Resource Name (ARN) of the Redshift Usage Limit.
	arn?: null | string @go(Arn,*string)

	// The action that Amazon Redshift takes when the limit is reached. The default is log. Valid values are log, emit-metric, and disable.
	breachAction?: null | string @go(BreachAction,*string)

	// The identifier of the cluster that you want to limit usage.
	clusterIdentifier?: null | string @go(ClusterIdentifier,*string)

	// The Amazon Redshift feature that you want to limit. Valid values are spectrum, concurrency-scaling, and cross-region-datasharing.
	featureType?: null | string @go(FeatureType,*string)

	// The Redshift Usage Limit ID.
	id?: null | string @go(ID,*string)

	// The type of limit. Depending on the feature type, this can be based on a time duration or data size. If FeatureType is spectrum, then LimitType must be data-scanned. If FeatureType is concurrency-scaling, then LimitType must be time. If FeatureType is cross-region-datasharing, then LimitType must be data-scanned. Valid values are data-scanned, and time.
	limitType?: null | string @go(LimitType,*string)

	// The time period that the amount applies to. A weekly period begins on Sunday. The default is monthly. Valid values are daily, weekly, and monthly.
	period?: null | string @go(Period,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#UsageLimitParameters: {
	// The limit amount. If time-based, this amount is in minutes. If data-based, this amount is in terabytes (TB). The value must be a positive number.
	// +kubebuilder:validation:Optional
	amount?: null | float64 @go(Amount,*float64)

	// The action that Amazon Redshift takes when the limit is reached. The default is log. Valid values are log, emit-metric, and disable.
	// +kubebuilder:validation:Optional
	breachAction?: null | string @go(BreachAction,*string)

	// The identifier of the cluster that you want to limit usage.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/redshift/v1beta1.Cluster
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	clusterIdentifier?: null | string @go(ClusterIdentifier,*string)

	// Reference to a Cluster in redshift to populate clusterIdentifier.
	// +kubebuilder:validation:Optional
	clusterIdentifierRef?: null | v1.#Reference @go(ClusterIdentifierRef,*v1.Reference)

	// Selector for a Cluster in redshift to populate clusterIdentifier.
	// +kubebuilder:validation:Optional
	clusterIdentifierSelector?: null | v1.#Selector @go(ClusterIdentifierSelector,*v1.Selector)

	// The Amazon Redshift feature that you want to limit. Valid values are spectrum, concurrency-scaling, and cross-region-datasharing.
	// +kubebuilder:validation:Optional
	featureType?: null | string @go(FeatureType,*string)

	// The type of limit. Depending on the feature type, this can be based on a time duration or data size. If FeatureType is spectrum, then LimitType must be data-scanned. If FeatureType is concurrency-scaling, then LimitType must be time. If FeatureType is cross-region-datasharing, then LimitType must be data-scanned. Valid values are data-scanned, and time.
	// +kubebuilder:validation:Optional
	limitType?: null | string @go(LimitType,*string)

	// The time period that the amount applies to. A weekly period begins on Sunday. The default is monthly. Valid values are daily, weekly, and monthly.
	// +kubebuilder:validation:Optional
	period?: null | string @go(Period,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// UsageLimitSpec defines the desired state of UsageLimit
#UsageLimitSpec: {
	v1.#ResourceSpec
	forProvider: #UsageLimitParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #UsageLimitInitParameters @go(InitProvider)
}

// UsageLimitStatus defines the observed state of UsageLimit.
#UsageLimitStatus: {
	v1.#ResourceStatus
	atProvider?: #UsageLimitObservation @go(AtProvider)
}

// UsageLimit is the Schema for the UsageLimits API. Provides a Redshift Usage Limit resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#UsageLimit: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.amount) || (has(self.initProvider) && has(self.initProvider.amount))",message="spec.forProvider.amount is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.featureType) || (has(self.initProvider) && has(self.initProvider.featureType))",message="spec.forProvider.featureType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.limitType) || (has(self.initProvider) && has(self.initProvider.limitType))",message="spec.forProvider.limitType is a required parameter"
	spec:    #UsageLimitSpec   @go(Spec)
	status?: #UsageLimitStatus @go(Status)
}

// UsageLimitList contains a list of UsageLimits
#UsageLimitList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#UsageLimit] @go(Items,[]UsageLimit)
}
