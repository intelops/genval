// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/redshift/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#PauseClusterInitParameters: {
	// The identifier of the cluster to be paused.
	clusterIdentifier?: null | string @go(ClusterIdentifier,*string)
}

#PauseClusterObservation: {
	// The identifier of the cluster to be paused.
	clusterIdentifier?: null | string @go(ClusterIdentifier,*string)
}

#PauseClusterParameters: {
	// The identifier of the cluster to be paused.
	// +kubebuilder:validation:Optional
	clusterIdentifier?: null | string @go(ClusterIdentifier,*string)
}

#ResizeClusterInitParameters: {
	// A boolean value indicating whether the resize operation is using the classic resize process. Default: false.
	classic?: null | bool @go(Classic,*bool)

	// The unique identifier for the cluster to resize.
	clusterIdentifier?: null | string @go(ClusterIdentifier,*string)

	// The new cluster type for the specified cluster.
	clusterType?: null | string @go(ClusterType,*string)

	// The new node type for the nodes you are adding.
	nodeType?: null | string @go(NodeType,*string)

	// The new number of nodes for the cluster.
	numberOfNodes?: null | float64 @go(NumberOfNodes,*float64)
}

#ResizeClusterObservation: {
	// A boolean value indicating whether the resize operation is using the classic resize process. Default: false.
	classic?: null | bool @go(Classic,*bool)

	// The unique identifier for the cluster to resize.
	clusterIdentifier?: null | string @go(ClusterIdentifier,*string)

	// The new cluster type for the specified cluster.
	clusterType?: null | string @go(ClusterType,*string)

	// The new node type for the nodes you are adding.
	nodeType?: null | string @go(NodeType,*string)

	// The new number of nodes for the cluster.
	numberOfNodes?: null | float64 @go(NumberOfNodes,*float64)
}

#ResizeClusterParameters: {
	// A boolean value indicating whether the resize operation is using the classic resize process. Default: false.
	// +kubebuilder:validation:Optional
	classic?: null | bool @go(Classic,*bool)

	// The unique identifier for the cluster to resize.
	// +kubebuilder:validation:Optional
	clusterIdentifier?: null | string @go(ClusterIdentifier,*string)

	// The new cluster type for the specified cluster.
	// +kubebuilder:validation:Optional
	clusterType?: null | string @go(ClusterType,*string)

	// The new node type for the nodes you are adding.
	// +kubebuilder:validation:Optional
	nodeType?: null | string @go(NodeType,*string)

	// The new number of nodes for the cluster.
	// +kubebuilder:validation:Optional
	numberOfNodes?: null | float64 @go(NumberOfNodes,*float64)
}

#ResumeClusterInitParameters: {
	// The identifier of the cluster to be resumed.
	clusterIdentifier?: null | string @go(ClusterIdentifier,*string)
}

#ResumeClusterObservation: {
	// The identifier of the cluster to be resumed.
	clusterIdentifier?: null | string @go(ClusterIdentifier,*string)
}

#ResumeClusterParameters: {
	// The identifier of the cluster to be resumed.
	// +kubebuilder:validation:Optional
	clusterIdentifier?: null | string @go(ClusterIdentifier,*string)
}

#ScheduledActionInitParameters: {
	// The description of the scheduled action.
	description?: null | string @go(Description,*string)

	// Whether to enable the scheduled action. Default is true .
	enable?: null | bool @go(Enable,*bool)

	// The end time in UTC when the schedule is active, in UTC RFC3339 format(for example, YYYY-MM-DDTHH:MM:SSZ).
	endTime?: null | string @go(EndTime,*string)

	// The schedule of action. The schedule is defined format of "at expression" or "cron expression", for example at(2016-03-04T17:27:00) or cron(0 10 ? * MON *). See Scheduled Action for more information.
	schedule?: null | string @go(Schedule,*string)

	// The start time in UTC when the schedule is active, in UTC RFC3339 format(for example, YYYY-MM-DDTHH:MM:SSZ).
	startTime?: null | string @go(StartTime,*string)

	// Target action. Documented below.
	targetAction?: [...#TargetActionInitParameters] @go(TargetAction,[]TargetActionInitParameters)
}

#ScheduledActionObservation: {
	// The description of the scheduled action.
	description?: null | string @go(Description,*string)

	// Whether to enable the scheduled action. Default is true .
	enable?: null | bool @go(Enable,*bool)

	// The end time in UTC when the schedule is active, in UTC RFC3339 format(for example, YYYY-MM-DDTHH:MM:SSZ).
	endTime?: null | string @go(EndTime,*string)

	// The IAM role to assume to run the scheduled action.
	iamRole?: null | string @go(IAMRole,*string)

	// The Redshift Scheduled Action name.
	id?: null | string @go(ID,*string)

	// The schedule of action. The schedule is defined format of "at expression" or "cron expression", for example at(2016-03-04T17:27:00) or cron(0 10 ? * MON *). See Scheduled Action for more information.
	schedule?: null | string @go(Schedule,*string)

	// The start time in UTC when the schedule is active, in UTC RFC3339 format(for example, YYYY-MM-DDTHH:MM:SSZ).
	startTime?: null | string @go(StartTime,*string)

	// Target action. Documented below.
	targetAction?: [...#TargetActionObservation] @go(TargetAction,[]TargetActionObservation)
}

#ScheduledActionParameters: {
	// The description of the scheduled action.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Whether to enable the scheduled action. Default is true .
	// +kubebuilder:validation:Optional
	enable?: null | bool @go(Enable,*bool)

	// The end time in UTC when the schedule is active, in UTC RFC3339 format(for example, YYYY-MM-DDTHH:MM:SSZ).
	// +kubebuilder:validation:Optional
	endTime?: null | string @go(EndTime,*string)

	// The IAM role to assume to run the scheduled action.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	iamRole?: null | string @go(IAMRole,*string)

	// Reference to a Role in iam to populate iamRole.
	// +kubebuilder:validation:Optional
	iamRoleRef?: null | v1.#Reference @go(IAMRoleRef,*v1.Reference)

	// Selector for a Role in iam to populate iamRole.
	// +kubebuilder:validation:Optional
	iamRoleSelector?: null | v1.#Selector @go(IAMRoleSelector,*v1.Selector)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The schedule of action. The schedule is defined format of "at expression" or "cron expression", for example at(2016-03-04T17:27:00) or cron(0 10 ? * MON *). See Scheduled Action for more information.
	// +kubebuilder:validation:Optional
	schedule?: null | string @go(Schedule,*string)

	// The start time in UTC when the schedule is active, in UTC RFC3339 format(for example, YYYY-MM-DDTHH:MM:SSZ).
	// +kubebuilder:validation:Optional
	startTime?: null | string @go(StartTime,*string)

	// Target action. Documented below.
	// +kubebuilder:validation:Optional
	targetAction?: [...#TargetActionParameters] @go(TargetAction,[]TargetActionParameters)
}

#TargetActionInitParameters: {
	// An action that runs a PauseCluster API operation. Documented below.
	pauseCluster?: [...#PauseClusterInitParameters] @go(PauseCluster,[]PauseClusterInitParameters)

	// An action that runs a ResizeCluster API operation. Documented below.
	resizeCluster?: [...#ResizeClusterInitParameters] @go(ResizeCluster,[]ResizeClusterInitParameters)

	// An action that runs a ResumeCluster API operation. Documented below.
	resumeCluster?: [...#ResumeClusterInitParameters] @go(ResumeCluster,[]ResumeClusterInitParameters)
}

#TargetActionObservation: {
	// An action that runs a PauseCluster API operation. Documented below.
	pauseCluster?: [...#PauseClusterObservation] @go(PauseCluster,[]PauseClusterObservation)

	// An action that runs a ResizeCluster API operation. Documented below.
	resizeCluster?: [...#ResizeClusterObservation] @go(ResizeCluster,[]ResizeClusterObservation)

	// An action that runs a ResumeCluster API operation. Documented below.
	resumeCluster?: [...#ResumeClusterObservation] @go(ResumeCluster,[]ResumeClusterObservation)
}

#TargetActionParameters: {
	// An action that runs a PauseCluster API operation. Documented below.
	// +kubebuilder:validation:Optional
	pauseCluster?: [...#PauseClusterParameters] @go(PauseCluster,[]PauseClusterParameters)

	// An action that runs a ResizeCluster API operation. Documented below.
	// +kubebuilder:validation:Optional
	resizeCluster?: [...#ResizeClusterParameters] @go(ResizeCluster,[]ResizeClusterParameters)

	// An action that runs a ResumeCluster API operation. Documented below.
	// +kubebuilder:validation:Optional
	resumeCluster?: [...#ResumeClusterParameters] @go(ResumeCluster,[]ResumeClusterParameters)
}

// ScheduledActionSpec defines the desired state of ScheduledAction
#ScheduledActionSpec: {
	v1.#ResourceSpec
	forProvider: #ScheduledActionParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ScheduledActionInitParameters @go(InitProvider)
}

// ScheduledActionStatus defines the observed state of ScheduledAction.
#ScheduledActionStatus: {
	v1.#ResourceStatus
	atProvider?: #ScheduledActionObservation @go(AtProvider)
}

// ScheduledAction is the Schema for the ScheduledActions API. Provides a Redshift Scheduled Action resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#ScheduledAction: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.schedule) || (has(self.initProvider) && has(self.initProvider.schedule))",message="spec.forProvider.schedule is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.targetAction) || (has(self.initProvider) && has(self.initProvider.targetAction))",message="spec.forProvider.targetAction is a required parameter"
	spec:    #ScheduledActionSpec   @go(Spec)
	status?: #ScheduledActionStatus @go(Status)
}

// ScheduledActionList contains a list of ScheduledActions
#ScheduledActionList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#ScheduledAction] @go(Items,[]ScheduledAction)
}
