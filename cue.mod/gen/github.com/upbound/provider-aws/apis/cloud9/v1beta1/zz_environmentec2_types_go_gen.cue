// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/cloud9/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#EnvironmentEC2InitParameters: {
	// The number of minutes until the running instance is shut down after the environment has last been used.
	automaticStopTimeMinutes?: null | float64 @go(AutomaticStopTimeMinutes,*float64)

	// The connection type used for connecting to an Amazon EC2 environment. Valid values are CONNECT_SSH and CONNECT_SSM. For more information please refer AWS documentation for Cloud9.
	connectionType?: null | string @go(ConnectionType,*string)

	// The description of the environment.
	description?: null | string @go(Description,*string)

	// The identifier for the Amazon Machine Image (AMI) that's used to create the EC2 instance. Valid values are
	imageId?: null | string @go(ImageID,*string)

	// The type of instance to connect to the environment, e.g., t2.micro.
	instanceType?: null | string @go(InstanceType,*string)

	// The name of the environment.
	name?: null | string @go(Name,*string)

	// The ARN of the environment owner. This can be ARN of any AWS IAM principal. Defaults to the environment's creator.
	ownerArn?: null | string @go(OwnerArn,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#EnvironmentEC2Observation: {
	// The ARN of the environment.
	arn?: null | string @go(Arn,*string)

	// The number of minutes until the running instance is shut down after the environment has last been used.
	automaticStopTimeMinutes?: null | float64 @go(AutomaticStopTimeMinutes,*float64)

	// The connection type used for connecting to an Amazon EC2 environment. Valid values are CONNECT_SSH and CONNECT_SSM. For more information please refer AWS documentation for Cloud9.
	connectionType?: null | string @go(ConnectionType,*string)

	// The description of the environment.
	description?: null | string @go(Description,*string)

	// The ID of the environment.
	id?: null | string @go(ID,*string)

	// The identifier for the Amazon Machine Image (AMI) that's used to create the EC2 instance. Valid values are
	imageId?: null | string @go(ImageID,*string)

	// The type of instance to connect to the environment, e.g., t2.micro.
	instanceType?: null | string @go(InstanceType,*string)

	// The name of the environment.
	name?: null | string @go(Name,*string)

	// The ARN of the environment owner. This can be ARN of any AWS IAM principal. Defaults to the environment's creator.
	ownerArn?: null | string @go(OwnerArn,*string)

	// The ID of the subnet in Amazon VPC that AWS Cloud9 will use to communicate with the Amazon EC2 instance.
	subnetId?: null | string @go(SubnetID,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// The type of the environment (e.g., ssh or ec2)
	type?: null | string @go(Type,*string)
}

#EnvironmentEC2Parameters: {
	// The number of minutes until the running instance is shut down after the environment has last been used.
	// +kubebuilder:validation:Optional
	automaticStopTimeMinutes?: null | float64 @go(AutomaticStopTimeMinutes,*float64)

	// The connection type used for connecting to an Amazon EC2 environment. Valid values are CONNECT_SSH and CONNECT_SSM. For more information please refer AWS documentation for Cloud9.
	// +kubebuilder:validation:Optional
	connectionType?: null | string @go(ConnectionType,*string)

	// The description of the environment.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// The identifier for the Amazon Machine Image (AMI) that's used to create the EC2 instance. Valid values are
	// +kubebuilder:validation:Optional
	imageId?: null | string @go(ImageID,*string)

	// The type of instance to connect to the environment, e.g., t2.micro.
	// +kubebuilder:validation:Optional
	instanceType?: null | string @go(InstanceType,*string)

	// The name of the environment.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The ARN of the environment owner. This can be ARN of any AWS IAM principal. Defaults to the environment's creator.
	// +kubebuilder:validation:Optional
	ownerArn?: null | string @go(OwnerArn,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The ID of the subnet in Amazon VPC that AWS Cloud9 will use to communicate with the Amazon EC2 instance.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.Subnet
	// +kubebuilder:validation:Optional
	subnetId?: null | string @go(SubnetID,*string)

	// Reference to a Subnet in ec2 to populate subnetId.
	// +kubebuilder:validation:Optional
	subnetIdRef?: null | v1.#Reference @go(SubnetIDRef,*v1.Reference)

	// Selector for a Subnet in ec2 to populate subnetId.
	// +kubebuilder:validation:Optional
	subnetIdSelector?: null | v1.#Selector @go(SubnetIDSelector,*v1.Selector)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// EnvironmentEC2Spec defines the desired state of EnvironmentEC2
#EnvironmentEC2Spec: {
	v1.#ResourceSpec
	forProvider: #EnvironmentEC2Parameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #EnvironmentEC2InitParameters @go(InitProvider)
}

// EnvironmentEC2Status defines the observed state of EnvironmentEC2.
#EnvironmentEC2Status: {
	v1.#ResourceStatus
	atProvider?: #EnvironmentEC2Observation @go(AtProvider)
}

// EnvironmentEC2 is the Schema for the EnvironmentEC2s API. Provides a Cloud9 EC2 Development Environment.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#EnvironmentEC2: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.instanceType) || (has(self.initProvider) && has(self.initProvider.instanceType))",message="spec.forProvider.instanceType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	spec:    #EnvironmentEC2Spec   @go(Spec)
	status?: #EnvironmentEC2Status @go(Status)
}

// EnvironmentEC2List contains a list of EnvironmentEC2s
#EnvironmentEC2List: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#EnvironmentEC2] @go(Items,[]EnvironmentEC2)
}
