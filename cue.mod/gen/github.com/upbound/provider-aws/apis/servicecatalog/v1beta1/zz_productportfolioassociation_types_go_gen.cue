// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/servicecatalog/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#ProductPortfolioAssociationInitParameters: {
	// Language code. Valid values: en (English), jp (Japanese), zh (Chinese). Default value is en.
	acceptLanguage?: null | string @go(AcceptLanguage,*string)

	// Identifier of the source portfolio.
	sourcePortfolioId?: null | string @go(SourcePortfolioID,*string)
}

#ProductPortfolioAssociationObservation: {
	// Language code. Valid values: en (English), jp (Japanese), zh (Chinese). Default value is en.
	acceptLanguage?: null | string @go(AcceptLanguage,*string)

	// Identifier of the association.
	id?: null | string @go(ID,*string)

	// Portfolio identifier.
	portfolioId?: null | string @go(PortfolioID,*string)

	// Product identifier.
	productId?: null | string @go(ProductID,*string)

	// Identifier of the source portfolio.
	sourcePortfolioId?: null | string @go(SourcePortfolioID,*string)
}

#ProductPortfolioAssociationParameters: {
	// Language code. Valid values: en (English), jp (Japanese), zh (Chinese). Default value is en.
	// +kubebuilder:validation:Optional
	acceptLanguage?: null | string @go(AcceptLanguage,*string)

	// Portfolio identifier.
	// +crossplane:generate:reference:type=Portfolio
	// +kubebuilder:validation:Optional
	portfolioId?: null | string @go(PortfolioID,*string)

	// Reference to a Portfolio to populate portfolioId.
	// +kubebuilder:validation:Optional
	portfolioIdRef?: null | v1.#Reference @go(PortfolioIDRef,*v1.Reference)

	// Selector for a Portfolio to populate portfolioId.
	// +kubebuilder:validation:Optional
	portfolioIdSelector?: null | v1.#Selector @go(PortfolioIDSelector,*v1.Selector)

	// Product identifier.
	// +crossplane:generate:reference:type=Product
	// +kubebuilder:validation:Optional
	productId?: null | string @go(ProductID,*string)

	// Reference to a Product to populate productId.
	// +kubebuilder:validation:Optional
	productIdRef?: null | v1.#Reference @go(ProductIDRef,*v1.Reference)

	// Selector for a Product to populate productId.
	// +kubebuilder:validation:Optional
	productIdSelector?: null | v1.#Selector @go(ProductIDSelector,*v1.Selector)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Identifier of the source portfolio.
	// +kubebuilder:validation:Optional
	sourcePortfolioId?: null | string @go(SourcePortfolioID,*string)
}

// ProductPortfolioAssociationSpec defines the desired state of ProductPortfolioAssociation
#ProductPortfolioAssociationSpec: {
	v1.#ResourceSpec
	forProvider: #ProductPortfolioAssociationParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ProductPortfolioAssociationInitParameters @go(InitProvider)
}

// ProductPortfolioAssociationStatus defines the observed state of ProductPortfolioAssociation.
#ProductPortfolioAssociationStatus: {
	v1.#ResourceStatus
	atProvider?: #ProductPortfolioAssociationObservation @go(AtProvider)
}

// ProductPortfolioAssociation is the Schema for the ProductPortfolioAssociations API. Manages a Service Catalog Product Portfolio Association
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#ProductPortfolioAssociation: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.acceptLanguage) || (has(self.initProvider) && has(self.initProvider.acceptLanguage))",message="spec.forProvider.acceptLanguage is a required parameter"
	spec:    #ProductPortfolioAssociationSpec   @go(Spec)
	status?: #ProductPortfolioAssociationStatus @go(Status)
}

// ProductPortfolioAssociationList contains a list of ProductPortfolioAssociations
#ProductPortfolioAssociationList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#ProductPortfolioAssociation] @go(Items,[]ProductPortfolioAssociation)
}
