// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/lambda/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#ProvisionedConcurrencyConfigInitParameters: {
	// Name or Amazon Resource Name (ARN) of the Lambda Function.
	functionName?: null | string @go(FunctionName,*string)

	// Amount of capacity to allocate. Must be greater than or equal to 1.
	provisionedConcurrentExecutions?: null | float64 @go(ProvisionedConcurrentExecutions,*float64)

	// Lambda Function version or Lambda Alias name.
	qualifier?: null | string @go(Qualifier,*string)
}

#ProvisionedConcurrencyConfigObservation: {
	// Name or Amazon Resource Name (ARN) of the Lambda Function.
	functionName?: null | string @go(FunctionName,*string)

	// Lambda Function name and qualifier separated by a colon (:).
	id?: null | string @go(ID,*string)

	// Amount of capacity to allocate. Must be greater than or equal to 1.
	provisionedConcurrentExecutions?: null | float64 @go(ProvisionedConcurrentExecutions,*float64)

	// Lambda Function version or Lambda Alias name.
	qualifier?: null | string @go(Qualifier,*string)
}

#ProvisionedConcurrencyConfigParameters: {
	// Name or Amazon Resource Name (ARN) of the Lambda Function.
	// +kubebuilder:validation:Optional
	functionName?: null | string @go(FunctionName,*string)

	// Amount of capacity to allocate. Must be greater than or equal to 1.
	// +kubebuilder:validation:Optional
	provisionedConcurrentExecutions?: null | float64 @go(ProvisionedConcurrentExecutions,*float64)

	// Lambda Function version or Lambda Alias name.
	// +kubebuilder:validation:Optional
	qualifier?: null | string @go(Qualifier,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)
}

// ProvisionedConcurrencyConfigSpec defines the desired state of ProvisionedConcurrencyConfig
#ProvisionedConcurrencyConfigSpec: {
	v1.#ResourceSpec
	forProvider: #ProvisionedConcurrencyConfigParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ProvisionedConcurrencyConfigInitParameters @go(InitProvider)
}

// ProvisionedConcurrencyConfigStatus defines the observed state of ProvisionedConcurrencyConfig.
#ProvisionedConcurrencyConfigStatus: {
	v1.#ResourceStatus
	atProvider?: #ProvisionedConcurrencyConfigObservation @go(AtProvider)
}

// ProvisionedConcurrencyConfig is the Schema for the ProvisionedConcurrencyConfigs API. Manages a Lambda Provisioned Concurrency Configuration
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#ProvisionedConcurrencyConfig: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.functionName) || (has(self.initProvider) && has(self.initProvider.functionName))",message="spec.forProvider.functionName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.provisionedConcurrentExecutions) || (has(self.initProvider) && has(self.initProvider.provisionedConcurrentExecutions))",message="spec.forProvider.provisionedConcurrentExecutions is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.qualifier) || (has(self.initProvider) && has(self.initProvider.qualifier))",message="spec.forProvider.qualifier is a required parameter"
	spec:    #ProvisionedConcurrencyConfigSpec   @go(Spec)
	status?: #ProvisionedConcurrencyConfigStatus @go(Status)
}

// ProvisionedConcurrencyConfigList contains a list of ProvisionedConcurrencyConfigs
#ProvisionedConcurrencyConfigList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#ProvisionedConcurrencyConfig] @go(Items,[]ProvisionedConcurrencyConfig)
}
