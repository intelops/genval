// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/lambda/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#LayerVersionPermissionInitParameters: {
	// Action, which will be allowed. lambda:GetLayerVersion value is suggested by AWS documantation.
	action?: null | string @go(Action,*string)

	// The name or ARN of the Lambda Layer, which you want to grant access to.
	layerName?: null | string @go(LayerName,*string)

	// An identifier of AWS Organization, which should be able to use your Lambda Layer. principal should be equal to * if organization_id provided.
	organizationId?: null | string @go(OrganizationID,*string)

	// AWS account ID which should be able to use your Lambda Layer. * can be used here, if you want to share your Lambda Layer widely.
	principal?: null | string @go(Principal,*string)

	// The name of Lambda Layer Permission, for example dev-account - human readable note about what is this permission for.
	statementId?: null | string @go(StatementID,*string)

	// Version of Lambda Layer, which you want to grant access to. Note: permissions only apply to a single version of a layer.
	versionNumber?: null | float64 @go(VersionNumber,*float64)
}

#LayerVersionPermissionObservation: {
	// Action, which will be allowed. lambda:GetLayerVersion value is suggested by AWS documantation.
	action?: null | string @go(Action,*string)

	// The layer_name and version_number, separated by a comma (,).
	id?: null | string @go(ID,*string)

	// The name or ARN of the Lambda Layer, which you want to grant access to.
	layerName?: null | string @go(LayerName,*string)

	// An identifier of AWS Organization, which should be able to use your Lambda Layer. principal should be equal to * if organization_id provided.
	organizationId?: null | string @go(OrganizationID,*string)

	// Full Lambda Layer Permission policy.
	policy?: null | string @go(Policy,*string)

	// AWS account ID which should be able to use your Lambda Layer. * can be used here, if you want to share your Lambda Layer widely.
	principal?: null | string @go(Principal,*string)

	// A unique identifier for the current revision of the policy.
	revisionId?: null | string @go(RevisionID,*string)

	// The name of Lambda Layer Permission, for example dev-account - human readable note about what is this permission for.
	statementId?: null | string @go(StatementID,*string)

	// Version of Lambda Layer, which you want to grant access to. Note: permissions only apply to a single version of a layer.
	versionNumber?: null | float64 @go(VersionNumber,*float64)
}

#LayerVersionPermissionParameters: {
	// Action, which will be allowed. lambda:GetLayerVersion value is suggested by AWS documantation.
	// +kubebuilder:validation:Optional
	action?: null | string @go(Action,*string)

	// The name or ARN of the Lambda Layer, which you want to grant access to.
	// +kubebuilder:validation:Optional
	layerName?: null | string @go(LayerName,*string)

	// An identifier of AWS Organization, which should be able to use your Lambda Layer. principal should be equal to * if organization_id provided.
	// +kubebuilder:validation:Optional
	organizationId?: null | string @go(OrganizationID,*string)

	// AWS account ID which should be able to use your Lambda Layer. * can be used here, if you want to share your Lambda Layer widely.
	// +kubebuilder:validation:Optional
	principal?: null | string @go(Principal,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The name of Lambda Layer Permission, for example dev-account - human readable note about what is this permission for.
	// +kubebuilder:validation:Optional
	statementId?: null | string @go(StatementID,*string)

	// Version of Lambda Layer, which you want to grant access to. Note: permissions only apply to a single version of a layer.
	// +kubebuilder:validation:Optional
	versionNumber?: null | float64 @go(VersionNumber,*float64)
}

// LayerVersionPermissionSpec defines the desired state of LayerVersionPermission
#LayerVersionPermissionSpec: {
	v1.#ResourceSpec
	forProvider: #LayerVersionPermissionParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #LayerVersionPermissionInitParameters @go(InitProvider)
}

// LayerVersionPermissionStatus defines the observed state of LayerVersionPermission.
#LayerVersionPermissionStatus: {
	v1.#ResourceStatus
	atProvider?: #LayerVersionPermissionObservation @go(AtProvider)
}

// LayerVersionPermission is the Schema for the LayerVersionPermissions API. Provides a Lambda Layer Version Permission resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#LayerVersionPermission: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.action) || (has(self.initProvider) && has(self.initProvider.action))",message="spec.forProvider.action is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.layerName) || (has(self.initProvider) && has(self.initProvider.layerName))",message="spec.forProvider.layerName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.principal) || (has(self.initProvider) && has(self.initProvider.principal))",message="spec.forProvider.principal is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.statementId) || (has(self.initProvider) && has(self.initProvider.statementId))",message="spec.forProvider.statementId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.versionNumber) || (has(self.initProvider) && has(self.initProvider.versionNumber))",message="spec.forProvider.versionNumber is a required parameter"
	spec:    #LayerVersionPermissionSpec   @go(Spec)
	status?: #LayerVersionPermissionStatus @go(Status)
}

// LayerVersionPermissionList contains a list of LayerVersionPermissions
#LayerVersionPermissionList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#LayerVersionPermission] @go(Items,[]LayerVersionPermission)
}
