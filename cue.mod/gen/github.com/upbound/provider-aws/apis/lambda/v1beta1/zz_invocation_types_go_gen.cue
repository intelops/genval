// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/lambda/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#InvocationInitParameters: {
	// JSON payload to the lambda function.
	input?: null | string @go(Input,*string)

	// Qualifier (i.e., version) of the lambda function. Defaults to $LATEST.
	qualifier?: null | string @go(Qualifier,*string)

	// Map of arbitrary keys and values that, when changed, will trigger a re-invocation.
	triggers?: {[string]: null | string} @go(Triggers,map[string]*string)
}

#InvocationObservation: {
	// Name of the lambda function.
	functionName?: null | string @go(FunctionName,*string)
	id?:           null | string @go(ID,*string)

	// JSON payload to the lambda function.
	input?: null | string @go(Input,*string)

	// Qualifier (i.e., version) of the lambda function. Defaults to $LATEST.
	qualifier?: null | string @go(Qualifier,*string)

	// String result of the lambda function invocation.
	result?: null | string @go(Result,*string)

	// Map of arbitrary keys and values that, when changed, will trigger a re-invocation.
	triggers?: {[string]: null | string} @go(Triggers,map[string]*string)
}

#InvocationParameters: {
	// Name of the lambda function.
	// +crossplane:generate:reference:type=Function
	// +kubebuilder:validation:Optional
	functionName?: null | string @go(FunctionName,*string)

	// Reference to a Function to populate functionName.
	// +kubebuilder:validation:Optional
	functionNameRef?: null | v1.#Reference @go(FunctionNameRef,*v1.Reference)

	// Selector for a Function to populate functionName.
	// +kubebuilder:validation:Optional
	functionNameSelector?: null | v1.#Selector @go(FunctionNameSelector,*v1.Selector)

	// JSON payload to the lambda function.
	// +kubebuilder:validation:Optional
	input?: null | string @go(Input,*string)

	// Qualifier (i.e., version) of the lambda function. Defaults to $LATEST.
	// +kubebuilder:validation:Optional
	qualifier?: null | string @go(Qualifier,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Map of arbitrary keys and values that, when changed, will trigger a re-invocation.
	// +kubebuilder:validation:Optional
	triggers?: {[string]: null | string} @go(Triggers,map[string]*string)
}

// InvocationSpec defines the desired state of Invocation
#InvocationSpec: {
	v1.#ResourceSpec
	forProvider: #InvocationParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #InvocationInitParameters @go(InitProvider)
}

// InvocationStatus defines the observed state of Invocation.
#InvocationStatus: {
	v1.#ResourceStatus
	atProvider?: #InvocationObservation @go(AtProvider)
}

// Invocation is the Schema for the Invocations API. Invoke AWS Lambda Function
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Invocation: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.input) || (has(self.initProvider) && has(self.initProvider.input))",message="spec.forProvider.input is a required parameter"
	spec:    #InvocationSpec   @go(Spec)
	status?: #InvocationStatus @go(Status)
}

// InvocationList contains a list of Invocations
#InvocationList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Invocation] @go(Items,[]Invocation)
}
