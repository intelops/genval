// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/medialive/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#AacSettingsInitParameters: {
	// Average bitrate in bits/second.
	bitrate?: null | float64 @go(Bitrate,*float64)

	// Mono, Stereo, or 5.1 channel layout.
	codingMode?: null | string @go(CodingMode,*string)

	// Set to "broadcasterMixedAd" when input contains pre-mixed main audio + AD (narration) as a stereo pair.
	inputType?: null | string @go(InputType,*string)

	// AAC profile.
	profile?: null | string @go(Profile,*string)

	// The rate control mode.
	rateControlMode?: null | string @go(RateControlMode,*string)

	// Sets LATM/LOAS AAC output for raw containers.
	rawFormat?: null | string @go(RawFormat,*string)

	// Sample rate in Hz.
	sampleRate?: null | float64 @go(SampleRate,*float64)

	// Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw or MPEG-2 Transport Stream containers.
	spec?: null | string @go(Spec,*string)

	// VBR Quality Level - Only used if rateControlMode is VBR.
	vbrQuality?: null | string @go(VbrQuality,*string)
}

#AacSettingsObservation: {
	// Average bitrate in bits/second.
	bitrate?: null | float64 @go(Bitrate,*float64)

	// Mono, Stereo, or 5.1 channel layout.
	codingMode?: null | string @go(CodingMode,*string)

	// Set to "broadcasterMixedAd" when input contains pre-mixed main audio + AD (narration) as a stereo pair.
	inputType?: null | string @go(InputType,*string)

	// AAC profile.
	profile?: null | string @go(Profile,*string)

	// The rate control mode.
	rateControlMode?: null | string @go(RateControlMode,*string)

	// Sets LATM/LOAS AAC output for raw containers.
	rawFormat?: null | string @go(RawFormat,*string)

	// Sample rate in Hz.
	sampleRate?: null | float64 @go(SampleRate,*float64)

	// Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw or MPEG-2 Transport Stream containers.
	spec?: null | string @go(Spec,*string)

	// VBR Quality Level - Only used if rateControlMode is VBR.
	vbrQuality?: null | string @go(VbrQuality,*string)
}

#AacSettingsParameters: {
	// Average bitrate in bits/second.
	// +kubebuilder:validation:Optional
	bitrate?: null | float64 @go(Bitrate,*float64)

	// Mono, Stereo, or 5.1 channel layout.
	// +kubebuilder:validation:Optional
	codingMode?: null | string @go(CodingMode,*string)

	// Set to "broadcasterMixedAd" when input contains pre-mixed main audio + AD (narration) as a stereo pair.
	// +kubebuilder:validation:Optional
	inputType?: null | string @go(InputType,*string)

	// AAC profile.
	// +kubebuilder:validation:Optional
	profile?: null | string @go(Profile,*string)

	// The rate control mode.
	// +kubebuilder:validation:Optional
	rateControlMode?: null | string @go(RateControlMode,*string)

	// Sets LATM/LOAS AAC output for raw containers.
	// +kubebuilder:validation:Optional
	rawFormat?: null | string @go(RawFormat,*string)

	// Sample rate in Hz.
	// +kubebuilder:validation:Optional
	sampleRate?: null | float64 @go(SampleRate,*float64)

	// Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw or MPEG-2 Transport Stream containers.
	// +kubebuilder:validation:Optional
	spec?: null | string @go(Spec,*string)

	// VBR Quality Level - Only used if rateControlMode is VBR.
	// +kubebuilder:validation:Optional
	vbrQuality?: null | string @go(VbrQuality,*string)
}

#Ac3SettingsInitParameters: {
	// Average bitrate in bits/second.
	bitrate?: null | float64 @go(Bitrate,*float64)

	// Specifies the bitstream mode (bsmod) for the emitted AC-3 stream.
	bitstreamMode?: null | string @go(BitstreamMode,*string)

	// Mono, Stereo, or 5.1 channel layout.
	codingMode?: null | string @go(CodingMode,*string)

	// Sets the dialnorm of the output.
	dialnorm?: null | float64 @go(Dialnorm,*float64)

	// If set to filmStandard, adds dynamic range compression signaling to the output bitstream as defined in the Dolby Digital specification.
	drcProfile?: null | string @go(DrcProfile,*string)

	// When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding.
	lfeFilter?: null | string @go(LfeFilter,*string)

	// Metadata control.
	metadataControl?: null | string @go(MetadataControl,*string)
}

#Ac3SettingsObservation: {
	// Average bitrate in bits/second.
	bitrate?: null | float64 @go(Bitrate,*float64)

	// Specifies the bitstream mode (bsmod) for the emitted AC-3 stream.
	bitstreamMode?: null | string @go(BitstreamMode,*string)

	// Mono, Stereo, or 5.1 channel layout.
	codingMode?: null | string @go(CodingMode,*string)

	// Sets the dialnorm of the output.
	dialnorm?: null | float64 @go(Dialnorm,*float64)

	// If set to filmStandard, adds dynamic range compression signaling to the output bitstream as defined in the Dolby Digital specification.
	drcProfile?: null | string @go(DrcProfile,*string)

	// When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding.
	lfeFilter?: null | string @go(LfeFilter,*string)

	// Metadata control.
	metadataControl?: null | string @go(MetadataControl,*string)
}

#Ac3SettingsParameters: {
	// Average bitrate in bits/second.
	// +kubebuilder:validation:Optional
	bitrate?: null | float64 @go(Bitrate,*float64)

	// Specifies the bitstream mode (bsmod) for the emitted AC-3 stream.
	// +kubebuilder:validation:Optional
	bitstreamMode?: null | string @go(BitstreamMode,*string)

	// Mono, Stereo, or 5.1 channel layout.
	// +kubebuilder:validation:Optional
	codingMode?: null | string @go(CodingMode,*string)

	// Sets the dialnorm of the output.
	// +kubebuilder:validation:Optional
	dialnorm?: null | float64 @go(Dialnorm,*float64)

	// If set to filmStandard, adds dynamic range compression signaling to the output bitstream as defined in the Dolby Digital specification.
	// +kubebuilder:validation:Optional
	drcProfile?: null | string @go(DrcProfile,*string)

	// When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding.
	// +kubebuilder:validation:Optional
	lfeFilter?: null | string @go(LfeFilter,*string)

	// Metadata control.
	// +kubebuilder:validation:Optional
	metadataControl?: null | string @go(MetadataControl,*string)
}

#AncillarySourceSettingsInitParameters: {
	sourceAncillaryChannelNumber?: null | float64 @go(SourceAncillaryChannelNumber,*float64)
}

#AncillarySourceSettingsObservation: {
	sourceAncillaryChannelNumber?: null | float64 @go(SourceAncillaryChannelNumber,*float64)
}

#AncillarySourceSettingsParameters: {
	// +kubebuilder:validation:Optional
	sourceAncillaryChannelNumber?: null | float64 @go(SourceAncillaryChannelNumber,*float64)
}

#ArchiveCdnSettingsInitParameters: {
	// Archive S3 Settings. See Archive S3 Settings for more details.
	archiveS3Settings?: [...#ArchiveS3SettingsInitParameters] @go(ArchiveS3Settings,[]ArchiveS3SettingsInitParameters)
}

#ArchiveCdnSettingsObservation: {
	// Archive S3 Settings. See Archive S3 Settings for more details.
	archiveS3Settings?: [...#ArchiveS3SettingsObservation] @go(ArchiveS3Settings,[]ArchiveS3SettingsObservation)
}

#ArchiveCdnSettingsParameters: {
	// Archive S3 Settings. See Archive S3 Settings for more details.
	// +kubebuilder:validation:Optional
	archiveS3Settings?: [...#ArchiveS3SettingsParameters] @go(ArchiveS3Settings,[]ArchiveS3SettingsParameters)
}

#ArchiveGroupSettingsInitParameters: {
	// Parameters that control the interactions with the CDN. See Archive CDN Settings for more details.
	archiveCdnSettings?: [...#ArchiveCdnSettingsInitParameters] @go(ArchiveCdnSettings,[]ArchiveCdnSettingsInitParameters)

	// A director and base filename where archive files should be written. See Destination for more details.
	destination?: [...#DestinationInitParameters] @go(Destination,[]DestinationInitParameters)

	// Number of seconds to write to archive file before closing and starting a new one.
	rolloverInterval?: null | float64 @go(RolloverInterval,*float64)
}

#ArchiveGroupSettingsObservation: {
	// Parameters that control the interactions with the CDN. See Archive CDN Settings for more details.
	archiveCdnSettings?: [...#ArchiveCdnSettingsObservation] @go(ArchiveCdnSettings,[]ArchiveCdnSettingsObservation)

	// A director and base filename where archive files should be written. See Destination for more details.
	destination?: [...#DestinationObservation] @go(Destination,[]DestinationObservation)

	// Number of seconds to write to archive file before closing and starting a new one.
	rolloverInterval?: null | float64 @go(RolloverInterval,*float64)
}

#ArchiveGroupSettingsParameters: {
	// Parameters that control the interactions with the CDN. See Archive CDN Settings for more details.
	// +kubebuilder:validation:Optional
	archiveCdnSettings?: [...#ArchiveCdnSettingsParameters] @go(ArchiveCdnSettings,[]ArchiveCdnSettingsParameters)

	// A director and base filename where archive files should be written. See Destination for more details.
	// +kubebuilder:validation:Optional
	destination: [...#DestinationParameters] @go(Destination,[]DestinationParameters)

	// Number of seconds to write to archive file before closing and starting a new one.
	// +kubebuilder:validation:Optional
	rolloverInterval?: null | float64 @go(RolloverInterval,*float64)
}

#ArchiveOutputSettingsInitParameters: {
	// Settings specific to the container type of the file. See Container Settings for more details.
	containerSettings?: [...#ContainerSettingsInitParameters] @go(ContainerSettings,[]ContainerSettingsInitParameters)

	// Output file extension.
	extension?: null | string @go(Extension,*string)

	// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
	nameModifier?: null | string @go(NameModifier,*string)
}

#ArchiveOutputSettingsObservation: {
	// Settings specific to the container type of the file. See Container Settings for more details.
	containerSettings?: [...#ContainerSettingsObservation] @go(ContainerSettings,[]ContainerSettingsObservation)

	// Output file extension.
	extension?: null | string @go(Extension,*string)

	// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
	nameModifier?: null | string @go(NameModifier,*string)
}

#ArchiveOutputSettingsParameters: {
	// Settings specific to the container type of the file. See Container Settings for more details.
	// +kubebuilder:validation:Optional
	containerSettings?: [...#ContainerSettingsParameters] @go(ContainerSettings,[]ContainerSettingsParameters)

	// Output file extension.
	// +kubebuilder:validation:Optional
	extension?: null | string @go(Extension,*string)

	// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
	// +kubebuilder:validation:Optional
	nameModifier?: null | string @go(NameModifier,*string)
}

#ArchiveS3SettingsInitParameters: {
	// Specify the canned ACL to apply to each S3 request.
	cannedAcl?: null | string @go(CannedACL,*string)
}

#ArchiveS3SettingsObservation: {
	// Specify the canned ACL to apply to each S3 request.
	cannedAcl?: null | string @go(CannedACL,*string)
}

#ArchiveS3SettingsParameters: {
	// Specify the canned ACL to apply to each S3 request.
	// +kubebuilder:validation:Optional
	cannedAcl?: null | string @go(CannedACL,*string)
}

#AudioDescriptionsInitParameters: {
	// Advanced audio normalization settings. See Audio Normalization Settings for more details.
	audioNormalizationSettings?: [...#AudioNormalizationSettingsInitParameters] @go(AudioNormalizationSettings,[]AudioNormalizationSettingsInitParameters)

	// The name of the audio selector used as the source for this AudioDescription.
	audioSelectorName?: null | string @go(AudioSelectorName,*string)

	// Applies only if audioTypeControl is useConfigured. The values for audioType are defined in ISO-IEC 13818-1.
	audioType?: null | string @go(AudioType,*string)

	// Determined how audio type is determined.
	audioTypeControl?: null | string @go(AudioTypeControl,*string)

	// Settings to configure one or more solutions that insert audio watermarks in the audio encode. See Audio Watermark Settings for more details.
	audioWatermarkSettings?: [...#AudioWatermarkSettingsInitParameters] @go(AudioWatermarkSettings,[]AudioWatermarkSettingsInitParameters)

	// Audio codec settings. See Audio Codec Settings for more details.
	codecSettings?: [...#CodecSettingsInitParameters] @go(CodecSettings,[]CodecSettingsInitParameters)

	// When specified this field indicates the three letter language code of the caption track to extract from the source.
	languageCode?:        null | string @go(LanguageCode,*string)
	languageCodeControl?: null | string @go(LanguageCodeControl,*string)

	// Name of the Channel.
	name?: null | string @go(Name,*string)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	remixSettings?: [...#RemixSettingsInitParameters] @go(RemixSettings,[]RemixSettingsInitParameters)

	// Stream name RTMP destinations (URLs of type rtmp://)
	streamName?: null | string @go(StreamName,*string)
}

#AudioDescriptionsObservation: {
	// Advanced audio normalization settings. See Audio Normalization Settings for more details.
	audioNormalizationSettings?: [...#AudioNormalizationSettingsObservation] @go(AudioNormalizationSettings,[]AudioNormalizationSettingsObservation)

	// The name of the audio selector used as the source for this AudioDescription.
	audioSelectorName?: null | string @go(AudioSelectorName,*string)

	// Applies only if audioTypeControl is useConfigured. The values for audioType are defined in ISO-IEC 13818-1.
	audioType?: null | string @go(AudioType,*string)

	// Determined how audio type is determined.
	audioTypeControl?: null | string @go(AudioTypeControl,*string)

	// Settings to configure one or more solutions that insert audio watermarks in the audio encode. See Audio Watermark Settings for more details.
	audioWatermarkSettings?: [...#AudioWatermarkSettingsObservation] @go(AudioWatermarkSettings,[]AudioWatermarkSettingsObservation)

	// Audio codec settings. See Audio Codec Settings for more details.
	codecSettings?: [...#CodecSettingsObservation] @go(CodecSettings,[]CodecSettingsObservation)

	// When specified this field indicates the three letter language code of the caption track to extract from the source.
	languageCode?:        null | string @go(LanguageCode,*string)
	languageCodeControl?: null | string @go(LanguageCodeControl,*string)

	// Name of the Channel.
	name?: null | string @go(Name,*string)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	remixSettings?: [...#RemixSettingsObservation] @go(RemixSettings,[]RemixSettingsObservation)

	// Stream name RTMP destinations (URLs of type rtmp://)
	streamName?: null | string @go(StreamName,*string)
}

#AudioDescriptionsParameters: {
	// Advanced audio normalization settings. See Audio Normalization Settings for more details.
	// +kubebuilder:validation:Optional
	audioNormalizationSettings?: [...#AudioNormalizationSettingsParameters] @go(AudioNormalizationSettings,[]AudioNormalizationSettingsParameters)

	// The name of the audio selector used as the source for this AudioDescription.
	// +kubebuilder:validation:Optional
	audioSelectorName?: null | string @go(AudioSelectorName,*string)

	// Applies only if audioTypeControl is useConfigured. The values for audioType are defined in ISO-IEC 13818-1.
	// +kubebuilder:validation:Optional
	audioType?: null | string @go(AudioType,*string)

	// Determined how audio type is determined.
	// +kubebuilder:validation:Optional
	audioTypeControl?: null | string @go(AudioTypeControl,*string)

	// Settings to configure one or more solutions that insert audio watermarks in the audio encode. See Audio Watermark Settings for more details.
	// +kubebuilder:validation:Optional
	audioWatermarkSettings?: [...#AudioWatermarkSettingsParameters] @go(AudioWatermarkSettings,[]AudioWatermarkSettingsParameters)

	// Audio codec settings. See Audio Codec Settings for more details.
	// +kubebuilder:validation:Optional
	codecSettings?: [...#CodecSettingsParameters] @go(CodecSettings,[]CodecSettingsParameters)

	// When specified this field indicates the three letter language code of the caption track to extract from the source.
	// +kubebuilder:validation:Optional
	languageCode?: null | string @go(LanguageCode,*string)

	// +kubebuilder:validation:Optional
	languageCodeControl?: null | string @go(LanguageCodeControl,*string)

	// Name of the Channel.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	remixSettings?: [...#RemixSettingsParameters] @go(RemixSettings,[]RemixSettingsParameters)

	// Stream name RTMP destinations (URLs of type rtmp://)
	// +kubebuilder:validation:Optional
	streamName?: null | string @go(StreamName,*string)
}

#AudioHlsRenditionSelectionInitParameters: {
	// User-specified id. Ths is used in an output group or an output.
	groupId?: null | string @go(GroupID,*string)

	// Name of the Channel.
	name?: null | string @go(Name,*string)
}

#AudioHlsRenditionSelectionObservation: {
	// User-specified id. Ths is used in an output group or an output.
	groupId?: null | string @go(GroupID,*string)

	// Name of the Channel.
	name?: null | string @go(Name,*string)
}

#AudioHlsRenditionSelectionParameters: {
	// User-specified id. Ths is used in an output group or an output.
	// +kubebuilder:validation:Optional
	groupId?: null | string @go(GroupID,*string)

	// Name of the Channel.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)
}

#AudioLanguageSelectionInitParameters: {
	// When specified this field indicates the three letter language code of the caption track to extract from the source.
	languageCode?:            null | string @go(LanguageCode,*string)
	languageSelectionPolicy?: null | string @go(LanguageSelectionPolicy,*string)
}

#AudioLanguageSelectionObservation: {
	// When specified this field indicates the three letter language code of the caption track to extract from the source.
	languageCode?:            null | string @go(LanguageCode,*string)
	languageSelectionPolicy?: null | string @go(LanguageSelectionPolicy,*string)
}

#AudioLanguageSelectionParameters: {
	// When specified this field indicates the three letter language code of the caption track to extract from the source.
	// +kubebuilder:validation:Optional
	languageCode?: null | string @go(LanguageCode,*string)

	// +kubebuilder:validation:Optional
	languageSelectionPolicy?: null | string @go(LanguageSelectionPolicy,*string)
}

#AudioNormalizationSettingsInitParameters: {
	// Audio normalization algorithm to use. itu17701 conforms to the CALM Act specification, itu17702 to the EBU R-128 specification.
	algorithm?: null | string @go(Algorithm,*string)

	// Algorithm control for the audio description.
	algorithmControl?: null | string @go(AlgorithmControl,*string)

	// Target LKFS (loudness) to adjust volume to.
	targetLkfs?: null | float64 @go(TargetLkfs,*float64)
}

#AudioNormalizationSettingsObservation: {
	// Audio normalization algorithm to use. itu17701 conforms to the CALM Act specification, itu17702 to the EBU R-128 specification.
	algorithm?: null | string @go(Algorithm,*string)

	// Algorithm control for the audio description.
	algorithmControl?: null | string @go(AlgorithmControl,*string)

	// Target LKFS (loudness) to adjust volume to.
	targetLkfs?: null | float64 @go(TargetLkfs,*float64)
}

#AudioNormalizationSettingsParameters: {
	// Audio normalization algorithm to use. itu17701 conforms to the CALM Act specification, itu17702 to the EBU R-128 specification.
	// +kubebuilder:validation:Optional
	algorithm?: null | string @go(Algorithm,*string)

	// Algorithm control for the audio description.
	// +kubebuilder:validation:Optional
	algorithmControl?: null | string @go(AlgorithmControl,*string)

	// Target LKFS (loudness) to adjust volume to.
	// +kubebuilder:validation:Optional
	targetLkfs?: null | float64 @go(TargetLkfs,*float64)
}

#AudioOnlyHlsSettingsInitParameters: {
	// User-specified id. Ths is used in an output group or an output.
	audioGroupId?: null | string @go(AudioGroupID,*string)
	audioOnlyImage?: [...#AudioOnlyImageInitParameters] @go(AudioOnlyImage,[]AudioOnlyImageInitParameters)
	audioTrackType?: null | string @go(AudioTrackType,*string)
	segmentType?:    null | string @go(SegmentType,*string)
}

#AudioOnlyHlsSettingsObservation: {
	// User-specified id. Ths is used in an output group or an output.
	audioGroupId?: null | string @go(AudioGroupID,*string)
	audioOnlyImage?: [...#AudioOnlyImageObservation] @go(AudioOnlyImage,[]AudioOnlyImageObservation)
	audioTrackType?: null | string @go(AudioTrackType,*string)
	segmentType?:    null | string @go(SegmentType,*string)
}

#AudioOnlyHlsSettingsParameters: {
	// User-specified id. Ths is used in an output group or an output.
	// +kubebuilder:validation:Optional
	audioGroupId?: null | string @go(AudioGroupID,*string)

	// +kubebuilder:validation:Optional
	audioOnlyImage?: [...#AudioOnlyImageParameters] @go(AudioOnlyImage,[]AudioOnlyImageParameters)

	// +kubebuilder:validation:Optional
	audioTrackType?: null | string @go(AudioTrackType,*string)

	// +kubebuilder:validation:Optional
	segmentType?: null | string @go(SegmentType,*string)
}

#AudioOnlyImageInitParameters: {
	// Key used to extract the password from EC2 Parameter store.
	passwordParam?: null | string @go(PasswordParam,*string)

	// Path to a file accessible to the live stream.
	uri?: null | string @go(URI,*string)

	// Username for destination.
	username?: null | string @go(Username,*string)
}

#AudioOnlyImageObservation: {
	// Key used to extract the password from EC2 Parameter store.
	passwordParam?: null | string @go(PasswordParam,*string)

	// Path to a file accessible to the live stream.
	uri?: null | string @go(URI,*string)

	// Username for destination.
	username?: null | string @go(Username,*string)
}

#AudioOnlyImageParameters: {
	// Key used to extract the password from EC2 Parameter store.
	// +kubebuilder:validation:Optional
	passwordParam?: null | string @go(PasswordParam,*string)

	// Path to a file accessible to the live stream.
	// +kubebuilder:validation:Optional
	uri?: null | string @go(URI,*string)

	// Username for destination.
	// +kubebuilder:validation:Optional
	username?: null | string @go(Username,*string)
}

#AudioPidSelectionInitParameters: {
	// User-specified id. Ths is used in an output group or an output.
	pid?: null | float64 @go(Pid,*float64)
}

#AudioPidSelectionObservation: {
	// User-specified id. Ths is used in an output group or an output.
	pid?: null | float64 @go(Pid,*float64)
}

#AudioPidSelectionParameters: {
	// User-specified id. Ths is used in an output group or an output.
	// +kubebuilder:validation:Optional
	pid?: null | float64 @go(Pid,*float64)
}

#AudioSelectorInitParameters: {
	// Name of the Channel.
	name?: null | string @go(Name,*string)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	selectorSettings?: [...#SelectorSettingsInitParameters] @go(SelectorSettings,[]SelectorSettingsInitParameters)
}

#AudioSelectorObservation: {
	// Name of the Channel.
	name?: null | string @go(Name,*string)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	selectorSettings?: [...#SelectorSettingsObservation] @go(SelectorSettings,[]SelectorSettingsObservation)
}

#AudioSelectorParameters: {
	// Name of the Channel.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	selectorSettings?: [...#SelectorSettingsParameters] @go(SelectorSettings,[]SelectorSettingsParameters)
}

#AudioSilenceSettingsInitParameters: {
	// The name of the audio selector used as the source for this AudioDescription.
	audioSelectorName?:         null | string  @go(AudioSelectorName,*string)
	audioSilenceThresholdMsec?: null | float64 @go(AudioSilenceThresholdMsec,*float64)
}

#AudioSilenceSettingsObservation: {
	// The name of the audio selector used as the source for this AudioDescription.
	audioSelectorName?:         null | string  @go(AudioSelectorName,*string)
	audioSilenceThresholdMsec?: null | float64 @go(AudioSilenceThresholdMsec,*float64)
}

#AudioSilenceSettingsParameters: {
	// The name of the audio selector used as the source for this AudioDescription.
	// +kubebuilder:validation:Optional
	audioSelectorName?: null | string @go(AudioSelectorName,*string)

	// +kubebuilder:validation:Optional
	audioSilenceThresholdMsec?: null | float64 @go(AudioSilenceThresholdMsec,*float64)
}

#AudioTrackSelectionInitParameters: {
	track?: [...#TrackInitParameters] @go(Track,[]TrackInitParameters)
}

#AudioTrackSelectionObservation: {
	track?: [...#TrackObservation] @go(Track,[]TrackObservation)
}

#AudioTrackSelectionParameters: {
	// +kubebuilder:validation:Optional
	track: [...#TrackParameters] @go(Track,[]TrackParameters)
}

#AudioWatermarkSettingsInitParameters: {
	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	nielsenWatermarksSettings?: [...#NielsenWatermarksSettingsInitParameters] @go(NielsenWatermarksSettings,[]NielsenWatermarksSettingsInitParameters)
}

#AudioWatermarkSettingsObservation: {
	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	nielsenWatermarksSettings?: [...#NielsenWatermarksSettingsObservation] @go(NielsenWatermarksSettings,[]NielsenWatermarksSettingsObservation)
}

#AudioWatermarkSettingsParameters: {
	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	nielsenWatermarksSettings?: [...#NielsenWatermarksSettingsParameters] @go(NielsenWatermarksSettings,[]NielsenWatermarksSettingsParameters)
}

#AutomaticInputFailoverSettingsInitParameters: {
	errorClearTimeMsec?: null | float64 @go(ErrorClearTimeMsec,*float64)
	failoverCondition?: [...#FailoverConditionInitParameters] @go(FailoverCondition,[]FailoverConditionInitParameters)
	inputPreference?: null | string @go(InputPreference,*string)

	// The ID of the input.
	secondaryInputId?: null | string @go(SecondaryInputID,*string)
}

#AutomaticInputFailoverSettingsObservation: {
	errorClearTimeMsec?: null | float64 @go(ErrorClearTimeMsec,*float64)
	failoverCondition?: [...#FailoverConditionObservation] @go(FailoverCondition,[]FailoverConditionObservation)
	inputPreference?: null | string @go(InputPreference,*string)

	// The ID of the input.
	secondaryInputId?: null | string @go(SecondaryInputID,*string)
}

#AutomaticInputFailoverSettingsParameters: {
	// +kubebuilder:validation:Optional
	errorClearTimeMsec?: null | float64 @go(ErrorClearTimeMsec,*float64)

	// +kubebuilder:validation:Optional
	failoverCondition?: [...#FailoverConditionParameters] @go(FailoverCondition,[]FailoverConditionParameters)

	// +kubebuilder:validation:Optional
	inputPreference?: null | string @go(InputPreference,*string)

	// The ID of the input.
	// +kubebuilder:validation:Optional
	secondaryInputId?: null | string @go(SecondaryInputID,*string)
}

#AvailBlankingImageInitParameters: {
	// Key used to extract the password from EC2 Parameter store.
	passwordParam?: null | string @go(PasswordParam,*string)

	// Path to a file accessible to the live stream.
	uri?: null | string @go(URI,*string)

	// Username for destination.
	username?: null | string @go(Username,*string)
}

#AvailBlankingImageObservation: {
	// Key used to extract the password from EC2 Parameter store.
	passwordParam?: null | string @go(PasswordParam,*string)

	// Path to a file accessible to the live stream.
	uri?: null | string @go(URI,*string)

	// Username for destination.
	username?: null | string @go(Username,*string)
}

#AvailBlankingImageParameters: {
	// Key used to extract the password from EC2 Parameter store.
	// +kubebuilder:validation:Optional
	passwordParam?: null | string @go(PasswordParam,*string)

	// Path to a file accessible to the live stream.
	// +kubebuilder:validation:Optional
	uri?: null | string @go(URI,*string)

	// Username for destination.
	// +kubebuilder:validation:Optional
	username?: null | string @go(Username,*string)
}

#AvailBlankingInitParameters: {
	// Blanking image to be used. See Avail Blanking Image for more details.
	availBlankingImage?: [...#AvailBlankingImageInitParameters] @go(AvailBlankingImage,[]AvailBlankingImageInitParameters)

	// When set to enabled, causes video, audio and captions to be blanked when insertion metadata is added.
	state?: null | string @go(State,*string)
}

#AvailBlankingObservation: {
	// Blanking image to be used. See Avail Blanking Image for more details.
	availBlankingImage?: [...#AvailBlankingImageObservation] @go(AvailBlankingImage,[]AvailBlankingImageObservation)

	// When set to enabled, causes video, audio and captions to be blanked when insertion metadata is added.
	state?: null | string @go(State,*string)
}

#AvailBlankingParameters: {
	// Blanking image to be used. See Avail Blanking Image for more details.
	// +kubebuilder:validation:Optional
	availBlankingImage?: [...#AvailBlankingImageParameters] @go(AvailBlankingImage,[]AvailBlankingImageParameters)

	// When set to enabled, causes video, audio and captions to be blanked when insertion metadata is added.
	// +kubebuilder:validation:Optional
	state?: null | string @go(State,*string)
}

#CaptionLanguageMappingsInitParameters: {
	captionChannel?: null | float64 @go(CaptionChannel,*float64)

	// When specified this field indicates the three letter language code of the caption track to extract from the source.
	languageCode?:        null | string @go(LanguageCode,*string)
	languageDescription?: null | string @go(LanguageDescription,*string)
}

#CaptionLanguageMappingsObservation: {
	captionChannel?: null | float64 @go(CaptionChannel,*float64)

	// When specified this field indicates the three letter language code of the caption track to extract from the source.
	languageCode?:        null | string @go(LanguageCode,*string)
	languageDescription?: null | string @go(LanguageDescription,*string)
}

#CaptionLanguageMappingsParameters: {
	// +kubebuilder:validation:Optional
	captionChannel?: null | float64 @go(CaptionChannel,*float64)

	// When specified this field indicates the three letter language code of the caption track to extract from the source.
	// +kubebuilder:validation:Optional
	languageCode?: null | string @go(LanguageCode,*string)

	// +kubebuilder:validation:Optional
	languageDescription?: null | string @go(LanguageDescription,*string)
}

#CaptionSelectorInitParameters: {
	// When specified this field indicates the three letter language code of the caption track to extract from the source.
	languageCode?: null | string @go(LanguageCode,*string)

	// Name of the Channel.
	name?: null | string @go(Name,*string)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	selectorSettings?: [...#CaptionSelectorSelectorSettingsInitParameters] @go(SelectorSettings,[]CaptionSelectorSelectorSettingsInitParameters)
}

#CaptionSelectorObservation: {
	// When specified this field indicates the three letter language code of the caption track to extract from the source.
	languageCode?: null | string @go(LanguageCode,*string)

	// Name of the Channel.
	name?: null | string @go(Name,*string)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	selectorSettings?: [...#CaptionSelectorSelectorSettingsObservation] @go(SelectorSettings,[]CaptionSelectorSelectorSettingsObservation)
}

#CaptionSelectorParameters: {
	// When specified this field indicates the three letter language code of the caption track to extract from the source.
	// +kubebuilder:validation:Optional
	languageCode?: null | string @go(LanguageCode,*string)

	// Name of the Channel.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	selectorSettings?: [...#CaptionSelectorSelectorSettingsParameters] @go(SelectorSettings,[]CaptionSelectorSelectorSettingsParameters)
}

#CaptionSelectorSelectorSettingsInitParameters: {
	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	ancillarySourceSettings?: [...#AncillarySourceSettingsInitParameters] @go(AncillarySourceSettings,[]AncillarySourceSettingsInitParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	dvbTdtSettings?: [...#SelectorSettingsDvbTdtSettingsInitParameters] @go(DvbTdtSettings,[]SelectorSettingsDvbTdtSettingsInitParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	embeddedSourceSettings?: [...#EmbeddedSourceSettingsInitParameters] @go(EmbeddedSourceSettings,[]EmbeddedSourceSettingsInitParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	scte20SourceSettings?: [...#Scte20SourceSettingsInitParameters] @go(Scte20SourceSettings,[]Scte20SourceSettingsInitParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	scte27SourceSettings?: [...#Scte27SourceSettingsInitParameters] @go(Scte27SourceSettings,[]Scte27SourceSettingsInitParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	teletextSourceSettings?: [...#TeletextSourceSettingsInitParameters] @go(TeletextSourceSettings,[]TeletextSourceSettingsInitParameters)
}

#CaptionSelectorSelectorSettingsObservation: {
	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	ancillarySourceSettings?: [...#AncillarySourceSettingsObservation] @go(AncillarySourceSettings,[]AncillarySourceSettingsObservation)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	dvbTdtSettings?: [...#SelectorSettingsDvbTdtSettingsObservation] @go(DvbTdtSettings,[]SelectorSettingsDvbTdtSettingsObservation)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	embeddedSourceSettings?: [...#EmbeddedSourceSettingsObservation] @go(EmbeddedSourceSettings,[]EmbeddedSourceSettingsObservation)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	scte20SourceSettings?: [...#Scte20SourceSettingsObservation] @go(Scte20SourceSettings,[]Scte20SourceSettingsObservation)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	scte27SourceSettings?: [...#Scte27SourceSettingsObservation] @go(Scte27SourceSettings,[]Scte27SourceSettingsObservation)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	teletextSourceSettings?: [...#TeletextSourceSettingsObservation] @go(TeletextSourceSettings,[]TeletextSourceSettingsObservation)
}

#CaptionSelectorSelectorSettingsParameters: {
	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	ancillarySourceSettings?: [...#AncillarySourceSettingsParameters] @go(AncillarySourceSettings,[]AncillarySourceSettingsParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	dvbTdtSettings?: [...#SelectorSettingsDvbTdtSettingsParameters] @go(DvbTdtSettings,[]SelectorSettingsDvbTdtSettingsParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	embeddedSourceSettings?: [...#EmbeddedSourceSettingsParameters] @go(EmbeddedSourceSettings,[]EmbeddedSourceSettingsParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	scte20SourceSettings?: [...#Scte20SourceSettingsParameters] @go(Scte20SourceSettings,[]Scte20SourceSettingsParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	scte27SourceSettings?: [...#Scte27SourceSettingsParameters] @go(Scte27SourceSettings,[]Scte27SourceSettingsParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	teletextSourceSettings?: [...#TeletextSourceSettingsParameters] @go(TeletextSourceSettings,[]TeletextSourceSettingsParameters)
}

#CdiInputSpecificationInitParameters: {
	// - Maximum CDI input resolution.
	resolution?: null | string @go(Resolution,*string)
}

#CdiInputSpecificationObservation: {
	// - Maximum CDI input resolution.
	resolution?: null | string @go(Resolution,*string)
}

#CdiInputSpecificationParameters: {
	// - Maximum CDI input resolution.
	// +kubebuilder:validation:Optional
	resolution?: null | string @go(Resolution,*string)
}

#ChannelInitParameters: {
	// Specification of CDI inputs for this channel. See CDI Input Specification for more details.
	cdiInputSpecification?: [...#CdiInputSpecificationInitParameters] @go(CdiInputSpecification,[]CdiInputSpecificationInitParameters)

	// Concise argument description.
	channelClass?: null | string @go(ChannelClass,*string)

	// Destinations for channel. See Destinations for more details.
	destinations?: [...#DestinationsInitParameters] @go(Destinations,[]DestinationsInitParameters)

	// Encoder settings. See Encoder Settings for more details.
	encoderSettings?: [...#EncoderSettingsInitParameters] @go(EncoderSettings,[]EncoderSettingsInitParameters)

	// Input attachments for the channel. See Input Attachments for more details.
	inputAttachments?: [...#InputAttachmentsInitParameters] @go(InputAttachments,[]InputAttachmentsInitParameters)

	// Specification of network and file inputs for the channel.
	inputSpecification?: [...#InputSpecificationInitParameters] @go(InputSpecification,[]InputSpecificationInitParameters)

	// The log level to write to Cloudwatch logs.
	logLevel?: null | string @go(LogLevel,*string)

	// Maintenance settings for this channel. See Maintenance for more details.
	maintenance?: [...#MaintenanceInitParameters] @go(Maintenance,[]MaintenanceInitParameters)

	// Name of the Channel.
	name?: null | string @go(Name,*string)

	// Whether to start/stop channel. Default: false
	startChannel?: null | bool @go(StartChannel,*bool)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Settings for the VPC outputs.
	vpc?: [...#VPCInitParameters] @go(VPC,[]VPCInitParameters)
}

#ChannelMappingsInitParameters: {
	inputChannelLevels?: [...#InputChannelLevelsInitParameters] @go(InputChannelLevels,[]InputChannelLevelsInitParameters)
	outputChannel?: null | float64 @go(OutputChannel,*float64)
}

#ChannelMappingsObservation: {
	inputChannelLevels?: [...#InputChannelLevelsObservation] @go(InputChannelLevels,[]InputChannelLevelsObservation)
	outputChannel?: null | float64 @go(OutputChannel,*float64)
}

#ChannelMappingsParameters: {
	// +kubebuilder:validation:Optional
	inputChannelLevels: [...#InputChannelLevelsParameters] @go(InputChannelLevels,[]InputChannelLevelsParameters)

	// +kubebuilder:validation:Optional
	outputChannel?: null | float64 @go(OutputChannel,*float64)
}

#ChannelObservation: {
	// ARN of the Channel.
	arn?: null | string @go(Arn,*string)

	// Specification of CDI inputs for this channel. See CDI Input Specification for more details.
	cdiInputSpecification?: [...#CdiInputSpecificationObservation] @go(CdiInputSpecification,[]CdiInputSpecificationObservation)

	// Concise argument description.
	channelClass?: null | string @go(ChannelClass,*string)

	// ID of the channel in MediaPackage that is the destination for this output group.
	channelId?: null | string @go(ChannelID,*string)

	// Destinations for channel. See Destinations for more details.
	destinations?: [...#DestinationsObservation] @go(Destinations,[]DestinationsObservation)

	// Encoder settings. See Encoder Settings for more details.
	encoderSettings?: [...#EncoderSettingsObservation] @go(EncoderSettings,[]EncoderSettingsObservation)

	// User-specified id. Ths is used in an output group or an output.
	id?: null | string @go(ID,*string)

	// Input attachments for the channel. See Input Attachments for more details.
	inputAttachments?: [...#InputAttachmentsObservation] @go(InputAttachments,[]InputAttachmentsObservation)

	// Specification of network and file inputs for the channel.
	inputSpecification?: [...#InputSpecificationObservation] @go(InputSpecification,[]InputSpecificationObservation)

	// The log level to write to Cloudwatch logs.
	logLevel?: null | string @go(LogLevel,*string)

	// Maintenance settings for this channel. See Maintenance for more details.
	maintenance?: [...#MaintenanceObservation] @go(Maintenance,[]MaintenanceObservation)

	// Name of the Channel.
	name?: null | string @go(Name,*string)

	// Concise argument description.
	roleArn?: null | string @go(RoleArn,*string)

	// Whether to start/stop channel. Default: false
	startChannel?: null | bool @go(StartChannel,*bool)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// Settings for the VPC outputs.
	vpc?: [...#VPCObservation] @go(VPC,[]VPCObservation)
}

#ChannelParameters: {
	// Specification of CDI inputs for this channel. See CDI Input Specification for more details.
	// +kubebuilder:validation:Optional
	cdiInputSpecification?: [...#CdiInputSpecificationParameters] @go(CdiInputSpecification,[]CdiInputSpecificationParameters)

	// Concise argument description.
	// +kubebuilder:validation:Optional
	channelClass?: null | string @go(ChannelClass,*string)

	// Destinations for channel. See Destinations for more details.
	// +kubebuilder:validation:Optional
	destinations?: [...#DestinationsParameters] @go(Destinations,[]DestinationsParameters)

	// Encoder settings. See Encoder Settings for more details.
	// +kubebuilder:validation:Optional
	encoderSettings?: [...#EncoderSettingsParameters] @go(EncoderSettings,[]EncoderSettingsParameters)

	// Input attachments for the channel. See Input Attachments for more details.
	// +kubebuilder:validation:Optional
	inputAttachments?: [...#InputAttachmentsParameters] @go(InputAttachments,[]InputAttachmentsParameters)

	// Specification of network and file inputs for the channel.
	// +kubebuilder:validation:Optional
	inputSpecification?: [...#InputSpecificationParameters] @go(InputSpecification,[]InputSpecificationParameters)

	// The log level to write to Cloudwatch logs.
	// +kubebuilder:validation:Optional
	logLevel?: null | string @go(LogLevel,*string)

	// Maintenance settings for this channel. See Maintenance for more details.
	// +kubebuilder:validation:Optional
	maintenance?: [...#MaintenanceParameters] @go(Maintenance,[]MaintenanceParameters)

	// Name of the Channel.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Concise argument description.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	roleArn?: null | string @go(RoleArn,*string)

	// Reference to a Role in iam to populate roleArn.
	// +kubebuilder:validation:Optional
	roleArnRef?: null | v1.#Reference @go(RoleArnRef,*v1.Reference)

	// Selector for a Role in iam to populate roleArn.
	// +kubebuilder:validation:Optional
	roleArnSelector?: null | v1.#Selector @go(RoleArnSelector,*v1.Selector)

	// Whether to start/stop channel. Default: false
	// +kubebuilder:validation:Optional
	startChannel?: null | bool @go(StartChannel,*bool)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Settings for the VPC outputs.
	// +kubebuilder:validation:Optional
	vpc?: [...#VPCParameters] @go(VPC,[]VPCParameters)
}

#CodecSettingsInitParameters: {
	// Aac Settings. See AAC Settings for more details.
	aacSettings?: [...#AacSettingsInitParameters] @go(AacSettings,[]AacSettingsInitParameters)

	// Ac3 Settings. See AC3 Settings for more details.
	ac3Settings?: [...#Ac3SettingsInitParameters] @go(Ac3Settings,[]Ac3SettingsInitParameters)

	// - Eac3 Atmos Settings. See EAC3 Atmos Settings
	eac3AtmosSettings?: [...#Eac3AtmosSettingsInitParameters] @go(Eac3AtmosSettings,[]Eac3AtmosSettingsInitParameters)

	// - Eac3 Settings. See EAC3 Settings
	eac3Settings?: [...#Eac3SettingsInitParameters] @go(Eac3Settings,[]Eac3SettingsInitParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	mp2Settings?: [...#Mp2SettingsInitParameters] @go(Mp2Settings,[]Mp2SettingsInitParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	passThroughSettings?: [...#PassThroughSettingsInitParameters] @go(PassThroughSettings,[]PassThroughSettingsInitParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	wavSettings?: [...#WavSettingsInitParameters] @go(WavSettings,[]WavSettingsInitParameters)
}

#CodecSettingsObservation: {
	// Aac Settings. See AAC Settings for more details.
	aacSettings?: [...#AacSettingsObservation] @go(AacSettings,[]AacSettingsObservation)

	// Ac3 Settings. See AC3 Settings for more details.
	ac3Settings?: [...#Ac3SettingsObservation] @go(Ac3Settings,[]Ac3SettingsObservation)

	// - Eac3 Atmos Settings. See EAC3 Atmos Settings
	eac3AtmosSettings?: [...#Eac3AtmosSettingsObservation] @go(Eac3AtmosSettings,[]Eac3AtmosSettingsObservation)

	// - Eac3 Settings. See EAC3 Settings
	eac3Settings?: [...#Eac3SettingsObservation] @go(Eac3Settings,[]Eac3SettingsObservation)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	mp2Settings?: [...#Mp2SettingsObservation] @go(Mp2Settings,[]Mp2SettingsObservation)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	passThroughSettings?: [...#PassThroughSettingsParameters] @go(PassThroughSettings,[]PassThroughSettingsParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	wavSettings?: [...#WavSettingsObservation] @go(WavSettings,[]WavSettingsObservation)
}

#CodecSettingsParameters: {
	// Aac Settings. See AAC Settings for more details.
	// +kubebuilder:validation:Optional
	aacSettings?: [...#AacSettingsParameters] @go(AacSettings,[]AacSettingsParameters)

	// Ac3 Settings. See AC3 Settings for more details.
	// +kubebuilder:validation:Optional
	ac3Settings?: [...#Ac3SettingsParameters] @go(Ac3Settings,[]Ac3SettingsParameters)

	// - Eac3 Atmos Settings. See EAC3 Atmos Settings
	// +kubebuilder:validation:Optional
	eac3AtmosSettings?: [...#Eac3AtmosSettingsParameters] @go(Eac3AtmosSettings,[]Eac3AtmosSettingsParameters)

	// - Eac3 Settings. See EAC3 Settings
	// +kubebuilder:validation:Optional
	eac3Settings?: [...#Eac3SettingsParameters] @go(Eac3Settings,[]Eac3SettingsParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	mp2Settings?: [...#Mp2SettingsParameters] @go(Mp2Settings,[]Mp2SettingsParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	passThroughSettings?: [...#PassThroughSettingsParameters] @go(PassThroughSettings,[]PassThroughSettingsParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	wavSettings?: [...#WavSettingsParameters] @go(WavSettings,[]WavSettingsParameters)
}

#ColorSpacePassthroughSettingsInitParameters: {
}

#ColorSpacePassthroughSettingsObservation: {
}

#ColorSpacePassthroughSettingsParameters: {
}

#ColorSpaceSettingsInitParameters: {
	// Sets the colorspace metadata to be passed through.
	colorSpacePassthroughSettings?: [...#ColorSpacePassthroughSettingsInitParameters] @go(ColorSpacePassthroughSettings,[]ColorSpacePassthroughSettingsInitParameters)

	// Set the colorspace to Dolby Vision81.
	dolbyVision81Settings?: [...#DolbyVision81SettingsInitParameters] @go(DolbyVision81Settings,[]DolbyVision81SettingsInitParameters)

	// Set the colorspace to be HDR10. See H265 HDR10 Settings for more details.
	hdr10Settings?: [...#Hdr10SettingsInitParameters] @go(Hdr10Settings,[]Hdr10SettingsInitParameters)

	// Set the colorspace to Rec. 601.
	rec601Settings?: [...#Rec601SettingsInitParameters] @go(Rec601Settings,[]Rec601SettingsInitParameters)

	// Set the colorspace to Rec. 709.
	rec709Settings?: [...#Rec709SettingsInitParameters] @go(Rec709Settings,[]Rec709SettingsInitParameters)
}

#ColorSpaceSettingsObservation: {
	// Sets the colorspace metadata to be passed through.
	colorSpacePassthroughSettings?: [...#ColorSpacePassthroughSettingsParameters] @go(ColorSpacePassthroughSettings,[]ColorSpacePassthroughSettingsParameters)

	// Set the colorspace to Dolby Vision81.
	dolbyVision81Settings?: [...#DolbyVision81SettingsParameters] @go(DolbyVision81Settings,[]DolbyVision81SettingsParameters)

	// Set the colorspace to be HDR10. See H265 HDR10 Settings for more details.
	hdr10Settings?: [...#Hdr10SettingsObservation] @go(Hdr10Settings,[]Hdr10SettingsObservation)

	// Set the colorspace to Rec. 601.
	rec601Settings?: [...#Rec601SettingsParameters] @go(Rec601Settings,[]Rec601SettingsParameters)

	// Set the colorspace to Rec. 709.
	rec709Settings?: [...#Rec709SettingsParameters] @go(Rec709Settings,[]Rec709SettingsParameters)
}

#ColorSpaceSettingsParameters: {
	// Sets the colorspace metadata to be passed through.
	// +kubebuilder:validation:Optional
	colorSpacePassthroughSettings?: [...#ColorSpacePassthroughSettingsParameters] @go(ColorSpacePassthroughSettings,[]ColorSpacePassthroughSettingsParameters)

	// Set the colorspace to Dolby Vision81.
	// +kubebuilder:validation:Optional
	dolbyVision81Settings?: [...#DolbyVision81SettingsParameters] @go(DolbyVision81Settings,[]DolbyVision81SettingsParameters)

	// Set the colorspace to be HDR10. See H265 HDR10 Settings for more details.
	// +kubebuilder:validation:Optional
	hdr10Settings?: [...#Hdr10SettingsParameters] @go(Hdr10Settings,[]Hdr10SettingsParameters)

	// Set the colorspace to Rec. 601.
	// +kubebuilder:validation:Optional
	rec601Settings?: [...#Rec601SettingsParameters] @go(Rec601Settings,[]Rec601SettingsParameters)

	// Set the colorspace to Rec. 709.
	// +kubebuilder:validation:Optional
	rec709Settings?: [...#Rec709SettingsParameters] @go(Rec709Settings,[]Rec709SettingsParameters)
}

#ContainerSettingsInitParameters: {
	// M2ts Settings. See M2ts Settings for more details.
	m2tsSettings?: [...#M2TsSettingsInitParameters] @go(M2TsSettings,[]M2TsSettingsInitParameters)

	// Raw Settings. This can be set as an empty block.
	rawSettings?: [...#RawSettingsInitParameters] @go(RawSettings,[]RawSettingsInitParameters)
}

#ContainerSettingsM2TsSettingsInitParameters: {
	absentInputAudioBehavior?: null | string @go(AbsentInputAudioBehavior,*string)
	arib?:                     null | string @go(Arib,*string)

	// User-specified id. Ths is used in an output group or an output.
	aribCaptionsPid?:        null | string  @go(AribCaptionsPid,*string)
	aribCaptionsPidControl?: null | string  @go(AribCaptionsPidControl,*string)
	audioBufferModel?:       null | string  @go(AudioBufferModel,*string)
	audioFramesPerPes?:      null | float64 @go(AudioFramesPerPes,*float64)
	audioPids?:              null | string  @go(AudioPids,*string)
	audioStreamType?:        null | string  @go(AudioStreamType,*string)

	// Average bitrate in bits/second.
	bitrate?:      null | float64 @go(Bitrate,*float64)
	bufferModel?:  null | string  @go(BufferModel,*string)
	ccDescriptor?: null | string  @go(CcDescriptor,*string)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	dvbNitSettings?: [...#M2TsSettingsDvbNitSettingsInitParameters] @go(DvbNitSettings,[]M2TsSettingsDvbNitSettingsInitParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	dvbSdtSettings?: [...#M2TsSettingsDvbSdtSettingsInitParameters] @go(DvbSdtSettings,[]M2TsSettingsDvbSdtSettingsInitParameters)
	dvbSubPids?: null | string @go(DvbSubPids,*string)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	dvbTdtSettings?: [...#M2TsSettingsDvbTdtSettingsInitParameters] @go(DvbTdtSettings,[]M2TsSettingsDvbTdtSettingsInitParameters)

	// User-specified id. Ths is used in an output group or an output.
	dvbTeletextPid?:   null | string  @go(DvbTeletextPid,*string)
	ebif?:             null | string  @go(Ebif,*string)
	ebpAudioInterval?: null | string  @go(EbpAudioInterval,*string)
	ebpLookaheadMs?:   null | float64 @go(EbpLookaheadMs,*float64)
	ebpPlacement?:     null | string  @go(EbpPlacement,*string)

	// User-specified id. Ths is used in an output group or an output.
	ecmPid?:      null | string @go(EcmPid,*string)
	esRateInPes?: null | string @go(EsRateInPes,*string)

	// User-specified id. Ths is used in an output group or an output.
	etvPlatformPid?: null | string @go(EtvPlatformPid,*string)

	// User-specified id. Ths is used in an output group or an output.
	etvSignalPid?:       null | string  @go(EtvSignalPid,*string)
	fragmentTime?:       null | float64 @go(FragmentTime,*float64)
	klv?:                null | string  @go(Klv,*string)
	klvDataPids?:        null | string  @go(KlvDataPids,*string)
	nielsenId3Behavior?: null | string  @go(NielsenId3Behavior,*string)

	// Average bitrate in bits/second.
	nullPacketBitrate?: null | float64 @go(NullPacketBitrate,*float64)
	patInterval?:       null | float64 @go(PatInterval,*float64)
	pcrControl?:        null | string  @go(PcrControl,*string)
	pcrPeriod?:         null | float64 @go(PcrPeriod,*float64)

	// User-specified id. Ths is used in an output group or an output.
	pcrPid?:      null | string  @go(PcrPid,*string)
	pmtInterval?: null | float64 @go(PmtInterval,*float64)

	// User-specified id. Ths is used in an output group or an output.
	pmtPid?:        null | string  @go(PmtPid,*string)
	programNum?:    null | float64 @go(ProgramNum,*float64)
	rateMode?:      null | string  @go(RateMode,*string)
	scte27Pids?:    null | string  @go(Scte27Pids,*string)
	scte35Control?: null | string  @go(Scte35Control,*string)

	// PID from which to read SCTE-35 messages.
	scte35Pid?:             null | string  @go(Scte35Pid,*string)
	segmentationMarkers?:   null | string  @go(SegmentationMarkers,*string)
	segmentationStyle?:     null | string  @go(SegmentationStyle,*string)
	segmentationTime?:      null | float64 @go(SegmentationTime,*float64)
	timedMetadataBehavior?: null | string  @go(TimedMetadataBehavior,*string)

	// User-specified id. Ths is used in an output group or an output.
	timedMetadataPid?: null | string @go(TimedMetadataPid,*string)

	// User-specified id. Ths is used in an output group or an output.
	transportStreamId?: null | float64 @go(TransportStreamID,*float64)

	// User-specified id. Ths is used in an output group or an output.
	videoPid?: null | string @go(VideoPid,*string)
}

#ContainerSettingsM2TsSettingsObservation: {
	absentInputAudioBehavior?: null | string @go(AbsentInputAudioBehavior,*string)
	arib?:                     null | string @go(Arib,*string)

	// User-specified id. Ths is used in an output group or an output.
	aribCaptionsPid?:        null | string  @go(AribCaptionsPid,*string)
	aribCaptionsPidControl?: null | string  @go(AribCaptionsPidControl,*string)
	audioBufferModel?:       null | string  @go(AudioBufferModel,*string)
	audioFramesPerPes?:      null | float64 @go(AudioFramesPerPes,*float64)
	audioPids?:              null | string  @go(AudioPids,*string)
	audioStreamType?:        null | string  @go(AudioStreamType,*string)

	// Average bitrate in bits/second.
	bitrate?:      null | float64 @go(Bitrate,*float64)
	bufferModel?:  null | string  @go(BufferModel,*string)
	ccDescriptor?: null | string  @go(CcDescriptor,*string)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	dvbNitSettings?: [...#M2TsSettingsDvbNitSettingsObservation] @go(DvbNitSettings,[]M2TsSettingsDvbNitSettingsObservation)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	dvbSdtSettings?: [...#M2TsSettingsDvbSdtSettingsObservation] @go(DvbSdtSettings,[]M2TsSettingsDvbSdtSettingsObservation)
	dvbSubPids?: null | string @go(DvbSubPids,*string)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	dvbTdtSettings?: [...#M2TsSettingsDvbTdtSettingsObservation] @go(DvbTdtSettings,[]M2TsSettingsDvbTdtSettingsObservation)

	// User-specified id. Ths is used in an output group or an output.
	dvbTeletextPid?:   null | string  @go(DvbTeletextPid,*string)
	ebif?:             null | string  @go(Ebif,*string)
	ebpAudioInterval?: null | string  @go(EbpAudioInterval,*string)
	ebpLookaheadMs?:   null | float64 @go(EbpLookaheadMs,*float64)
	ebpPlacement?:     null | string  @go(EbpPlacement,*string)

	// User-specified id. Ths is used in an output group or an output.
	ecmPid?:      null | string @go(EcmPid,*string)
	esRateInPes?: null | string @go(EsRateInPes,*string)

	// User-specified id. Ths is used in an output group or an output.
	etvPlatformPid?: null | string @go(EtvPlatformPid,*string)

	// User-specified id. Ths is used in an output group or an output.
	etvSignalPid?:       null | string  @go(EtvSignalPid,*string)
	fragmentTime?:       null | float64 @go(FragmentTime,*float64)
	klv?:                null | string  @go(Klv,*string)
	klvDataPids?:        null | string  @go(KlvDataPids,*string)
	nielsenId3Behavior?: null | string  @go(NielsenId3Behavior,*string)

	// Average bitrate in bits/second.
	nullPacketBitrate?: null | float64 @go(NullPacketBitrate,*float64)
	patInterval?:       null | float64 @go(PatInterval,*float64)
	pcrControl?:        null | string  @go(PcrControl,*string)
	pcrPeriod?:         null | float64 @go(PcrPeriod,*float64)

	// User-specified id. Ths is used in an output group or an output.
	pcrPid?:      null | string  @go(PcrPid,*string)
	pmtInterval?: null | float64 @go(PmtInterval,*float64)

	// User-specified id. Ths is used in an output group or an output.
	pmtPid?:        null | string  @go(PmtPid,*string)
	programNum?:    null | float64 @go(ProgramNum,*float64)
	rateMode?:      null | string  @go(RateMode,*string)
	scte27Pids?:    null | string  @go(Scte27Pids,*string)
	scte35Control?: null | string  @go(Scte35Control,*string)

	// PID from which to read SCTE-35 messages.
	scte35Pid?:             null | string  @go(Scte35Pid,*string)
	segmentationMarkers?:   null | string  @go(SegmentationMarkers,*string)
	segmentationStyle?:     null | string  @go(SegmentationStyle,*string)
	segmentationTime?:      null | float64 @go(SegmentationTime,*float64)
	timedMetadataBehavior?: null | string  @go(TimedMetadataBehavior,*string)

	// User-specified id. Ths is used in an output group or an output.
	timedMetadataPid?: null | string @go(TimedMetadataPid,*string)

	// User-specified id. Ths is used in an output group or an output.
	transportStreamId?: null | float64 @go(TransportStreamID,*float64)

	// User-specified id. Ths is used in an output group or an output.
	videoPid?: null | string @go(VideoPid,*string)
}

#ContainerSettingsM2TsSettingsParameters: {
	// +kubebuilder:validation:Optional
	absentInputAudioBehavior?: null | string @go(AbsentInputAudioBehavior,*string)

	// +kubebuilder:validation:Optional
	arib?: null | string @go(Arib,*string)

	// User-specified id. Ths is used in an output group or an output.
	// +kubebuilder:validation:Optional
	aribCaptionsPid?: null | string @go(AribCaptionsPid,*string)

	// +kubebuilder:validation:Optional
	aribCaptionsPidControl?: null | string @go(AribCaptionsPidControl,*string)

	// +kubebuilder:validation:Optional
	audioBufferModel?: null | string @go(AudioBufferModel,*string)

	// +kubebuilder:validation:Optional
	audioFramesPerPes?: null | float64 @go(AudioFramesPerPes,*float64)

	// +kubebuilder:validation:Optional
	audioPids?: null | string @go(AudioPids,*string)

	// +kubebuilder:validation:Optional
	audioStreamType?: null | string @go(AudioStreamType,*string)

	// Average bitrate in bits/second.
	// +kubebuilder:validation:Optional
	bitrate?: null | float64 @go(Bitrate,*float64)

	// +kubebuilder:validation:Optional
	bufferModel?: null | string @go(BufferModel,*string)

	// +kubebuilder:validation:Optional
	ccDescriptor?: null | string @go(CcDescriptor,*string)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	dvbNitSettings?: [...#M2TsSettingsDvbNitSettingsParameters] @go(DvbNitSettings,[]M2TsSettingsDvbNitSettingsParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	dvbSdtSettings?: [...#M2TsSettingsDvbSdtSettingsParameters] @go(DvbSdtSettings,[]M2TsSettingsDvbSdtSettingsParameters)

	// +kubebuilder:validation:Optional
	dvbSubPids?: null | string @go(DvbSubPids,*string)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	dvbTdtSettings?: [...#M2TsSettingsDvbTdtSettingsParameters] @go(DvbTdtSettings,[]M2TsSettingsDvbTdtSettingsParameters)

	// User-specified id. Ths is used in an output group or an output.
	// +kubebuilder:validation:Optional
	dvbTeletextPid?: null | string @go(DvbTeletextPid,*string)

	// +kubebuilder:validation:Optional
	ebif?: null | string @go(Ebif,*string)

	// +kubebuilder:validation:Optional
	ebpAudioInterval?: null | string @go(EbpAudioInterval,*string)

	// +kubebuilder:validation:Optional
	ebpLookaheadMs?: null | float64 @go(EbpLookaheadMs,*float64)

	// +kubebuilder:validation:Optional
	ebpPlacement?: null | string @go(EbpPlacement,*string)

	// User-specified id. Ths is used in an output group or an output.
	// +kubebuilder:validation:Optional
	ecmPid?: null | string @go(EcmPid,*string)

	// +kubebuilder:validation:Optional
	esRateInPes?: null | string @go(EsRateInPes,*string)

	// User-specified id. Ths is used in an output group or an output.
	// +kubebuilder:validation:Optional
	etvPlatformPid?: null | string @go(EtvPlatformPid,*string)

	// User-specified id. Ths is used in an output group or an output.
	// +kubebuilder:validation:Optional
	etvSignalPid?: null | string @go(EtvSignalPid,*string)

	// +kubebuilder:validation:Optional
	fragmentTime?: null | float64 @go(FragmentTime,*float64)

	// +kubebuilder:validation:Optional
	klv?: null | string @go(Klv,*string)

	// +kubebuilder:validation:Optional
	klvDataPids?: null | string @go(KlvDataPids,*string)

	// +kubebuilder:validation:Optional
	nielsenId3Behavior?: null | string @go(NielsenId3Behavior,*string)

	// Average bitrate in bits/second.
	// +kubebuilder:validation:Optional
	nullPacketBitrate?: null | float64 @go(NullPacketBitrate,*float64)

	// +kubebuilder:validation:Optional
	patInterval?: null | float64 @go(PatInterval,*float64)

	// +kubebuilder:validation:Optional
	pcrControl?: null | string @go(PcrControl,*string)

	// +kubebuilder:validation:Optional
	pcrPeriod?: null | float64 @go(PcrPeriod,*float64)

	// User-specified id. Ths is used in an output group or an output.
	// +kubebuilder:validation:Optional
	pcrPid?: null | string @go(PcrPid,*string)

	// +kubebuilder:validation:Optional
	pmtInterval?: null | float64 @go(PmtInterval,*float64)

	// User-specified id. Ths is used in an output group or an output.
	// +kubebuilder:validation:Optional
	pmtPid?: null | string @go(PmtPid,*string)

	// +kubebuilder:validation:Optional
	programNum?: null | float64 @go(ProgramNum,*float64)

	// +kubebuilder:validation:Optional
	rateMode?: null | string @go(RateMode,*string)

	// +kubebuilder:validation:Optional
	scte27Pids?: null | string @go(Scte27Pids,*string)

	// +kubebuilder:validation:Optional
	scte35Control?: null | string @go(Scte35Control,*string)

	// PID from which to read SCTE-35 messages.
	// +kubebuilder:validation:Optional
	scte35Pid?: null | string @go(Scte35Pid,*string)

	// +kubebuilder:validation:Optional
	segmentationMarkers?: null | string @go(SegmentationMarkers,*string)

	// +kubebuilder:validation:Optional
	segmentationStyle?: null | string @go(SegmentationStyle,*string)

	// +kubebuilder:validation:Optional
	segmentationTime?: null | float64 @go(SegmentationTime,*float64)

	// +kubebuilder:validation:Optional
	timedMetadataBehavior?: null | string @go(TimedMetadataBehavior,*string)

	// User-specified id. Ths is used in an output group or an output.
	// +kubebuilder:validation:Optional
	timedMetadataPid?: null | string @go(TimedMetadataPid,*string)

	// User-specified id. Ths is used in an output group or an output.
	// +kubebuilder:validation:Optional
	transportStreamId?: null | float64 @go(TransportStreamID,*float64)

	// User-specified id. Ths is used in an output group or an output.
	// +kubebuilder:validation:Optional
	videoPid?: null | string @go(VideoPid,*string)
}

#ContainerSettingsObservation: {
	// M2ts Settings. See M2ts Settings for more details.
	m2tsSettings?: [...#M2TsSettingsObservation] @go(M2TsSettings,[]M2TsSettingsObservation)

	// Raw Settings. This can be set as an empty block.
	rawSettings?: [...#RawSettingsParameters] @go(RawSettings,[]RawSettingsParameters)
}

#ContainerSettingsParameters: {
	// M2ts Settings. See M2ts Settings for more details.
	// +kubebuilder:validation:Optional
	m2tsSettings?: [...#M2TsSettingsParameters] @go(M2TsSettings,[]M2TsSettingsParameters)

	// Raw Settings. This can be set as an empty block.
	// +kubebuilder:validation:Optional
	rawSettings?: [...#RawSettingsParameters] @go(RawSettings,[]RawSettingsParameters)
}

#DestinationInitParameters: {
	// Reference ID for the destination.
	destinationRefId?: null | string @go(DestinationRefID,*string)
}

#DestinationObservation: {
	// Reference ID for the destination.
	destinationRefId?: null | string @go(DestinationRefID,*string)
}

#DestinationParameters: {
	// Reference ID for the destination.
	// +kubebuilder:validation:Optional
	destinationRefId?: null | string @go(DestinationRefID,*string)
}

#DestinationsInitParameters: {
	// User-specified id. Ths is used in an output group or an output.
	id?: null | string @go(ID,*string)

	// Destination settings for a MediaPackage output; one destination for both encoders. See Media Package Settings for more details.
	mediaPackageSettings?: [...#MediaPackageSettingsInitParameters] @go(MediaPackageSettings,[]MediaPackageSettingsInitParameters)

	// Destination settings for a Multiplex output; one destination for both encoders. See Multiplex Settings for more details.
	multiplexSettings?: [...#MultiplexSettingsInitParameters] @go(MultiplexSettings,[]MultiplexSettingsInitParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	settings?: [...#SettingsInitParameters] @go(Settings,[]SettingsInitParameters)
}

#DestinationsObservation: {
	// User-specified id. Ths is used in an output group or an output.
	id?: null | string @go(ID,*string)

	// Destination settings for a MediaPackage output; one destination for both encoders. See Media Package Settings for more details.
	mediaPackageSettings?: [...#MediaPackageSettingsObservation] @go(MediaPackageSettings,[]MediaPackageSettingsObservation)

	// Destination settings for a Multiplex output; one destination for both encoders. See Multiplex Settings for more details.
	multiplexSettings?: [...#MultiplexSettingsObservation] @go(MultiplexSettings,[]MultiplexSettingsObservation)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	settings?: [...#SettingsObservation] @go(Settings,[]SettingsObservation)
}

#DestinationsParameters: {
	// User-specified id. Ths is used in an output group or an output.
	// +kubebuilder:validation:Optional
	id?: null | string @go(ID,*string)

	// Destination settings for a MediaPackage output; one destination for both encoders. See Media Package Settings for more details.
	// +kubebuilder:validation:Optional
	mediaPackageSettings?: [...#MediaPackageSettingsParameters] @go(MediaPackageSettings,[]MediaPackageSettingsParameters)

	// Destination settings for a Multiplex output; one destination for both encoders. See Multiplex Settings for more details.
	// +kubebuilder:validation:Optional
	multiplexSettings?: [...#MultiplexSettingsParameters] @go(MultiplexSettings,[]MultiplexSettingsParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	settings?: [...#SettingsParameters] @go(Settings,[]SettingsParameters)
}

#DolbyVision81SettingsInitParameters: {
}

#DolbyVision81SettingsObservation: {
}

#DolbyVision81SettingsParameters: {
}

#DvbNitSettingsInitParameters: {
	// User-specified id. Ths is used in an output group or an output.
	networkId?: null | float64 @go(NetworkID,*float64)

	// Name of the Channel.
	networkName?: null | string  @go(NetworkName,*string)
	repInterval?: null | float64 @go(RepInterval,*float64)
}

#DvbNitSettingsObservation: {
	// User-specified id. Ths is used in an output group or an output.
	networkId?: null | float64 @go(NetworkID,*float64)

	// Name of the Channel.
	networkName?: null | string  @go(NetworkName,*string)
	repInterval?: null | float64 @go(RepInterval,*float64)
}

#DvbNitSettingsParameters: {
	// User-specified id. Ths is used in an output group or an output.
	// +kubebuilder:validation:Optional
	networkId?: null | float64 @go(NetworkID,*float64)

	// Name of the Channel.
	// +kubebuilder:validation:Optional
	networkName?: null | string @go(NetworkName,*string)

	// +kubebuilder:validation:Optional
	repInterval?: null | float64 @go(RepInterval,*float64)
}

#DvbSdtSettingsInitParameters: {
	outputSdt?:   null | string  @go(OutputSdt,*string)
	repInterval?: null | float64 @go(RepInterval,*float64)

	// Name of the Channel.
	serviceName?: null | string @go(ServiceName,*string)

	// Name of the Channel.
	serviceProviderName?: null | string @go(ServiceProviderName,*string)
}

#DvbSdtSettingsObservation: {
	outputSdt?:   null | string  @go(OutputSdt,*string)
	repInterval?: null | float64 @go(RepInterval,*float64)

	// Name of the Channel.
	serviceName?: null | string @go(ServiceName,*string)

	// Name of the Channel.
	serviceProviderName?: null | string @go(ServiceProviderName,*string)
}

#DvbSdtSettingsParameters: {
	// +kubebuilder:validation:Optional
	outputSdt?: null | string @go(OutputSdt,*string)

	// +kubebuilder:validation:Optional
	repInterval?: null | float64 @go(RepInterval,*float64)

	// Name of the Channel.
	// +kubebuilder:validation:Optional
	serviceName?: null | string @go(ServiceName,*string)

	// Name of the Channel.
	// +kubebuilder:validation:Optional
	serviceProviderName?: null | string @go(ServiceProviderName,*string)
}

#DvbTdtSettingsInitParameters: {
	repInterval?: null | float64 @go(RepInterval,*float64)
}

#DvbTdtSettingsObservation: {
	repInterval?: null | float64 @go(RepInterval,*float64)
}

#DvbTdtSettingsParameters: {
	// +kubebuilder:validation:Optional
	repInterval?: null | float64 @go(RepInterval,*float64)
}

#Eac3AtmosSettingsInitParameters: {
	// Average bitrate in bits/second.
	bitrate?: null | float64 @go(Bitrate,*float64)

	// Mono, Stereo, or 5.1 channel layout.
	codingMode?: null | string @go(CodingMode,*string)

	// Sets the dialnorm of the output.
	dialnorm?: null | float64 @go(Dialnorm,*float64)

	// Sets the Dolby dynamic range compression profile.
	drcLine?: null | string @go(DrcLine,*string)

	// Sets the profile for heavy Dolby dynamic range compression.
	drcRf?: null | string @go(DrcRf,*string)

	// Height dimensional trim.
	heightTrim?: null | float64 @go(HeightTrim,*float64)

	// Surround dimensional trim.
	surroundTrim?: null | float64 @go(SurroundTrim,*float64)
}

#Eac3AtmosSettingsObservation: {
	// Average bitrate in bits/second.
	bitrate?: null | float64 @go(Bitrate,*float64)

	// Mono, Stereo, or 5.1 channel layout.
	codingMode?: null | string @go(CodingMode,*string)

	// Sets the dialnorm of the output.
	dialnorm?: null | float64 @go(Dialnorm,*float64)

	// Sets the Dolby dynamic range compression profile.
	drcLine?: null | string @go(DrcLine,*string)

	// Sets the profile for heavy Dolby dynamic range compression.
	drcRf?: null | string @go(DrcRf,*string)

	// Height dimensional trim.
	heightTrim?: null | float64 @go(HeightTrim,*float64)

	// Surround dimensional trim.
	surroundTrim?: null | float64 @go(SurroundTrim,*float64)
}

#Eac3AtmosSettingsParameters: {
	// Average bitrate in bits/second.
	// +kubebuilder:validation:Optional
	bitrate?: null | float64 @go(Bitrate,*float64)

	// Mono, Stereo, or 5.1 channel layout.
	// +kubebuilder:validation:Optional
	codingMode?: null | string @go(CodingMode,*string)

	// Sets the dialnorm of the output.
	// +kubebuilder:validation:Optional
	dialnorm?: null | float64 @go(Dialnorm,*float64)

	// Sets the Dolby dynamic range compression profile.
	// +kubebuilder:validation:Optional
	drcLine?: null | string @go(DrcLine,*string)

	// Sets the profile for heavy Dolby dynamic range compression.
	// +kubebuilder:validation:Optional
	drcRf?: null | string @go(DrcRf,*string)

	// Height dimensional trim.
	// +kubebuilder:validation:Optional
	heightTrim?: null | float64 @go(HeightTrim,*float64)

	// Surround dimensional trim.
	// +kubebuilder:validation:Optional
	surroundTrim?: null | float64 @go(SurroundTrim,*float64)
}

#Eac3SettingsInitParameters: {
	// Sets the attenuation control.
	attenuationControl?: null | string @go(AttenuationControl,*string)

	// Average bitrate in bits/second.
	bitrate?: null | float64 @go(Bitrate,*float64)

	// Specifies the bitstream mode (bsmod) for the emitted AC-3 stream.
	bitstreamMode?: null | string @go(BitstreamMode,*string)

	// Mono, Stereo, or 5.1 channel layout.
	codingMode?: null | string @go(CodingMode,*string)
	dcFilter?:   null | string @go(DcFilter,*string)

	// Sets the dialnorm of the output.
	dialnorm?: null | float64 @go(Dialnorm,*float64)

	// Sets the Dolby dynamic range compression profile.
	drcLine?: null | string @go(DrcLine,*string)

	// Sets the profile for heavy Dolby dynamic range compression.
	drcRf?:      null | string @go(DrcRf,*string)
	lfeControl?: null | string @go(LfeControl,*string)

	// When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding.
	lfeFilter?: null | string @go(LfeFilter,*string)

	// H264 level.
	loRoCenterMixLevel?: null | float64 @go(LoRoCenterMixLevel,*float64)

	// H264 level.
	loRoSurroundMixLevel?: null | float64 @go(LoRoSurroundMixLevel,*float64)

	// H264 level.
	ltRtCenterMixLevel?: null | float64 @go(LtRtCenterMixLevel,*float64)

	// H264 level.
	ltRtSurroundMixLevel?: null | float64 @go(LtRtSurroundMixLevel,*float64)

	// Metadata control.
	metadataControl?:    null | string @go(MetadataControl,*string)
	passthroughControl?: null | string @go(PassthroughControl,*string)
	phaseControl?:       null | string @go(PhaseControl,*string)
	stereoDownmix?:      null | string @go(StereoDownmix,*string)
	surroundExMode?:     null | string @go(SurroundExMode,*string)
	surroundMode?:       null | string @go(SurroundMode,*string)
}

#Eac3SettingsObservation: {
	// Sets the attenuation control.
	attenuationControl?: null | string @go(AttenuationControl,*string)

	// Average bitrate in bits/second.
	bitrate?: null | float64 @go(Bitrate,*float64)

	// Specifies the bitstream mode (bsmod) for the emitted AC-3 stream.
	bitstreamMode?: null | string @go(BitstreamMode,*string)

	// Mono, Stereo, or 5.1 channel layout.
	codingMode?: null | string @go(CodingMode,*string)
	dcFilter?:   null | string @go(DcFilter,*string)

	// Sets the dialnorm of the output.
	dialnorm?: null | float64 @go(Dialnorm,*float64)

	// Sets the Dolby dynamic range compression profile.
	drcLine?: null | string @go(DrcLine,*string)

	// Sets the profile for heavy Dolby dynamic range compression.
	drcRf?:      null | string @go(DrcRf,*string)
	lfeControl?: null | string @go(LfeControl,*string)

	// When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding.
	lfeFilter?: null | string @go(LfeFilter,*string)

	// H264 level.
	loRoCenterMixLevel?: null | float64 @go(LoRoCenterMixLevel,*float64)

	// H264 level.
	loRoSurroundMixLevel?: null | float64 @go(LoRoSurroundMixLevel,*float64)

	// H264 level.
	ltRtCenterMixLevel?: null | float64 @go(LtRtCenterMixLevel,*float64)

	// H264 level.
	ltRtSurroundMixLevel?: null | float64 @go(LtRtSurroundMixLevel,*float64)

	// Metadata control.
	metadataControl?:    null | string @go(MetadataControl,*string)
	passthroughControl?: null | string @go(PassthroughControl,*string)
	phaseControl?:       null | string @go(PhaseControl,*string)
	stereoDownmix?:      null | string @go(StereoDownmix,*string)
	surroundExMode?:     null | string @go(SurroundExMode,*string)
	surroundMode?:       null | string @go(SurroundMode,*string)
}

#Eac3SettingsParameters: {
	// Sets the attenuation control.
	// +kubebuilder:validation:Optional
	attenuationControl?: null | string @go(AttenuationControl,*string)

	// Average bitrate in bits/second.
	// +kubebuilder:validation:Optional
	bitrate?: null | float64 @go(Bitrate,*float64)

	// Specifies the bitstream mode (bsmod) for the emitted AC-3 stream.
	// +kubebuilder:validation:Optional
	bitstreamMode?: null | string @go(BitstreamMode,*string)

	// Mono, Stereo, or 5.1 channel layout.
	// +kubebuilder:validation:Optional
	codingMode?: null | string @go(CodingMode,*string)

	// +kubebuilder:validation:Optional
	dcFilter?: null | string @go(DcFilter,*string)

	// Sets the dialnorm of the output.
	// +kubebuilder:validation:Optional
	dialnorm?: null | float64 @go(Dialnorm,*float64)

	// Sets the Dolby dynamic range compression profile.
	// +kubebuilder:validation:Optional
	drcLine?: null | string @go(DrcLine,*string)

	// Sets the profile for heavy Dolby dynamic range compression.
	// +kubebuilder:validation:Optional
	drcRf?: null | string @go(DrcRf,*string)

	// +kubebuilder:validation:Optional
	lfeControl?: null | string @go(LfeControl,*string)

	// When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding.
	// +kubebuilder:validation:Optional
	lfeFilter?: null | string @go(LfeFilter,*string)

	// H264 level.
	// +kubebuilder:validation:Optional
	loRoCenterMixLevel?: null | float64 @go(LoRoCenterMixLevel,*float64)

	// H264 level.
	// +kubebuilder:validation:Optional
	loRoSurroundMixLevel?: null | float64 @go(LoRoSurroundMixLevel,*float64)

	// H264 level.
	// +kubebuilder:validation:Optional
	ltRtCenterMixLevel?: null | float64 @go(LtRtCenterMixLevel,*float64)

	// H264 level.
	// +kubebuilder:validation:Optional
	ltRtSurroundMixLevel?: null | float64 @go(LtRtSurroundMixLevel,*float64)

	// Metadata control.
	// +kubebuilder:validation:Optional
	metadataControl?: null | string @go(MetadataControl,*string)

	// +kubebuilder:validation:Optional
	passthroughControl?: null | string @go(PassthroughControl,*string)

	// +kubebuilder:validation:Optional
	phaseControl?: null | string @go(PhaseControl,*string)

	// +kubebuilder:validation:Optional
	stereoDownmix?: null | string @go(StereoDownmix,*string)

	// +kubebuilder:validation:Optional
	surroundExMode?: null | string @go(SurroundExMode,*string)

	// +kubebuilder:validation:Optional
	surroundMode?: null | string @go(SurroundMode,*string)
}

#EmbeddedSourceSettingsInitParameters: {
	convert608To708?:        null | string  @go(Convert608To708,*string)
	scte20Detection?:        null | string  @go(Scte20Detection,*string)
	source608ChannelNumber?: null | float64 @go(Source608ChannelNumber,*float64)
	source608TrackNumber?:   null | float64 @go(Source608TrackNumber,*float64)
}

#EmbeddedSourceSettingsObservation: {
	convert608To708?:        null | string  @go(Convert608To708,*string)
	scte20Detection?:        null | string  @go(Scte20Detection,*string)
	source608ChannelNumber?: null | float64 @go(Source608ChannelNumber,*float64)
	source608TrackNumber?:   null | float64 @go(Source608TrackNumber,*float64)
}

#EmbeddedSourceSettingsParameters: {
	// +kubebuilder:validation:Optional
	convert608To708?: null | string @go(Convert608To708,*string)

	// +kubebuilder:validation:Optional
	scte20Detection?: null | string @go(Scte20Detection,*string)

	// +kubebuilder:validation:Optional
	source608ChannelNumber?: null | float64 @go(Source608ChannelNumber,*float64)

	// +kubebuilder:validation:Optional
	source608TrackNumber?: null | float64 @go(Source608TrackNumber,*float64)
}

#EncoderSettingsInitParameters: {
	// Audio descriptions for the channel. See Audio Descriptions for more details.
	audioDescriptions?: [...#AudioDescriptionsInitParameters] @go(AudioDescriptions,[]AudioDescriptionsInitParameters)

	// Settings for ad avail blanking. See Avail Blanking for more details.
	availBlanking?: [...#AvailBlankingInitParameters] @go(AvailBlanking,[]AvailBlankingInitParameters)

	// Output groups for the channel. See Output Groups for more details.
	outputGroups?: [...#OutputGroupsInitParameters] @go(OutputGroups,[]OutputGroupsInitParameters)

	// Contains settings used to acquire and adjust timecode information from inputs. See Timecode Config for more details.
	timecodeConfig?: [...#TimecodeConfigInitParameters] @go(TimecodeConfig,[]TimecodeConfigInitParameters)

	// Video Descriptions. See Video Descriptions for more details.
	videoDescriptions?: [...#VideoDescriptionsInitParameters] @go(VideoDescriptions,[]VideoDescriptionsInitParameters)
}

#EncoderSettingsObservation: {
	// Audio descriptions for the channel. See Audio Descriptions for more details.
	audioDescriptions?: [...#AudioDescriptionsObservation] @go(AudioDescriptions,[]AudioDescriptionsObservation)

	// Settings for ad avail blanking. See Avail Blanking for more details.
	availBlanking?: [...#AvailBlankingObservation] @go(AvailBlanking,[]AvailBlankingObservation)

	// Output groups for the channel. See Output Groups for more details.
	outputGroups?: [...#OutputGroupsObservation] @go(OutputGroups,[]OutputGroupsObservation)

	// Contains settings used to acquire and adjust timecode information from inputs. See Timecode Config for more details.
	timecodeConfig?: [...#TimecodeConfigObservation] @go(TimecodeConfig,[]TimecodeConfigObservation)

	// Video Descriptions. See Video Descriptions for more details.
	videoDescriptions?: [...#VideoDescriptionsObservation] @go(VideoDescriptions,[]VideoDescriptionsObservation)
}

#EncoderSettingsParameters: {
	// Audio descriptions for the channel. See Audio Descriptions for more details.
	// +kubebuilder:validation:Optional
	audioDescriptions?: [...#AudioDescriptionsParameters] @go(AudioDescriptions,[]AudioDescriptionsParameters)

	// Settings for ad avail blanking. See Avail Blanking for more details.
	// +kubebuilder:validation:Optional
	availBlanking?: [...#AvailBlankingParameters] @go(AvailBlanking,[]AvailBlankingParameters)

	// Output groups for the channel. See Output Groups for more details.
	// +kubebuilder:validation:Optional
	outputGroups: [...#OutputGroupsParameters] @go(OutputGroups,[]OutputGroupsParameters)

	// Contains settings used to acquire and adjust timecode information from inputs. See Timecode Config for more details.
	// +kubebuilder:validation:Optional
	timecodeConfig: [...#TimecodeConfigParameters] @go(TimecodeConfig,[]TimecodeConfigParameters)

	// Video Descriptions. See Video Descriptions for more details.
	// +kubebuilder:validation:Optional
	videoDescriptions?: [...#VideoDescriptionsParameters] @go(VideoDescriptions,[]VideoDescriptionsParameters)
}

#FailoverConditionInitParameters: {
	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	failoverConditionSettings?: [...#FailoverConditionSettingsInitParameters] @go(FailoverConditionSettings,[]FailoverConditionSettingsInitParameters)
}

#FailoverConditionObservation: {
	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	failoverConditionSettings?: [...#FailoverConditionSettingsObservation] @go(FailoverConditionSettings,[]FailoverConditionSettingsObservation)
}

#FailoverConditionParameters: {
	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	failoverConditionSettings?: [...#FailoverConditionSettingsParameters] @go(FailoverConditionSettings,[]FailoverConditionSettingsParameters)
}

#FailoverConditionSettingsInitParameters: {
	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	audioSilenceSettings?: [...#AudioSilenceSettingsInitParameters] @go(AudioSilenceSettings,[]AudioSilenceSettingsInitParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	inputLossSettings?: [...#InputLossSettingsInitParameters] @go(InputLossSettings,[]InputLossSettingsInitParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	videoBlackSettings?: [...#VideoBlackSettingsInitParameters] @go(VideoBlackSettings,[]VideoBlackSettingsInitParameters)
}

#FailoverConditionSettingsObservation: {
	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	audioSilenceSettings?: [...#AudioSilenceSettingsObservation] @go(AudioSilenceSettings,[]AudioSilenceSettingsObservation)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	inputLossSettings?: [...#InputLossSettingsObservation] @go(InputLossSettings,[]InputLossSettingsObservation)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	videoBlackSettings?: [...#VideoBlackSettingsObservation] @go(VideoBlackSettings,[]VideoBlackSettingsObservation)
}

#FailoverConditionSettingsParameters: {
	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	audioSilenceSettings?: [...#AudioSilenceSettingsParameters] @go(AudioSilenceSettings,[]AudioSilenceSettingsParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	inputLossSettings?: [...#InputLossSettingsParameters] @go(InputLossSettings,[]InputLossSettingsParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	videoBlackSettings?: [...#VideoBlackSettingsParameters] @go(VideoBlackSettings,[]VideoBlackSettingsParameters)
}

#FecOutputSettingsInitParameters: {
	// The height of the FEC protection matrix.
	columnDepth?: null | float64 @go(ColumnDepth,*float64)

	// Enables column only or column and row based FEC.
	includeFec?: null | string @go(IncludeFec,*string)

	// The width of the FEC protection matrix.
	rowLength?: null | float64 @go(RowLength,*float64)
}

#FecOutputSettingsObservation: {
	// The height of the FEC protection matrix.
	columnDepth?: null | float64 @go(ColumnDepth,*float64)

	// Enables column only or column and row based FEC.
	includeFec?: null | string @go(IncludeFec,*string)

	// The width of the FEC protection matrix.
	rowLength?: null | float64 @go(RowLength,*float64)
}

#FecOutputSettingsParameters: {
	// The height of the FEC protection matrix.
	// +kubebuilder:validation:Optional
	columnDepth?: null | float64 @go(ColumnDepth,*float64)

	// Enables column only or column and row based FEC.
	// +kubebuilder:validation:Optional
	includeFec?: null | string @go(IncludeFec,*string)

	// The width of the FEC protection matrix.
	// +kubebuilder:validation:Optional
	rowLength?: null | float64 @go(RowLength,*float64)
}

#FilterSettingsInitParameters: {
	// Temporal filter settings. See Temporal Filter Settings
	temporalFilterSettings?: [...#TemporalFilterSettingsInitParameters] @go(TemporalFilterSettings,[]TemporalFilterSettingsInitParameters)
}

#FilterSettingsObservation: {
	// Temporal filter settings. See Temporal Filter Settings
	temporalFilterSettings?: [...#TemporalFilterSettingsObservation] @go(TemporalFilterSettings,[]TemporalFilterSettingsObservation)
}

#FilterSettingsParameters: {
	// Temporal filter settings. See Temporal Filter Settings
	// +kubebuilder:validation:Optional
	temporalFilterSettings?: [...#TemporalFilterSettingsParameters] @go(TemporalFilterSettings,[]TemporalFilterSettingsParameters)
}

#FilterSettingsTemporalFilterSettingsInitParameters: {
	// Post filter sharpening.
	postFilterSharpening?: null | string @go(PostFilterSharpening,*string)

	// Filter strength.
	strength?: null | string @go(Strength,*string)
}

#FilterSettingsTemporalFilterSettingsObservation: {
	// Post filter sharpening.
	postFilterSharpening?: null | string @go(PostFilterSharpening,*string)

	// Filter strength.
	strength?: null | string @go(Strength,*string)
}

#FilterSettingsTemporalFilterSettingsParameters: {
	// Post filter sharpening.
	// +kubebuilder:validation:Optional
	postFilterSharpening?: null | string @go(PostFilterSharpening,*string)

	// Filter strength.
	// +kubebuilder:validation:Optional
	strength?: null | string @go(Strength,*string)
}

#Fmp4HlsSettingsInitParameters: {
	audioRenditionSets?:    null | string @go(AudioRenditionSets,*string)
	nielsenId3Behavior?:    null | string @go(NielsenId3Behavior,*string)
	timedMetadataBehavior?: null | string @go(TimedMetadataBehavior,*string)
}

#Fmp4HlsSettingsObservation: {
	audioRenditionSets?:    null | string @go(AudioRenditionSets,*string)
	nielsenId3Behavior?:    null | string @go(NielsenId3Behavior,*string)
	timedMetadataBehavior?: null | string @go(TimedMetadataBehavior,*string)
}

#Fmp4HlsSettingsParameters: {
	// +kubebuilder:validation:Optional
	audioRenditionSets?: null | string @go(AudioRenditionSets,*string)

	// +kubebuilder:validation:Optional
	nielsenId3Behavior?: null | string @go(NielsenId3Behavior,*string)

	// +kubebuilder:validation:Optional
	timedMetadataBehavior?: null | string @go(TimedMetadataBehavior,*string)
}

#FrameCaptureCdnSettingsInitParameters: {
	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	frameCaptureS3Settings?: [...#FrameCaptureS3SettingsInitParameters] @go(FrameCaptureS3Settings,[]FrameCaptureS3SettingsInitParameters)
}

#FrameCaptureCdnSettingsObservation: {
	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	frameCaptureS3Settings?: [...#FrameCaptureS3SettingsObservation] @go(FrameCaptureS3Settings,[]FrameCaptureS3SettingsObservation)
}

#FrameCaptureCdnSettingsParameters: {
	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	frameCaptureS3Settings?: [...#FrameCaptureS3SettingsParameters] @go(FrameCaptureS3Settings,[]FrameCaptureS3SettingsParameters)
}

#FrameCaptureGroupSettingsDestinationInitParameters: {
	// Reference ID for the destination.
	destinationRefId?: null | string @go(DestinationRefID,*string)
}

#FrameCaptureGroupSettingsDestinationObservation: {
	// Reference ID for the destination.
	destinationRefId?: null | string @go(DestinationRefID,*string)
}

#FrameCaptureGroupSettingsDestinationParameters: {
	// Reference ID for the destination.
	// +kubebuilder:validation:Optional
	destinationRefId?: null | string @go(DestinationRefID,*string)
}

#FrameCaptureGroupSettingsInitParameters: {
	// A director and base filename where archive files should be written. See Destination for more details.
	destination?: [...#FrameCaptureGroupSettingsDestinationInitParameters] @go(Destination,[]FrameCaptureGroupSettingsDestinationInitParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	frameCaptureCdnSettings?: [...#FrameCaptureCdnSettingsInitParameters] @go(FrameCaptureCdnSettings,[]FrameCaptureCdnSettingsInitParameters)
}

#FrameCaptureGroupSettingsObservation: {
	// A director and base filename where archive files should be written. See Destination for more details.
	destination?: [...#FrameCaptureGroupSettingsDestinationObservation] @go(Destination,[]FrameCaptureGroupSettingsDestinationObservation)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	frameCaptureCdnSettings?: [...#FrameCaptureCdnSettingsObservation] @go(FrameCaptureCdnSettings,[]FrameCaptureCdnSettingsObservation)
}

#FrameCaptureGroupSettingsParameters: {
	// A director and base filename where archive files should be written. See Destination for more details.
	// +kubebuilder:validation:Optional
	destination: [...#FrameCaptureGroupSettingsDestinationParameters] @go(Destination,[]FrameCaptureGroupSettingsDestinationParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	frameCaptureCdnSettings?: [...#FrameCaptureCdnSettingsParameters] @go(FrameCaptureCdnSettings,[]FrameCaptureCdnSettingsParameters)
}

#FrameCaptureHlsSettingsInitParameters: {
}

#FrameCaptureHlsSettingsObservation: {
}

#FrameCaptureHlsSettingsParameters: {
}

#FrameCaptureOutputSettingsInitParameters: {
	// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
	nameModifier?: null | string @go(NameModifier,*string)
}

#FrameCaptureOutputSettingsObservation: {
	// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
	nameModifier?: null | string @go(NameModifier,*string)
}

#FrameCaptureOutputSettingsParameters: {
	// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
	// +kubebuilder:validation:Optional
	nameModifier?: null | string @go(NameModifier,*string)
}

#FrameCaptureS3SettingsInitParameters: {
	// Specify the canned ACL to apply to each S3 request.
	cannedAcl?: null | string @go(CannedACL,*string)
}

#FrameCaptureS3SettingsObservation: {
	// Specify the canned ACL to apply to each S3 request.
	cannedAcl?: null | string @go(CannedACL,*string)
}

#FrameCaptureS3SettingsParameters: {
	// Specify the canned ACL to apply to each S3 request.
	// +kubebuilder:validation:Optional
	cannedAcl?: null | string @go(CannedACL,*string)
}

#FrameCaptureSettingsInitParameters: {
	// The frequency at which to capture frames for inclusion in the output.
	captureInterval?: null | float64 @go(CaptureInterval,*float64)

	// Unit for the frame capture interval.
	captureIntervalUnits?: null | string @go(CaptureIntervalUnits,*string)
}

#FrameCaptureSettingsObservation: {
	// The frequency at which to capture frames for inclusion in the output.
	captureInterval?: null | float64 @go(CaptureInterval,*float64)

	// Unit for the frame capture interval.
	captureIntervalUnits?: null | string @go(CaptureIntervalUnits,*string)
}

#FrameCaptureSettingsParameters: {
	// The frequency at which to capture frames for inclusion in the output.
	// +kubebuilder:validation:Optional
	captureInterval?: null | float64 @go(CaptureInterval,*float64)

	// Unit for the frame capture interval.
	// +kubebuilder:validation:Optional
	captureIntervalUnits?: null | string @go(CaptureIntervalUnits,*string)
}

#H264SettingsInitParameters: {
	// Enables or disables adaptive quantization.
	adaptiveQuantization?: null | string @go(AdaptiveQuantization,*string)

	// Indicates that AFD values will be written into the output stream.
	afdSignaling?: null | string @go(AfdSignaling,*string)

	// Average bitrate in bits/second.
	bitrate?:    null | float64 @go(Bitrate,*float64)
	bufFillPct?: null | float64 @go(BufFillPct,*float64)

	// Size of buffer in bits.
	bufSize?: null | float64 @go(BufSize,*float64)

	// Includes color space metadata in the output.
	colorMetadata?: null | string @go(ColorMetadata,*string)

	// Entropy encoding mode.
	entropyEncoding?: null | string @go(EntropyEncoding,*string)

	// Filters to apply to an encode. See H264 Filter Settings for more details.
	filterSettings?: [...#FilterSettingsInitParameters] @go(FilterSettings,[]FilterSettingsInitParameters)

	// Four bit AFD value to write on all frames of video in the output stream.
	fixedAfd?:  null | string @go(FixedAfd,*string)
	flickerAq?: null | string @go(FlickerAq,*string)

	// Controls whether coding is performed on a field basis or on a frame basis.
	forceFieldPictures?: null | string @go(ForceFieldPictures,*string)

	// Indicates how the output video frame rate is specified.
	framerateControl?: null | string @go(FramerateControl,*string)

	// Framerate denominator.
	framerateDenominator?: null | float64 @go(FramerateDenominator,*float64)

	// Framerate numerator.
	framerateNumerator?: null | float64 @go(FramerateNumerator,*float64)

	// GOP-B reference.
	gopBReference?: null | string @go(GopBReference,*string)

	// Frequency of closed GOPs.
	gopClosedCadence?: null | float64 @go(GopClosedCadence,*float64)

	// Number of B-frames between reference frames.
	gopNumBFrames?: null | float64 @go(GopNumBFrames,*float64)

	// GOP size in units of either frames of seconds per gop_size_units.
	gopSize?: null | float64 @go(GopSize,*float64)

	// Indicates if the gop_size is specified in frames or seconds.
	gopSizeUnits?: null | string @go(GopSizeUnits,*string)

	// H264 level.
	level?: null | string @go(Level,*string)

	// Amount of lookahead.
	lookAheadRateControl?: null | string @go(LookAheadRateControl,*string)

	// Set the maximum bitrate in order to accommodate expected spikes in the complexity of the video.
	maxBitrate?:   null | float64 @go(MaxBitrate,*float64)
	minIInterval?: null | float64 @go(MinIInterval,*float64)

	// Number of reference frames to use.
	numRefFrames?: null | float64 @go(NumRefFrames,*float64)

	// Indicates how the output pixel aspect ratio is specified.
	parControl?: null | string @go(ParControl,*string)

	// Pixel Aspect Ratio denominator.
	parDenominator?: null | float64 @go(ParDenominator,*float64)

	// Pixel Aspect Ratio numerator.
	parNumerator?: null | float64 @go(ParNumerator,*float64)

	// AAC profile.
	profile?: null | string @go(Profile,*string)

	// Quality level.
	qualityLevel?: null | string @go(QualityLevel,*string)

	// Controls the target quality for the video encode.
	qvbrQualityLevel?: null | float64 @go(QvbrQualityLevel,*float64)

	// The rate control mode.
	rateControlMode?: null | string @go(RateControlMode,*string)

	// Sets the scan type of the output.
	scanType?: null | string @go(ScanType,*string)

	// Scene change detection.
	sceneChangeDetect?: null | string @go(SceneChangeDetect,*string)

	// Number of slices per picture.
	slices?: null | float64 @go(Slices,*float64)

	// Softness.
	softness?: null | float64 @go(Softness,*float64)

	// Makes adjustments within each frame based on spatial variation of content complexity.
	spatialAq?: null | string @go(SpatialAq,*string)

	// Subgop length.
	subgopLength?: null | string @go(SubgopLength,*string)

	// Produces a bitstream compliant with SMPTE RP-2027.
	syntax?: null | string @go(Syntax,*string)

	// Makes adjustments within each frame based on temporal variation of content complexity.
	temporalAq?: null | string @go(TemporalAq,*string)

	// Determines how timecodes should be inserted into the video elementary stream.
	timecodeInsertion?: null | string @go(TimecodeInsertion,*string)
}

#H264SettingsObservation: {
	// Enables or disables adaptive quantization.
	adaptiveQuantization?: null | string @go(AdaptiveQuantization,*string)

	// Indicates that AFD values will be written into the output stream.
	afdSignaling?: null | string @go(AfdSignaling,*string)

	// Average bitrate in bits/second.
	bitrate?:    null | float64 @go(Bitrate,*float64)
	bufFillPct?: null | float64 @go(BufFillPct,*float64)

	// Size of buffer in bits.
	bufSize?: null | float64 @go(BufSize,*float64)

	// Includes color space metadata in the output.
	colorMetadata?: null | string @go(ColorMetadata,*string)

	// Entropy encoding mode.
	entropyEncoding?: null | string @go(EntropyEncoding,*string)

	// Filters to apply to an encode. See H264 Filter Settings for more details.
	filterSettings?: [...#FilterSettingsObservation] @go(FilterSettings,[]FilterSettingsObservation)

	// Four bit AFD value to write on all frames of video in the output stream.
	fixedAfd?:  null | string @go(FixedAfd,*string)
	flickerAq?: null | string @go(FlickerAq,*string)

	// Controls whether coding is performed on a field basis or on a frame basis.
	forceFieldPictures?: null | string @go(ForceFieldPictures,*string)

	// Indicates how the output video frame rate is specified.
	framerateControl?: null | string @go(FramerateControl,*string)

	// Framerate denominator.
	framerateDenominator?: null | float64 @go(FramerateDenominator,*float64)

	// Framerate numerator.
	framerateNumerator?: null | float64 @go(FramerateNumerator,*float64)

	// GOP-B reference.
	gopBReference?: null | string @go(GopBReference,*string)

	// Frequency of closed GOPs.
	gopClosedCadence?: null | float64 @go(GopClosedCadence,*float64)

	// Number of B-frames between reference frames.
	gopNumBFrames?: null | float64 @go(GopNumBFrames,*float64)

	// GOP size in units of either frames of seconds per gop_size_units.
	gopSize?: null | float64 @go(GopSize,*float64)

	// Indicates if the gop_size is specified in frames or seconds.
	gopSizeUnits?: null | string @go(GopSizeUnits,*string)

	// H264 level.
	level?: null | string @go(Level,*string)

	// Amount of lookahead.
	lookAheadRateControl?: null | string @go(LookAheadRateControl,*string)

	// Set the maximum bitrate in order to accommodate expected spikes in the complexity of the video.
	maxBitrate?:   null | float64 @go(MaxBitrate,*float64)
	minIInterval?: null | float64 @go(MinIInterval,*float64)

	// Number of reference frames to use.
	numRefFrames?: null | float64 @go(NumRefFrames,*float64)

	// Indicates how the output pixel aspect ratio is specified.
	parControl?: null | string @go(ParControl,*string)

	// Pixel Aspect Ratio denominator.
	parDenominator?: null | float64 @go(ParDenominator,*float64)

	// Pixel Aspect Ratio numerator.
	parNumerator?: null | float64 @go(ParNumerator,*float64)

	// AAC profile.
	profile?: null | string @go(Profile,*string)

	// Quality level.
	qualityLevel?: null | string @go(QualityLevel,*string)

	// Controls the target quality for the video encode.
	qvbrQualityLevel?: null | float64 @go(QvbrQualityLevel,*float64)

	// The rate control mode.
	rateControlMode?: null | string @go(RateControlMode,*string)

	// Sets the scan type of the output.
	scanType?: null | string @go(ScanType,*string)

	// Scene change detection.
	sceneChangeDetect?: null | string @go(SceneChangeDetect,*string)

	// Number of slices per picture.
	slices?: null | float64 @go(Slices,*float64)

	// Softness.
	softness?: null | float64 @go(Softness,*float64)

	// Makes adjustments within each frame based on spatial variation of content complexity.
	spatialAq?: null | string @go(SpatialAq,*string)

	// Subgop length.
	subgopLength?: null | string @go(SubgopLength,*string)

	// Produces a bitstream compliant with SMPTE RP-2027.
	syntax?: null | string @go(Syntax,*string)

	// Makes adjustments within each frame based on temporal variation of content complexity.
	temporalAq?: null | string @go(TemporalAq,*string)

	// Determines how timecodes should be inserted into the video elementary stream.
	timecodeInsertion?: null | string @go(TimecodeInsertion,*string)
}

#H264SettingsParameters: {
	// Enables or disables adaptive quantization.
	// +kubebuilder:validation:Optional
	adaptiveQuantization?: null | string @go(AdaptiveQuantization,*string)

	// Indicates that AFD values will be written into the output stream.
	// +kubebuilder:validation:Optional
	afdSignaling?: null | string @go(AfdSignaling,*string)

	// Average bitrate in bits/second.
	// +kubebuilder:validation:Optional
	bitrate?: null | float64 @go(Bitrate,*float64)

	// +kubebuilder:validation:Optional
	bufFillPct?: null | float64 @go(BufFillPct,*float64)

	// Size of buffer in bits.
	// +kubebuilder:validation:Optional
	bufSize?: null | float64 @go(BufSize,*float64)

	// Includes color space metadata in the output.
	// +kubebuilder:validation:Optional
	colorMetadata?: null | string @go(ColorMetadata,*string)

	// Entropy encoding mode.
	// +kubebuilder:validation:Optional
	entropyEncoding?: null | string @go(EntropyEncoding,*string)

	// Filters to apply to an encode. See H264 Filter Settings for more details.
	// +kubebuilder:validation:Optional
	filterSettings?: [...#FilterSettingsParameters] @go(FilterSettings,[]FilterSettingsParameters)

	// Four bit AFD value to write on all frames of video in the output stream.
	// +kubebuilder:validation:Optional
	fixedAfd?: null | string @go(FixedAfd,*string)

	// +kubebuilder:validation:Optional
	flickerAq?: null | string @go(FlickerAq,*string)

	// Controls whether coding is performed on a field basis or on a frame basis.
	// +kubebuilder:validation:Optional
	forceFieldPictures?: null | string @go(ForceFieldPictures,*string)

	// Indicates how the output video frame rate is specified.
	// +kubebuilder:validation:Optional
	framerateControl?: null | string @go(FramerateControl,*string)

	// Framerate denominator.
	// +kubebuilder:validation:Optional
	framerateDenominator?: null | float64 @go(FramerateDenominator,*float64)

	// Framerate numerator.
	// +kubebuilder:validation:Optional
	framerateNumerator?: null | float64 @go(FramerateNumerator,*float64)

	// GOP-B reference.
	// +kubebuilder:validation:Optional
	gopBReference?: null | string @go(GopBReference,*string)

	// Frequency of closed GOPs.
	// +kubebuilder:validation:Optional
	gopClosedCadence?: null | float64 @go(GopClosedCadence,*float64)

	// Number of B-frames between reference frames.
	// +kubebuilder:validation:Optional
	gopNumBFrames?: null | float64 @go(GopNumBFrames,*float64)

	// GOP size in units of either frames of seconds per gop_size_units.
	// +kubebuilder:validation:Optional
	gopSize?: null | float64 @go(GopSize,*float64)

	// Indicates if the gop_size is specified in frames or seconds.
	// +kubebuilder:validation:Optional
	gopSizeUnits?: null | string @go(GopSizeUnits,*string)

	// H264 level.
	// +kubebuilder:validation:Optional
	level?: null | string @go(Level,*string)

	// Amount of lookahead.
	// +kubebuilder:validation:Optional
	lookAheadRateControl?: null | string @go(LookAheadRateControl,*string)

	// Set the maximum bitrate in order to accommodate expected spikes in the complexity of the video.
	// +kubebuilder:validation:Optional
	maxBitrate?: null | float64 @go(MaxBitrate,*float64)

	// +kubebuilder:validation:Optional
	minIInterval?: null | float64 @go(MinIInterval,*float64)

	// Number of reference frames to use.
	// +kubebuilder:validation:Optional
	numRefFrames?: null | float64 @go(NumRefFrames,*float64)

	// Indicates how the output pixel aspect ratio is specified.
	// +kubebuilder:validation:Optional
	parControl?: null | string @go(ParControl,*string)

	// Pixel Aspect Ratio denominator.
	// +kubebuilder:validation:Optional
	parDenominator?: null | float64 @go(ParDenominator,*float64)

	// Pixel Aspect Ratio numerator.
	// +kubebuilder:validation:Optional
	parNumerator?: null | float64 @go(ParNumerator,*float64)

	// AAC profile.
	// +kubebuilder:validation:Optional
	profile?: null | string @go(Profile,*string)

	// Quality level.
	// +kubebuilder:validation:Optional
	qualityLevel?: null | string @go(QualityLevel,*string)

	// Controls the target quality for the video encode.
	// +kubebuilder:validation:Optional
	qvbrQualityLevel?: null | float64 @go(QvbrQualityLevel,*float64)

	// The rate control mode.
	// +kubebuilder:validation:Optional
	rateControlMode?: null | string @go(RateControlMode,*string)

	// Sets the scan type of the output.
	// +kubebuilder:validation:Optional
	scanType?: null | string @go(ScanType,*string)

	// Scene change detection.
	// +kubebuilder:validation:Optional
	sceneChangeDetect?: null | string @go(SceneChangeDetect,*string)

	// Number of slices per picture.
	// +kubebuilder:validation:Optional
	slices?: null | float64 @go(Slices,*float64)

	// Softness.
	// +kubebuilder:validation:Optional
	softness?: null | float64 @go(Softness,*float64)

	// Makes adjustments within each frame based on spatial variation of content complexity.
	// +kubebuilder:validation:Optional
	spatialAq?: null | string @go(SpatialAq,*string)

	// Subgop length.
	// +kubebuilder:validation:Optional
	subgopLength?: null | string @go(SubgopLength,*string)

	// Produces a bitstream compliant with SMPTE RP-2027.
	// +kubebuilder:validation:Optional
	syntax?: null | string @go(Syntax,*string)

	// Makes adjustments within each frame based on temporal variation of content complexity.
	// +kubebuilder:validation:Optional
	temporalAq?: null | string @go(TemporalAq,*string)

	// Determines how timecodes should be inserted into the video elementary stream.
	// +kubebuilder:validation:Optional
	timecodeInsertion?: null | string @go(TimecodeInsertion,*string)
}

#H265SettingsFilterSettingsInitParameters: {
	// Temporal filter settings. See Temporal Filter Settings
	temporalFilterSettings?: [...#FilterSettingsTemporalFilterSettingsInitParameters] @go(TemporalFilterSettings,[]FilterSettingsTemporalFilterSettingsInitParameters)
}

#H265SettingsFilterSettingsObservation: {
	// Temporal filter settings. See Temporal Filter Settings
	temporalFilterSettings?: [...#FilterSettingsTemporalFilterSettingsObservation] @go(TemporalFilterSettings,[]FilterSettingsTemporalFilterSettingsObservation)
}

#H265SettingsFilterSettingsParameters: {
	// Temporal filter settings. See Temporal Filter Settings
	// +kubebuilder:validation:Optional
	temporalFilterSettings?: [...#FilterSettingsTemporalFilterSettingsParameters] @go(TemporalFilterSettings,[]FilterSettingsTemporalFilterSettingsParameters)
}

#H265SettingsInitParameters: {
	// Enables or disables adaptive quantization.
	adaptiveQuantization?: null | string @go(AdaptiveQuantization,*string)

	// Indicates that AFD values will be written into the output stream.
	afdSignaling?: null | string @go(AfdSignaling,*string)

	// Whether or not EML should insert an Alternative Transfer Function SEI message.
	alternativeTransferFunction?: null | string @go(AlternativeTransferFunction,*string)

	// Average bitrate in bits/second.
	bitrate?: null | float64 @go(Bitrate,*float64)

	// Size of buffer in bits.
	bufSize?: null | float64 @go(BufSize,*float64)

	// Includes color space metadata in the output.
	colorMetadata?: null | string @go(ColorMetadata,*string)

	// Define the color metadata for the output. H265 Color Space Settings for more details.
	colorSpaceSettings?: [...#ColorSpaceSettingsInitParameters] @go(ColorSpaceSettings,[]ColorSpaceSettingsInitParameters)

	// Filters to apply to an encode. See H264 Filter Settings for more details.
	filterSettings?: [...#H265SettingsFilterSettingsInitParameters] @go(FilterSettings,[]H265SettingsFilterSettingsInitParameters)

	// Four bit AFD value to write on all frames of video in the output stream.
	fixedAfd?:  null | string @go(FixedAfd,*string)
	flickerAq?: null | string @go(FlickerAq,*string)

	// Framerate denominator.
	framerateDenominator?: null | float64 @go(FramerateDenominator,*float64)

	// Framerate numerator.
	framerateNumerator?: null | float64 @go(FramerateNumerator,*float64)

	// Frequency of closed GOPs.
	gopClosedCadence?: null | float64 @go(GopClosedCadence,*float64)

	// GOP size in units of either frames of seconds per gop_size_units.
	gopSize?: null | float64 @go(GopSize,*float64)

	// Indicates if the gop_size is specified in frames or seconds.
	gopSizeUnits?: null | string @go(GopSizeUnits,*string)

	// H264 level.
	level?: null | string @go(Level,*string)

	// Amount of lookahead.
	lookAheadRateControl?: null | string @go(LookAheadRateControl,*string)

	// Set the maximum bitrate in order to accommodate expected spikes in the complexity of the video.
	maxBitrate?:   null | float64 @go(MaxBitrate,*float64)
	minIInterval?: null | float64 @go(MinIInterval,*float64)

	// Pixel Aspect Ratio denominator.
	parDenominator?: null | float64 @go(ParDenominator,*float64)

	// Pixel Aspect Ratio numerator.
	parNumerator?: null | float64 @go(ParNumerator,*float64)

	// AAC profile.
	profile?: null | string @go(Profile,*string)

	// Controls the target quality for the video encode.
	qvbrQualityLevel?: null | float64 @go(QvbrQualityLevel,*float64)

	// The rate control mode.
	rateControlMode?: null | string @go(RateControlMode,*string)

	// Sets the scan type of the output.
	scanType?: null | string @go(ScanType,*string)

	// Scene change detection.
	sceneChangeDetect?: null | string @go(SceneChangeDetect,*string)

	// Number of slices per picture.
	slices?: null | float64 @go(Slices,*float64)

	// Set the H265 tier in the output.
	tier?: null | string @go(Tier,*string)

	// Apply a burned in timecode. See H265 Timecode Burnin Settings for more details.
	timecodeBurninSettings?: [...#TimecodeBurninSettingsInitParameters] @go(TimecodeBurninSettings,[]TimecodeBurninSettingsInitParameters)

	// Determines how timecodes should be inserted into the video elementary stream.
	timecodeInsertion?: null | string @go(TimecodeInsertion,*string)
}

#H265SettingsObservation: {
	// Enables or disables adaptive quantization.
	adaptiveQuantization?: null | string @go(AdaptiveQuantization,*string)

	// Indicates that AFD values will be written into the output stream.
	afdSignaling?: null | string @go(AfdSignaling,*string)

	// Whether or not EML should insert an Alternative Transfer Function SEI message.
	alternativeTransferFunction?: null | string @go(AlternativeTransferFunction,*string)

	// Average bitrate in bits/second.
	bitrate?: null | float64 @go(Bitrate,*float64)

	// Size of buffer in bits.
	bufSize?: null | float64 @go(BufSize,*float64)

	// Includes color space metadata in the output.
	colorMetadata?: null | string @go(ColorMetadata,*string)

	// Define the color metadata for the output. H265 Color Space Settings for more details.
	colorSpaceSettings?: [...#ColorSpaceSettingsObservation] @go(ColorSpaceSettings,[]ColorSpaceSettingsObservation)

	// Filters to apply to an encode. See H264 Filter Settings for more details.
	filterSettings?: [...#H265SettingsFilterSettingsObservation] @go(FilterSettings,[]H265SettingsFilterSettingsObservation)

	// Four bit AFD value to write on all frames of video in the output stream.
	fixedAfd?:  null | string @go(FixedAfd,*string)
	flickerAq?: null | string @go(FlickerAq,*string)

	// Framerate denominator.
	framerateDenominator?: null | float64 @go(FramerateDenominator,*float64)

	// Framerate numerator.
	framerateNumerator?: null | float64 @go(FramerateNumerator,*float64)

	// Frequency of closed GOPs.
	gopClosedCadence?: null | float64 @go(GopClosedCadence,*float64)

	// GOP size in units of either frames of seconds per gop_size_units.
	gopSize?: null | float64 @go(GopSize,*float64)

	// Indicates if the gop_size is specified in frames or seconds.
	gopSizeUnits?: null | string @go(GopSizeUnits,*string)

	// H264 level.
	level?: null | string @go(Level,*string)

	// Amount of lookahead.
	lookAheadRateControl?: null | string @go(LookAheadRateControl,*string)

	// Set the maximum bitrate in order to accommodate expected spikes in the complexity of the video.
	maxBitrate?:   null | float64 @go(MaxBitrate,*float64)
	minIInterval?: null | float64 @go(MinIInterval,*float64)

	// Pixel Aspect Ratio denominator.
	parDenominator?: null | float64 @go(ParDenominator,*float64)

	// Pixel Aspect Ratio numerator.
	parNumerator?: null | float64 @go(ParNumerator,*float64)

	// AAC profile.
	profile?: null | string @go(Profile,*string)

	// Controls the target quality for the video encode.
	qvbrQualityLevel?: null | float64 @go(QvbrQualityLevel,*float64)

	// The rate control mode.
	rateControlMode?: null | string @go(RateControlMode,*string)

	// Sets the scan type of the output.
	scanType?: null | string @go(ScanType,*string)

	// Scene change detection.
	sceneChangeDetect?: null | string @go(SceneChangeDetect,*string)

	// Number of slices per picture.
	slices?: null | float64 @go(Slices,*float64)

	// Set the H265 tier in the output.
	tier?: null | string @go(Tier,*string)

	// Apply a burned in timecode. See H265 Timecode Burnin Settings for more details.
	timecodeBurninSettings?: [...#TimecodeBurninSettingsObservation] @go(TimecodeBurninSettings,[]TimecodeBurninSettingsObservation)

	// Determines how timecodes should be inserted into the video elementary stream.
	timecodeInsertion?: null | string @go(TimecodeInsertion,*string)
}

#H265SettingsParameters: {
	// Enables or disables adaptive quantization.
	// +kubebuilder:validation:Optional
	adaptiveQuantization?: null | string @go(AdaptiveQuantization,*string)

	// Indicates that AFD values will be written into the output stream.
	// +kubebuilder:validation:Optional
	afdSignaling?: null | string @go(AfdSignaling,*string)

	// Whether or not EML should insert an Alternative Transfer Function SEI message.
	// +kubebuilder:validation:Optional
	alternativeTransferFunction?: null | string @go(AlternativeTransferFunction,*string)

	// Average bitrate in bits/second.
	// +kubebuilder:validation:Optional
	bitrate?: null | float64 @go(Bitrate,*float64)

	// Size of buffer in bits.
	// +kubebuilder:validation:Optional
	bufSize?: null | float64 @go(BufSize,*float64)

	// Includes color space metadata in the output.
	// +kubebuilder:validation:Optional
	colorMetadata?: null | string @go(ColorMetadata,*string)

	// Define the color metadata for the output. H265 Color Space Settings for more details.
	// +kubebuilder:validation:Optional
	colorSpaceSettings?: [...#ColorSpaceSettingsParameters] @go(ColorSpaceSettings,[]ColorSpaceSettingsParameters)

	// Filters to apply to an encode. See H264 Filter Settings for more details.
	// +kubebuilder:validation:Optional
	filterSettings?: [...#H265SettingsFilterSettingsParameters] @go(FilterSettings,[]H265SettingsFilterSettingsParameters)

	// Four bit AFD value to write on all frames of video in the output stream.
	// +kubebuilder:validation:Optional
	fixedAfd?: null | string @go(FixedAfd,*string)

	// +kubebuilder:validation:Optional
	flickerAq?: null | string @go(FlickerAq,*string)

	// Framerate denominator.
	// +kubebuilder:validation:Optional
	framerateDenominator?: null | float64 @go(FramerateDenominator,*float64)

	// Framerate numerator.
	// +kubebuilder:validation:Optional
	framerateNumerator?: null | float64 @go(FramerateNumerator,*float64)

	// Frequency of closed GOPs.
	// +kubebuilder:validation:Optional
	gopClosedCadence?: null | float64 @go(GopClosedCadence,*float64)

	// GOP size in units of either frames of seconds per gop_size_units.
	// +kubebuilder:validation:Optional
	gopSize?: null | float64 @go(GopSize,*float64)

	// Indicates if the gop_size is specified in frames or seconds.
	// +kubebuilder:validation:Optional
	gopSizeUnits?: null | string @go(GopSizeUnits,*string)

	// H264 level.
	// +kubebuilder:validation:Optional
	level?: null | string @go(Level,*string)

	// Amount of lookahead.
	// +kubebuilder:validation:Optional
	lookAheadRateControl?: null | string @go(LookAheadRateControl,*string)

	// Set the maximum bitrate in order to accommodate expected spikes in the complexity of the video.
	// +kubebuilder:validation:Optional
	maxBitrate?: null | float64 @go(MaxBitrate,*float64)

	// +kubebuilder:validation:Optional
	minIInterval?: null | float64 @go(MinIInterval,*float64)

	// Pixel Aspect Ratio denominator.
	// +kubebuilder:validation:Optional
	parDenominator?: null | float64 @go(ParDenominator,*float64)

	// Pixel Aspect Ratio numerator.
	// +kubebuilder:validation:Optional
	parNumerator?: null | float64 @go(ParNumerator,*float64)

	// AAC profile.
	// +kubebuilder:validation:Optional
	profile?: null | string @go(Profile,*string)

	// Controls the target quality for the video encode.
	// +kubebuilder:validation:Optional
	qvbrQualityLevel?: null | float64 @go(QvbrQualityLevel,*float64)

	// The rate control mode.
	// +kubebuilder:validation:Optional
	rateControlMode?: null | string @go(RateControlMode,*string)

	// Sets the scan type of the output.
	// +kubebuilder:validation:Optional
	scanType?: null | string @go(ScanType,*string)

	// Scene change detection.
	// +kubebuilder:validation:Optional
	sceneChangeDetect?: null | string @go(SceneChangeDetect,*string)

	// Number of slices per picture.
	// +kubebuilder:validation:Optional
	slices?: null | float64 @go(Slices,*float64)

	// Set the H265 tier in the output.
	// +kubebuilder:validation:Optional
	tier?: null | string @go(Tier,*string)

	// Apply a burned in timecode. See H265 Timecode Burnin Settings for more details.
	// +kubebuilder:validation:Optional
	timecodeBurninSettings?: [...#TimecodeBurninSettingsParameters] @go(TimecodeBurninSettings,[]TimecodeBurninSettingsParameters)

	// Determines how timecodes should be inserted into the video elementary stream.
	// +kubebuilder:validation:Optional
	timecodeInsertion?: null | string @go(TimecodeInsertion,*string)
}

#Hdr10SettingsInitParameters: {
	// Sets the MaxCLL value for HDR10.
	maxCll?: null | float64 @go(MaxCll,*float64)

	// Sets the MaxFALL value for HDR10.
	maxFall?: null | float64 @go(MaxFall,*float64)
}

#Hdr10SettingsObservation: {
	// Sets the MaxCLL value for HDR10.
	maxCll?: null | float64 @go(MaxCll,*float64)

	// Sets the MaxFALL value for HDR10.
	maxFall?: null | float64 @go(MaxFall,*float64)
}

#Hdr10SettingsParameters: {
	// Sets the MaxCLL value for HDR10.
	// +kubebuilder:validation:Optional
	maxCll?: null | float64 @go(MaxCll,*float64)

	// Sets the MaxFALL value for HDR10.
	// +kubebuilder:validation:Optional
	maxFall?: null | float64 @go(MaxFall,*float64)
}

#HlsAkamaiSettingsInitParameters: {
	// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
	connectionRetryInterval?: null | float64 @go(ConnectionRetryInterval,*float64)
	filecacheDuration?:       null | float64 @go(FilecacheDuration,*float64)
	httpTransferMode?:        null | string  @go(HTTPTransferMode,*string)

	// Number of retry attempts.
	numRetries?: null | float64 @go(NumRetries,*float64)

	// Number of seconds to wait until a restart is initiated.
	restartDelay?: null | float64 @go(RestartDelay,*float64)
	salt?:         null | string  @go(Salt,*string)
	token?:        null | string  @go(Token,*string)
}

#HlsAkamaiSettingsObservation: {
	// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
	connectionRetryInterval?: null | float64 @go(ConnectionRetryInterval,*float64)
	filecacheDuration?:       null | float64 @go(FilecacheDuration,*float64)
	httpTransferMode?:        null | string  @go(HTTPTransferMode,*string)

	// Number of retry attempts.
	numRetries?: null | float64 @go(NumRetries,*float64)

	// Number of seconds to wait until a restart is initiated.
	restartDelay?: null | float64 @go(RestartDelay,*float64)
	salt?:         null | string  @go(Salt,*string)
	token?:        null | string  @go(Token,*string)
}

#HlsAkamaiSettingsParameters: {
	// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
	// +kubebuilder:validation:Optional
	connectionRetryInterval?: null | float64 @go(ConnectionRetryInterval,*float64)

	// +kubebuilder:validation:Optional
	filecacheDuration?: null | float64 @go(FilecacheDuration,*float64)

	// +kubebuilder:validation:Optional
	httpTransferMode?: null | string @go(HTTPTransferMode,*string)

	// Number of retry attempts.
	// +kubebuilder:validation:Optional
	numRetries?: null | float64 @go(NumRetries,*float64)

	// Number of seconds to wait until a restart is initiated.
	// +kubebuilder:validation:Optional
	restartDelay?: null | float64 @go(RestartDelay,*float64)

	// +kubebuilder:validation:Optional
	salt?: null | string @go(Salt,*string)

	// +kubebuilder:validation:Optional
	token?: null | string @go(Token,*string)
}

#HlsBasicPutSettingsInitParameters: {
	// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
	connectionRetryInterval?: null | float64 @go(ConnectionRetryInterval,*float64)
	filecacheDuration?:       null | float64 @go(FilecacheDuration,*float64)

	// Number of retry attempts.
	numRetries?: null | float64 @go(NumRetries,*float64)

	// Number of seconds to wait until a restart is initiated.
	restartDelay?: null | float64 @go(RestartDelay,*float64)
}

#HlsBasicPutSettingsObservation: {
	// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
	connectionRetryInterval?: null | float64 @go(ConnectionRetryInterval,*float64)
	filecacheDuration?:       null | float64 @go(FilecacheDuration,*float64)

	// Number of retry attempts.
	numRetries?: null | float64 @go(NumRetries,*float64)

	// Number of seconds to wait until a restart is initiated.
	restartDelay?: null | float64 @go(RestartDelay,*float64)
}

#HlsBasicPutSettingsParameters: {
	// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
	// +kubebuilder:validation:Optional
	connectionRetryInterval?: null | float64 @go(ConnectionRetryInterval,*float64)

	// +kubebuilder:validation:Optional
	filecacheDuration?: null | float64 @go(FilecacheDuration,*float64)

	// Number of retry attempts.
	// +kubebuilder:validation:Optional
	numRetries?: null | float64 @go(NumRetries,*float64)

	// Number of seconds to wait until a restart is initiated.
	// +kubebuilder:validation:Optional
	restartDelay?: null | float64 @go(RestartDelay,*float64)
}

#HlsCdnSettingsInitParameters: {
	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	hlsAkamaiSettings?: [...#HlsAkamaiSettingsInitParameters] @go(HlsAkamaiSettings,[]HlsAkamaiSettingsInitParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	hlsBasicPutSettings?: [...#HlsBasicPutSettingsInitParameters] @go(HlsBasicPutSettings,[]HlsBasicPutSettingsInitParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	hlsMediaStoreSettings?: [...#HlsMediaStoreSettingsInitParameters] @go(HlsMediaStoreSettings,[]HlsMediaStoreSettingsInitParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	hlsS3Settings?: [...#HlsS3SettingsInitParameters] @go(HlsS3Settings,[]HlsS3SettingsInitParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	hlsWebdavSettings?: [...#HlsWebdavSettingsInitParameters] @go(HlsWebdavSettings,[]HlsWebdavSettingsInitParameters)
}

#HlsCdnSettingsObservation: {
	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	hlsAkamaiSettings?: [...#HlsAkamaiSettingsObservation] @go(HlsAkamaiSettings,[]HlsAkamaiSettingsObservation)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	hlsBasicPutSettings?: [...#HlsBasicPutSettingsObservation] @go(HlsBasicPutSettings,[]HlsBasicPutSettingsObservation)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	hlsMediaStoreSettings?: [...#HlsMediaStoreSettingsObservation] @go(HlsMediaStoreSettings,[]HlsMediaStoreSettingsObservation)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	hlsS3Settings?: [...#HlsS3SettingsObservation] @go(HlsS3Settings,[]HlsS3SettingsObservation)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	hlsWebdavSettings?: [...#HlsWebdavSettingsObservation] @go(HlsWebdavSettings,[]HlsWebdavSettingsObservation)
}

#HlsCdnSettingsParameters: {
	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	hlsAkamaiSettings?: [...#HlsAkamaiSettingsParameters] @go(HlsAkamaiSettings,[]HlsAkamaiSettingsParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	hlsBasicPutSettings?: [...#HlsBasicPutSettingsParameters] @go(HlsBasicPutSettings,[]HlsBasicPutSettingsParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	hlsMediaStoreSettings?: [...#HlsMediaStoreSettingsParameters] @go(HlsMediaStoreSettings,[]HlsMediaStoreSettingsParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	hlsS3Settings?: [...#HlsS3SettingsParameters] @go(HlsS3Settings,[]HlsS3SettingsParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	hlsWebdavSettings?: [...#HlsWebdavSettingsParameters] @go(HlsWebdavSettings,[]HlsWebdavSettingsParameters)
}

#HlsGroupSettingsDestinationInitParameters: {
	// Reference ID for the destination.
	destinationRefId?: null | string @go(DestinationRefID,*string)
}

#HlsGroupSettingsDestinationObservation: {
	// Reference ID for the destination.
	destinationRefId?: null | string @go(DestinationRefID,*string)
}

#HlsGroupSettingsDestinationParameters: {
	// Reference ID for the destination.
	// +kubebuilder:validation:Optional
	destinationRefId?: null | string @go(DestinationRefID,*string)
}

#HlsGroupSettingsInitParameters: {
	// The ad marker type for this output group.
	adMarkers?: [...null | string] @go(AdMarkers,[]*string)
	baseUrlContent?:   null | string @go(BaseURLContent,*string)
	baseUrlContent1?:  null | string @go(BaseURLContent1,*string)
	baseUrlManifest?:  null | string @go(BaseURLManifest,*string)
	baseUrlManifest1?: null | string @go(BaseURLManifest1,*string)
	captionLanguageMappings?: [...#CaptionLanguageMappingsInitParameters] @go(CaptionLanguageMappings,[]CaptionLanguageMappingsInitParameters)
	captionLanguageSetting?: null | string @go(CaptionLanguageSetting,*string)
	clientCache?:            null | string @go(ClientCache,*string)
	codecSpecification?:     null | string @go(CodecSpecification,*string)
	constantIv?:             null | string @go(ConstantIv,*string)

	// A director and base filename where archive files should be written. See Destination for more details.
	destination?: [...#HlsGroupSettingsDestinationInitParameters] @go(Destination,[]HlsGroupSettingsDestinationInitParameters)
	directoryStructure?: null | string @go(DirectoryStructure,*string)

	// Key-value map of resource tags.
	discontinuityTags?: null | string @go(DiscontinuityTags,*string)
	encryptionType?:    null | string @go(EncryptionType,*string)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	hlsCdnSettings?: [...#HlsCdnSettingsInitParameters] @go(HlsCdnSettings,[]HlsCdnSettingsInitParameters)
	hlsId3SegmentTagging?:      null | string  @go(HlsId3SegmentTagging,*string)
	iframeOnlyPlaylists?:       null | string  @go(IframeOnlyPlaylists,*string)
	incompleteSegmentBehavior?: null | string  @go(IncompleteSegmentBehavior,*string)
	indexNSegments?:            null | float64 @go(IndexNSegments,*float64)

	// Controls the behavior of the RTMP group if input becomes unavailable.
	inputLossAction?: null | string @go(InputLossAction,*string)
	ivInManifest?:    null | string @go(IvInManifest,*string)

	// The source for the timecode that will be associated with the events outputs.
	ivSource?:          null | string  @go(IvSource,*string)
	keepSegments?:      null | float64 @go(KeepSegments,*float64)
	keyFormat?:         null | string  @go(KeyFormat,*string)
	keyFormatVersions?: null | string  @go(KeyFormatVersions,*string)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	keyProviderSettings?: [...#KeyProviderSettingsInitParameters] @go(KeyProviderSettings,[]KeyProviderSettingsInitParameters)
	manifestCompression?:     null | string  @go(ManifestCompression,*string)
	manifestDurationFormat?:  null | string  @go(ManifestDurationFormat,*string)
	minSegmentLength?:        null | float64 @go(MinSegmentLength,*float64)
	mode?:                    null | string  @go(Mode,*string)
	outputSelection?:         null | string  @go(OutputSelection,*string)
	programDateTime?:         null | string  @go(ProgramDateTime,*string)
	programDateTimeClock?:    null | string  @go(ProgramDateTimeClock,*string)
	programDateTimePeriod?:   null | float64 @go(ProgramDateTimePeriod,*float64)
	redundantManifest?:       null | string  @go(RedundantManifest,*string)
	segmentLength?:           null | float64 @go(SegmentLength,*float64)
	segmentsPerSubdirectory?: null | float64 @go(SegmentsPerSubdirectory,*float64)

	// - Maximum CDI input resolution.
	streamInfResolution?: null | string @go(StreamInfResolution,*string)
	tsFileMode?:          null | string @go(TSFileMode,*string)

	// Indicates ID3 frame that has the timecode.
	timedMetadataId3Frame?:      null | string  @go(TimedMetadataId3Frame,*string)
	timedMetadataId3Period?:     null | float64 @go(TimedMetadataId3Period,*float64)
	timestampDeltaMilliseconds?: null | float64 @go(TimestampDeltaMilliseconds,*float64)
}

#HlsGroupSettingsObservation: {
	// The ad marker type for this output group.
	adMarkers?: [...null | string] @go(AdMarkers,[]*string)
	baseUrlContent?:   null | string @go(BaseURLContent,*string)
	baseUrlContent1?:  null | string @go(BaseURLContent1,*string)
	baseUrlManifest?:  null | string @go(BaseURLManifest,*string)
	baseUrlManifest1?: null | string @go(BaseURLManifest1,*string)
	captionLanguageMappings?: [...#CaptionLanguageMappingsObservation] @go(CaptionLanguageMappings,[]CaptionLanguageMappingsObservation)
	captionLanguageSetting?: null | string @go(CaptionLanguageSetting,*string)
	clientCache?:            null | string @go(ClientCache,*string)
	codecSpecification?:     null | string @go(CodecSpecification,*string)
	constantIv?:             null | string @go(ConstantIv,*string)

	// A director and base filename where archive files should be written. See Destination for more details.
	destination?: [...#HlsGroupSettingsDestinationObservation] @go(Destination,[]HlsGroupSettingsDestinationObservation)
	directoryStructure?: null | string @go(DirectoryStructure,*string)

	// Key-value map of resource tags.
	discontinuityTags?: null | string @go(DiscontinuityTags,*string)
	encryptionType?:    null | string @go(EncryptionType,*string)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	hlsCdnSettings?: [...#HlsCdnSettingsObservation] @go(HlsCdnSettings,[]HlsCdnSettingsObservation)
	hlsId3SegmentTagging?:      null | string  @go(HlsId3SegmentTagging,*string)
	iframeOnlyPlaylists?:       null | string  @go(IframeOnlyPlaylists,*string)
	incompleteSegmentBehavior?: null | string  @go(IncompleteSegmentBehavior,*string)
	indexNSegments?:            null | float64 @go(IndexNSegments,*float64)

	// Controls the behavior of the RTMP group if input becomes unavailable.
	inputLossAction?: null | string @go(InputLossAction,*string)
	ivInManifest?:    null | string @go(IvInManifest,*string)

	// The source for the timecode that will be associated with the events outputs.
	ivSource?:          null | string  @go(IvSource,*string)
	keepSegments?:      null | float64 @go(KeepSegments,*float64)
	keyFormat?:         null | string  @go(KeyFormat,*string)
	keyFormatVersions?: null | string  @go(KeyFormatVersions,*string)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	keyProviderSettings?: [...#KeyProviderSettingsObservation] @go(KeyProviderSettings,[]KeyProviderSettingsObservation)
	manifestCompression?:     null | string  @go(ManifestCompression,*string)
	manifestDurationFormat?:  null | string  @go(ManifestDurationFormat,*string)
	minSegmentLength?:        null | float64 @go(MinSegmentLength,*float64)
	mode?:                    null | string  @go(Mode,*string)
	outputSelection?:         null | string  @go(OutputSelection,*string)
	programDateTime?:         null | string  @go(ProgramDateTime,*string)
	programDateTimeClock?:    null | string  @go(ProgramDateTimeClock,*string)
	programDateTimePeriod?:   null | float64 @go(ProgramDateTimePeriod,*float64)
	redundantManifest?:       null | string  @go(RedundantManifest,*string)
	segmentLength?:           null | float64 @go(SegmentLength,*float64)
	segmentsPerSubdirectory?: null | float64 @go(SegmentsPerSubdirectory,*float64)

	// - Maximum CDI input resolution.
	streamInfResolution?: null | string @go(StreamInfResolution,*string)
	tsFileMode?:          null | string @go(TSFileMode,*string)

	// Indicates ID3 frame that has the timecode.
	timedMetadataId3Frame?:      null | string  @go(TimedMetadataId3Frame,*string)
	timedMetadataId3Period?:     null | float64 @go(TimedMetadataId3Period,*float64)
	timestampDeltaMilliseconds?: null | float64 @go(TimestampDeltaMilliseconds,*float64)
}

#HlsGroupSettingsParameters: {
	// The ad marker type for this output group.
	// +kubebuilder:validation:Optional
	adMarkers?: [...null | string] @go(AdMarkers,[]*string)

	// +kubebuilder:validation:Optional
	baseUrlContent?: null | string @go(BaseURLContent,*string)

	// +kubebuilder:validation:Optional
	baseUrlContent1?: null | string @go(BaseURLContent1,*string)

	// +kubebuilder:validation:Optional
	baseUrlManifest?: null | string @go(BaseURLManifest,*string)

	// +kubebuilder:validation:Optional
	baseUrlManifest1?: null | string @go(BaseURLManifest1,*string)

	// +kubebuilder:validation:Optional
	captionLanguageMappings?: [...#CaptionLanguageMappingsParameters] @go(CaptionLanguageMappings,[]CaptionLanguageMappingsParameters)

	// +kubebuilder:validation:Optional
	captionLanguageSetting?: null | string @go(CaptionLanguageSetting,*string)

	// +kubebuilder:validation:Optional
	clientCache?: null | string @go(ClientCache,*string)

	// +kubebuilder:validation:Optional
	codecSpecification?: null | string @go(CodecSpecification,*string)

	// +kubebuilder:validation:Optional
	constantIv?: null | string @go(ConstantIv,*string)

	// A director and base filename where archive files should be written. See Destination for more details.
	// +kubebuilder:validation:Optional
	destination: [...#HlsGroupSettingsDestinationParameters] @go(Destination,[]HlsGroupSettingsDestinationParameters)

	// +kubebuilder:validation:Optional
	directoryStructure?: null | string @go(DirectoryStructure,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	discontinuityTags?: null | string @go(DiscontinuityTags,*string)

	// +kubebuilder:validation:Optional
	encryptionType?: null | string @go(EncryptionType,*string)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	hlsCdnSettings?: [...#HlsCdnSettingsParameters] @go(HlsCdnSettings,[]HlsCdnSettingsParameters)

	// +kubebuilder:validation:Optional
	hlsId3SegmentTagging?: null | string @go(HlsId3SegmentTagging,*string)

	// +kubebuilder:validation:Optional
	iframeOnlyPlaylists?: null | string @go(IframeOnlyPlaylists,*string)

	// +kubebuilder:validation:Optional
	incompleteSegmentBehavior?: null | string @go(IncompleteSegmentBehavior,*string)

	// +kubebuilder:validation:Optional
	indexNSegments?: null | float64 @go(IndexNSegments,*float64)

	// Controls the behavior of the RTMP group if input becomes unavailable.
	// +kubebuilder:validation:Optional
	inputLossAction?: null | string @go(InputLossAction,*string)

	// +kubebuilder:validation:Optional
	ivInManifest?: null | string @go(IvInManifest,*string)

	// The source for the timecode that will be associated with the events outputs.
	// +kubebuilder:validation:Optional
	ivSource?: null | string @go(IvSource,*string)

	// +kubebuilder:validation:Optional
	keepSegments?: null | float64 @go(KeepSegments,*float64)

	// +kubebuilder:validation:Optional
	keyFormat?: null | string @go(KeyFormat,*string)

	// +kubebuilder:validation:Optional
	keyFormatVersions?: null | string @go(KeyFormatVersions,*string)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	keyProviderSettings?: [...#KeyProviderSettingsParameters] @go(KeyProviderSettings,[]KeyProviderSettingsParameters)

	// +kubebuilder:validation:Optional
	manifestCompression?: null | string @go(ManifestCompression,*string)

	// +kubebuilder:validation:Optional
	manifestDurationFormat?: null | string @go(ManifestDurationFormat,*string)

	// +kubebuilder:validation:Optional
	minSegmentLength?: null | float64 @go(MinSegmentLength,*float64)

	// +kubebuilder:validation:Optional
	mode?: null | string @go(Mode,*string)

	// +kubebuilder:validation:Optional
	outputSelection?: null | string @go(OutputSelection,*string)

	// +kubebuilder:validation:Optional
	programDateTime?: null | string @go(ProgramDateTime,*string)

	// +kubebuilder:validation:Optional
	programDateTimeClock?: null | string @go(ProgramDateTimeClock,*string)

	// +kubebuilder:validation:Optional
	programDateTimePeriod?: null | float64 @go(ProgramDateTimePeriod,*float64)

	// +kubebuilder:validation:Optional
	redundantManifest?: null | string @go(RedundantManifest,*string)

	// +kubebuilder:validation:Optional
	segmentLength?: null | float64 @go(SegmentLength,*float64)

	// +kubebuilder:validation:Optional
	segmentsPerSubdirectory?: null | float64 @go(SegmentsPerSubdirectory,*float64)

	// - Maximum CDI input resolution.
	// +kubebuilder:validation:Optional
	streamInfResolution?: null | string @go(StreamInfResolution,*string)

	// +kubebuilder:validation:Optional
	tsFileMode?: null | string @go(TSFileMode,*string)

	// Indicates ID3 frame that has the timecode.
	// +kubebuilder:validation:Optional
	timedMetadataId3Frame?: null | string @go(TimedMetadataId3Frame,*string)

	// +kubebuilder:validation:Optional
	timedMetadataId3Period?: null | float64 @go(TimedMetadataId3Period,*float64)

	// +kubebuilder:validation:Optional
	timestampDeltaMilliseconds?: null | float64 @go(TimestampDeltaMilliseconds,*float64)
}

#HlsInputSettingsInitParameters: {
	// The bitrate is specified in bits per second, as in an HLS manifest.
	bandwidth?: null | float64 @go(Bandwidth,*float64)

	// Buffer segments.
	bufferSegments?: null | float64 @go(BufferSegments,*float64)

	// The number of consecutive times that attempts to read a manifest or segment must fail before the input is considered unavailable.
	retries?: null | float64 @go(Retries,*float64)

	// The number of seconds between retries when an attempt to read a manifest or segment fails.
	retryInterval?: null | float64 @go(RetryInterval,*float64)

	// The source for the timecode that will be associated with the events outputs.
	scte35Source?: null | string @go(Scte35Source,*string)
}

#HlsInputSettingsObservation: {
	// The bitrate is specified in bits per second, as in an HLS manifest.
	bandwidth?: null | float64 @go(Bandwidth,*float64)

	// Buffer segments.
	bufferSegments?: null | float64 @go(BufferSegments,*float64)

	// The number of consecutive times that attempts to read a manifest or segment must fail before the input is considered unavailable.
	retries?: null | float64 @go(Retries,*float64)

	// The number of seconds between retries when an attempt to read a manifest or segment fails.
	retryInterval?: null | float64 @go(RetryInterval,*float64)

	// The source for the timecode that will be associated with the events outputs.
	scte35Source?: null | string @go(Scte35Source,*string)
}

#HlsInputSettingsParameters: {
	// The bitrate is specified in bits per second, as in an HLS manifest.
	// +kubebuilder:validation:Optional
	bandwidth?: null | float64 @go(Bandwidth,*float64)

	// Buffer segments.
	// +kubebuilder:validation:Optional
	bufferSegments?: null | float64 @go(BufferSegments,*float64)

	// The number of consecutive times that attempts to read a manifest or segment must fail before the input is considered unavailable.
	// +kubebuilder:validation:Optional
	retries?: null | float64 @go(Retries,*float64)

	// The number of seconds between retries when an attempt to read a manifest or segment fails.
	// +kubebuilder:validation:Optional
	retryInterval?: null | float64 @go(RetryInterval,*float64)

	// The source for the timecode that will be associated with the events outputs.
	// +kubebuilder:validation:Optional
	scte35Source?: null | string @go(Scte35Source,*string)
}

#HlsMediaStoreSettingsInitParameters: {
	// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
	connectionRetryInterval?: null | float64 @go(ConnectionRetryInterval,*float64)
	filecacheDuration?:       null | float64 @go(FilecacheDuration,*float64)
	mediaStoreStorageClass?:  null | string  @go(MediaStoreStorageClass,*string)

	// Number of retry attempts.
	numRetries?: null | float64 @go(NumRetries,*float64)

	// Number of seconds to wait until a restart is initiated.
	restartDelay?: null | float64 @go(RestartDelay,*float64)
}

#HlsMediaStoreSettingsObservation: {
	// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
	connectionRetryInterval?: null | float64 @go(ConnectionRetryInterval,*float64)
	filecacheDuration?:       null | float64 @go(FilecacheDuration,*float64)
	mediaStoreStorageClass?:  null | string  @go(MediaStoreStorageClass,*string)

	// Number of retry attempts.
	numRetries?: null | float64 @go(NumRetries,*float64)

	// Number of seconds to wait until a restart is initiated.
	restartDelay?: null | float64 @go(RestartDelay,*float64)
}

#HlsMediaStoreSettingsParameters: {
	// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
	// +kubebuilder:validation:Optional
	connectionRetryInterval?: null | float64 @go(ConnectionRetryInterval,*float64)

	// +kubebuilder:validation:Optional
	filecacheDuration?: null | float64 @go(FilecacheDuration,*float64)

	// +kubebuilder:validation:Optional
	mediaStoreStorageClass?: null | string @go(MediaStoreStorageClass,*string)

	// Number of retry attempts.
	// +kubebuilder:validation:Optional
	numRetries?: null | float64 @go(NumRetries,*float64)

	// Number of seconds to wait until a restart is initiated.
	// +kubebuilder:validation:Optional
	restartDelay?: null | float64 @go(RestartDelay,*float64)
}

#HlsOutputSettingsInitParameters: {
	h265PackagingType?: null | string @go(H265PackagingType,*string)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	hlsSettings?: [...#HlsSettingsInitParameters] @go(HlsSettings,[]HlsSettingsInitParameters)

	// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
	nameModifier?:    null | string @go(NameModifier,*string)
	segmentModifier?: null | string @go(SegmentModifier,*string)
}

#HlsOutputSettingsObservation: {
	h265PackagingType?: null | string @go(H265PackagingType,*string)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	hlsSettings?: [...#HlsSettingsObservation] @go(HlsSettings,[]HlsSettingsObservation)

	// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
	nameModifier?:    null | string @go(NameModifier,*string)
	segmentModifier?: null | string @go(SegmentModifier,*string)
}

#HlsOutputSettingsParameters: {
	// +kubebuilder:validation:Optional
	h265PackagingType?: null | string @go(H265PackagingType,*string)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	hlsSettings: [...#HlsSettingsParameters] @go(HlsSettings,[]HlsSettingsParameters)

	// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
	// +kubebuilder:validation:Optional
	nameModifier?: null | string @go(NameModifier,*string)

	// +kubebuilder:validation:Optional
	segmentModifier?: null | string @go(SegmentModifier,*string)
}

#HlsS3SettingsInitParameters: {
	// Specify the canned ACL to apply to each S3 request.
	cannedAcl?: null | string @go(CannedACL,*string)
}

#HlsS3SettingsObservation: {
	// Specify the canned ACL to apply to each S3 request.
	cannedAcl?: null | string @go(CannedACL,*string)
}

#HlsS3SettingsParameters: {
	// Specify the canned ACL to apply to each S3 request.
	// +kubebuilder:validation:Optional
	cannedAcl?: null | string @go(CannedACL,*string)
}

#HlsSettingsInitParameters: {
	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	audioOnlyHlsSettings?: [...#AudioOnlyHlsSettingsInitParameters] @go(AudioOnlyHlsSettings,[]AudioOnlyHlsSettingsInitParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	fmp4HlsSettings?: [...#Fmp4HlsSettingsInitParameters] @go(Fmp4HlsSettings,[]Fmp4HlsSettingsInitParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	frameCaptureHlsSettings?: [...#FrameCaptureHlsSettingsInitParameters] @go(FrameCaptureHlsSettings,[]FrameCaptureHlsSettingsInitParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	standardHlsSettings?: [...#StandardHlsSettingsInitParameters] @go(StandardHlsSettings,[]StandardHlsSettingsInitParameters)
}

#HlsSettingsObservation: {
	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	audioOnlyHlsSettings?: [...#AudioOnlyHlsSettingsObservation] @go(AudioOnlyHlsSettings,[]AudioOnlyHlsSettingsObservation)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	fmp4HlsSettings?: [...#Fmp4HlsSettingsObservation] @go(Fmp4HlsSettings,[]Fmp4HlsSettingsObservation)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	frameCaptureHlsSettings?: [...#FrameCaptureHlsSettingsParameters] @go(FrameCaptureHlsSettings,[]FrameCaptureHlsSettingsParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	standardHlsSettings?: [...#StandardHlsSettingsObservation] @go(StandardHlsSettings,[]StandardHlsSettingsObservation)
}

#HlsSettingsParameters: {
	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	audioOnlyHlsSettings?: [...#AudioOnlyHlsSettingsParameters] @go(AudioOnlyHlsSettings,[]AudioOnlyHlsSettingsParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	fmp4HlsSettings?: [...#Fmp4HlsSettingsParameters] @go(Fmp4HlsSettings,[]Fmp4HlsSettingsParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	frameCaptureHlsSettings?: [...#FrameCaptureHlsSettingsParameters] @go(FrameCaptureHlsSettings,[]FrameCaptureHlsSettingsParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	standardHlsSettings?: [...#StandardHlsSettingsParameters] @go(StandardHlsSettings,[]StandardHlsSettingsParameters)
}

#HlsWebdavSettingsInitParameters: {
	// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
	connectionRetryInterval?: null | float64 @go(ConnectionRetryInterval,*float64)
	filecacheDuration?:       null | float64 @go(FilecacheDuration,*float64)
	httpTransferMode?:        null | string  @go(HTTPTransferMode,*string)

	// Number of retry attempts.
	numRetries?: null | float64 @go(NumRetries,*float64)

	// Number of seconds to wait until a restart is initiated.
	restartDelay?: null | float64 @go(RestartDelay,*float64)
}

#HlsWebdavSettingsObservation: {
	// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
	connectionRetryInterval?: null | float64 @go(ConnectionRetryInterval,*float64)
	filecacheDuration?:       null | float64 @go(FilecacheDuration,*float64)
	httpTransferMode?:        null | string  @go(HTTPTransferMode,*string)

	// Number of retry attempts.
	numRetries?: null | float64 @go(NumRetries,*float64)

	// Number of seconds to wait until a restart is initiated.
	restartDelay?: null | float64 @go(RestartDelay,*float64)
}

#HlsWebdavSettingsParameters: {
	// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
	// +kubebuilder:validation:Optional
	connectionRetryInterval?: null | float64 @go(ConnectionRetryInterval,*float64)

	// +kubebuilder:validation:Optional
	filecacheDuration?: null | float64 @go(FilecacheDuration,*float64)

	// +kubebuilder:validation:Optional
	httpTransferMode?: null | string @go(HTTPTransferMode,*string)

	// Number of retry attempts.
	// +kubebuilder:validation:Optional
	numRetries?: null | float64 @go(NumRetries,*float64)

	// Number of seconds to wait until a restart is initiated.
	// +kubebuilder:validation:Optional
	restartDelay?: null | float64 @go(RestartDelay,*float64)
}

#InputAttachmentsInitParameters: {
	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	automaticInputFailoverSettings?: [...#AutomaticInputFailoverSettingsInitParameters] @go(AutomaticInputFailoverSettings,[]AutomaticInputFailoverSettingsInitParameters)

	// User-specified name for the attachment.
	inputAttachmentName?: null | string @go(InputAttachmentName,*string)

	// Settings of an input. See Input Settings for more details
	inputSettings?: [...#InputSettingsInitParameters] @go(InputSettings,[]InputSettingsInitParameters)
}

#InputAttachmentsObservation: {
	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	automaticInputFailoverSettings?: [...#AutomaticInputFailoverSettingsObservation] @go(AutomaticInputFailoverSettings,[]AutomaticInputFailoverSettingsObservation)

	// User-specified name for the attachment.
	inputAttachmentName?: null | string @go(InputAttachmentName,*string)

	// The ID of the input.
	inputId?: null | string @go(InputID,*string)

	// Settings of an input. See Input Settings for more details
	inputSettings?: [...#InputSettingsObservation] @go(InputSettings,[]InputSettingsObservation)
}

#InputAttachmentsParameters: {
	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	automaticInputFailoverSettings?: [...#AutomaticInputFailoverSettingsParameters] @go(AutomaticInputFailoverSettings,[]AutomaticInputFailoverSettingsParameters)

	// User-specified name for the attachment.
	// +kubebuilder:validation:Optional
	inputAttachmentName?: null | string @go(InputAttachmentName,*string)

	// The ID of the input.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/medialive/v1beta1.Input
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	inputId?: null | string @go(InputID,*string)

	// Reference to a Input in medialive to populate inputId.
	// +kubebuilder:validation:Optional
	inputIdRef?: null | v1.#Reference @go(InputIDRef,*v1.Reference)

	// Selector for a Input in medialive to populate inputId.
	// +kubebuilder:validation:Optional
	inputIdSelector?: null | v1.#Selector @go(InputIDSelector,*v1.Selector)

	// Settings of an input. See Input Settings for more details
	// +kubebuilder:validation:Optional
	inputSettings?: [...#InputSettingsParameters] @go(InputSettings,[]InputSettingsParameters)
}

#InputChannelLevelsInitParameters: {
	gain?:         null | float64 @go(Gain,*float64)
	inputChannel?: null | float64 @go(InputChannel,*float64)
}

#InputChannelLevelsObservation: {
	gain?:         null | float64 @go(Gain,*float64)
	inputChannel?: null | float64 @go(InputChannel,*float64)
}

#InputChannelLevelsParameters: {
	// +kubebuilder:validation:Optional
	gain?: null | float64 @go(Gain,*float64)

	// +kubebuilder:validation:Optional
	inputChannel?: null | float64 @go(InputChannel,*float64)
}

#InputLossSettingsInitParameters: {
	inputLossThresholdMsec?: null | float64 @go(InputLossThresholdMsec,*float64)
}

#InputLossSettingsObservation: {
	inputLossThresholdMsec?: null | float64 @go(InputLossThresholdMsec,*float64)
}

#InputLossSettingsParameters: {
	// +kubebuilder:validation:Optional
	inputLossThresholdMsec?: null | float64 @go(InputLossThresholdMsec,*float64)
}

#InputSettingsInitParameters: {
	audioSelector?: [...#AudioSelectorInitParameters] @go(AudioSelector,[]AudioSelectorInitParameters)
	captionSelector?: [...#CaptionSelectorInitParameters] @go(CaptionSelector,[]CaptionSelectorInitParameters)

	// Enable or disable the deblock filter when filtering.
	deblockFilter?: null | string @go(DeblockFilter,*string)

	// Enable or disable the denoise filter when filtering.
	denoiseFilter?: null | string @go(DenoiseFilter,*string)

	// Adjusts the magnitude of filtering from 1 (minimal) to 5 (strongest).
	filterStrength?: null | float64 @go(FilterStrength,*float64)

	// Turns on the filter for the input.
	inputFilter?: null | string @go(InputFilter,*string)

	// Input settings. See Network Input Settings for more details.
	networkInputSettings?: [...#NetworkInputSettingsInitParameters] @go(NetworkInputSettings,[]NetworkInputSettingsInitParameters)

	// PID from which to read SCTE-35 messages.
	scte35Pid?: null | float64 @go(Scte35Pid,*float64)

	// Specifies whether to extract applicable ancillary data from a SMPTE-2038 source in the input.
	smpte2038DataPreference?: null | string @go(Smpte2038DataPreference,*string)

	// Loop input if it is a file.
	sourceEndBehavior?: null | string @go(SourceEndBehavior,*string)
	videoSelector?: [...#VideoSelectorInitParameters] @go(VideoSelector,[]VideoSelectorInitParameters)
}

#InputSettingsObservation: {
	audioSelector?: [...#AudioSelectorObservation] @go(AudioSelector,[]AudioSelectorObservation)
	captionSelector?: [...#CaptionSelectorObservation] @go(CaptionSelector,[]CaptionSelectorObservation)

	// Enable or disable the deblock filter when filtering.
	deblockFilter?: null | string @go(DeblockFilter,*string)

	// Enable or disable the denoise filter when filtering.
	denoiseFilter?: null | string @go(DenoiseFilter,*string)

	// Adjusts the magnitude of filtering from 1 (minimal) to 5 (strongest).
	filterStrength?: null | float64 @go(FilterStrength,*float64)

	// Turns on the filter for the input.
	inputFilter?: null | string @go(InputFilter,*string)

	// Input settings. See Network Input Settings for more details.
	networkInputSettings?: [...#NetworkInputSettingsObservation] @go(NetworkInputSettings,[]NetworkInputSettingsObservation)

	// PID from which to read SCTE-35 messages.
	scte35Pid?: null | float64 @go(Scte35Pid,*float64)

	// Specifies whether to extract applicable ancillary data from a SMPTE-2038 source in the input.
	smpte2038DataPreference?: null | string @go(Smpte2038DataPreference,*string)

	// Loop input if it is a file.
	sourceEndBehavior?: null | string @go(SourceEndBehavior,*string)
	videoSelector?: [...#VideoSelectorObservation] @go(VideoSelector,[]VideoSelectorObservation)
}

#InputSettingsParameters: {
	// +kubebuilder:validation:Optional
	audioSelector?: [...#AudioSelectorParameters] @go(AudioSelector,[]AudioSelectorParameters)

	// +kubebuilder:validation:Optional
	captionSelector?: [...#CaptionSelectorParameters] @go(CaptionSelector,[]CaptionSelectorParameters)

	// Enable or disable the deblock filter when filtering.
	// +kubebuilder:validation:Optional
	deblockFilter?: null | string @go(DeblockFilter,*string)

	// Enable or disable the denoise filter when filtering.
	// +kubebuilder:validation:Optional
	denoiseFilter?: null | string @go(DenoiseFilter,*string)

	// Adjusts the magnitude of filtering from 1 (minimal) to 5 (strongest).
	// +kubebuilder:validation:Optional
	filterStrength?: null | float64 @go(FilterStrength,*float64)

	// Turns on the filter for the input.
	// +kubebuilder:validation:Optional
	inputFilter?: null | string @go(InputFilter,*string)

	// Input settings. See Network Input Settings for more details.
	// +kubebuilder:validation:Optional
	networkInputSettings?: [...#NetworkInputSettingsParameters] @go(NetworkInputSettings,[]NetworkInputSettingsParameters)

	// PID from which to read SCTE-35 messages.
	// +kubebuilder:validation:Optional
	scte35Pid?: null | float64 @go(Scte35Pid,*float64)

	// Specifies whether to extract applicable ancillary data from a SMPTE-2038 source in the input.
	// +kubebuilder:validation:Optional
	smpte2038DataPreference?: null | string @go(Smpte2038DataPreference,*string)

	// Loop input if it is a file.
	// +kubebuilder:validation:Optional
	sourceEndBehavior?: null | string @go(SourceEndBehavior,*string)

	// +kubebuilder:validation:Optional
	videoSelector?: [...#VideoSelectorParameters] @go(VideoSelector,[]VideoSelectorParameters)
}

#InputSpecificationInitParameters: {
	codec?: null | string @go(Codec,*string)

	// - Maximum CDI input resolution.
	inputResolution?: null | string @go(InputResolution,*string)

	// Average bitrate in bits/second.
	maximumBitrate?: null | string @go(MaximumBitrate,*string)
}

#InputSpecificationObservation: {
	codec?: null | string @go(Codec,*string)

	// - Maximum CDI input resolution.
	inputResolution?: null | string @go(InputResolution,*string)

	// Average bitrate in bits/second.
	maximumBitrate?: null | string @go(MaximumBitrate,*string)
}

#InputSpecificationParameters: {
	// +kubebuilder:validation:Optional
	codec?: null | string @go(Codec,*string)

	// - Maximum CDI input resolution.
	// +kubebuilder:validation:Optional
	inputResolution?: null | string @go(InputResolution,*string)

	// Average bitrate in bits/second.
	// +kubebuilder:validation:Optional
	maximumBitrate?: null | string @go(MaximumBitrate,*string)
}

#KeyProviderServerInitParameters: {
	// Key used to extract the password from EC2 Parameter store.
	passwordParam?: null | string @go(PasswordParam,*string)

	// Path to a file accessible to the live stream.
	uri?: null | string @go(URI,*string)

	// Username for destination.
	username?: null | string @go(Username,*string)
}

#KeyProviderServerObservation: {
	// Key used to extract the password from EC2 Parameter store.
	passwordParam?: null | string @go(PasswordParam,*string)

	// Path to a file accessible to the live stream.
	uri?: null | string @go(URI,*string)

	// Username for destination.
	username?: null | string @go(Username,*string)
}

#KeyProviderServerParameters: {
	// Key used to extract the password from EC2 Parameter store.
	// +kubebuilder:validation:Optional
	passwordParam?: null | string @go(PasswordParam,*string)

	// Path to a file accessible to the live stream.
	// +kubebuilder:validation:Optional
	uri?: null | string @go(URI,*string)

	// Username for destination.
	// +kubebuilder:validation:Optional
	username?: null | string @go(Username,*string)
}

#KeyProviderSettingsInitParameters: {
	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	staticKeySettings?: [...#StaticKeySettingsInitParameters] @go(StaticKeySettings,[]StaticKeySettingsInitParameters)
}

#KeyProviderSettingsObservation: {
	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	staticKeySettings?: [...#StaticKeySettingsObservation] @go(StaticKeySettings,[]StaticKeySettingsObservation)
}

#KeyProviderSettingsParameters: {
	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	staticKeySettings?: [...#StaticKeySettingsParameters] @go(StaticKeySettings,[]StaticKeySettingsParameters)
}

#M2TsSettingsDvbNitSettingsInitParameters: {
	// User-specified id. Ths is used in an output group or an output.
	networkId?: null | float64 @go(NetworkID,*float64)

	// Name of the Channel.
	networkName?: null | string  @go(NetworkName,*string)
	repInterval?: null | float64 @go(RepInterval,*float64)
}

#M2TsSettingsDvbNitSettingsObservation: {
	// User-specified id. Ths is used in an output group or an output.
	networkId?: null | float64 @go(NetworkID,*float64)

	// Name of the Channel.
	networkName?: null | string  @go(NetworkName,*string)
	repInterval?: null | float64 @go(RepInterval,*float64)
}

#M2TsSettingsDvbNitSettingsParameters: {
	// User-specified id. Ths is used in an output group or an output.
	// +kubebuilder:validation:Optional
	networkId?: null | float64 @go(NetworkID,*float64)

	// Name of the Channel.
	// +kubebuilder:validation:Optional
	networkName?: null | string @go(NetworkName,*string)

	// +kubebuilder:validation:Optional
	repInterval?: null | float64 @go(RepInterval,*float64)
}

#M2TsSettingsDvbSdtSettingsInitParameters: {
	outputSdt?:   null | string  @go(OutputSdt,*string)
	repInterval?: null | float64 @go(RepInterval,*float64)

	// Name of the Channel.
	serviceName?: null | string @go(ServiceName,*string)

	// Name of the Channel.
	serviceProviderName?: null | string @go(ServiceProviderName,*string)
}

#M2TsSettingsDvbSdtSettingsObservation: {
	outputSdt?:   null | string  @go(OutputSdt,*string)
	repInterval?: null | float64 @go(RepInterval,*float64)

	// Name of the Channel.
	serviceName?: null | string @go(ServiceName,*string)

	// Name of the Channel.
	serviceProviderName?: null | string @go(ServiceProviderName,*string)
}

#M2TsSettingsDvbSdtSettingsParameters: {
	// +kubebuilder:validation:Optional
	outputSdt?: null | string @go(OutputSdt,*string)

	// +kubebuilder:validation:Optional
	repInterval?: null | float64 @go(RepInterval,*float64)

	// Name of the Channel.
	// +kubebuilder:validation:Optional
	serviceName?: null | string @go(ServiceName,*string)

	// Name of the Channel.
	// +kubebuilder:validation:Optional
	serviceProviderName?: null | string @go(ServiceProviderName,*string)
}

#M2TsSettingsDvbTdtSettingsInitParameters: {
	repInterval?: null | float64 @go(RepInterval,*float64)
}

#M2TsSettingsDvbTdtSettingsObservation: {
	repInterval?: null | float64 @go(RepInterval,*float64)
}

#M2TsSettingsDvbTdtSettingsParameters: {
	// +kubebuilder:validation:Optional
	repInterval?: null | float64 @go(RepInterval,*float64)
}

#M2TsSettingsInitParameters: {
	absentInputAudioBehavior?: null | string @go(AbsentInputAudioBehavior,*string)
	arib?:                     null | string @go(Arib,*string)

	// User-specified id. Ths is used in an output group or an output.
	aribCaptionsPid?:        null | string  @go(AribCaptionsPid,*string)
	aribCaptionsPidControl?: null | string  @go(AribCaptionsPidControl,*string)
	audioBufferModel?:       null | string  @go(AudioBufferModel,*string)
	audioFramesPerPes?:      null | float64 @go(AudioFramesPerPes,*float64)
	audioPids?:              null | string  @go(AudioPids,*string)
	audioStreamType?:        null | string  @go(AudioStreamType,*string)

	// Average bitrate in bits/second.
	bitrate?:      null | float64 @go(Bitrate,*float64)
	bufferModel?:  null | string  @go(BufferModel,*string)
	ccDescriptor?: null | string  @go(CcDescriptor,*string)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	dvbNitSettings?: [...#DvbNitSettingsInitParameters] @go(DvbNitSettings,[]DvbNitSettingsInitParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	dvbSdtSettings?: [...#DvbSdtSettingsInitParameters] @go(DvbSdtSettings,[]DvbSdtSettingsInitParameters)
	dvbSubPids?: null | string @go(DvbSubPids,*string)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	dvbTdtSettings?: [...#DvbTdtSettingsInitParameters] @go(DvbTdtSettings,[]DvbTdtSettingsInitParameters)

	// User-specified id. Ths is used in an output group or an output.
	dvbTeletextPid?:   null | string  @go(DvbTeletextPid,*string)
	ebif?:             null | string  @go(Ebif,*string)
	ebpAudioInterval?: null | string  @go(EbpAudioInterval,*string)
	ebpLookaheadMs?:   null | float64 @go(EbpLookaheadMs,*float64)
	ebpPlacement?:     null | string  @go(EbpPlacement,*string)

	// User-specified id. Ths is used in an output group or an output.
	ecmPid?:      null | string @go(EcmPid,*string)
	esRateInPes?: null | string @go(EsRateInPes,*string)

	// User-specified id. Ths is used in an output group or an output.
	etvPlatformPid?: null | string @go(EtvPlatformPid,*string)

	// User-specified id. Ths is used in an output group or an output.
	etvSignalPid?:       null | string  @go(EtvSignalPid,*string)
	fragmentTime?:       null | float64 @go(FragmentTime,*float64)
	klv?:                null | string  @go(Klv,*string)
	klvDataPids?:        null | string  @go(KlvDataPids,*string)
	nielsenId3Behavior?: null | string  @go(NielsenId3Behavior,*string)

	// Average bitrate in bits/second.
	nullPacketBitrate?: null | float64 @go(NullPacketBitrate,*float64)
	patInterval?:       null | float64 @go(PatInterval,*float64)
	pcrControl?:        null | string  @go(PcrControl,*string)
	pcrPeriod?:         null | float64 @go(PcrPeriod,*float64)

	// User-specified id. Ths is used in an output group or an output.
	pcrPid?:      null | string  @go(PcrPid,*string)
	pmtInterval?: null | float64 @go(PmtInterval,*float64)

	// User-specified id. Ths is used in an output group or an output.
	pmtPid?:        null | string  @go(PmtPid,*string)
	programNum?:    null | float64 @go(ProgramNum,*float64)
	rateMode?:      null | string  @go(RateMode,*string)
	scte27Pids?:    null | string  @go(Scte27Pids,*string)
	scte35Control?: null | string  @go(Scte35Control,*string)

	// PID from which to read SCTE-35 messages.
	scte35Pid?:             null | string  @go(Scte35Pid,*string)
	segmentationMarkers?:   null | string  @go(SegmentationMarkers,*string)
	segmentationStyle?:     null | string  @go(SegmentationStyle,*string)
	segmentationTime?:      null | float64 @go(SegmentationTime,*float64)
	timedMetadataBehavior?: null | string  @go(TimedMetadataBehavior,*string)

	// User-specified id. Ths is used in an output group or an output.
	timedMetadataPid?: null | string @go(TimedMetadataPid,*string)

	// User-specified id. Ths is used in an output group or an output.
	transportStreamId?: null | float64 @go(TransportStreamID,*float64)

	// User-specified id. Ths is used in an output group or an output.
	videoPid?: null | string @go(VideoPid,*string)
}

#M2TsSettingsObservation: {
	absentInputAudioBehavior?: null | string @go(AbsentInputAudioBehavior,*string)
	arib?:                     null | string @go(Arib,*string)

	// User-specified id. Ths is used in an output group or an output.
	aribCaptionsPid?:        null | string  @go(AribCaptionsPid,*string)
	aribCaptionsPidControl?: null | string  @go(AribCaptionsPidControl,*string)
	audioBufferModel?:       null | string  @go(AudioBufferModel,*string)
	audioFramesPerPes?:      null | float64 @go(AudioFramesPerPes,*float64)
	audioPids?:              null | string  @go(AudioPids,*string)
	audioStreamType?:        null | string  @go(AudioStreamType,*string)

	// Average bitrate in bits/second.
	bitrate?:      null | float64 @go(Bitrate,*float64)
	bufferModel?:  null | string  @go(BufferModel,*string)
	ccDescriptor?: null | string  @go(CcDescriptor,*string)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	dvbNitSettings?: [...#DvbNitSettingsObservation] @go(DvbNitSettings,[]DvbNitSettingsObservation)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	dvbSdtSettings?: [...#DvbSdtSettingsObservation] @go(DvbSdtSettings,[]DvbSdtSettingsObservation)
	dvbSubPids?: null | string @go(DvbSubPids,*string)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	dvbTdtSettings?: [...#DvbTdtSettingsObservation] @go(DvbTdtSettings,[]DvbTdtSettingsObservation)

	// User-specified id. Ths is used in an output group or an output.
	dvbTeletextPid?:   null | string  @go(DvbTeletextPid,*string)
	ebif?:             null | string  @go(Ebif,*string)
	ebpAudioInterval?: null | string  @go(EbpAudioInterval,*string)
	ebpLookaheadMs?:   null | float64 @go(EbpLookaheadMs,*float64)
	ebpPlacement?:     null | string  @go(EbpPlacement,*string)

	// User-specified id. Ths is used in an output group or an output.
	ecmPid?:      null | string @go(EcmPid,*string)
	esRateInPes?: null | string @go(EsRateInPes,*string)

	// User-specified id. Ths is used in an output group or an output.
	etvPlatformPid?: null | string @go(EtvPlatformPid,*string)

	// User-specified id. Ths is used in an output group or an output.
	etvSignalPid?:       null | string  @go(EtvSignalPid,*string)
	fragmentTime?:       null | float64 @go(FragmentTime,*float64)
	klv?:                null | string  @go(Klv,*string)
	klvDataPids?:        null | string  @go(KlvDataPids,*string)
	nielsenId3Behavior?: null | string  @go(NielsenId3Behavior,*string)

	// Average bitrate in bits/second.
	nullPacketBitrate?: null | float64 @go(NullPacketBitrate,*float64)
	patInterval?:       null | float64 @go(PatInterval,*float64)
	pcrControl?:        null | string  @go(PcrControl,*string)
	pcrPeriod?:         null | float64 @go(PcrPeriod,*float64)

	// User-specified id. Ths is used in an output group or an output.
	pcrPid?:      null | string  @go(PcrPid,*string)
	pmtInterval?: null | float64 @go(PmtInterval,*float64)

	// User-specified id. Ths is used in an output group or an output.
	pmtPid?:        null | string  @go(PmtPid,*string)
	programNum?:    null | float64 @go(ProgramNum,*float64)
	rateMode?:      null | string  @go(RateMode,*string)
	scte27Pids?:    null | string  @go(Scte27Pids,*string)
	scte35Control?: null | string  @go(Scte35Control,*string)

	// PID from which to read SCTE-35 messages.
	scte35Pid?:             null | string  @go(Scte35Pid,*string)
	segmentationMarkers?:   null | string  @go(SegmentationMarkers,*string)
	segmentationStyle?:     null | string  @go(SegmentationStyle,*string)
	segmentationTime?:      null | float64 @go(SegmentationTime,*float64)
	timedMetadataBehavior?: null | string  @go(TimedMetadataBehavior,*string)

	// User-specified id. Ths is used in an output group or an output.
	timedMetadataPid?: null | string @go(TimedMetadataPid,*string)

	// User-specified id. Ths is used in an output group or an output.
	transportStreamId?: null | float64 @go(TransportStreamID,*float64)

	// User-specified id. Ths is used in an output group or an output.
	videoPid?: null | string @go(VideoPid,*string)
}

#M2TsSettingsParameters: {
	// +kubebuilder:validation:Optional
	absentInputAudioBehavior?: null | string @go(AbsentInputAudioBehavior,*string)

	// +kubebuilder:validation:Optional
	arib?: null | string @go(Arib,*string)

	// User-specified id. Ths is used in an output group or an output.
	// +kubebuilder:validation:Optional
	aribCaptionsPid?: null | string @go(AribCaptionsPid,*string)

	// +kubebuilder:validation:Optional
	aribCaptionsPidControl?: null | string @go(AribCaptionsPidControl,*string)

	// +kubebuilder:validation:Optional
	audioBufferModel?: null | string @go(AudioBufferModel,*string)

	// +kubebuilder:validation:Optional
	audioFramesPerPes?: null | float64 @go(AudioFramesPerPes,*float64)

	// +kubebuilder:validation:Optional
	audioPids?: null | string @go(AudioPids,*string)

	// +kubebuilder:validation:Optional
	audioStreamType?: null | string @go(AudioStreamType,*string)

	// Average bitrate in bits/second.
	// +kubebuilder:validation:Optional
	bitrate?: null | float64 @go(Bitrate,*float64)

	// +kubebuilder:validation:Optional
	bufferModel?: null | string @go(BufferModel,*string)

	// +kubebuilder:validation:Optional
	ccDescriptor?: null | string @go(CcDescriptor,*string)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	dvbNitSettings?: [...#DvbNitSettingsParameters] @go(DvbNitSettings,[]DvbNitSettingsParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	dvbSdtSettings?: [...#DvbSdtSettingsParameters] @go(DvbSdtSettings,[]DvbSdtSettingsParameters)

	// +kubebuilder:validation:Optional
	dvbSubPids?: null | string @go(DvbSubPids,*string)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	dvbTdtSettings?: [...#DvbTdtSettingsParameters] @go(DvbTdtSettings,[]DvbTdtSettingsParameters)

	// User-specified id. Ths is used in an output group or an output.
	// +kubebuilder:validation:Optional
	dvbTeletextPid?: null | string @go(DvbTeletextPid,*string)

	// +kubebuilder:validation:Optional
	ebif?: null | string @go(Ebif,*string)

	// +kubebuilder:validation:Optional
	ebpAudioInterval?: null | string @go(EbpAudioInterval,*string)

	// +kubebuilder:validation:Optional
	ebpLookaheadMs?: null | float64 @go(EbpLookaheadMs,*float64)

	// +kubebuilder:validation:Optional
	ebpPlacement?: null | string @go(EbpPlacement,*string)

	// User-specified id. Ths is used in an output group or an output.
	// +kubebuilder:validation:Optional
	ecmPid?: null | string @go(EcmPid,*string)

	// +kubebuilder:validation:Optional
	esRateInPes?: null | string @go(EsRateInPes,*string)

	// User-specified id. Ths is used in an output group or an output.
	// +kubebuilder:validation:Optional
	etvPlatformPid?: null | string @go(EtvPlatformPid,*string)

	// User-specified id. Ths is used in an output group or an output.
	// +kubebuilder:validation:Optional
	etvSignalPid?: null | string @go(EtvSignalPid,*string)

	// +kubebuilder:validation:Optional
	fragmentTime?: null | float64 @go(FragmentTime,*float64)

	// +kubebuilder:validation:Optional
	klv?: null | string @go(Klv,*string)

	// +kubebuilder:validation:Optional
	klvDataPids?: null | string @go(KlvDataPids,*string)

	// +kubebuilder:validation:Optional
	nielsenId3Behavior?: null | string @go(NielsenId3Behavior,*string)

	// Average bitrate in bits/second.
	// +kubebuilder:validation:Optional
	nullPacketBitrate?: null | float64 @go(NullPacketBitrate,*float64)

	// +kubebuilder:validation:Optional
	patInterval?: null | float64 @go(PatInterval,*float64)

	// +kubebuilder:validation:Optional
	pcrControl?: null | string @go(PcrControl,*string)

	// +kubebuilder:validation:Optional
	pcrPeriod?: null | float64 @go(PcrPeriod,*float64)

	// User-specified id. Ths is used in an output group or an output.
	// +kubebuilder:validation:Optional
	pcrPid?: null | string @go(PcrPid,*string)

	// +kubebuilder:validation:Optional
	pmtInterval?: null | float64 @go(PmtInterval,*float64)

	// User-specified id. Ths is used in an output group or an output.
	// +kubebuilder:validation:Optional
	pmtPid?: null | string @go(PmtPid,*string)

	// +kubebuilder:validation:Optional
	programNum?: null | float64 @go(ProgramNum,*float64)

	// +kubebuilder:validation:Optional
	rateMode?: null | string @go(RateMode,*string)

	// +kubebuilder:validation:Optional
	scte27Pids?: null | string @go(Scte27Pids,*string)

	// +kubebuilder:validation:Optional
	scte35Control?: null | string @go(Scte35Control,*string)

	// PID from which to read SCTE-35 messages.
	// +kubebuilder:validation:Optional
	scte35Pid?: null | string @go(Scte35Pid,*string)

	// +kubebuilder:validation:Optional
	segmentationMarkers?: null | string @go(SegmentationMarkers,*string)

	// +kubebuilder:validation:Optional
	segmentationStyle?: null | string @go(SegmentationStyle,*string)

	// +kubebuilder:validation:Optional
	segmentationTime?: null | float64 @go(SegmentationTime,*float64)

	// +kubebuilder:validation:Optional
	timedMetadataBehavior?: null | string @go(TimedMetadataBehavior,*string)

	// User-specified id. Ths is used in an output group or an output.
	// +kubebuilder:validation:Optional
	timedMetadataPid?: null | string @go(TimedMetadataPid,*string)

	// User-specified id. Ths is used in an output group or an output.
	// +kubebuilder:validation:Optional
	transportStreamId?: null | float64 @go(TransportStreamID,*float64)

	// User-specified id. Ths is used in an output group or an output.
	// +kubebuilder:validation:Optional
	videoPid?: null | string @go(VideoPid,*string)
}

#M3U8SettingsInitParameters: {
	audioFramesPerPes?: null | float64 @go(AudioFramesPerPes,*float64)
	audioPids?:         null | string  @go(AudioPids,*string)

	// User-specified id. Ths is used in an output group or an output.
	ecmPid?:             null | string  @go(EcmPid,*string)
	nielsenId3Behavior?: null | string  @go(NielsenId3Behavior,*string)
	patInterval?:        null | float64 @go(PatInterval,*float64)
	pcrControl?:         null | string  @go(PcrControl,*string)
	pcrPeriod?:          null | float64 @go(PcrPeriod,*float64)

	// User-specified id. Ths is used in an output group or an output.
	pcrPid?:      null | string  @go(PcrPid,*string)
	pmtInterval?: null | float64 @go(PmtInterval,*float64)

	// User-specified id. Ths is used in an output group or an output.
	pmtPid?:         null | string  @go(PmtPid,*string)
	programNum?:     null | float64 @go(ProgramNum,*float64)
	scte35Behavior?: null | string  @go(Scte35Behavior,*string)

	// PID from which to read SCTE-35 messages.
	scte35Pid?:             null | string @go(Scte35Pid,*string)
	timedMetadataBehavior?: null | string @go(TimedMetadataBehavior,*string)

	// User-specified id. Ths is used in an output group or an output.
	timedMetadataPid?: null | string @go(TimedMetadataPid,*string)

	// User-specified id. Ths is used in an output group or an output.
	transportStreamId?: null | float64 @go(TransportStreamID,*float64)

	// User-specified id. Ths is used in an output group or an output.
	videoPid?: null | string @go(VideoPid,*string)
}

#M3U8SettingsObservation: {
	audioFramesPerPes?: null | float64 @go(AudioFramesPerPes,*float64)
	audioPids?:         null | string  @go(AudioPids,*string)

	// User-specified id. Ths is used in an output group or an output.
	ecmPid?:             null | string  @go(EcmPid,*string)
	nielsenId3Behavior?: null | string  @go(NielsenId3Behavior,*string)
	patInterval?:        null | float64 @go(PatInterval,*float64)
	pcrControl?:         null | string  @go(PcrControl,*string)
	pcrPeriod?:          null | float64 @go(PcrPeriod,*float64)

	// User-specified id. Ths is used in an output group or an output.
	pcrPid?:      null | string  @go(PcrPid,*string)
	pmtInterval?: null | float64 @go(PmtInterval,*float64)

	// User-specified id. Ths is used in an output group or an output.
	pmtPid?:         null | string  @go(PmtPid,*string)
	programNum?:     null | float64 @go(ProgramNum,*float64)
	scte35Behavior?: null | string  @go(Scte35Behavior,*string)

	// PID from which to read SCTE-35 messages.
	scte35Pid?:             null | string @go(Scte35Pid,*string)
	timedMetadataBehavior?: null | string @go(TimedMetadataBehavior,*string)

	// User-specified id. Ths is used in an output group or an output.
	timedMetadataPid?: null | string @go(TimedMetadataPid,*string)

	// User-specified id. Ths is used in an output group or an output.
	transportStreamId?: null | float64 @go(TransportStreamID,*float64)

	// User-specified id. Ths is used in an output group or an output.
	videoPid?: null | string @go(VideoPid,*string)
}

#M3U8SettingsParameters: {
	// +kubebuilder:validation:Optional
	audioFramesPerPes?: null | float64 @go(AudioFramesPerPes,*float64)

	// +kubebuilder:validation:Optional
	audioPids?: null | string @go(AudioPids,*string)

	// User-specified id. Ths is used in an output group or an output.
	// +kubebuilder:validation:Optional
	ecmPid?: null | string @go(EcmPid,*string)

	// +kubebuilder:validation:Optional
	nielsenId3Behavior?: null | string @go(NielsenId3Behavior,*string)

	// +kubebuilder:validation:Optional
	patInterval?: null | float64 @go(PatInterval,*float64)

	// +kubebuilder:validation:Optional
	pcrControl?: null | string @go(PcrControl,*string)

	// +kubebuilder:validation:Optional
	pcrPeriod?: null | float64 @go(PcrPeriod,*float64)

	// User-specified id. Ths is used in an output group or an output.
	// +kubebuilder:validation:Optional
	pcrPid?: null | string @go(PcrPid,*string)

	// +kubebuilder:validation:Optional
	pmtInterval?: null | float64 @go(PmtInterval,*float64)

	// User-specified id. Ths is used in an output group or an output.
	// +kubebuilder:validation:Optional
	pmtPid?: null | string @go(PmtPid,*string)

	// +kubebuilder:validation:Optional
	programNum?: null | float64 @go(ProgramNum,*float64)

	// +kubebuilder:validation:Optional
	scte35Behavior?: null | string @go(Scte35Behavior,*string)

	// PID from which to read SCTE-35 messages.
	// +kubebuilder:validation:Optional
	scte35Pid?: null | string @go(Scte35Pid,*string)

	// +kubebuilder:validation:Optional
	timedMetadataBehavior?: null | string @go(TimedMetadataBehavior,*string)

	// User-specified id. Ths is used in an output group or an output.
	// +kubebuilder:validation:Optional
	timedMetadataPid?: null | string @go(TimedMetadataPid,*string)

	// User-specified id. Ths is used in an output group or an output.
	// +kubebuilder:validation:Optional
	transportStreamId?: null | float64 @go(TransportStreamID,*float64)

	// User-specified id. Ths is used in an output group or an output.
	// +kubebuilder:validation:Optional
	videoPid?: null | string @go(VideoPid,*string)
}

#MaintenanceInitParameters: {
	// The day of the week to use for maintenance.
	maintenanceDay?: null | string @go(MaintenanceDay,*string)

	// The hour maintenance will start.
	maintenanceStartTime?: null | string @go(MaintenanceStartTime,*string)
}

#MaintenanceObservation: {
	// The day of the week to use for maintenance.
	maintenanceDay?: null | string @go(MaintenanceDay,*string)

	// The hour maintenance will start.
	maintenanceStartTime?: null | string @go(MaintenanceStartTime,*string)
}

#MaintenanceParameters: {
	// The day of the week to use for maintenance.
	// +kubebuilder:validation:Optional
	maintenanceDay?: null | string @go(MaintenanceDay,*string)

	// The hour maintenance will start.
	// +kubebuilder:validation:Optional
	maintenanceStartTime?: null | string @go(MaintenanceStartTime,*string)
}

#MediaPackageGroupSettingsDestinationInitParameters: {
	// Reference ID for the destination.
	destinationRefId?: null | string @go(DestinationRefID,*string)
}

#MediaPackageGroupSettingsDestinationObservation: {
	// Reference ID for the destination.
	destinationRefId?: null | string @go(DestinationRefID,*string)
}

#MediaPackageGroupSettingsDestinationParameters: {
	// Reference ID for the destination.
	// +kubebuilder:validation:Optional
	destinationRefId?: null | string @go(DestinationRefID,*string)
}

#MediaPackageGroupSettingsInitParameters: {
	// A director and base filename where archive files should be written. See Destination for more details.
	destination?: [...#MediaPackageGroupSettingsDestinationInitParameters] @go(Destination,[]MediaPackageGroupSettingsDestinationInitParameters)
}

#MediaPackageGroupSettingsObservation: {
	// A director and base filename where archive files should be written. See Destination for more details.
	destination?: [...#MediaPackageGroupSettingsDestinationObservation] @go(Destination,[]MediaPackageGroupSettingsDestinationObservation)
}

#MediaPackageGroupSettingsParameters: {
	// A director and base filename where archive files should be written. See Destination for more details.
	// +kubebuilder:validation:Optional
	destination: [...#MediaPackageGroupSettingsDestinationParameters] @go(Destination,[]MediaPackageGroupSettingsDestinationParameters)
}

#MediaPackageOutputSettingsInitParameters: {
}

#MediaPackageOutputSettingsObservation: {
}

#MediaPackageOutputSettingsParameters: {
}

#MediaPackageSettingsInitParameters: {
	// ID of the channel in MediaPackage that is the destination for this output group.
	channelId?: null | string @go(ChannelID,*string)
}

#MediaPackageSettingsObservation: {
	// ID of the channel in MediaPackage that is the destination for this output group.
	channelId?: null | string @go(ChannelID,*string)
}

#MediaPackageSettingsParameters: {
	// ID of the channel in MediaPackage that is the destination for this output group.
	// +kubebuilder:validation:Optional
	channelId?: null | string @go(ChannelID,*string)
}

#Mp2SettingsInitParameters: {
	// Average bitrate in bits/second.
	bitrate?: null | float64 @go(Bitrate,*float64)

	// Mono, Stereo, or 5.1 channel layout.
	codingMode?: null | string @go(CodingMode,*string)

	// Sample rate in Hz.
	sampleRate?: null | float64 @go(SampleRate,*float64)
}

#Mp2SettingsObservation: {
	// Average bitrate in bits/second.
	bitrate?: null | float64 @go(Bitrate,*float64)

	// Mono, Stereo, or 5.1 channel layout.
	codingMode?: null | string @go(CodingMode,*string)

	// Sample rate in Hz.
	sampleRate?: null | float64 @go(SampleRate,*float64)
}

#Mp2SettingsParameters: {
	// Average bitrate in bits/second.
	// +kubebuilder:validation:Optional
	bitrate?: null | float64 @go(Bitrate,*float64)

	// Mono, Stereo, or 5.1 channel layout.
	// +kubebuilder:validation:Optional
	codingMode?: null | string @go(CodingMode,*string)

	// Sample rate in Hz.
	// +kubebuilder:validation:Optional
	sampleRate?: null | float64 @go(SampleRate,*float64)
}

#MsSmoothGroupSettingsDestinationInitParameters: {
	// Reference ID for the destination.
	destinationRefId?: null | string @go(DestinationRefID,*string)
}

#MsSmoothGroupSettingsDestinationObservation: {
	// Reference ID for the destination.
	destinationRefId?: null | string @go(DestinationRefID,*string)
}

#MsSmoothGroupSettingsDestinationParameters: {
	// Reference ID for the destination.
	// +kubebuilder:validation:Optional
	destinationRefId?: null | string @go(DestinationRefID,*string)
}

#MsSmoothGroupSettingsInitParameters: {
	// User-specified id. Ths is used in an output group or an output.
	acquisitionPointId?:       null | string @go(AcquisitionPointID,*string)
	audioOnlyTimecodeControl?: null | string @go(AudioOnlyTimecodeControl,*string)

	// Setting to allow self signed or verified RTMP certificates.
	certificateMode?: null | string @go(CertificateMode,*string)

	// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
	connectionRetryInterval?: null | float64 @go(ConnectionRetryInterval,*float64)

	// A director and base filename where archive files should be written. See Destination for more details.
	destination?: [...#MsSmoothGroupSettingsDestinationInitParameters] @go(Destination,[]MsSmoothGroupSettingsDestinationInitParameters)

	// User-specified id. Ths is used in an output group or an output.
	eventId?:           null | string  @go(EventID,*string)
	eventIdMode?:       null | string  @go(EventIDMode,*string)
	eventStopBehavior?: null | string  @go(EventStopBehavior,*string)
	filecacheDuration?: null | float64 @go(FilecacheDuration,*float64)
	fragmentLength?:    null | float64 @go(FragmentLength,*float64)

	// Controls the behavior of the RTMP group if input becomes unavailable.
	inputLossAction?: null | string @go(InputLossAction,*string)

	// Number of retry attempts.
	numRetries?: null | float64 @go(NumRetries,*float64)

	// Number of seconds to wait until a restart is initiated.
	restartDelay?:           null | float64 @go(RestartDelay,*float64)
	segmentationMode?:       null | string  @go(SegmentationMode,*string)
	sendDelayMs?:            null | float64 @go(SendDelayMs,*float64)
	sparseTrackType?:        null | string  @go(SparseTrackType,*string)
	streamManifestBehavior?: null | string  @go(StreamManifestBehavior,*string)
	timestampOffset?:        null | string  @go(TimestampOffset,*string)
	timestampOffsetMode?:    null | string  @go(TimestampOffsetMode,*string)
}

#MsSmoothGroupSettingsObservation: {
	// User-specified id. Ths is used in an output group or an output.
	acquisitionPointId?:       null | string @go(AcquisitionPointID,*string)
	audioOnlyTimecodeControl?: null | string @go(AudioOnlyTimecodeControl,*string)

	// Setting to allow self signed or verified RTMP certificates.
	certificateMode?: null | string @go(CertificateMode,*string)

	// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
	connectionRetryInterval?: null | float64 @go(ConnectionRetryInterval,*float64)

	// A director and base filename where archive files should be written. See Destination for more details.
	destination?: [...#MsSmoothGroupSettingsDestinationObservation] @go(Destination,[]MsSmoothGroupSettingsDestinationObservation)

	// User-specified id. Ths is used in an output group or an output.
	eventId?:           null | string  @go(EventID,*string)
	eventIdMode?:       null | string  @go(EventIDMode,*string)
	eventStopBehavior?: null | string  @go(EventStopBehavior,*string)
	filecacheDuration?: null | float64 @go(FilecacheDuration,*float64)
	fragmentLength?:    null | float64 @go(FragmentLength,*float64)

	// Controls the behavior of the RTMP group if input becomes unavailable.
	inputLossAction?: null | string @go(InputLossAction,*string)

	// Number of retry attempts.
	numRetries?: null | float64 @go(NumRetries,*float64)

	// Number of seconds to wait until a restart is initiated.
	restartDelay?:           null | float64 @go(RestartDelay,*float64)
	segmentationMode?:       null | string  @go(SegmentationMode,*string)
	sendDelayMs?:            null | float64 @go(SendDelayMs,*float64)
	sparseTrackType?:        null | string  @go(SparseTrackType,*string)
	streamManifestBehavior?: null | string  @go(StreamManifestBehavior,*string)
	timestampOffset?:        null | string  @go(TimestampOffset,*string)
	timestampOffsetMode?:    null | string  @go(TimestampOffsetMode,*string)
}

#MsSmoothGroupSettingsParameters: {
	// User-specified id. Ths is used in an output group or an output.
	// +kubebuilder:validation:Optional
	acquisitionPointId?: null | string @go(AcquisitionPointID,*string)

	// +kubebuilder:validation:Optional
	audioOnlyTimecodeControl?: null | string @go(AudioOnlyTimecodeControl,*string)

	// Setting to allow self signed or verified RTMP certificates.
	// +kubebuilder:validation:Optional
	certificateMode?: null | string @go(CertificateMode,*string)

	// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
	// +kubebuilder:validation:Optional
	connectionRetryInterval?: null | float64 @go(ConnectionRetryInterval,*float64)

	// A director and base filename where archive files should be written. See Destination for more details.
	// +kubebuilder:validation:Optional
	destination: [...#MsSmoothGroupSettingsDestinationParameters] @go(Destination,[]MsSmoothGroupSettingsDestinationParameters)

	// User-specified id. Ths is used in an output group or an output.
	// +kubebuilder:validation:Optional
	eventId?: null | string @go(EventID,*string)

	// +kubebuilder:validation:Optional
	eventIdMode?: null | string @go(EventIDMode,*string)

	// +kubebuilder:validation:Optional
	eventStopBehavior?: null | string @go(EventStopBehavior,*string)

	// +kubebuilder:validation:Optional
	filecacheDuration?: null | float64 @go(FilecacheDuration,*float64)

	// +kubebuilder:validation:Optional
	fragmentLength?: null | float64 @go(FragmentLength,*float64)

	// Controls the behavior of the RTMP group if input becomes unavailable.
	// +kubebuilder:validation:Optional
	inputLossAction?: null | string @go(InputLossAction,*string)

	// Number of retry attempts.
	// +kubebuilder:validation:Optional
	numRetries?: null | float64 @go(NumRetries,*float64)

	// Number of seconds to wait until a restart is initiated.
	// +kubebuilder:validation:Optional
	restartDelay?: null | float64 @go(RestartDelay,*float64)

	// +kubebuilder:validation:Optional
	segmentationMode?: null | string @go(SegmentationMode,*string)

	// +kubebuilder:validation:Optional
	sendDelayMs?: null | float64 @go(SendDelayMs,*float64)

	// +kubebuilder:validation:Optional
	sparseTrackType?: null | string @go(SparseTrackType,*string)

	// +kubebuilder:validation:Optional
	streamManifestBehavior?: null | string @go(StreamManifestBehavior,*string)

	// +kubebuilder:validation:Optional
	timestampOffset?: null | string @go(TimestampOffset,*string)

	// +kubebuilder:validation:Optional
	timestampOffsetMode?: null | string @go(TimestampOffsetMode,*string)
}

#MsSmoothOutputSettingsInitParameters: {
	h265PackagingType?: null | string @go(H265PackagingType,*string)

	// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
	nameModifier?: null | string @go(NameModifier,*string)
}

#MsSmoothOutputSettingsObservation: {
	h265PackagingType?: null | string @go(H265PackagingType,*string)

	// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
	nameModifier?: null | string @go(NameModifier,*string)
}

#MsSmoothOutputSettingsParameters: {
	// +kubebuilder:validation:Optional
	h265PackagingType?: null | string @go(H265PackagingType,*string)

	// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
	// +kubebuilder:validation:Optional
	nameModifier?: null | string @go(NameModifier,*string)
}

#MultiplexGroupSettingsInitParameters: {
}

#MultiplexGroupSettingsObservation: {
}

#MultiplexGroupSettingsParameters: {
}

#MultiplexOutputSettingsDestinationInitParameters: {
	// Reference ID for the destination.
	destinationRefId?: null | string @go(DestinationRefID,*string)
}

#MultiplexOutputSettingsDestinationObservation: {
	// Reference ID for the destination.
	destinationRefId?: null | string @go(DestinationRefID,*string)
}

#MultiplexOutputSettingsDestinationParameters: {
	// Reference ID for the destination.
	// +kubebuilder:validation:Optional
	destinationRefId?: null | string @go(DestinationRefID,*string)
}

#MultiplexOutputSettingsInitParameters: {
	// A director and base filename where archive files should be written. See Destination for more details.
	destination?: [...#MultiplexOutputSettingsDestinationInitParameters] @go(Destination,[]MultiplexOutputSettingsDestinationInitParameters)
}

#MultiplexOutputSettingsObservation: {
	// A director and base filename where archive files should be written. See Destination for more details.
	destination?: [...#MultiplexOutputSettingsDestinationObservation] @go(Destination,[]MultiplexOutputSettingsDestinationObservation)
}

#MultiplexOutputSettingsParameters: {
	// A director and base filename where archive files should be written. See Destination for more details.
	// +kubebuilder:validation:Optional
	destination: [...#MultiplexOutputSettingsDestinationParameters] @go(Destination,[]MultiplexOutputSettingsDestinationParameters)
}

#MultiplexSettingsInitParameters: {
	// The ID of the Multiplex that the encoder is providing output to.
	multiplexId?: null | string @go(MultiplexID,*string)

	// The program name of the Multiplex program that the encoder is providing output to.
	programName?: null | string @go(ProgramName,*string)
}

#MultiplexSettingsObservation: {
	// The ID of the Multiplex that the encoder is providing output to.
	multiplexId?: null | string @go(MultiplexID,*string)

	// The program name of the Multiplex program that the encoder is providing output to.
	programName?: null | string @go(ProgramName,*string)
}

#MultiplexSettingsParameters: {
	// The ID of the Multiplex that the encoder is providing output to.
	// +kubebuilder:validation:Optional
	multiplexId?: null | string @go(MultiplexID,*string)

	// The program name of the Multiplex program that the encoder is providing output to.
	// +kubebuilder:validation:Optional
	programName?: null | string @go(ProgramName,*string)
}

#NetworkInputSettingsInitParameters: {
	// Specifies HLS input settings when the uri is for a HLS manifest. See HLS Input Settings for more details.
	hlsInputSettings?: [...#HlsInputSettingsInitParameters] @go(HlsInputSettings,[]HlsInputSettingsInitParameters)

	// Check HTTPS server certificates.
	serverValidation?: null | string @go(ServerValidation,*string)
}

#NetworkInputSettingsObservation: {
	// Specifies HLS input settings when the uri is for a HLS manifest. See HLS Input Settings for more details.
	hlsInputSettings?: [...#HlsInputSettingsObservation] @go(HlsInputSettings,[]HlsInputSettingsObservation)

	// Check HTTPS server certificates.
	serverValidation?: null | string @go(ServerValidation,*string)
}

#NetworkInputSettingsParameters: {
	// Specifies HLS input settings when the uri is for a HLS manifest. See HLS Input Settings for more details.
	// +kubebuilder:validation:Optional
	hlsInputSettings?: [...#HlsInputSettingsParameters] @go(HlsInputSettings,[]HlsInputSettingsParameters)

	// Check HTTPS server certificates.
	// +kubebuilder:validation:Optional
	serverValidation?: null | string @go(ServerValidation,*string)
}

#NielsenCbetSettingsInitParameters: {
	cbetCheckDigitString?: null | string @go(CbetCheckDigitString,*string)

	// Determines the method of CBET insertion mode when prior encoding is detected on the same layer.
	cbetStepaside?: null | string @go(CbetStepaside,*string)

	// CBET source ID to use in the watermark.
	csid?: null | string @go(Csid,*string)
}

#NielsenCbetSettingsObservation: {
	cbetCheckDigitString?: null | string @go(CbetCheckDigitString,*string)

	// Determines the method of CBET insertion mode when prior encoding is detected on the same layer.
	cbetStepaside?: null | string @go(CbetStepaside,*string)

	// CBET source ID to use in the watermark.
	csid?: null | string @go(Csid,*string)
}

#NielsenCbetSettingsParameters: {
	// +kubebuilder:validation:Optional
	cbetCheckDigitString?: null | string @go(CbetCheckDigitString,*string)

	// Determines the method of CBET insertion mode when prior encoding is detected on the same layer.
	// +kubebuilder:validation:Optional
	cbetStepaside?: null | string @go(CbetStepaside,*string)

	// CBET source ID to use in the watermark.
	// +kubebuilder:validation:Optional
	csid?: null | string @go(Csid,*string)
}

#NielsenNaesIiNwSettingsInitParameters: {
	checkDigitString?: null | string @go(CheckDigitString,*string)

	// The Nielsen Source ID to include in the watermark.
	sid?: null | float64 @go(Sid,*float64)
}

#NielsenNaesIiNwSettingsObservation: {
	checkDigitString?: null | string @go(CheckDigitString,*string)

	// The Nielsen Source ID to include in the watermark.
	sid?: null | float64 @go(Sid,*float64)
}

#NielsenNaesIiNwSettingsParameters: {
	// +kubebuilder:validation:Optional
	checkDigitString?: null | string @go(CheckDigitString,*string)

	// The Nielsen Source ID to include in the watermark.
	// +kubebuilder:validation:Optional
	sid?: null | float64 @go(Sid,*float64)
}

#NielsenWatermarksSettingsInitParameters: {
	// Used to insert watermarks of type Nielsen CBET. See Nielsen CBET Settings for more details.
	nielsenCbetSettings?: [...#NielsenCbetSettingsInitParameters] @go(NielsenCbetSettings,[]NielsenCbetSettingsInitParameters)

	// Distribution types to assign to the watermarks. Options are PROGRAM_CONTENT and FINAL_DISTRIBUTOR.
	nielsenDistributionType?: null | string @go(NielsenDistributionType,*string)

	// Used to insert watermarks of type Nielsen NAES, II (N2) and Nielsen NAES VI (NW). See Nielsen NAES II NW Settings for more details.
	nielsenNaesIiNwSettings?: [...#NielsenNaesIiNwSettingsInitParameters] @go(NielsenNaesIiNwSettings,[]NielsenNaesIiNwSettingsInitParameters)
}

#NielsenWatermarksSettingsObservation: {
	// Used to insert watermarks of type Nielsen CBET. See Nielsen CBET Settings for more details.
	nielsenCbetSettings?: [...#NielsenCbetSettingsObservation] @go(NielsenCbetSettings,[]NielsenCbetSettingsObservation)

	// Distribution types to assign to the watermarks. Options are PROGRAM_CONTENT and FINAL_DISTRIBUTOR.
	nielsenDistributionType?: null | string @go(NielsenDistributionType,*string)

	// Used to insert watermarks of type Nielsen NAES, II (N2) and Nielsen NAES VI (NW). See Nielsen NAES II NW Settings for more details.
	nielsenNaesIiNwSettings?: [...#NielsenNaesIiNwSettingsObservation] @go(NielsenNaesIiNwSettings,[]NielsenNaesIiNwSettingsObservation)
}

#NielsenWatermarksSettingsParameters: {
	// Used to insert watermarks of type Nielsen CBET. See Nielsen CBET Settings for more details.
	// +kubebuilder:validation:Optional
	nielsenCbetSettings?: [...#NielsenCbetSettingsParameters] @go(NielsenCbetSettings,[]NielsenCbetSettingsParameters)

	// Distribution types to assign to the watermarks. Options are PROGRAM_CONTENT and FINAL_DISTRIBUTOR.
	// +kubebuilder:validation:Optional
	nielsenDistributionType?: null | string @go(NielsenDistributionType,*string)

	// Used to insert watermarks of type Nielsen NAES, II (N2) and Nielsen NAES VI (NW). See Nielsen NAES II NW Settings for more details.
	// +kubebuilder:validation:Optional
	nielsenNaesIiNwSettings?: [...#NielsenNaesIiNwSettingsParameters] @go(NielsenNaesIiNwSettings,[]NielsenNaesIiNwSettingsParameters)
}

#OutputGroupSettingsInitParameters: {
	// Archive group settings. See Archive Group Settings for more details.
	archiveGroupSettings?: [...#ArchiveGroupSettingsInitParameters] @go(ArchiveGroupSettings,[]ArchiveGroupSettingsInitParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	frameCaptureGroupSettings?: [...#FrameCaptureGroupSettingsInitParameters] @go(FrameCaptureGroupSettings,[]FrameCaptureGroupSettingsInitParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	hlsGroupSettings?: [...#HlsGroupSettingsInitParameters] @go(HlsGroupSettings,[]HlsGroupSettingsInitParameters)

	// Media package group settings. See Media Package Group Settings for more details.
	mediaPackageGroupSettings?: [...#MediaPackageGroupSettingsInitParameters] @go(MediaPackageGroupSettings,[]MediaPackageGroupSettingsInitParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	msSmoothGroupSettings?: [...#MsSmoothGroupSettingsInitParameters] @go(MsSmoothGroupSettings,[]MsSmoothGroupSettingsInitParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	multiplexGroupSettings?: [...#MultiplexGroupSettingsInitParameters] @go(MultiplexGroupSettings,[]MultiplexGroupSettingsInitParameters)

	// RTMP group settings. See RTMP Group Settings for more details.
	rtmpGroupSettings?: [...#RtmpGroupSettingsInitParameters] @go(RtmpGroupSettings,[]RtmpGroupSettingsInitParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	udpGroupSettings?: [...#UDPGroupSettingsInitParameters] @go(UDPGroupSettings,[]UDPGroupSettingsInitParameters)
}

#OutputGroupSettingsObservation: {
	// Archive group settings. See Archive Group Settings for more details.
	archiveGroupSettings?: [...#ArchiveGroupSettingsObservation] @go(ArchiveGroupSettings,[]ArchiveGroupSettingsObservation)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	frameCaptureGroupSettings?: [...#FrameCaptureGroupSettingsObservation] @go(FrameCaptureGroupSettings,[]FrameCaptureGroupSettingsObservation)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	hlsGroupSettings?: [...#HlsGroupSettingsObservation] @go(HlsGroupSettings,[]HlsGroupSettingsObservation)

	// Media package group settings. See Media Package Group Settings for more details.
	mediaPackageGroupSettings?: [...#MediaPackageGroupSettingsObservation] @go(MediaPackageGroupSettings,[]MediaPackageGroupSettingsObservation)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	msSmoothGroupSettings?: [...#MsSmoothGroupSettingsObservation] @go(MsSmoothGroupSettings,[]MsSmoothGroupSettingsObservation)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	multiplexGroupSettings?: [...#MultiplexGroupSettingsParameters] @go(MultiplexGroupSettings,[]MultiplexGroupSettingsParameters)

	// RTMP group settings. See RTMP Group Settings for more details.
	rtmpGroupSettings?: [...#RtmpGroupSettingsObservation] @go(RtmpGroupSettings,[]RtmpGroupSettingsObservation)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	udpGroupSettings?: [...#UDPGroupSettingsObservation] @go(UDPGroupSettings,[]UDPGroupSettingsObservation)
}

#OutputGroupSettingsParameters: {
	// Archive group settings. See Archive Group Settings for more details.
	// +kubebuilder:validation:Optional
	archiveGroupSettings?: [...#ArchiveGroupSettingsParameters] @go(ArchiveGroupSettings,[]ArchiveGroupSettingsParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	frameCaptureGroupSettings?: [...#FrameCaptureGroupSettingsParameters] @go(FrameCaptureGroupSettings,[]FrameCaptureGroupSettingsParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	hlsGroupSettings?: [...#HlsGroupSettingsParameters] @go(HlsGroupSettings,[]HlsGroupSettingsParameters)

	// Media package group settings. See Media Package Group Settings for more details.
	// +kubebuilder:validation:Optional
	mediaPackageGroupSettings?: [...#MediaPackageGroupSettingsParameters] @go(MediaPackageGroupSettings,[]MediaPackageGroupSettingsParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	msSmoothGroupSettings?: [...#MsSmoothGroupSettingsParameters] @go(MsSmoothGroupSettings,[]MsSmoothGroupSettingsParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	multiplexGroupSettings?: [...#MultiplexGroupSettingsParameters] @go(MultiplexGroupSettings,[]MultiplexGroupSettingsParameters)

	// RTMP group settings. See RTMP Group Settings for more details.
	// +kubebuilder:validation:Optional
	rtmpGroupSettings?: [...#RtmpGroupSettingsParameters] @go(RtmpGroupSettings,[]RtmpGroupSettingsParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	udpGroupSettings?: [...#UDPGroupSettingsParameters] @go(UDPGroupSettings,[]UDPGroupSettingsParameters)
}

#OutputGroupsInitParameters: {
	// Name of the Channel.
	name?: null | string @go(Name,*string)

	// Settings associated with the output group. See Output Group Settings for more details.
	outputGroupSettings?: [...#OutputGroupSettingsInitParameters] @go(OutputGroupSettings,[]OutputGroupSettingsInitParameters)

	// List of outputs. See Outputs for more details.
	outputs?: [...#OutputsInitParameters] @go(Outputs,[]OutputsInitParameters)
}

#OutputGroupsObservation: {
	// Name of the Channel.
	name?: null | string @go(Name,*string)

	// Settings associated with the output group. See Output Group Settings for more details.
	outputGroupSettings?: [...#OutputGroupSettingsObservation] @go(OutputGroupSettings,[]OutputGroupSettingsObservation)

	// List of outputs. See Outputs for more details.
	outputs?: [...#OutputsObservation] @go(Outputs,[]OutputsObservation)
}

#OutputGroupsParameters: {
	// Name of the Channel.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Settings associated with the output group. See Output Group Settings for more details.
	// +kubebuilder:validation:Optional
	outputGroupSettings: [...#OutputGroupSettingsParameters] @go(OutputGroupSettings,[]OutputGroupSettingsParameters)

	// List of outputs. See Outputs for more details.
	// +kubebuilder:validation:Optional
	outputs: [...#OutputsParameters] @go(Outputs,[]OutputsParameters)
}

#OutputRectangleInitParameters: {
	// Output video height in pixels.
	height?:     null | float64 @go(Height,*float64)
	leftOffset?: null | float64 @go(LeftOffset,*float64)
	topOffset?:  null | float64 @go(TopOffset,*float64)

	// Output video width in pixels.
	width?: null | float64 @go(Width,*float64)
}

#OutputRectangleObservation: {
	// Output video height in pixels.
	height?:     null | float64 @go(Height,*float64)
	leftOffset?: null | float64 @go(LeftOffset,*float64)
	topOffset?:  null | float64 @go(TopOffset,*float64)

	// Output video width in pixels.
	width?: null | float64 @go(Width,*float64)
}

#OutputRectangleParameters: {
	// Output video height in pixels.
	// +kubebuilder:validation:Optional
	height?: null | float64 @go(Height,*float64)

	// +kubebuilder:validation:Optional
	leftOffset?: null | float64 @go(LeftOffset,*float64)

	// +kubebuilder:validation:Optional
	topOffset?: null | float64 @go(TopOffset,*float64)

	// Output video width in pixels.
	// +kubebuilder:validation:Optional
	width?: null | float64 @go(Width,*float64)
}

#OutputSettingsInitParameters: {
	// Archive output settings. See Archive Output Settings for more details.
	archiveOutputSettings?: [...#ArchiveOutputSettingsInitParameters] @go(ArchiveOutputSettings,[]ArchiveOutputSettingsInitParameters)

	// Settings for output. See Output Settings for more details.
	frameCaptureOutputSettings?: [...#FrameCaptureOutputSettingsInitParameters] @go(FrameCaptureOutputSettings,[]FrameCaptureOutputSettingsInitParameters)

	// Settings for output. See Output Settings for more details.
	hlsOutputSettings?: [...#HlsOutputSettingsInitParameters] @go(HlsOutputSettings,[]HlsOutputSettingsInitParameters)

	// Media package output settings. This can be set as an empty block.
	mediaPackageOutputSettings?: [...#MediaPackageOutputSettingsInitParameters] @go(MediaPackageOutputSettings,[]MediaPackageOutputSettingsInitParameters)

	// Settings for output. See Output Settings for more details.
	msSmoothOutputSettings?: [...#MsSmoothOutputSettingsInitParameters] @go(MsSmoothOutputSettings,[]MsSmoothOutputSettingsInitParameters)

	// Multiplex output settings. See Multiplex Output Settings for more details.
	multiplexOutputSettings?: [...#MultiplexOutputSettingsInitParameters] @go(MultiplexOutputSettings,[]MultiplexOutputSettingsInitParameters)

	// RTMP output settings. See RTMP Output Settings for more details.
	rtmpOutputSettings?: [...#RtmpOutputSettingsInitParameters] @go(RtmpOutputSettings,[]RtmpOutputSettingsInitParameters)

	// UDP output settings. See UDP Output Settings for more details
	udpOutputSettings?: [...#UDPOutputSettingsInitParameters] @go(UDPOutputSettings,[]UDPOutputSettingsInitParameters)
}

#OutputSettingsObservation: {
	// Archive output settings. See Archive Output Settings for more details.
	archiveOutputSettings?: [...#ArchiveOutputSettingsObservation] @go(ArchiveOutputSettings,[]ArchiveOutputSettingsObservation)

	// Settings for output. See Output Settings for more details.
	frameCaptureOutputSettings?: [...#FrameCaptureOutputSettingsObservation] @go(FrameCaptureOutputSettings,[]FrameCaptureOutputSettingsObservation)

	// Settings for output. See Output Settings for more details.
	hlsOutputSettings?: [...#HlsOutputSettingsObservation] @go(HlsOutputSettings,[]HlsOutputSettingsObservation)

	// Media package output settings. This can be set as an empty block.
	mediaPackageOutputSettings?: [...#MediaPackageOutputSettingsParameters] @go(MediaPackageOutputSettings,[]MediaPackageOutputSettingsParameters)

	// Settings for output. See Output Settings for more details.
	msSmoothOutputSettings?: [...#MsSmoothOutputSettingsObservation] @go(MsSmoothOutputSettings,[]MsSmoothOutputSettingsObservation)

	// Multiplex output settings. See Multiplex Output Settings for more details.
	multiplexOutputSettings?: [...#MultiplexOutputSettingsObservation] @go(MultiplexOutputSettings,[]MultiplexOutputSettingsObservation)

	// RTMP output settings. See RTMP Output Settings for more details.
	rtmpOutputSettings?: [...#RtmpOutputSettingsObservation] @go(RtmpOutputSettings,[]RtmpOutputSettingsObservation)

	// UDP output settings. See UDP Output Settings for more details
	udpOutputSettings?: [...#UDPOutputSettingsObservation] @go(UDPOutputSettings,[]UDPOutputSettingsObservation)
}

#OutputSettingsParameters: {
	// Archive output settings. See Archive Output Settings for more details.
	// +kubebuilder:validation:Optional
	archiveOutputSettings?: [...#ArchiveOutputSettingsParameters] @go(ArchiveOutputSettings,[]ArchiveOutputSettingsParameters)

	// Settings for output. See Output Settings for more details.
	// +kubebuilder:validation:Optional
	frameCaptureOutputSettings?: [...#FrameCaptureOutputSettingsParameters] @go(FrameCaptureOutputSettings,[]FrameCaptureOutputSettingsParameters)

	// Settings for output. See Output Settings for more details.
	// +kubebuilder:validation:Optional
	hlsOutputSettings?: [...#HlsOutputSettingsParameters] @go(HlsOutputSettings,[]HlsOutputSettingsParameters)

	// Media package output settings. This can be set as an empty block.
	// +kubebuilder:validation:Optional
	mediaPackageOutputSettings?: [...#MediaPackageOutputSettingsParameters] @go(MediaPackageOutputSettings,[]MediaPackageOutputSettingsParameters)

	// Settings for output. See Output Settings for more details.
	// +kubebuilder:validation:Optional
	msSmoothOutputSettings?: [...#MsSmoothOutputSettingsParameters] @go(MsSmoothOutputSettings,[]MsSmoothOutputSettingsParameters)

	// Multiplex output settings. See Multiplex Output Settings for more details.
	// +kubebuilder:validation:Optional
	multiplexOutputSettings?: [...#MultiplexOutputSettingsParameters] @go(MultiplexOutputSettings,[]MultiplexOutputSettingsParameters)

	// RTMP output settings. See RTMP Output Settings for more details.
	// +kubebuilder:validation:Optional
	rtmpOutputSettings?: [...#RtmpOutputSettingsParameters] @go(RtmpOutputSettings,[]RtmpOutputSettingsParameters)

	// UDP output settings. See UDP Output Settings for more details
	// +kubebuilder:validation:Optional
	udpOutputSettings?: [...#UDPOutputSettingsParameters] @go(UDPOutputSettings,[]UDPOutputSettingsParameters)
}

#OutputsInitParameters: {
	// The names of the audio descriptions used as audio sources for the output.
	audioDescriptionNames?: [...null | string] @go(AudioDescriptionNames,[]*string)

	// The names of the caption descriptions used as caption sources for the output.
	captionDescriptionNames?: [...null | string] @go(CaptionDescriptionNames,[]*string)

	// The name used to identify an output.
	outputName?: null | string @go(OutputName,*string)

	// Settings for output. See Output Settings for more details.
	outputSettings?: [...#OutputSettingsInitParameters] @go(OutputSettings,[]OutputSettingsInitParameters)

	// The name of the video description used as video source for the output.
	videoDescriptionName?: null | string @go(VideoDescriptionName,*string)
}

#OutputsObservation: {
	// The names of the audio descriptions used as audio sources for the output.
	audioDescriptionNames?: [...null | string] @go(AudioDescriptionNames,[]*string)

	// The names of the caption descriptions used as caption sources for the output.
	captionDescriptionNames?: [...null | string] @go(CaptionDescriptionNames,[]*string)

	// The name used to identify an output.
	outputName?: null | string @go(OutputName,*string)

	// Settings for output. See Output Settings for more details.
	outputSettings?: [...#OutputSettingsObservation] @go(OutputSettings,[]OutputSettingsObservation)

	// The name of the video description used as video source for the output.
	videoDescriptionName?: null | string @go(VideoDescriptionName,*string)
}

#OutputsParameters: {
	// The names of the audio descriptions used as audio sources for the output.
	// +kubebuilder:validation:Optional
	audioDescriptionNames?: [...null | string] @go(AudioDescriptionNames,[]*string)

	// The names of the caption descriptions used as caption sources for the output.
	// +kubebuilder:validation:Optional
	captionDescriptionNames?: [...null | string] @go(CaptionDescriptionNames,[]*string)

	// The name used to identify an output.
	// +kubebuilder:validation:Optional
	outputName?: null | string @go(OutputName,*string)

	// Settings for output. See Output Settings for more details.
	// +kubebuilder:validation:Optional
	outputSettings: [...#OutputSettingsParameters] @go(OutputSettings,[]OutputSettingsParameters)

	// The name of the video description used as video source for the output.
	// +kubebuilder:validation:Optional
	videoDescriptionName?: null | string @go(VideoDescriptionName,*string)
}

#PassThroughSettingsInitParameters: {
}

#PassThroughSettingsObservation: {
}

#PassThroughSettingsParameters: {
}

#RawSettingsInitParameters: {
}

#RawSettingsObservation: {
}

#RawSettingsParameters: {
}

#Rec601SettingsInitParameters: {
}

#Rec601SettingsObservation: {
}

#Rec601SettingsParameters: {
}

#Rec709SettingsInitParameters: {
}

#Rec709SettingsObservation: {
}

#Rec709SettingsParameters: {
}

#RemixSettingsInitParameters: {
	channelMappings?: [...#ChannelMappingsInitParameters] @go(ChannelMappings,[]ChannelMappingsInitParameters)
	channelsIn?:  null | float64 @go(ChannelsIn,*float64)
	channelsOut?: null | float64 @go(ChannelsOut,*float64)
}

#RemixSettingsObservation: {
	channelMappings?: [...#ChannelMappingsObservation] @go(ChannelMappings,[]ChannelMappingsObservation)
	channelsIn?:  null | float64 @go(ChannelsIn,*float64)
	channelsOut?: null | float64 @go(ChannelsOut,*float64)
}

#RemixSettingsParameters: {
	// +kubebuilder:validation:Optional
	channelMappings: [...#ChannelMappingsParameters] @go(ChannelMappings,[]ChannelMappingsParameters)

	// +kubebuilder:validation:Optional
	channelsIn?: null | float64 @go(ChannelsIn,*float64)

	// +kubebuilder:validation:Optional
	channelsOut?: null | float64 @go(ChannelsOut,*float64)
}

#RtmpGroupSettingsInitParameters: {
	// The ad marker type for this output group.
	adMarkers?: [...null | string] @go(AdMarkers,[]*string)

	// Authentication scheme to use when connecting with CDN.
	authenticationScheme?: null | string @go(AuthenticationScheme,*string)

	// Controls behavior when content cache fills up.
	cacheFullBehavior?: null | string @go(CacheFullBehavior,*string)

	// Cache length in seconds, is used to calculate buffer size.
	cacheLength?: null | float64 @go(CacheLength,*float64)

	// Controls the types of data that passes to onCaptionInfo outputs.
	captionData?: null | string @go(CaptionData,*string)

	// Controls the behavior of the RTMP group if input becomes unavailable.
	inputLossAction?: null | string @go(InputLossAction,*string)

	// Number of seconds to wait until a restart is initiated.
	restartDelay?: null | float64 @go(RestartDelay,*float64)
}

#RtmpGroupSettingsObservation: {
	// The ad marker type for this output group.
	adMarkers?: [...null | string] @go(AdMarkers,[]*string)

	// Authentication scheme to use when connecting with CDN.
	authenticationScheme?: null | string @go(AuthenticationScheme,*string)

	// Controls behavior when content cache fills up.
	cacheFullBehavior?: null | string @go(CacheFullBehavior,*string)

	// Cache length in seconds, is used to calculate buffer size.
	cacheLength?: null | float64 @go(CacheLength,*float64)

	// Controls the types of data that passes to onCaptionInfo outputs.
	captionData?: null | string @go(CaptionData,*string)

	// Controls the behavior of the RTMP group if input becomes unavailable.
	inputLossAction?: null | string @go(InputLossAction,*string)

	// Number of seconds to wait until a restart is initiated.
	restartDelay?: null | float64 @go(RestartDelay,*float64)
}

#RtmpGroupSettingsParameters: {
	// The ad marker type for this output group.
	// +kubebuilder:validation:Optional
	adMarkers?: [...null | string] @go(AdMarkers,[]*string)

	// Authentication scheme to use when connecting with CDN.
	// +kubebuilder:validation:Optional
	authenticationScheme?: null | string @go(AuthenticationScheme,*string)

	// Controls behavior when content cache fills up.
	// +kubebuilder:validation:Optional
	cacheFullBehavior?: null | string @go(CacheFullBehavior,*string)

	// Cache length in seconds, is used to calculate buffer size.
	// +kubebuilder:validation:Optional
	cacheLength?: null | float64 @go(CacheLength,*float64)

	// Controls the types of data that passes to onCaptionInfo outputs.
	// +kubebuilder:validation:Optional
	captionData?: null | string @go(CaptionData,*string)

	// Controls the behavior of the RTMP group if input becomes unavailable.
	// +kubebuilder:validation:Optional
	inputLossAction?: null | string @go(InputLossAction,*string)

	// Number of seconds to wait until a restart is initiated.
	// +kubebuilder:validation:Optional
	restartDelay?: null | float64 @go(RestartDelay,*float64)
}

#RtmpOutputSettingsDestinationInitParameters: {
	// Reference ID for the destination.
	destinationRefId?: null | string @go(DestinationRefID,*string)
}

#RtmpOutputSettingsDestinationObservation: {
	// Reference ID for the destination.
	destinationRefId?: null | string @go(DestinationRefID,*string)
}

#RtmpOutputSettingsDestinationParameters: {
	// Reference ID for the destination.
	// +kubebuilder:validation:Optional
	destinationRefId?: null | string @go(DestinationRefID,*string)
}

#RtmpOutputSettingsInitParameters: {
	// Setting to allow self signed or verified RTMP certificates.
	certificateMode?: null | string @go(CertificateMode,*string)

	// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
	connectionRetryInterval?: null | float64 @go(ConnectionRetryInterval,*float64)

	// A director and base filename where archive files should be written. See Destination for more details.
	destination?: [...#RtmpOutputSettingsDestinationInitParameters] @go(Destination,[]RtmpOutputSettingsDestinationInitParameters)

	// Number of retry attempts.
	numRetries?: null | float64 @go(NumRetries,*float64)
}

#RtmpOutputSettingsObservation: {
	// Setting to allow self signed or verified RTMP certificates.
	certificateMode?: null | string @go(CertificateMode,*string)

	// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
	connectionRetryInterval?: null | float64 @go(ConnectionRetryInterval,*float64)

	// A director and base filename where archive files should be written. See Destination for more details.
	destination?: [...#RtmpOutputSettingsDestinationObservation] @go(Destination,[]RtmpOutputSettingsDestinationObservation)

	// Number of retry attempts.
	numRetries?: null | float64 @go(NumRetries,*float64)
}

#RtmpOutputSettingsParameters: {
	// Setting to allow self signed or verified RTMP certificates.
	// +kubebuilder:validation:Optional
	certificateMode?: null | string @go(CertificateMode,*string)

	// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
	// +kubebuilder:validation:Optional
	connectionRetryInterval?: null | float64 @go(ConnectionRetryInterval,*float64)

	// A director and base filename where archive files should be written. See Destination for more details.
	// +kubebuilder:validation:Optional
	destination: [...#RtmpOutputSettingsDestinationParameters] @go(Destination,[]RtmpOutputSettingsDestinationParameters)

	// Number of retry attempts.
	// +kubebuilder:validation:Optional
	numRetries?: null | float64 @go(NumRetries,*float64)
}

#Scte20SourceSettingsInitParameters: {
	convert608To708?:        null | string  @go(Convert608To708,*string)
	source608ChannelNumber?: null | float64 @go(Source608ChannelNumber,*float64)
}

#Scte20SourceSettingsObservation: {
	convert608To708?:        null | string  @go(Convert608To708,*string)
	source608ChannelNumber?: null | float64 @go(Source608ChannelNumber,*float64)
}

#Scte20SourceSettingsParameters: {
	// +kubebuilder:validation:Optional
	convert608To708?: null | string @go(Convert608To708,*string)

	// +kubebuilder:validation:Optional
	source608ChannelNumber?: null | float64 @go(Source608ChannelNumber,*float64)
}

#Scte27SourceSettingsInitParameters: {
	ocrLanguage?: null | string @go(OcrLanguage,*string)

	// User-specified id. Ths is used in an output group or an output.
	pid?: null | float64 @go(Pid,*float64)
}

#Scte27SourceSettingsObservation: {
	ocrLanguage?: null | string @go(OcrLanguage,*string)

	// User-specified id. Ths is used in an output group or an output.
	pid?: null | float64 @go(Pid,*float64)
}

#Scte27SourceSettingsParameters: {
	// +kubebuilder:validation:Optional
	ocrLanguage?: null | string @go(OcrLanguage,*string)

	// User-specified id. Ths is used in an output group or an output.
	// +kubebuilder:validation:Optional
	pid?: null | float64 @go(Pid,*float64)
}

#SelectorSettingsDvbTdtSettingsInitParameters: {
	ocrLanguage?: null | string @go(OcrLanguage,*string)

	// User-specified id. Ths is used in an output group or an output.
	pid?: null | float64 @go(Pid,*float64)
}

#SelectorSettingsDvbTdtSettingsObservation: {
	ocrLanguage?: null | string @go(OcrLanguage,*string)

	// User-specified id. Ths is used in an output group or an output.
	pid?: null | float64 @go(Pid,*float64)
}

#SelectorSettingsDvbTdtSettingsParameters: {
	// +kubebuilder:validation:Optional
	ocrLanguage?: null | string @go(OcrLanguage,*string)

	// User-specified id. Ths is used in an output group or an output.
	// +kubebuilder:validation:Optional
	pid?: null | float64 @go(Pid,*float64)
}

#SelectorSettingsInitParameters: {
	audioHlsRenditionSelection?: [...#AudioHlsRenditionSelectionInitParameters] @go(AudioHlsRenditionSelection,[]AudioHlsRenditionSelectionInitParameters)
	audioLanguageSelection?: [...#AudioLanguageSelectionInitParameters] @go(AudioLanguageSelection,[]AudioLanguageSelectionInitParameters)
	audioPidSelection?: [...#AudioPidSelectionInitParameters] @go(AudioPidSelection,[]AudioPidSelectionInitParameters)
	audioTrackSelection?: [...#AudioTrackSelectionInitParameters] @go(AudioTrackSelection,[]AudioTrackSelectionInitParameters)
}

#SelectorSettingsObservation: {
	audioHlsRenditionSelection?: [...#AudioHlsRenditionSelectionObservation] @go(AudioHlsRenditionSelection,[]AudioHlsRenditionSelectionObservation)
	audioLanguageSelection?: [...#AudioLanguageSelectionObservation] @go(AudioLanguageSelection,[]AudioLanguageSelectionObservation)
	audioPidSelection?: [...#AudioPidSelectionObservation] @go(AudioPidSelection,[]AudioPidSelectionObservation)
	audioTrackSelection?: [...#AudioTrackSelectionObservation] @go(AudioTrackSelection,[]AudioTrackSelectionObservation)
}

#SelectorSettingsParameters: {
	// +kubebuilder:validation:Optional
	audioHlsRenditionSelection?: [...#AudioHlsRenditionSelectionParameters] @go(AudioHlsRenditionSelection,[]AudioHlsRenditionSelectionParameters)

	// +kubebuilder:validation:Optional
	audioLanguageSelection?: [...#AudioLanguageSelectionParameters] @go(AudioLanguageSelection,[]AudioLanguageSelectionParameters)

	// +kubebuilder:validation:Optional
	audioPidSelection?: [...#AudioPidSelectionParameters] @go(AudioPidSelection,[]AudioPidSelectionParameters)

	// +kubebuilder:validation:Optional
	audioTrackSelection?: [...#AudioTrackSelectionParameters] @go(AudioTrackSelection,[]AudioTrackSelectionParameters)
}

#SettingsInitParameters: {
	// Key used to extract the password from EC2 Parameter store.
	passwordParam?: null | string @go(PasswordParam,*string)

	// Stream name RTMP destinations (URLs of type rtmp://)
	streamName?: null | string @go(StreamName,*string)

	// A URL specifying a destination.
	url?: null | string @go(URL,*string)

	// Username for destination.
	username?: null | string @go(Username,*string)
}

#SettingsObservation: {
	// Key used to extract the password from EC2 Parameter store.
	passwordParam?: null | string @go(PasswordParam,*string)

	// Stream name RTMP destinations (URLs of type rtmp://)
	streamName?: null | string @go(StreamName,*string)

	// A URL specifying a destination.
	url?: null | string @go(URL,*string)

	// Username for destination.
	username?: null | string @go(Username,*string)
}

#SettingsParameters: {
	// Key used to extract the password from EC2 Parameter store.
	// +kubebuilder:validation:Optional
	passwordParam?: null | string @go(PasswordParam,*string)

	// Stream name RTMP destinations (URLs of type rtmp://)
	// +kubebuilder:validation:Optional
	streamName?: null | string @go(StreamName,*string)

	// A URL specifying a destination.
	// +kubebuilder:validation:Optional
	url?: null | string @go(URL,*string)

	// Username for destination.
	// +kubebuilder:validation:Optional
	username?: null | string @go(Username,*string)
}

#StandardHlsSettingsInitParameters: {
	audioRenditionSets?: null | string @go(AudioRenditionSets,*string)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	m3u8Settings?: [...#M3U8SettingsInitParameters] @go(M3U8Settings,[]M3U8SettingsInitParameters)
}

#StandardHlsSettingsObservation: {
	audioRenditionSets?: null | string @go(AudioRenditionSets,*string)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	m3u8Settings?: [...#M3U8SettingsObservation] @go(M3U8Settings,[]M3U8SettingsObservation)
}

#StandardHlsSettingsParameters: {
	// +kubebuilder:validation:Optional
	audioRenditionSets?: null | string @go(AudioRenditionSets,*string)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	m3u8Settings: [...#M3U8SettingsParameters] @go(M3U8Settings,[]M3U8SettingsParameters)
}

#StaticKeySettingsInitParameters: {
	keyProviderServer?: [...#KeyProviderServerInitParameters] @go(KeyProviderServer,[]KeyProviderServerInitParameters)
	staticKeyValue?: null | string @go(StaticKeyValue,*string)
}

#StaticKeySettingsObservation: {
	keyProviderServer?: [...#KeyProviderServerObservation] @go(KeyProviderServer,[]KeyProviderServerObservation)
	staticKeyValue?: null | string @go(StaticKeyValue,*string)
}

#StaticKeySettingsParameters: {
	// +kubebuilder:validation:Optional
	keyProviderServer?: [...#KeyProviderServerParameters] @go(KeyProviderServer,[]KeyProviderServerParameters)

	// +kubebuilder:validation:Optional
	staticKeyValue?: null | string @go(StaticKeyValue,*string)
}

#TeletextSourceSettingsInitParameters: {
	outputRectangle?: [...#OutputRectangleInitParameters] @go(OutputRectangle,[]OutputRectangleInitParameters)
	pageNumber?: null | string @go(PageNumber,*string)
}

#TeletextSourceSettingsObservation: {
	outputRectangle?: [...#OutputRectangleObservation] @go(OutputRectangle,[]OutputRectangleObservation)
	pageNumber?: null | string @go(PageNumber,*string)
}

#TeletextSourceSettingsParameters: {
	// +kubebuilder:validation:Optional
	outputRectangle?: [...#OutputRectangleParameters] @go(OutputRectangle,[]OutputRectangleParameters)

	// +kubebuilder:validation:Optional
	pageNumber?: null | string @go(PageNumber,*string)
}

#TemporalFilterSettingsInitParameters: {
	// Post filter sharpening.
	postFilterSharpening?: null | string @go(PostFilterSharpening,*string)

	// Filter strength.
	strength?: null | string @go(Strength,*string)
}

#TemporalFilterSettingsObservation: {
	// Post filter sharpening.
	postFilterSharpening?: null | string @go(PostFilterSharpening,*string)

	// Filter strength.
	strength?: null | string @go(Strength,*string)
}

#TemporalFilterSettingsParameters: {
	// Post filter sharpening.
	// +kubebuilder:validation:Optional
	postFilterSharpening?: null | string @go(PostFilterSharpening,*string)

	// Filter strength.
	// +kubebuilder:validation:Optional
	strength?: null | string @go(Strength,*string)
}

#TimecodeBurninSettingsInitParameters: {
	// Set a prefix on the burned in timecode.
	prefix?: null | string @go(Prefix,*string)

	// Sets the size of the burned in timecode.
	timecodeBurninFontSize?: null | string @go(TimecodeBurninFontSize,*string)

	// Sets the position of the burned in timecode.
	timecodeBurninPosition?: null | string @go(TimecodeBurninPosition,*string)
}

#TimecodeBurninSettingsObservation: {
	// Set a prefix on the burned in timecode.
	prefix?: null | string @go(Prefix,*string)

	// Sets the size of the burned in timecode.
	timecodeBurninFontSize?: null | string @go(TimecodeBurninFontSize,*string)

	// Sets the position of the burned in timecode.
	timecodeBurninPosition?: null | string @go(TimecodeBurninPosition,*string)
}

#TimecodeBurninSettingsParameters: {
	// Set a prefix on the burned in timecode.
	// +kubebuilder:validation:Optional
	prefix?: null | string @go(Prefix,*string)

	// Sets the size of the burned in timecode.
	// +kubebuilder:validation:Optional
	timecodeBurninFontSize?: null | string @go(TimecodeBurninFontSize,*string)

	// Sets the position of the burned in timecode.
	// +kubebuilder:validation:Optional
	timecodeBurninPosition?: null | string @go(TimecodeBurninPosition,*string)
}

#TimecodeConfigInitParameters: {
	// The source for the timecode that will be associated with the events outputs.
	source?: null | string @go(Source,*string)

	// Threshold in frames beyond which output timecode is resynchronized to the input timecode.
	syncThreshold?: null | float64 @go(SyncThreshold,*float64)
}

#TimecodeConfigObservation: {
	// The source for the timecode that will be associated with the events outputs.
	source?: null | string @go(Source,*string)

	// Threshold in frames beyond which output timecode is resynchronized to the input timecode.
	syncThreshold?: null | float64 @go(SyncThreshold,*float64)
}

#TimecodeConfigParameters: {
	// The source for the timecode that will be associated with the events outputs.
	// +kubebuilder:validation:Optional
	source?: null | string @go(Source,*string)

	// Threshold in frames beyond which output timecode is resynchronized to the input timecode.
	// +kubebuilder:validation:Optional
	syncThreshold?: null | float64 @go(SyncThreshold,*float64)
}

#TrackInitParameters: {
	track?: null | float64 @go(Track,*float64)
}

#TrackObservation: {
	track?: null | float64 @go(Track,*float64)
}

#TrackParameters: {
	// +kubebuilder:validation:Optional
	track?: null | float64 @go(Track,*float64)
}

#UDPGroupSettingsInitParameters: {
	// Controls the behavior of the RTMP group if input becomes unavailable.
	inputLossAction?: null | string @go(InputLossAction,*string)

	// Indicates ID3 frame that has the timecode.
	timedMetadataId3Frame?:  null | string  @go(TimedMetadataId3Frame,*string)
	timedMetadataId3Period?: null | float64 @go(TimedMetadataId3Period,*float64)
}

#UDPGroupSettingsObservation: {
	// Controls the behavior of the RTMP group if input becomes unavailable.
	inputLossAction?: null | string @go(InputLossAction,*string)

	// Indicates ID3 frame that has the timecode.
	timedMetadataId3Frame?:  null | string  @go(TimedMetadataId3Frame,*string)
	timedMetadataId3Period?: null | float64 @go(TimedMetadataId3Period,*float64)
}

#UDPGroupSettingsParameters: {
	// Controls the behavior of the RTMP group if input becomes unavailable.
	// +kubebuilder:validation:Optional
	inputLossAction?: null | string @go(InputLossAction,*string)

	// Indicates ID3 frame that has the timecode.
	// +kubebuilder:validation:Optional
	timedMetadataId3Frame?: null | string @go(TimedMetadataId3Frame,*string)

	// +kubebuilder:validation:Optional
	timedMetadataId3Period?: null | float64 @go(TimedMetadataId3Period,*float64)
}

#UDPOutputSettingsContainerSettingsInitParameters: {
	// M2ts Settings. See M2ts Settings for more details.
	m2tsSettings?: [...#ContainerSettingsM2TsSettingsInitParameters] @go(M2TsSettings,[]ContainerSettingsM2TsSettingsInitParameters)
}

#UDPOutputSettingsContainerSettingsObservation: {
	// M2ts Settings. See M2ts Settings for more details.
	m2tsSettings?: [...#ContainerSettingsM2TsSettingsObservation] @go(M2TsSettings,[]ContainerSettingsM2TsSettingsObservation)
}

#UDPOutputSettingsContainerSettingsParameters: {
	// M2ts Settings. See M2ts Settings for more details.
	// +kubebuilder:validation:Optional
	m2tsSettings?: [...#ContainerSettingsM2TsSettingsParameters] @go(M2TsSettings,[]ContainerSettingsM2TsSettingsParameters)
}

#UDPOutputSettingsDestinationInitParameters: {
	// Reference ID for the destination.
	destinationRefId?: null | string @go(DestinationRefID,*string)
}

#UDPOutputSettingsDestinationObservation: {
	// Reference ID for the destination.
	destinationRefId?: null | string @go(DestinationRefID,*string)
}

#UDPOutputSettingsDestinationParameters: {
	// Reference ID for the destination.
	// +kubebuilder:validation:Optional
	destinationRefId?: null | string @go(DestinationRefID,*string)
}

#UDPOutputSettingsInitParameters: {
	// UDP output buffering in milliseconds.
	bufferMsec?: null | float64 @go(BufferMsec,*float64)

	// Settings specific to the container type of the file. See Container Settings for more details.
	containerSettings?: [...#UDPOutputSettingsContainerSettingsInitParameters] @go(ContainerSettings,[]UDPOutputSettingsContainerSettingsInitParameters)

	// A director and base filename where archive files should be written. See Destination for more details.
	destination?: [...#UDPOutputSettingsDestinationInitParameters] @go(Destination,[]UDPOutputSettingsDestinationInitParameters)

	// Settings for output. See Output Settings for more details.
	fecOutputSettings?: [...#FecOutputSettingsInitParameters] @go(FecOutputSettings,[]FecOutputSettingsInitParameters)
}

#UDPOutputSettingsObservation: {
	// UDP output buffering in milliseconds.
	bufferMsec?: null | float64 @go(BufferMsec,*float64)

	// Settings specific to the container type of the file. See Container Settings for more details.
	containerSettings?: [...#UDPOutputSettingsContainerSettingsObservation] @go(ContainerSettings,[]UDPOutputSettingsContainerSettingsObservation)

	// A director and base filename where archive files should be written. See Destination for more details.
	destination?: [...#UDPOutputSettingsDestinationObservation] @go(Destination,[]UDPOutputSettingsDestinationObservation)

	// Settings for output. See Output Settings for more details.
	fecOutputSettings?: [...#FecOutputSettingsObservation] @go(FecOutputSettings,[]FecOutputSettingsObservation)
}

#UDPOutputSettingsParameters: {
	// UDP output buffering in milliseconds.
	// +kubebuilder:validation:Optional
	bufferMsec?: null | float64 @go(BufferMsec,*float64)

	// Settings specific to the container type of the file. See Container Settings for more details.
	// +kubebuilder:validation:Optional
	containerSettings: [...#UDPOutputSettingsContainerSettingsParameters] @go(ContainerSettings,[]UDPOutputSettingsContainerSettingsParameters)

	// A director and base filename where archive files should be written. See Destination for more details.
	// +kubebuilder:validation:Optional
	destination: [...#UDPOutputSettingsDestinationParameters] @go(Destination,[]UDPOutputSettingsDestinationParameters)

	// Settings for output. See Output Settings for more details.
	// +kubebuilder:validation:Optional
	fecOutputSettings?: [...#FecOutputSettingsParameters] @go(FecOutputSettings,[]FecOutputSettingsParameters)
}

#VPCInitParameters: {
	publicAddressAllocationIds?: [...null | string] @go(PublicAddressAllocationIds,[]*string)
	securityGroupIds?: [...null | string] @go(SecurityGroupIds,[]*string)
	subnetIds?: [...null | string] @go(SubnetIds,[]*string)
}

#VPCObservation: {
	availabilityZones?: [...null | string] @go(AvailabilityZones,[]*string)
	publicAddressAllocationIds?: [...null | string] @go(PublicAddressAllocationIds,[]*string)
	securityGroupIds?: [...null | string] @go(SecurityGroupIds,[]*string)
	subnetIds?: [...null | string] @go(SubnetIds,[]*string)
}

#VPCParameters: {
	// +kubebuilder:validation:Optional
	publicAddressAllocationIds: [...null | string] @go(PublicAddressAllocationIds,[]*string)

	// +kubebuilder:validation:Optional
	securityGroupIds?: [...null | string] @go(SecurityGroupIds,[]*string)

	// +kubebuilder:validation:Optional
	subnetIds: [...null | string] @go(SubnetIds,[]*string)
}

#VideoBlackSettingsInitParameters: {
	blackDetectThreshold?:    null | float64 @go(BlackDetectThreshold,*float64)
	videoBlackThresholdMsec?: null | float64 @go(VideoBlackThresholdMsec,*float64)
}

#VideoBlackSettingsObservation: {
	blackDetectThreshold?:    null | float64 @go(BlackDetectThreshold,*float64)
	videoBlackThresholdMsec?: null | float64 @go(VideoBlackThresholdMsec,*float64)
}

#VideoBlackSettingsParameters: {
	// +kubebuilder:validation:Optional
	blackDetectThreshold?: null | float64 @go(BlackDetectThreshold,*float64)

	// +kubebuilder:validation:Optional
	videoBlackThresholdMsec?: null | float64 @go(VideoBlackThresholdMsec,*float64)
}

#VideoDescriptionsCodecSettingsInitParameters: {
	// Frame capture settings. See Frame Capture Settings for more details.
	frameCaptureSettings?: [...#FrameCaptureSettingsInitParameters] @go(FrameCaptureSettings,[]FrameCaptureSettingsInitParameters)

	// H264 settings. See H264 Settings for more details.
	h264Settings?: [...#H264SettingsInitParameters] @go(H264Settings,[]H264SettingsInitParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	h265Settings?: [...#H265SettingsInitParameters] @go(H265Settings,[]H265SettingsInitParameters)
}

#VideoDescriptionsCodecSettingsObservation: {
	// Frame capture settings. See Frame Capture Settings for more details.
	frameCaptureSettings?: [...#FrameCaptureSettingsObservation] @go(FrameCaptureSettings,[]FrameCaptureSettingsObservation)

	// H264 settings. See H264 Settings for more details.
	h264Settings?: [...#H264SettingsObservation] @go(H264Settings,[]H264SettingsObservation)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	h265Settings?: [...#H265SettingsObservation] @go(H265Settings,[]H265SettingsObservation)
}

#VideoDescriptionsCodecSettingsParameters: {
	// Frame capture settings. See Frame Capture Settings for more details.
	// +kubebuilder:validation:Optional
	frameCaptureSettings?: [...#FrameCaptureSettingsParameters] @go(FrameCaptureSettings,[]FrameCaptureSettingsParameters)

	// H264 settings. See H264 Settings for more details.
	// +kubebuilder:validation:Optional
	h264Settings?: [...#H264SettingsParameters] @go(H264Settings,[]H264SettingsParameters)

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	h265Settings?: [...#H265SettingsParameters] @go(H265Settings,[]H265SettingsParameters)
}

#VideoDescriptionsInitParameters: {
	// Audio codec settings. See Audio Codec Settings for more details.
	codecSettings?: [...#VideoDescriptionsCodecSettingsInitParameters] @go(CodecSettings,[]VideoDescriptionsCodecSettingsInitParameters)

	// Output video height in pixels.
	height?: null | float64 @go(Height,*float64)

	// Name of the Channel.
	name?: null | string @go(Name,*string)

	// Indicate how to respond to the AFD values that might be in the input video.
	respondToAfd?: null | string @go(RespondToAfd,*string)

	// Behavior on how to scale.
	scalingBehavior?: null | string @go(ScalingBehavior,*string)

	// Changes the strength of the anti-alias filter used for scaling.
	sharpness?: null | float64 @go(Sharpness,*float64)

	// Output video width in pixels.
	width?: null | float64 @go(Width,*float64)
}

#VideoDescriptionsObservation: {
	// Audio codec settings. See Audio Codec Settings for more details.
	codecSettings?: [...#VideoDescriptionsCodecSettingsObservation] @go(CodecSettings,[]VideoDescriptionsCodecSettingsObservation)

	// Output video height in pixels.
	height?: null | float64 @go(Height,*float64)

	// Name of the Channel.
	name?: null | string @go(Name,*string)

	// Indicate how to respond to the AFD values that might be in the input video.
	respondToAfd?: null | string @go(RespondToAfd,*string)

	// Behavior on how to scale.
	scalingBehavior?: null | string @go(ScalingBehavior,*string)

	// Changes the strength of the anti-alias filter used for scaling.
	sharpness?: null | float64 @go(Sharpness,*float64)

	// Output video width in pixels.
	width?: null | float64 @go(Width,*float64)
}

#VideoDescriptionsParameters: {
	// Audio codec settings. See Audio Codec Settings for more details.
	// +kubebuilder:validation:Optional
	codecSettings?: [...#VideoDescriptionsCodecSettingsParameters] @go(CodecSettings,[]VideoDescriptionsCodecSettingsParameters)

	// Output video height in pixels.
	// +kubebuilder:validation:Optional
	height?: null | float64 @go(Height,*float64)

	// Name of the Channel.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Indicate how to respond to the AFD values that might be in the input video.
	// +kubebuilder:validation:Optional
	respondToAfd?: null | string @go(RespondToAfd,*string)

	// Behavior on how to scale.
	// +kubebuilder:validation:Optional
	scalingBehavior?: null | string @go(ScalingBehavior,*string)

	// Changes the strength of the anti-alias filter used for scaling.
	// +kubebuilder:validation:Optional
	sharpness?: null | float64 @go(Sharpness,*float64)

	// Output video width in pixels.
	// +kubebuilder:validation:Optional
	width?: null | float64 @go(Width,*float64)
}

#VideoSelectorInitParameters: {
	colorSpace?:      null | string @go(ColorSpace,*string)
	colorSpaceUsage?: null | string @go(ColorSpaceUsage,*string)
}

#VideoSelectorObservation: {
	colorSpace?:      null | string @go(ColorSpace,*string)
	colorSpaceUsage?: null | string @go(ColorSpaceUsage,*string)
}

#VideoSelectorParameters: {
	// +kubebuilder:validation:Optional
	colorSpace?: null | string @go(ColorSpace,*string)

	// +kubebuilder:validation:Optional
	colorSpaceUsage?: null | string @go(ColorSpaceUsage,*string)
}

#WavSettingsInitParameters: {
	bitDepth?: null | float64 @go(BitDepth,*float64)

	// Mono, Stereo, or 5.1 channel layout.
	codingMode?: null | string @go(CodingMode,*string)

	// Sample rate in Hz.
	sampleRate?: null | float64 @go(SampleRate,*float64)
}

#WavSettingsObservation: {
	bitDepth?: null | float64 @go(BitDepth,*float64)

	// Mono, Stereo, or 5.1 channel layout.
	codingMode?: null | string @go(CodingMode,*string)

	// Sample rate in Hz.
	sampleRate?: null | float64 @go(SampleRate,*float64)
}

#WavSettingsParameters: {
	// +kubebuilder:validation:Optional
	bitDepth?: null | float64 @go(BitDepth,*float64)

	// Mono, Stereo, or 5.1 channel layout.
	// +kubebuilder:validation:Optional
	codingMode?: null | string @go(CodingMode,*string)

	// Sample rate in Hz.
	// +kubebuilder:validation:Optional
	sampleRate?: null | float64 @go(SampleRate,*float64)
}

// ChannelSpec defines the desired state of Channel
#ChannelSpec: {
	v1.#ResourceSpec
	forProvider: #ChannelParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ChannelInitParameters @go(InitProvider)
}

// ChannelStatus defines the observed state of Channel.
#ChannelStatus: {
	v1.#ResourceStatus
	atProvider?: #ChannelObservation @go(AtProvider)
}

// Channel is the Schema for the Channels API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Channel: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.channelClass) || (has(self.initProvider) && has(self.initProvider.channelClass))",message="spec.forProvider.channelClass is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.destinations) || (has(self.initProvider) && has(self.initProvider.destinations))",message="spec.forProvider.destinations is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.encoderSettings) || (has(self.initProvider) && has(self.initProvider.encoderSettings))",message="spec.forProvider.encoderSettings is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.inputAttachments) || (has(self.initProvider) && has(self.initProvider.inputAttachments))",message="spec.forProvider.inputAttachments is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.inputSpecification) || (has(self.initProvider) && has(self.initProvider.inputSpecification))",message="spec.forProvider.inputSpecification is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	spec:    #ChannelSpec   @go(Spec)
	status?: #ChannelStatus @go(Status)
}

// ChannelList contains a list of Channels
#ChannelList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Channel] @go(Items,[]Channel)
}
