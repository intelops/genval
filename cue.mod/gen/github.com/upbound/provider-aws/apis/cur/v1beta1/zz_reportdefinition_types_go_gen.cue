// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/cur/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#ReportDefinitionInitParameters: {
	// A list of additional artifacts. Valid values are: REDSHIFT, QUICKSIGHT, ATHENA. When ATHENA exists within additional_artifacts, no other artifact type can be declared and report_versioning must be OVERWRITE_REPORT.
	additionalArtifacts?: [...null | string] @go(AdditionalArtifacts,[]*string)

	// A list of schema elements. Valid values are: RESOURCES.
	additionalSchemaElements?: [...null | string] @go(AdditionalSchemaElements,[]*string)

	// Compression format for report. Valid values are: GZIP, ZIP, Parquet. If Parquet is used, then format must also be Parquet.
	compression?: null | string @go(Compression,*string)

	// Format for report. Valid values are: textORcsv, Parquet. If Parquet is used, then Compression must also be Parquet.
	format?: null | string @go(Format,*string)

	// Set to true to update your reports after they have been finalized if AWS detects charges related to previous months.
	refreshClosedReports?: null | bool @go(RefreshClosedReports,*bool)

	// Overwrite the previous version of each report or to deliver the report in addition to the previous versions. Valid values are: CREATE_NEW_REPORT and OVERWRITE_REPORT.
	reportVersioning?: null | string @go(ReportVersioning,*string)

	// Report path prefix. Limited to 256 characters.
	s3Prefix?: null | string @go(S3Prefix,*string)

	// Region of the existing S3 bucket to hold generated reports.
	s3Region?: null | string @go(S3Region,*string)

	// The frequency on which report data are measured and displayed.  Valid values are: DAILY, HOURLY, MONTHLY.
	timeUnit?: null | string @go(TimeUnit,*string)
}

#ReportDefinitionObservation: {
	// A list of additional artifacts. Valid values are: REDSHIFT, QUICKSIGHT, ATHENA. When ATHENA exists within additional_artifacts, no other artifact type can be declared and report_versioning must be OVERWRITE_REPORT.
	additionalArtifacts?: [...null | string] @go(AdditionalArtifacts,[]*string)

	// A list of schema elements. Valid values are: RESOURCES.
	additionalSchemaElements?: [...null | string] @go(AdditionalSchemaElements,[]*string)

	// The Amazon Resource Name (ARN) specifying the cur report.
	arn?: null | string @go(Arn,*string)

	// Compression format for report. Valid values are: GZIP, ZIP, Parquet. If Parquet is used, then format must also be Parquet.
	compression?: null | string @go(Compression,*string)

	// Format for report. Valid values are: textORcsv, Parquet. If Parquet is used, then Compression must also be Parquet.
	format?: null | string @go(Format,*string)
	id?:     null | string @go(ID,*string)

	// Set to true to update your reports after they have been finalized if AWS detects charges related to previous months.
	refreshClosedReports?: null | bool @go(RefreshClosedReports,*bool)

	// Overwrite the previous version of each report or to deliver the report in addition to the previous versions. Valid values are: CREATE_NEW_REPORT and OVERWRITE_REPORT.
	reportVersioning?: null | string @go(ReportVersioning,*string)

	// Name of the existing S3 bucket to hold generated reports.
	s3Bucket?: null | string @go(S3Bucket,*string)

	// Report path prefix. Limited to 256 characters.
	s3Prefix?: null | string @go(S3Prefix,*string)

	// Region of the existing S3 bucket to hold generated reports.
	s3Region?: null | string @go(S3Region,*string)

	// The frequency on which report data are measured and displayed.  Valid values are: DAILY, HOURLY, MONTHLY.
	timeUnit?: null | string @go(TimeUnit,*string)
}

#ReportDefinitionParameters: {
	// A list of additional artifacts. Valid values are: REDSHIFT, QUICKSIGHT, ATHENA. When ATHENA exists within additional_artifacts, no other artifact type can be declared and report_versioning must be OVERWRITE_REPORT.
	// +kubebuilder:validation:Optional
	additionalArtifacts?: [...null | string] @go(AdditionalArtifacts,[]*string)

	// A list of schema elements. Valid values are: RESOURCES.
	// +kubebuilder:validation:Optional
	additionalSchemaElements?: [...null | string] @go(AdditionalSchemaElements,[]*string)

	// Compression format for report. Valid values are: GZIP, ZIP, Parquet. If Parquet is used, then format must also be Parquet.
	// +kubebuilder:validation:Optional
	compression?: null | string @go(Compression,*string)

	// Format for report. Valid values are: textORcsv, Parquet. If Parquet is used, then Compression must also be Parquet.
	// +kubebuilder:validation:Optional
	format?: null | string @go(Format,*string)

	// Set to true to update your reports after they have been finalized if AWS detects charges related to previous months.
	// +kubebuilder:validation:Optional
	refreshClosedReports?: null | bool @go(RefreshClosedReports,*bool)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Overwrite the previous version of each report or to deliver the report in addition to the previous versions. Valid values are: CREATE_NEW_REPORT and OVERWRITE_REPORT.
	// +kubebuilder:validation:Optional
	reportVersioning?: null | string @go(ReportVersioning,*string)

	// Name of the existing S3 bucket to hold generated reports.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/s3/v1beta1.Bucket
	// +kubebuilder:validation:Optional
	s3Bucket?: null | string @go(S3Bucket,*string)

	// Reference to a Bucket in s3 to populate s3Bucket.
	// +kubebuilder:validation:Optional
	s3BucketRef?: null | v1.#Reference @go(S3BucketRef,*v1.Reference)

	// Selector for a Bucket in s3 to populate s3Bucket.
	// +kubebuilder:validation:Optional
	s3BucketSelector?: null | v1.#Selector @go(S3BucketSelector,*v1.Selector)

	// Report path prefix. Limited to 256 characters.
	// +kubebuilder:validation:Optional
	s3Prefix?: null | string @go(S3Prefix,*string)

	// Region of the existing S3 bucket to hold generated reports.
	// +kubebuilder:validation:Optional
	s3Region?: null | string @go(S3Region,*string)

	// The frequency on which report data are measured and displayed.  Valid values are: DAILY, HOURLY, MONTHLY.
	// +kubebuilder:validation:Optional
	timeUnit?: null | string @go(TimeUnit,*string)
}

// ReportDefinitionSpec defines the desired state of ReportDefinition
#ReportDefinitionSpec: {
	v1.#ResourceSpec
	forProvider: #ReportDefinitionParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ReportDefinitionInitParameters @go(InitProvider)
}

// ReportDefinitionStatus defines the observed state of ReportDefinition.
#ReportDefinitionStatus: {
	v1.#ResourceStatus
	atProvider?: #ReportDefinitionObservation @go(AtProvider)
}

// ReportDefinition is the Schema for the ReportDefinitions API. Provides a Cost and Usage Report Definition.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#ReportDefinition: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.additionalSchemaElements) || (has(self.initProvider) && has(self.initProvider.additionalSchemaElements))",message="spec.forProvider.additionalSchemaElements is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.compression) || (has(self.initProvider) && has(self.initProvider.compression))",message="spec.forProvider.compression is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.format) || (has(self.initProvider) && has(self.initProvider.format))",message="spec.forProvider.format is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.s3Region) || (has(self.initProvider) && has(self.initProvider.s3Region))",message="spec.forProvider.s3Region is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.timeUnit) || (has(self.initProvider) && has(self.initProvider.timeUnit))",message="spec.forProvider.timeUnit is a required parameter"
	spec:    #ReportDefinitionSpec   @go(Spec)
	status?: #ReportDefinitionStatus @go(Status)
}

// ReportDefinitionList contains a list of ReportDefinitions
#ReportDefinitionList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#ReportDefinition] @go(Items,[]ReportDefinition)
}
