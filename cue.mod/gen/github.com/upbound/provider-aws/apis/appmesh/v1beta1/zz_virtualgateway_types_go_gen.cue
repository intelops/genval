// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/appmesh/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#AccessLogFileInitParameters: {
	// The specified format for the logs.
	format?: [...#FormatInitParameters] @go(Format,[]FormatInitParameters)

	// File path to write access logs to. You can use /dev/stdout to send access logs to standard out. Must be between 1 and 255 characters in length.
	path?: null | string @go(Path,*string)
}

#AccessLogFileObservation: {
	// The specified format for the logs.
	format?: [...#FormatObservation] @go(Format,[]FormatObservation)

	// File path to write access logs to. You can use /dev/stdout to send access logs to standard out. Must be between 1 and 255 characters in length.
	path?: null | string @go(Path,*string)
}

#AccessLogFileParameters: {
	// The specified format for the logs.
	// +kubebuilder:validation:Optional
	format?: [...#FormatParameters] @go(Format,[]FormatParameters)

	// File path to write access logs to. You can use /dev/stdout to send access logs to standard out. Must be between 1 and 255 characters in length.
	// +kubebuilder:validation:Optional
	path?: null | string @go(Path,*string)
}

#AccessLogInitParameters: {
	// Local file certificate.
	file?: [...#AccessLogFileInitParameters] @go(File,[]AccessLogFileInitParameters)
}

#AccessLogObservation: {
	// Local file certificate.
	file?: [...#AccessLogFileObservation] @go(File,[]AccessLogFileObservation)
}

#AccessLogParameters: {
	// Local file certificate.
	// +kubebuilder:validation:Optional
	file?: [...#AccessLogFileParameters] @go(File,[]AccessLogFileParameters)
}

#AcmInitParameters: {
	// One or more ACM ARNs.
	certificateAuthorityArns?: [...null | string] @go(CertificateAuthorityArns,[]*string)
}

#AcmObservation: {
	// One or more ACM ARNs.
	certificateAuthorityArns?: [...null | string] @go(CertificateAuthorityArns,[]*string)
}

#AcmParameters: {
	// One or more ACM ARNs.
	// +kubebuilder:validation:Optional
	certificateAuthorityArns: [...null | string] @go(CertificateAuthorityArns,[]*string)
}

#BackendDefaultsInitParameters: {
	// Default client policy for virtual gateway backends.
	clientPolicy?: [...#ClientPolicyInitParameters] @go(ClientPolicy,[]ClientPolicyInitParameters)
}

#BackendDefaultsObservation: {
	// Default client policy for virtual gateway backends.
	clientPolicy?: [...#ClientPolicyObservation] @go(ClientPolicy,[]ClientPolicyObservation)
}

#BackendDefaultsParameters: {
	// Default client policy for virtual gateway backends.
	// +kubebuilder:validation:Optional
	clientPolicy?: [...#ClientPolicyParameters] @go(ClientPolicy,[]ClientPolicyParameters)
}

#CertificateAcmInitParameters: {
}

#CertificateAcmObservation: {
	// ARN for the certificate.
	certificateArn?: null | string @go(CertificateArn,*string)
}

#CertificateAcmParameters: {
	// ARN for the certificate.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/acm/v1beta1.Certificate
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	certificateArn?: null | string @go(CertificateArn,*string)

	// Reference to a Certificate in acm to populate certificateArn.
	// +kubebuilder:validation:Optional
	certificateArnRef?: null | v1.#Reference @go(CertificateArnRef,*v1.Reference)

	// Selector for a Certificate in acm to populate certificateArn.
	// +kubebuilder:validation:Optional
	certificateArnSelector?: null | v1.#Selector @go(CertificateArnSelector,*v1.Selector)
}

#CertificateFileInitParameters: {
	// Certificate chain for the certificate.
	certificateChain?: null | string @go(CertificateChain,*string)

	// Private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on.
	privateKey?: null | string @go(PrivateKey,*string)
}

#CertificateFileObservation: {
	// Certificate chain for the certificate.
	certificateChain?: null | string @go(CertificateChain,*string)

	// Private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on.
	privateKey?: null | string @go(PrivateKey,*string)
}

#CertificateFileParameters: {
	// Certificate chain for the certificate.
	// +kubebuilder:validation:Optional
	certificateChain?: null | string @go(CertificateChain,*string)

	// Private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on.
	// +kubebuilder:validation:Optional
	privateKey?: null | string @go(PrivateKey,*string)
}

#CertificateInitParameters: {
	// Local file certificate.
	file?: [...#FileInitParameters] @go(File,[]FileInitParameters)

	// A Secret Discovery Service certificate.
	sds?: [...#SdsInitParameters] @go(Sds,[]SdsInitParameters)
}

#CertificateObservation: {
	// Local file certificate.
	file?: [...#FileObservation] @go(File,[]FileObservation)

	// A Secret Discovery Service certificate.
	sds?: [...#SdsObservation] @go(Sds,[]SdsObservation)
}

#CertificateParameters: {
	// Local file certificate.
	// +kubebuilder:validation:Optional
	file?: [...#FileParameters] @go(File,[]FileParameters)

	// A Secret Discovery Service certificate.
	// +kubebuilder:validation:Optional
	sds?: [...#SdsParameters] @go(Sds,[]SdsParameters)
}

#CertificateSdsInitParameters: {
	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	secretName?: null | string @go(SecretName,*string)
}

#CertificateSdsObservation: {
	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	secretName?: null | string @go(SecretName,*string)
}

#CertificateSdsParameters: {
	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	// +kubebuilder:validation:Optional
	secretName?: null | string @go(SecretName,*string)
}

#ClientPolicyInitParameters: {
	// Transport Layer Security (TLS) client policy.
	tls?: [...#TLSInitParameters] @go(TLS,[]TLSInitParameters)
}

#ClientPolicyObservation: {
	// Transport Layer Security (TLS) client policy.
	tls?: [...#TLSObservation] @go(TLS,[]TLSObservation)
}

#ClientPolicyParameters: {
	// Transport Layer Security (TLS) client policy.
	// +kubebuilder:validation:Optional
	tls?: [...#TLSParameters] @go(TLS,[]TLSParameters)
}

#ConnectionPoolInitParameters: {
	// Connection pool information for gRPC listeners.
	grpc?: [...#GRPCInitParameters] @go(GRPC,[]GRPCInitParameters)

	// Connection pool information for HTTP listeners.
	http?: [...#HTTPInitParameters] @go(HTTP,[]HTTPInitParameters)

	// Connection pool information for HTTP2 listeners.
	http2?: [...#Http2InitParameters] @go(Http2,[]Http2InitParameters)
}

#ConnectionPoolObservation: {
	// Connection pool information for gRPC listeners.
	grpc?: [...#GRPCObservation] @go(GRPC,[]GRPCObservation)

	// Connection pool information for HTTP listeners.
	http?: [...#HTTPObservation] @go(HTTP,[]HTTPObservation)

	// Connection pool information for HTTP2 listeners.
	http2?: [...#Http2Observation] @go(Http2,[]Http2Observation)
}

#ConnectionPoolParameters: {
	// Connection pool information for gRPC listeners.
	// +kubebuilder:validation:Optional
	grpc?: [...#GRPCParameters] @go(GRPC,[]GRPCParameters)

	// Connection pool information for HTTP listeners.
	// +kubebuilder:validation:Optional
	http?: [...#HTTPParameters] @go(HTTP,[]HTTPParameters)

	// Connection pool information for HTTP2 listeners.
	// +kubebuilder:validation:Optional
	http2?: [...#Http2Parameters] @go(Http2,[]Http2Parameters)
}

#FileInitParameters: {
	// Certificate chain for the certificate.
	certificateChain?: null | string @go(CertificateChain,*string)

	// Private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on.
	privateKey?: null | string @go(PrivateKey,*string)
}

#FileObservation: {
	// Certificate chain for the certificate.
	certificateChain?: null | string @go(CertificateChain,*string)

	// Private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on.
	privateKey?: null | string @go(PrivateKey,*string)
}

#FileParameters: {
	// Certificate chain for the certificate.
	// +kubebuilder:validation:Optional
	certificateChain?: null | string @go(CertificateChain,*string)

	// Private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on.
	// +kubebuilder:validation:Optional
	privateKey?: null | string @go(PrivateKey,*string)
}

#FormatInitParameters: {
	// The logging format for JSON.
	json?: [...#JSONInitParameters] @go(JSON,[]JSONInitParameters)

	// The logging format for text. Must be between 1 and 1000 characters in length.
	text?: null | string @go(Text,*string)
}

#FormatObservation: {
	// The logging format for JSON.
	json?: [...#JSONObservation] @go(JSON,[]JSONObservation)

	// The logging format for text. Must be between 1 and 1000 characters in length.
	text?: null | string @go(Text,*string)
}

#FormatParameters: {
	// The logging format for JSON.
	// +kubebuilder:validation:Optional
	json?: [...#JSONParameters] @go(JSON,[]JSONParameters)

	// The logging format for text. Must be between 1 and 1000 characters in length.
	// +kubebuilder:validation:Optional
	text?: null | string @go(Text,*string)
}

#GRPCInitParameters: {
	// Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of 1.
	maxRequests?: null | float64 @go(MaxRequests,*float64)
}

#GRPCObservation: {
	// Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of 1.
	maxRequests?: null | float64 @go(MaxRequests,*float64)
}

#GRPCParameters: {
	// Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of 1.
	// +kubebuilder:validation:Optional
	maxRequests?: null | float64 @go(MaxRequests,*float64)
}

#HTTPInitParameters: {
	// Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster. Minimum value of 1.
	maxConnections?: null | float64 @go(MaxConnections,*float64)

	// Number of overflowing requests after max_connections Envoy will queue to upstream cluster. Minimum value of 1.
	maxPendingRequests?: null | float64 @go(MaxPendingRequests,*float64)
}

#HTTPObservation: {
	// Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster. Minimum value of 1.
	maxConnections?: null | float64 @go(MaxConnections,*float64)

	// Number of overflowing requests after max_connections Envoy will queue to upstream cluster. Minimum value of 1.
	maxPendingRequests?: null | float64 @go(MaxPendingRequests,*float64)
}

#HTTPParameters: {
	// Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster. Minimum value of 1.
	// +kubebuilder:validation:Optional
	maxConnections?: null | float64 @go(MaxConnections,*float64)

	// Number of overflowing requests after max_connections Envoy will queue to upstream cluster. Minimum value of 1.
	// +kubebuilder:validation:Optional
	maxPendingRequests?: null | float64 @go(MaxPendingRequests,*float64)
}

#HealthCheckInitParameters: {
	// Number of consecutive successful health checks that must occur before declaring listener healthy.
	healthyThreshold?: null | float64 @go(HealthyThreshold,*float64)

	// Time period in milliseconds between each health check execution.
	intervalMillis?: null | float64 @go(IntervalMillis,*float64)

	// File path to write access logs to. You can use /dev/stdout to send access logs to standard out. Must be between 1 and 255 characters in length.
	path?: null | string @go(Path,*string)

	// Port used for the port mapping.
	port?: null | float64 @go(Port,*float64)

	// Protocol used for the port mapping. Valid values are http, http2, tcp and grpc.
	protocol?: null | string @go(Protocol,*string)

	// Amount of time to wait when receiving a response from the health check, in milliseconds.
	timeoutMillis?: null | float64 @go(TimeoutMillis,*float64)

	// Number of consecutive failed health checks that must occur before declaring a virtual gateway unhealthy.
	unhealthyThreshold?: null | float64 @go(UnhealthyThreshold,*float64)
}

#HealthCheckObservation: {
	// Number of consecutive successful health checks that must occur before declaring listener healthy.
	healthyThreshold?: null | float64 @go(HealthyThreshold,*float64)

	// Time period in milliseconds between each health check execution.
	intervalMillis?: null | float64 @go(IntervalMillis,*float64)

	// File path to write access logs to. You can use /dev/stdout to send access logs to standard out. Must be between 1 and 255 characters in length.
	path?: null | string @go(Path,*string)

	// Port used for the port mapping.
	port?: null | float64 @go(Port,*float64)

	// Protocol used for the port mapping. Valid values are http, http2, tcp and grpc.
	protocol?: null | string @go(Protocol,*string)

	// Amount of time to wait when receiving a response from the health check, in milliseconds.
	timeoutMillis?: null | float64 @go(TimeoutMillis,*float64)

	// Number of consecutive failed health checks that must occur before declaring a virtual gateway unhealthy.
	unhealthyThreshold?: null | float64 @go(UnhealthyThreshold,*float64)
}

#HealthCheckParameters: {
	// Number of consecutive successful health checks that must occur before declaring listener healthy.
	// +kubebuilder:validation:Optional
	healthyThreshold?: null | float64 @go(HealthyThreshold,*float64)

	// Time period in milliseconds between each health check execution.
	// +kubebuilder:validation:Optional
	intervalMillis?: null | float64 @go(IntervalMillis,*float64)

	// File path to write access logs to. You can use /dev/stdout to send access logs to standard out. Must be between 1 and 255 characters in length.
	// +kubebuilder:validation:Optional
	path?: null | string @go(Path,*string)

	// Port used for the port mapping.
	// +kubebuilder:validation:Optional
	port?: null | float64 @go(Port,*float64)

	// Protocol used for the port mapping. Valid values are http, http2, tcp and grpc.
	// +kubebuilder:validation:Optional
	protocol?: null | string @go(Protocol,*string)

	// Amount of time to wait when receiving a response from the health check, in milliseconds.
	// +kubebuilder:validation:Optional
	timeoutMillis?: null | float64 @go(TimeoutMillis,*float64)

	// Number of consecutive failed health checks that must occur before declaring a virtual gateway unhealthy.
	// +kubebuilder:validation:Optional
	unhealthyThreshold?: null | float64 @go(UnhealthyThreshold,*float64)
}

#Http2InitParameters: {
	// Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of 1.
	maxRequests?: null | float64 @go(MaxRequests,*float64)
}

#Http2Observation: {
	// Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of 1.
	maxRequests?: null | float64 @go(MaxRequests,*float64)
}

#Http2Parameters: {
	// Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of 1.
	// +kubebuilder:validation:Optional
	maxRequests?: null | float64 @go(MaxRequests,*float64)
}

#JSONInitParameters: {
	// The specified key for the JSON. Must be between 1 and 100 characters in length.
	key?: null | string @go(Key,*string)

	// The specified value for the JSON. Must be between 1 and 100 characters in length.
	value?: null | string @go(Value,*string)
}

#JSONObservation: {
	// The specified key for the JSON. Must be between 1 and 100 characters in length.
	key?: null | string @go(Key,*string)

	// The specified value for the JSON. Must be between 1 and 100 characters in length.
	value?: null | string @go(Value,*string)
}

#JSONParameters: {
	// The specified key for the JSON. Must be between 1 and 100 characters in length.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)

	// The specified value for the JSON. Must be between 1 and 100 characters in length.
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

#ListenerInitParameters: {
	// Connection pool information for the listener.
	connectionPool?: [...#ConnectionPoolInitParameters] @go(ConnectionPool,[]ConnectionPoolInitParameters)

	// Health check information for the listener.
	healthCheck?: [...#HealthCheckInitParameters] @go(HealthCheck,[]HealthCheckInitParameters)

	// Port mapping information for the listener.
	portMapping?: [...#PortMappingInitParameters] @go(PortMapping,[]PortMappingInitParameters)

	// Transport Layer Security (TLS) client policy.
	tls?: [...#ListenerTLSInitParameters] @go(TLS,[]ListenerTLSInitParameters)
}

#ListenerObservation: {
	// Connection pool information for the listener.
	connectionPool?: [...#ConnectionPoolObservation] @go(ConnectionPool,[]ConnectionPoolObservation)

	// Health check information for the listener.
	healthCheck?: [...#HealthCheckObservation] @go(HealthCheck,[]HealthCheckObservation)

	// Port mapping information for the listener.
	portMapping?: [...#PortMappingObservation] @go(PortMapping,[]PortMappingObservation)

	// Transport Layer Security (TLS) client policy.
	tls?: [...#ListenerTLSObservation] @go(TLS,[]ListenerTLSObservation)
}

#ListenerParameters: {
	// Connection pool information for the listener.
	// +kubebuilder:validation:Optional
	connectionPool?: [...#ConnectionPoolParameters] @go(ConnectionPool,[]ConnectionPoolParameters)

	// Health check information for the listener.
	// +kubebuilder:validation:Optional
	healthCheck?: [...#HealthCheckParameters] @go(HealthCheck,[]HealthCheckParameters)

	// Port mapping information for the listener.
	// +kubebuilder:validation:Optional
	portMapping: [...#PortMappingParameters] @go(PortMapping,[]PortMappingParameters)

	// Transport Layer Security (TLS) client policy.
	// +kubebuilder:validation:Optional
	tls?: [...#ListenerTLSParameters] @go(TLS,[]ListenerTLSParameters)
}

#ListenerTLSInitParameters: {
	// Virtual gateway's client's Transport Layer Security (TLS) certificate.
	certificate?: [...#TLSCertificateInitParameters] @go(Certificate,[]TLSCertificateInitParameters)

	// Listener's TLS mode. Valid values: DISABLED, PERMISSIVE, STRICT.
	mode?: null | string @go(Mode,*string)

	// TLS validation context.
	validation?: [...#TLSValidationInitParameters] @go(Validation,[]TLSValidationInitParameters)
}

#ListenerTLSObservation: {
	// Virtual gateway's client's Transport Layer Security (TLS) certificate.
	certificate?: [...#TLSCertificateObservation] @go(Certificate,[]TLSCertificateObservation)

	// Listener's TLS mode. Valid values: DISABLED, PERMISSIVE, STRICT.
	mode?: null | string @go(Mode,*string)

	// TLS validation context.
	validation?: [...#TLSValidationObservation] @go(Validation,[]TLSValidationObservation)
}

#ListenerTLSParameters: {
	// Virtual gateway's client's Transport Layer Security (TLS) certificate.
	// +kubebuilder:validation:Optional
	certificate: [...#TLSCertificateParameters] @go(Certificate,[]TLSCertificateParameters)

	// Listener's TLS mode. Valid values: DISABLED, PERMISSIVE, STRICT.
	// +kubebuilder:validation:Optional
	mode?: null | string @go(Mode,*string)

	// TLS validation context.
	// +kubebuilder:validation:Optional
	validation?: [...#TLSValidationParameters] @go(Validation,[]TLSValidationParameters)
}

#LoggingInitParameters: {
	// Access log configuration for a virtual gateway.
	accessLog?: [...#AccessLogInitParameters] @go(AccessLog,[]AccessLogInitParameters)
}

#LoggingObservation: {
	// Access log configuration for a virtual gateway.
	accessLog?: [...#AccessLogObservation] @go(AccessLog,[]AccessLogObservation)
}

#LoggingParameters: {
	// Access log configuration for a virtual gateway.
	// +kubebuilder:validation:Optional
	accessLog?: [...#AccessLogParameters] @go(AccessLog,[]AccessLogParameters)
}

#PortMappingInitParameters: {
	// Port used for the port mapping.
	port?: null | float64 @go(Port,*float64)

	// Protocol used for the port mapping. Valid values are http, http2, tcp and grpc.
	protocol?: null | string @go(Protocol,*string)
}

#PortMappingObservation: {
	// Port used for the port mapping.
	port?: null | float64 @go(Port,*float64)

	// Protocol used for the port mapping. Valid values are http, http2, tcp and grpc.
	protocol?: null | string @go(Protocol,*string)
}

#PortMappingParameters: {
	// Port used for the port mapping.
	// +kubebuilder:validation:Optional
	port?: null | float64 @go(Port,*float64)

	// Protocol used for the port mapping. Valid values are http, http2, tcp and grpc.
	// +kubebuilder:validation:Optional
	protocol?: null | string @go(Protocol,*string)
}

#SdsInitParameters: {
	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	secretName?: null | string @go(SecretName,*string)
}

#SdsObservation: {
	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	secretName?: null | string @go(SecretName,*string)
}

#SdsParameters: {
	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	// +kubebuilder:validation:Optional
	secretName?: null | string @go(SecretName,*string)
}

#SubjectAlternativeNamesInitParameters: {
	// Criteria for determining a SAN's match.
	match?: [...#SubjectAlternativeNamesMatchInitParameters] @go(Match,[]SubjectAlternativeNamesMatchInitParameters)
}

#SubjectAlternativeNamesMatchInitParameters: {
	// Values sent must match the specified values exactly.
	exact?: [...null | string] @go(Exact,[]*string)
}

#SubjectAlternativeNamesMatchObservation: {
	// Values sent must match the specified values exactly.
	exact?: [...null | string] @go(Exact,[]*string)
}

#SubjectAlternativeNamesMatchParameters: {
	// Values sent must match the specified values exactly.
	// +kubebuilder:validation:Optional
	exact: [...null | string] @go(Exact,[]*string)
}

#SubjectAlternativeNamesObservation: {
	// Criteria for determining a SAN's match.
	match?: [...#SubjectAlternativeNamesMatchObservation] @go(Match,[]SubjectAlternativeNamesMatchObservation)
}

#SubjectAlternativeNamesParameters: {
	// Criteria for determining a SAN's match.
	// +kubebuilder:validation:Optional
	match: [...#SubjectAlternativeNamesMatchParameters] @go(Match,[]SubjectAlternativeNamesMatchParameters)
}

#TLSCertificateInitParameters: {
	// TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
	acm?: [...#CertificateAcmInitParameters] @go(Acm,[]CertificateAcmInitParameters)

	// Local file certificate.
	file?: [...#CertificateFileInitParameters] @go(File,[]CertificateFileInitParameters)

	// A Secret Discovery Service certificate.
	sds?: [...#CertificateSdsInitParameters] @go(Sds,[]CertificateSdsInitParameters)
}

#TLSCertificateObservation: {
	// TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
	acm?: [...#CertificateAcmObservation] @go(Acm,[]CertificateAcmObservation)

	// Local file certificate.
	file?: [...#CertificateFileObservation] @go(File,[]CertificateFileObservation)

	// A Secret Discovery Service certificate.
	sds?: [...#CertificateSdsObservation] @go(Sds,[]CertificateSdsObservation)
}

#TLSCertificateParameters: {
	// TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
	// +kubebuilder:validation:Optional
	acm?: [...#CertificateAcmParameters] @go(Acm,[]CertificateAcmParameters)

	// Local file certificate.
	// +kubebuilder:validation:Optional
	file?: [...#CertificateFileParameters] @go(File,[]CertificateFileParameters)

	// A Secret Discovery Service certificate.
	// +kubebuilder:validation:Optional
	sds?: [...#CertificateSdsParameters] @go(Sds,[]CertificateSdsParameters)
}

#TLSInitParameters: {
	// Virtual gateway's client's Transport Layer Security (TLS) certificate.
	certificate?: [...#CertificateInitParameters] @go(Certificate,[]CertificateInitParameters)

	// Whether the policy is enforced. Default is true.
	enforce?: null | bool @go(Enforce,*bool)

	// One or more ports that the policy is enforced for.
	ports?: [...null | float64] @go(Ports,[]*float64)

	// TLS validation context.
	validation?: [...#ValidationInitParameters] @go(Validation,[]ValidationInitParameters)
}

#TLSObservation: {
	// Virtual gateway's client's Transport Layer Security (TLS) certificate.
	certificate?: [...#CertificateObservation] @go(Certificate,[]CertificateObservation)

	// Whether the policy is enforced. Default is true.
	enforce?: null | bool @go(Enforce,*bool)

	// One or more ports that the policy is enforced for.
	ports?: [...null | float64] @go(Ports,[]*float64)

	// TLS validation context.
	validation?: [...#ValidationObservation] @go(Validation,[]ValidationObservation)
}

#TLSParameters: {
	// Virtual gateway's client's Transport Layer Security (TLS) certificate.
	// +kubebuilder:validation:Optional
	certificate?: [...#CertificateParameters] @go(Certificate,[]CertificateParameters)

	// Whether the policy is enforced. Default is true.
	// +kubebuilder:validation:Optional
	enforce?: null | bool @go(Enforce,*bool)

	// One or more ports that the policy is enforced for.
	// +kubebuilder:validation:Optional
	ports?: [...null | float64] @go(Ports,[]*float64)

	// TLS validation context.
	// +kubebuilder:validation:Optional
	validation: [...#ValidationParameters] @go(Validation,[]ValidationParameters)
}

#TLSValidationInitParameters: {
	// SANs for a virtual gateway's listener's Transport Layer Security (TLS) validation context.
	subjectAlternativeNames?: [...#ValidationSubjectAlternativeNamesInitParameters] @go(SubjectAlternativeNames,[]ValidationSubjectAlternativeNamesInitParameters)

	// TLS validation context trust.
	trust?: [...#ValidationTrustInitParameters] @go(Trust,[]ValidationTrustInitParameters)
}

#TLSValidationObservation: {
	// SANs for a virtual gateway's listener's Transport Layer Security (TLS) validation context.
	subjectAlternativeNames?: [...#ValidationSubjectAlternativeNamesObservation] @go(SubjectAlternativeNames,[]ValidationSubjectAlternativeNamesObservation)

	// TLS validation context trust.
	trust?: [...#ValidationTrustObservation] @go(Trust,[]ValidationTrustObservation)
}

#TLSValidationParameters: {
	// SANs for a virtual gateway's listener's Transport Layer Security (TLS) validation context.
	// +kubebuilder:validation:Optional
	subjectAlternativeNames?: [...#ValidationSubjectAlternativeNamesParameters] @go(SubjectAlternativeNames,[]ValidationSubjectAlternativeNamesParameters)

	// TLS validation context trust.
	// +kubebuilder:validation:Optional
	trust: [...#ValidationTrustParameters] @go(Trust,[]ValidationTrustParameters)
}

#TrustFileInitParameters: {
	// Certificate chain for the certificate.
	certificateChain?: null | string @go(CertificateChain,*string)
}

#TrustFileObservation: {
	// Certificate chain for the certificate.
	certificateChain?: null | string @go(CertificateChain,*string)
}

#TrustFileParameters: {
	// Certificate chain for the certificate.
	// +kubebuilder:validation:Optional
	certificateChain?: null | string @go(CertificateChain,*string)
}

#TrustInitParameters: {
	// TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
	acm?: [...#AcmInitParameters] @go(Acm,[]AcmInitParameters)

	// Local file certificate.
	file?: [...#TrustFileInitParameters] @go(File,[]TrustFileInitParameters)

	// A Secret Discovery Service certificate.
	sds?: [...#TrustSdsInitParameters] @go(Sds,[]TrustSdsInitParameters)
}

#TrustObservation: {
	// TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
	acm?: [...#AcmObservation] @go(Acm,[]AcmObservation)

	// Local file certificate.
	file?: [...#TrustFileObservation] @go(File,[]TrustFileObservation)

	// A Secret Discovery Service certificate.
	sds?: [...#TrustSdsObservation] @go(Sds,[]TrustSdsObservation)
}

#TrustParameters: {
	// TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
	// +kubebuilder:validation:Optional
	acm?: [...#AcmParameters] @go(Acm,[]AcmParameters)

	// Local file certificate.
	// +kubebuilder:validation:Optional
	file?: [...#TrustFileParameters] @go(File,[]TrustFileParameters)

	// A Secret Discovery Service certificate.
	// +kubebuilder:validation:Optional
	sds?: [...#TrustSdsParameters] @go(Sds,[]TrustSdsParameters)
}

#TrustSdsInitParameters: {
	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	secretName?: null | string @go(SecretName,*string)
}

#TrustSdsObservation: {
	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	secretName?: null | string @go(SecretName,*string)
}

#TrustSdsParameters: {
	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	// +kubebuilder:validation:Optional
	secretName?: null | string @go(SecretName,*string)
}

#ValidationInitParameters: {
	// SANs for a virtual gateway's listener's Transport Layer Security (TLS) validation context.
	subjectAlternativeNames?: [...#SubjectAlternativeNamesInitParameters] @go(SubjectAlternativeNames,[]SubjectAlternativeNamesInitParameters)

	// TLS validation context trust.
	trust?: [...#TrustInitParameters] @go(Trust,[]TrustInitParameters)
}

#ValidationObservation: {
	// SANs for a virtual gateway's listener's Transport Layer Security (TLS) validation context.
	subjectAlternativeNames?: [...#SubjectAlternativeNamesObservation] @go(SubjectAlternativeNames,[]SubjectAlternativeNamesObservation)

	// TLS validation context trust.
	trust?: [...#TrustObservation] @go(Trust,[]TrustObservation)
}

#ValidationParameters: {
	// SANs for a virtual gateway's listener's Transport Layer Security (TLS) validation context.
	// +kubebuilder:validation:Optional
	subjectAlternativeNames?: [...#SubjectAlternativeNamesParameters] @go(SubjectAlternativeNames,[]SubjectAlternativeNamesParameters)

	// TLS validation context trust.
	// +kubebuilder:validation:Optional
	trust: [...#TrustParameters] @go(Trust,[]TrustParameters)
}

#ValidationSubjectAlternativeNamesInitParameters: {
	// Criteria for determining a SAN's match.
	match?: [...#ValidationSubjectAlternativeNamesMatchInitParameters] @go(Match,[]ValidationSubjectAlternativeNamesMatchInitParameters)
}

#ValidationSubjectAlternativeNamesMatchInitParameters: {
	// Values sent must match the specified values exactly.
	exact?: [...null | string] @go(Exact,[]*string)
}

#ValidationSubjectAlternativeNamesMatchObservation: {
	// Values sent must match the specified values exactly.
	exact?: [...null | string] @go(Exact,[]*string)
}

#ValidationSubjectAlternativeNamesMatchParameters: {
	// Values sent must match the specified values exactly.
	// +kubebuilder:validation:Optional
	exact: [...null | string] @go(Exact,[]*string)
}

#ValidationSubjectAlternativeNamesObservation: {
	// Criteria for determining a SAN's match.
	match?: [...#ValidationSubjectAlternativeNamesMatchObservation] @go(Match,[]ValidationSubjectAlternativeNamesMatchObservation)
}

#ValidationSubjectAlternativeNamesParameters: {
	// Criteria for determining a SAN's match.
	// +kubebuilder:validation:Optional
	match: [...#ValidationSubjectAlternativeNamesMatchParameters] @go(Match,[]ValidationSubjectAlternativeNamesMatchParameters)
}

#ValidationTrustFileInitParameters: {
	// Certificate chain for the certificate.
	certificateChain?: null | string @go(CertificateChain,*string)
}

#ValidationTrustFileObservation: {
	// Certificate chain for the certificate.
	certificateChain?: null | string @go(CertificateChain,*string)
}

#ValidationTrustFileParameters: {
	// Certificate chain for the certificate.
	// +kubebuilder:validation:Optional
	certificateChain?: null | string @go(CertificateChain,*string)
}

#ValidationTrustInitParameters: {
	// Local file certificate.
	file?: [...#ValidationTrustFileInitParameters] @go(File,[]ValidationTrustFileInitParameters)

	// A Secret Discovery Service certificate.
	sds?: [...#ValidationTrustSdsInitParameters] @go(Sds,[]ValidationTrustSdsInitParameters)
}

#ValidationTrustObservation: {
	// Local file certificate.
	file?: [...#ValidationTrustFileObservation] @go(File,[]ValidationTrustFileObservation)

	// A Secret Discovery Service certificate.
	sds?: [...#ValidationTrustSdsObservation] @go(Sds,[]ValidationTrustSdsObservation)
}

#ValidationTrustParameters: {
	// Local file certificate.
	// +kubebuilder:validation:Optional
	file?: [...#ValidationTrustFileParameters] @go(File,[]ValidationTrustFileParameters)

	// A Secret Discovery Service certificate.
	// +kubebuilder:validation:Optional
	sds?: [...#ValidationTrustSdsParameters] @go(Sds,[]ValidationTrustSdsParameters)
}

#ValidationTrustSdsInitParameters: {
	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	secretName?: null | string @go(SecretName,*string)
}

#ValidationTrustSdsObservation: {
	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	secretName?: null | string @go(SecretName,*string)
}

#ValidationTrustSdsParameters: {
	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	// +kubebuilder:validation:Optional
	secretName?: null | string @go(SecretName,*string)
}

#VirtualGatewayInitParameters: {
	// Name of the service mesh in which to create the virtual gateway. Must be between 1 and 255 characters in length.
	meshName?: null | string @go(MeshName,*string)

	// AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
	meshOwner?: null | string @go(MeshOwner,*string)

	// Name to use for the virtual gateway. Must be between 1 and 255 characters in length.
	name?: null | string @go(Name,*string)

	// Virtual gateway specification to apply.
	spec?: [...#VirtualGatewaySpecInitParameters] @go(Spec,[]VirtualGatewaySpecInitParameters)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#VirtualGatewayObservation: {
	// ARN of the virtual gateway.
	arn?: null | string @go(Arn,*string)

	// Creation date of the virtual gateway.
	createdDate?: null | string @go(CreatedDate,*string)

	// ID of the virtual gateway.
	id?: null | string @go(ID,*string)

	// Last update date of the virtual gateway.
	lastUpdatedDate?: null | string @go(LastUpdatedDate,*string)

	// Name of the service mesh in which to create the virtual gateway. Must be between 1 and 255 characters in length.
	meshName?: null | string @go(MeshName,*string)

	// AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
	meshOwner?: null | string @go(MeshOwner,*string)

	// Name to use for the virtual gateway. Must be between 1 and 255 characters in length.
	name?: null | string @go(Name,*string)

	// Resource owner's AWS account ID.
	resourceOwner?: null | string @go(ResourceOwner,*string)

	// Virtual gateway specification to apply.
	spec?: [...#VirtualGatewaySpecObservation] @go(Spec,[]VirtualGatewaySpecObservation)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#VirtualGatewayParameters: {
	// Name of the service mesh in which to create the virtual gateway. Must be between 1 and 255 characters in length.
	// +kubebuilder:validation:Optional
	meshName?: null | string @go(MeshName,*string)

	// AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
	// +kubebuilder:validation:Optional
	meshOwner?: null | string @go(MeshOwner,*string)

	// Name to use for the virtual gateway. Must be between 1 and 255 characters in length.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Virtual gateway specification to apply.
	// +kubebuilder:validation:Optional
	spec?: [...#VirtualGatewaySpecParameters] @go(Spec,[]VirtualGatewaySpecParameters)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#VirtualGatewaySpecInitParameters: {
	// Defaults for backends.
	backendDefaults?: [...#BackendDefaultsInitParameters] @go(BackendDefaults,[]BackendDefaultsInitParameters)

	// Listeners that the mesh endpoint is expected to receive inbound traffic from. You can specify one listener.
	listener?: [...#ListenerInitParameters] @go(Listener,[]ListenerInitParameters)

	// Inbound and outbound access logging information for the virtual gateway.
	logging?: [...#LoggingInitParameters] @go(Logging,[]LoggingInitParameters)
}

#VirtualGatewaySpecObservation: {
	// Defaults for backends.
	backendDefaults?: [...#BackendDefaultsObservation] @go(BackendDefaults,[]BackendDefaultsObservation)

	// Listeners that the mesh endpoint is expected to receive inbound traffic from. You can specify one listener.
	listener?: [...#ListenerObservation] @go(Listener,[]ListenerObservation)

	// Inbound and outbound access logging information for the virtual gateway.
	logging?: [...#LoggingObservation] @go(Logging,[]LoggingObservation)
}

#VirtualGatewaySpecParameters: {
	// Defaults for backends.
	// +kubebuilder:validation:Optional
	backendDefaults?: [...#BackendDefaultsParameters] @go(BackendDefaults,[]BackendDefaultsParameters)

	// Listeners that the mesh endpoint is expected to receive inbound traffic from. You can specify one listener.
	// +kubebuilder:validation:Optional
	listener: [...#ListenerParameters] @go(Listener,[]ListenerParameters)

	// Inbound and outbound access logging information for the virtual gateway.
	// +kubebuilder:validation:Optional
	logging?: [...#LoggingParameters] @go(Logging,[]LoggingParameters)
}

// VirtualGatewaySpec defines the desired state of VirtualGateway
#VirtualGatewaySpec: {
	v1.#ResourceSpec
	forProvider: #VirtualGatewayParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #VirtualGatewayInitParameters @go(InitProvider)
}

// VirtualGatewayStatus defines the observed state of VirtualGateway.
#VirtualGatewayStatus: {
	v1.#ResourceStatus
	atProvider?: #VirtualGatewayObservation @go(AtProvider)
}

// VirtualGateway is the Schema for the VirtualGateways API. Provides an AWS App Mesh virtual gateway resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#VirtualGateway: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.meshName) || (has(self.initProvider) && has(self.initProvider.meshName))",message="spec.forProvider.meshName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.spec) || (has(self.initProvider) && has(self.initProvider.spec))",message="spec.forProvider.spec is a required parameter"
	spec:    #VirtualGatewaySpec   @go(Spec)
	status?: #VirtualGatewayStatus @go(Status)
}

// VirtualGatewayList contains a list of VirtualGateways
#VirtualGatewayList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#VirtualGateway] @go(Items,[]VirtualGateway)
}
