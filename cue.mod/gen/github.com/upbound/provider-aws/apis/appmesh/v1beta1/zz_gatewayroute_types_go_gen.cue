// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/appmesh/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#ActionInitParameters: {
	// Target that traffic is routed to when a request matches the gateway route.
	target?: [...#TargetInitParameters] @go(Target,[]TargetInitParameters)
}

#ActionObservation: {
	// Target that traffic is routed to when a request matches the gateway route.
	target?: [...#TargetObservation] @go(Target,[]TargetObservation)
}

#ActionParameters: {
	// Target that traffic is routed to when a request matches the gateway route.
	// +kubebuilder:validation:Optional
	target: [...#TargetParameters] @go(Target,[]TargetParameters)
}

#ActionRewriteInitParameters: {
	// Host name to rewrite.
	hostname?: [...#RewriteHostnameInitParameters] @go(Hostname,[]RewriteHostnameInitParameters)

	// Specified beginning characters to rewrite.
	prefix?: [...#RewritePrefixInitParameters] @go(Prefix,[]RewritePrefixInitParameters)
}

#ActionRewriteObservation: {
	// Host name to rewrite.
	hostname?: [...#RewriteHostnameObservation] @go(Hostname,[]RewriteHostnameObservation)

	// Specified beginning characters to rewrite.
	prefix?: [...#RewritePrefixObservation] @go(Prefix,[]RewritePrefixObservation)
}

#ActionRewriteParameters: {
	// Host name to rewrite.
	// +kubebuilder:validation:Optional
	hostname?: [...#RewriteHostnameParameters] @go(Hostname,[]RewriteHostnameParameters)

	// Specified beginning characters to rewrite.
	// +kubebuilder:validation:Optional
	prefix?: [...#RewritePrefixParameters] @go(Prefix,[]RewritePrefixParameters)
}

#ActionTargetInitParameters: {
	// The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
	port?: null | float64 @go(Port,*float64)

	// Virtual service gateway route target.
	virtualService?: [...#TargetVirtualServiceInitParameters] @go(VirtualService,[]TargetVirtualServiceInitParameters)
}

#ActionTargetObservation: {
	// The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
	port?: null | float64 @go(Port,*float64)

	// Virtual service gateway route target.
	virtualService?: [...#TargetVirtualServiceObservation] @go(VirtualService,[]TargetVirtualServiceObservation)
}

#ActionTargetParameters: {
	// The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
	// +kubebuilder:validation:Optional
	port?: null | float64 @go(Port,*float64)

	// Virtual service gateway route target.
	// +kubebuilder:validation:Optional
	virtualService: [...#TargetVirtualServiceParameters] @go(VirtualService,[]TargetVirtualServiceParameters)
}

#ActionTargetVirtualServiceInitParameters: {
}

#ActionTargetVirtualServiceObservation: {
	// Name of the virtual service that traffic is routed to. Must be between 1 and 255 characters in length.
	virtualServiceName?: null | string @go(VirtualServiceName,*string)
}

#ActionTargetVirtualServiceParameters: {
	// Name of the virtual service that traffic is routed to. Must be between 1 and 255 characters in length.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/appmesh/v1beta1.VirtualService
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("name",false)
	// +kubebuilder:validation:Optional
	virtualServiceName?: null | string @go(VirtualServiceName,*string)

	// Reference to a VirtualService in appmesh to populate virtualServiceName.
	// +kubebuilder:validation:Optional
	virtualServiceNameRef?: null | v1.#Reference @go(VirtualServiceNameRef,*v1.Reference)

	// Selector for a VirtualService in appmesh to populate virtualServiceName.
	// +kubebuilder:validation:Optional
	virtualServiceNameSelector?: null | v1.#Selector @go(VirtualServiceNameSelector,*v1.Selector)
}

#GRPCRouteInitParameters: {
	// Action to take if a match is determined.
	action?: [...#ActionInitParameters] @go(Action,[]ActionInitParameters)

	// Criteria for determining a request match.
	match?: [...#MatchInitParameters] @go(Match,[]MatchInitParameters)
}

#GRPCRouteObservation: {
	// Action to take if a match is determined.
	action?: [...#ActionObservation] @go(Action,[]ActionObservation)

	// Criteria for determining a request match.
	match?: [...#MatchObservation] @go(Match,[]MatchObservation)
}

#GRPCRouteParameters: {
	// Action to take if a match is determined.
	// +kubebuilder:validation:Optional
	action: [...#ActionParameters] @go(Action,[]ActionParameters)

	// Criteria for determining a request match.
	// +kubebuilder:validation:Optional
	match: [...#MatchParameters] @go(Match,[]MatchParameters)
}

#GatewayRouteInitParameters: {
	// Name of the service mesh in which to create the gateway route. Must be between 1 and 255 characters in length.
	meshName?: null | string @go(MeshName,*string)

	// AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
	meshOwner?: null | string @go(MeshOwner,*string)

	// Name to use for the gateway route. Must be between 1 and 255 characters in length.
	name?: null | string @go(Name,*string)

	// Gateway route specification to apply.
	spec?: [...#SpecInitParameters] @go(Spec,[]SpecInitParameters)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#GatewayRouteObservation: {
	// ARN of the gateway route.
	arn?: null | string @go(Arn,*string)

	// Creation date of the gateway route.
	createdDate?: null | string @go(CreatedDate,*string)

	// ID of the gateway route.
	id?: null | string @go(ID,*string)

	// Last update date of the gateway route.
	lastUpdatedDate?: null | string @go(LastUpdatedDate,*string)

	// Name of the service mesh in which to create the gateway route. Must be between 1 and 255 characters in length.
	meshName?: null | string @go(MeshName,*string)

	// AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
	meshOwner?: null | string @go(MeshOwner,*string)

	// Name to use for the gateway route. Must be between 1 and 255 characters in length.
	name?: null | string @go(Name,*string)

	// Resource owner's AWS account ID.
	resourceOwner?: null | string @go(ResourceOwner,*string)

	// Gateway route specification to apply.
	spec?: [...#SpecObservation] @go(Spec,[]SpecObservation)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// Name of the virtual gateway to associate the gateway route with. Must be between 1 and 255 characters in length.
	virtualGatewayName?: null | string @go(VirtualGatewayName,*string)
}

#GatewayRouteParameters: {
	// Name of the service mesh in which to create the gateway route. Must be between 1 and 255 characters in length.
	// +kubebuilder:validation:Optional
	meshName?: null | string @go(MeshName,*string)

	// AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
	// +kubebuilder:validation:Optional
	meshOwner?: null | string @go(MeshOwner,*string)

	// Name to use for the gateway route. Must be between 1 and 255 characters in length.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Gateway route specification to apply.
	// +kubebuilder:validation:Optional
	spec?: [...#SpecParameters] @go(Spec,[]SpecParameters)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Name of the virtual gateway to associate the gateway route with. Must be between 1 and 255 characters in length.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/appmesh/v1beta1.VirtualGateway
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("name",false)
	// +kubebuilder:validation:Optional
	virtualGatewayName?: null | string @go(VirtualGatewayName,*string)

	// Reference to a VirtualGateway in appmesh to populate virtualGatewayName.
	// +kubebuilder:validation:Optional
	virtualGatewayNameRef?: null | v1.#Reference @go(VirtualGatewayNameRef,*v1.Reference)

	// Selector for a VirtualGateway in appmesh to populate virtualGatewayName.
	// +kubebuilder:validation:Optional
	virtualGatewayNameSelector?: null | v1.#Selector @go(VirtualGatewayNameSelector,*v1.Selector)
}

#HTTPRouteActionInitParameters: {
	// Gateway route action to rewrite.
	rewrite?: [...#ActionRewriteInitParameters] @go(Rewrite,[]ActionRewriteInitParameters)

	// Target that traffic is routed to when a request matches the gateway route.
	target?: [...#HTTPRouteActionTargetInitParameters] @go(Target,[]HTTPRouteActionTargetInitParameters)
}

#HTTPRouteActionObservation: {
	// Gateway route action to rewrite.
	rewrite?: [...#ActionRewriteObservation] @go(Rewrite,[]ActionRewriteObservation)

	// Target that traffic is routed to when a request matches the gateway route.
	target?: [...#HTTPRouteActionTargetObservation] @go(Target,[]HTTPRouteActionTargetObservation)
}

#HTTPRouteActionParameters: {
	// Gateway route action to rewrite.
	// +kubebuilder:validation:Optional
	rewrite?: [...#ActionRewriteParameters] @go(Rewrite,[]ActionRewriteParameters)

	// Target that traffic is routed to when a request matches the gateway route.
	// +kubebuilder:validation:Optional
	target: [...#HTTPRouteActionTargetParameters] @go(Target,[]HTTPRouteActionTargetParameters)
}

#HTTPRouteActionTargetInitParameters: {
	// The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
	port?: null | float64 @go(Port,*float64)

	// Virtual service gateway route target.
	virtualService?: [...#ActionTargetVirtualServiceInitParameters] @go(VirtualService,[]ActionTargetVirtualServiceInitParameters)
}

#HTTPRouteActionTargetObservation: {
	// The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
	port?: null | float64 @go(Port,*float64)

	// Virtual service gateway route target.
	virtualService?: [...#ActionTargetVirtualServiceObservation] @go(VirtualService,[]ActionTargetVirtualServiceObservation)
}

#HTTPRouteActionTargetParameters: {
	// The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
	// +kubebuilder:validation:Optional
	port?: null | float64 @go(Port,*float64)

	// Virtual service gateway route target.
	// +kubebuilder:validation:Optional
	virtualService: [...#ActionTargetVirtualServiceParameters] @go(VirtualService,[]ActionTargetVirtualServiceParameters)
}

#HTTPRouteInitParameters: {
	// Action to take if a match is determined.
	action?: [...#HTTPRouteActionInitParameters] @go(Action,[]HTTPRouteActionInitParameters)

	// Criteria for determining a request match.
	match?: [...#HTTPRouteMatchInitParameters] @go(Match,[]HTTPRouteMatchInitParameters)
}

#HTTPRouteMatchHostnameInitParameters: {
	// Header value sent by the client must match the specified value exactly.
	exact?: null | string @go(Exact,*string)

	// Header value sent by the client must end with the specified characters.
	suffix?: null | string @go(Suffix,*string)
}

#HTTPRouteMatchHostnameObservation: {
	// Header value sent by the client must match the specified value exactly.
	exact?: null | string @go(Exact,*string)

	// Header value sent by the client must end with the specified characters.
	suffix?: null | string @go(Suffix,*string)
}

#HTTPRouteMatchHostnameParameters: {
	// Header value sent by the client must match the specified value exactly.
	// +kubebuilder:validation:Optional
	exact?: null | string @go(Exact,*string)

	// Header value sent by the client must end with the specified characters.
	// +kubebuilder:validation:Optional
	suffix?: null | string @go(Suffix,*string)
}

#HTTPRouteMatchInitParameters: {
	// Client request headers to match on.
	header?: [...#MatchHeaderInitParameters] @go(Header,[]MatchHeaderInitParameters)

	// Host name to rewrite.
	hostname?: [...#HTTPRouteMatchHostnameInitParameters] @go(Hostname,[]HTTPRouteMatchHostnameInitParameters)

	// Client request path to match on.
	path?: [...#MatchPathInitParameters] @go(Path,[]MatchPathInitParameters)

	// The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
	port?: null | float64 @go(Port,*float64)

	// Specified beginning characters to rewrite.
	prefix?: null | string @go(Prefix,*string)

	// Client request query parameters to match on.
	queryParameter?: [...#MatchQueryParameterInitParameters] @go(QueryParameter,[]MatchQueryParameterInitParameters)
}

#HTTPRouteMatchObservation: {
	// Client request headers to match on.
	header?: [...#MatchHeaderObservation] @go(Header,[]MatchHeaderObservation)

	// Host name to rewrite.
	hostname?: [...#HTTPRouteMatchHostnameObservation] @go(Hostname,[]HTTPRouteMatchHostnameObservation)

	// Client request path to match on.
	path?: [...#MatchPathObservation] @go(Path,[]MatchPathObservation)

	// The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
	port?: null | float64 @go(Port,*float64)

	// Specified beginning characters to rewrite.
	prefix?: null | string @go(Prefix,*string)

	// Client request query parameters to match on.
	queryParameter?: [...#MatchQueryParameterObservation] @go(QueryParameter,[]MatchQueryParameterObservation)
}

#HTTPRouteMatchParameters: {
	// Client request headers to match on.
	// +kubebuilder:validation:Optional
	header?: [...#MatchHeaderParameters] @go(Header,[]MatchHeaderParameters)

	// Host name to rewrite.
	// +kubebuilder:validation:Optional
	hostname?: [...#HTTPRouteMatchHostnameParameters] @go(Hostname,[]HTTPRouteMatchHostnameParameters)

	// Client request path to match on.
	// +kubebuilder:validation:Optional
	path?: [...#MatchPathParameters] @go(Path,[]MatchPathParameters)

	// The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
	// +kubebuilder:validation:Optional
	port?: null | float64 @go(Port,*float64)

	// Specified beginning characters to rewrite.
	// +kubebuilder:validation:Optional
	prefix?: null | string @go(Prefix,*string)

	// Client request query parameters to match on.
	// +kubebuilder:validation:Optional
	queryParameter?: [...#MatchQueryParameterParameters] @go(QueryParameter,[]MatchQueryParameterParameters)
}

#HTTPRouteObservation: {
	// Action to take if a match is determined.
	action?: [...#HTTPRouteActionObservation] @go(Action,[]HTTPRouteActionObservation)

	// Criteria for determining a request match.
	match?: [...#HTTPRouteMatchObservation] @go(Match,[]HTTPRouteMatchObservation)
}

#HTTPRouteParameters: {
	// Action to take if a match is determined.
	// +kubebuilder:validation:Optional
	action: [...#HTTPRouteActionParameters] @go(Action,[]HTTPRouteActionParameters)

	// Criteria for determining a request match.
	// +kubebuilder:validation:Optional
	match: [...#HTTPRouteMatchParameters] @go(Match,[]HTTPRouteMatchParameters)
}

#HeaderInitParameters: {
	// If true, the match is on the opposite of the match method and value. Default is false.
	invert?: null | bool @go(Invert,*bool)

	// Criteria for determining a request match.
	match?: [...#HeaderMatchInitParameters] @go(Match,[]HeaderMatchInitParameters)

	// Name to use for the gateway route. Must be between 1 and 255 characters in length.
	name?: null | string @go(Name,*string)
}

#HeaderMatchInitParameters: {
	// Header value sent by the client must match the specified value exactly.
	exact?: null | string @go(Exact,*string)

	// Specified beginning characters to rewrite.
	prefix?: null | string @go(Prefix,*string)

	// Object that specifies the range of numbers that the header value sent by the client must be included in.
	range?: [...#RangeInitParameters] @go(Range,[]RangeInitParameters)

	// Header value sent by the client must include the specified characters.
	regex?: null | string @go(Regex,*string)

	// Header value sent by the client must end with the specified characters.
	suffix?: null | string @go(Suffix,*string)
}

#HeaderMatchObservation: {
	// Header value sent by the client must match the specified value exactly.
	exact?: null | string @go(Exact,*string)

	// Specified beginning characters to rewrite.
	prefix?: null | string @go(Prefix,*string)

	// Object that specifies the range of numbers that the header value sent by the client must be included in.
	range?: [...#RangeObservation] @go(Range,[]RangeObservation)

	// Header value sent by the client must include the specified characters.
	regex?: null | string @go(Regex,*string)

	// Header value sent by the client must end with the specified characters.
	suffix?: null | string @go(Suffix,*string)
}

#HeaderMatchParameters: {
	// Header value sent by the client must match the specified value exactly.
	// +kubebuilder:validation:Optional
	exact?: null | string @go(Exact,*string)

	// Specified beginning characters to rewrite.
	// +kubebuilder:validation:Optional
	prefix?: null | string @go(Prefix,*string)

	// Object that specifies the range of numbers that the header value sent by the client must be included in.
	// +kubebuilder:validation:Optional
	range?: [...#RangeParameters] @go(Range,[]RangeParameters)

	// Header value sent by the client must include the specified characters.
	// +kubebuilder:validation:Optional
	regex?: null | string @go(Regex,*string)

	// Header value sent by the client must end with the specified characters.
	// +kubebuilder:validation:Optional
	suffix?: null | string @go(Suffix,*string)
}

#HeaderObservation: {
	// If true, the match is on the opposite of the match method and value. Default is false.
	invert?: null | bool @go(Invert,*bool)

	// Criteria for determining a request match.
	match?: [...#HeaderMatchObservation] @go(Match,[]HeaderMatchObservation)

	// Name to use for the gateway route. Must be between 1 and 255 characters in length.
	name?: null | string @go(Name,*string)
}

#HeaderParameters: {
	// If true, the match is on the opposite of the match method and value. Default is false.
	// +kubebuilder:validation:Optional
	invert?: null | bool @go(Invert,*bool)

	// Criteria for determining a request match.
	// +kubebuilder:validation:Optional
	match?: [...#HeaderMatchParameters] @go(Match,[]HeaderMatchParameters)

	// Name to use for the gateway route. Must be between 1 and 255 characters in length.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)
}

#HostnameInitParameters: {
	// Default target host name to write to. Valid values: ENABLED, DISABLED.
	defaultTargetHostname?: null | string @go(DefaultTargetHostname,*string)
}

#HostnameObservation: {
	// Default target host name to write to. Valid values: ENABLED, DISABLED.
	defaultTargetHostname?: null | string @go(DefaultTargetHostname,*string)
}

#HostnameParameters: {
	// Default target host name to write to. Valid values: ENABLED, DISABLED.
	// +kubebuilder:validation:Optional
	defaultTargetHostname?: null | string @go(DefaultTargetHostname,*string)
}

#Http2RouteActionInitParameters: {
	// Gateway route action to rewrite.
	rewrite?: [...#RewriteInitParameters] @go(Rewrite,[]RewriteInitParameters)

	// Target that traffic is routed to when a request matches the gateway route.
	target?: [...#ActionTargetInitParameters] @go(Target,[]ActionTargetInitParameters)
}

#Http2RouteActionObservation: {
	// Gateway route action to rewrite.
	rewrite?: [...#RewriteObservation] @go(Rewrite,[]RewriteObservation)

	// Target that traffic is routed to when a request matches the gateway route.
	target?: [...#ActionTargetObservation] @go(Target,[]ActionTargetObservation)
}

#Http2RouteActionParameters: {
	// Gateway route action to rewrite.
	// +kubebuilder:validation:Optional
	rewrite?: [...#RewriteParameters] @go(Rewrite,[]RewriteParameters)

	// Target that traffic is routed to when a request matches the gateway route.
	// +kubebuilder:validation:Optional
	target: [...#ActionTargetParameters] @go(Target,[]ActionTargetParameters)
}

#Http2RouteInitParameters: {
	// Action to take if a match is determined.
	action?: [...#Http2RouteActionInitParameters] @go(Action,[]Http2RouteActionInitParameters)

	// Criteria for determining a request match.
	match?: [...#Http2RouteMatchInitParameters] @go(Match,[]Http2RouteMatchInitParameters)
}

#Http2RouteMatchInitParameters: {
	// Client request headers to match on.
	header?: [...#HeaderInitParameters] @go(Header,[]HeaderInitParameters)

	// Host name to rewrite.
	hostname?: [...#MatchHostnameInitParameters] @go(Hostname,[]MatchHostnameInitParameters)

	// Client request path to match on.
	path?: [...#PathInitParameters] @go(Path,[]PathInitParameters)

	// The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
	port?: null | float64 @go(Port,*float64)

	// Specified beginning characters to rewrite.
	prefix?: null | string @go(Prefix,*string)

	// Client request query parameters to match on.
	queryParameter?: [...#QueryParameterInitParameters] @go(QueryParameter,[]QueryParameterInitParameters)
}

#Http2RouteMatchObservation: {
	// Client request headers to match on.
	header?: [...#HeaderObservation] @go(Header,[]HeaderObservation)

	// Host name to rewrite.
	hostname?: [...#MatchHostnameObservation] @go(Hostname,[]MatchHostnameObservation)

	// Client request path to match on.
	path?: [...#PathObservation] @go(Path,[]PathObservation)

	// The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
	port?: null | float64 @go(Port,*float64)

	// Specified beginning characters to rewrite.
	prefix?: null | string @go(Prefix,*string)

	// Client request query parameters to match on.
	queryParameter?: [...#QueryParameterObservation] @go(QueryParameter,[]QueryParameterObservation)
}

#Http2RouteMatchParameters: {
	// Client request headers to match on.
	// +kubebuilder:validation:Optional
	header?: [...#HeaderParameters] @go(Header,[]HeaderParameters)

	// Host name to rewrite.
	// +kubebuilder:validation:Optional
	hostname?: [...#MatchHostnameParameters] @go(Hostname,[]MatchHostnameParameters)

	// Client request path to match on.
	// +kubebuilder:validation:Optional
	path?: [...#PathParameters] @go(Path,[]PathParameters)

	// The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
	// +kubebuilder:validation:Optional
	port?: null | float64 @go(Port,*float64)

	// Specified beginning characters to rewrite.
	// +kubebuilder:validation:Optional
	prefix?: null | string @go(Prefix,*string)

	// Client request query parameters to match on.
	// +kubebuilder:validation:Optional
	queryParameter?: [...#QueryParameterParameters] @go(QueryParameter,[]QueryParameterParameters)
}

#Http2RouteObservation: {
	// Action to take if a match is determined.
	action?: [...#Http2RouteActionObservation] @go(Action,[]Http2RouteActionObservation)

	// Criteria for determining a request match.
	match?: [...#Http2RouteMatchObservation] @go(Match,[]Http2RouteMatchObservation)
}

#Http2RouteParameters: {
	// Action to take if a match is determined.
	// +kubebuilder:validation:Optional
	action: [...#Http2RouteActionParameters] @go(Action,[]Http2RouteActionParameters)

	// Criteria for determining a request match.
	// +kubebuilder:validation:Optional
	match: [...#Http2RouteMatchParameters] @go(Match,[]Http2RouteMatchParameters)
}

#MatchHeaderInitParameters: {
	// If true, the match is on the opposite of the match method and value. Default is false.
	invert?: null | bool @go(Invert,*bool)

	// Criteria for determining a request match.
	match?: [...#MatchHeaderMatchInitParameters] @go(Match,[]MatchHeaderMatchInitParameters)

	// Name to use for the gateway route. Must be between 1 and 255 characters in length.
	name?: null | string @go(Name,*string)
}

#MatchHeaderMatchInitParameters: {
	// Header value sent by the client must match the specified value exactly.
	exact?: null | string @go(Exact,*string)

	// Specified beginning characters to rewrite.
	prefix?: null | string @go(Prefix,*string)

	// Object that specifies the range of numbers that the header value sent by the client must be included in.
	range?: [...#MatchRangeInitParameters] @go(Range,[]MatchRangeInitParameters)

	// Header value sent by the client must include the specified characters.
	regex?: null | string @go(Regex,*string)

	// Header value sent by the client must end with the specified characters.
	suffix?: null | string @go(Suffix,*string)
}

#MatchHeaderMatchObservation: {
	// Header value sent by the client must match the specified value exactly.
	exact?: null | string @go(Exact,*string)

	// Specified beginning characters to rewrite.
	prefix?: null | string @go(Prefix,*string)

	// Object that specifies the range of numbers that the header value sent by the client must be included in.
	range?: [...#MatchRangeObservation] @go(Range,[]MatchRangeObservation)

	// Header value sent by the client must include the specified characters.
	regex?: null | string @go(Regex,*string)

	// Header value sent by the client must end with the specified characters.
	suffix?: null | string @go(Suffix,*string)
}

#MatchHeaderMatchParameters: {
	// Header value sent by the client must match the specified value exactly.
	// +kubebuilder:validation:Optional
	exact?: null | string @go(Exact,*string)

	// Specified beginning characters to rewrite.
	// +kubebuilder:validation:Optional
	prefix?: null | string @go(Prefix,*string)

	// Object that specifies the range of numbers that the header value sent by the client must be included in.
	// +kubebuilder:validation:Optional
	range?: [...#MatchRangeParameters] @go(Range,[]MatchRangeParameters)

	// Header value sent by the client must include the specified characters.
	// +kubebuilder:validation:Optional
	regex?: null | string @go(Regex,*string)

	// Header value sent by the client must end with the specified characters.
	// +kubebuilder:validation:Optional
	suffix?: null | string @go(Suffix,*string)
}

#MatchHeaderObservation: {
	// If true, the match is on the opposite of the match method and value. Default is false.
	invert?: null | bool @go(Invert,*bool)

	// Criteria for determining a request match.
	match?: [...#MatchHeaderMatchObservation] @go(Match,[]MatchHeaderMatchObservation)

	// Name to use for the gateway route. Must be between 1 and 255 characters in length.
	name?: null | string @go(Name,*string)
}

#MatchHeaderParameters: {
	// If true, the match is on the opposite of the match method and value. Default is false.
	// +kubebuilder:validation:Optional
	invert?: null | bool @go(Invert,*bool)

	// Criteria for determining a request match.
	// +kubebuilder:validation:Optional
	match?: [...#MatchHeaderMatchParameters] @go(Match,[]MatchHeaderMatchParameters)

	// Name to use for the gateway route. Must be between 1 and 255 characters in length.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)
}

#MatchHostnameInitParameters: {
	// Header value sent by the client must match the specified value exactly.
	exact?: null | string @go(Exact,*string)

	// Header value sent by the client must end with the specified characters.
	suffix?: null | string @go(Suffix,*string)
}

#MatchHostnameObservation: {
	// Header value sent by the client must match the specified value exactly.
	exact?: null | string @go(Exact,*string)

	// Header value sent by the client must end with the specified characters.
	suffix?: null | string @go(Suffix,*string)
}

#MatchHostnameParameters: {
	// Header value sent by the client must match the specified value exactly.
	// +kubebuilder:validation:Optional
	exact?: null | string @go(Exact,*string)

	// Header value sent by the client must end with the specified characters.
	// +kubebuilder:validation:Optional
	suffix?: null | string @go(Suffix,*string)
}

#MatchInitParameters: {
	// The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
	port?: null | float64 @go(Port,*float64)

	// Fully qualified domain name for the service to match from the request.
	serviceName?: null | string @go(ServiceName,*string)
}

#MatchObservation: {
	// The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
	port?: null | float64 @go(Port,*float64)

	// Fully qualified domain name for the service to match from the request.
	serviceName?: null | string @go(ServiceName,*string)
}

#MatchParameters: {
	// The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
	// +kubebuilder:validation:Optional
	port?: null | float64 @go(Port,*float64)

	// Fully qualified domain name for the service to match from the request.
	// +kubebuilder:validation:Optional
	serviceName?: null | string @go(ServiceName,*string)
}

#MatchPathInitParameters: {
	// Header value sent by the client must match the specified value exactly.
	exact?: null | string @go(Exact,*string)

	// Header value sent by the client must include the specified characters.
	regex?: null | string @go(Regex,*string)
}

#MatchPathObservation: {
	// Header value sent by the client must match the specified value exactly.
	exact?: null | string @go(Exact,*string)

	// Header value sent by the client must include the specified characters.
	regex?: null | string @go(Regex,*string)
}

#MatchPathParameters: {
	// Header value sent by the client must match the specified value exactly.
	// +kubebuilder:validation:Optional
	exact?: null | string @go(Exact,*string)

	// Header value sent by the client must include the specified characters.
	// +kubebuilder:validation:Optional
	regex?: null | string @go(Regex,*string)
}

#MatchQueryParameterInitParameters: {
	// Criteria for determining a request match.
	match?: [...#MatchQueryParameterMatchInitParameters] @go(Match,[]MatchQueryParameterMatchInitParameters)

	// Name to use for the gateway route. Must be between 1 and 255 characters in length.
	name?: null | string @go(Name,*string)
}

#MatchQueryParameterMatchInitParameters: {
	// Header value sent by the client must match the specified value exactly.
	exact?: null | string @go(Exact,*string)
}

#MatchQueryParameterMatchObservation: {
	// Header value sent by the client must match the specified value exactly.
	exact?: null | string @go(Exact,*string)
}

#MatchQueryParameterMatchParameters: {
	// Header value sent by the client must match the specified value exactly.
	// +kubebuilder:validation:Optional
	exact?: null | string @go(Exact,*string)
}

#MatchQueryParameterObservation: {
	// Criteria for determining a request match.
	match?: [...#MatchQueryParameterMatchObservation] @go(Match,[]MatchQueryParameterMatchObservation)

	// Name to use for the gateway route. Must be between 1 and 255 characters in length.
	name?: null | string @go(Name,*string)
}

#MatchQueryParameterParameters: {
	// Criteria for determining a request match.
	// +kubebuilder:validation:Optional
	match?: [...#MatchQueryParameterMatchParameters] @go(Match,[]MatchQueryParameterMatchParameters)

	// Name to use for the gateway route. Must be between 1 and 255 characters in length.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)
}

#MatchRangeInitParameters: {
	// End of the range.
	end?: null | float64 @go(End,*float64)

	// (Requited) Start of the range.
	start?: null | float64 @go(Start,*float64)
}

#MatchRangeObservation: {
	// End of the range.
	end?: null | float64 @go(End,*float64)

	// (Requited) Start of the range.
	start?: null | float64 @go(Start,*float64)
}

#MatchRangeParameters: {
	// End of the range.
	// +kubebuilder:validation:Optional
	end?: null | float64 @go(End,*float64)

	// (Requited) Start of the range.
	// +kubebuilder:validation:Optional
	start?: null | float64 @go(Start,*float64)
}

#PathInitParameters: {
	// Header value sent by the client must match the specified value exactly.
	exact?: null | string @go(Exact,*string)

	// Header value sent by the client must include the specified characters.
	regex?: null | string @go(Regex,*string)
}

#PathObservation: {
	// Header value sent by the client must match the specified value exactly.
	exact?: null | string @go(Exact,*string)

	// Header value sent by the client must include the specified characters.
	regex?: null | string @go(Regex,*string)
}

#PathParameters: {
	// Header value sent by the client must match the specified value exactly.
	// +kubebuilder:validation:Optional
	exact?: null | string @go(Exact,*string)

	// Header value sent by the client must include the specified characters.
	// +kubebuilder:validation:Optional
	regex?: null | string @go(Regex,*string)
}

#PrefixInitParameters: {
	// Default prefix used to replace the incoming route prefix when rewritten. Valid values: ENABLED, DISABLED.
	defaultPrefix?: null | string @go(DefaultPrefix,*string)

	// Value used to replace the incoming route prefix when rewritten.
	value?: null | string @go(Value,*string)
}

#PrefixObservation: {
	// Default prefix used to replace the incoming route prefix when rewritten. Valid values: ENABLED, DISABLED.
	defaultPrefix?: null | string @go(DefaultPrefix,*string)

	// Value used to replace the incoming route prefix when rewritten.
	value?: null | string @go(Value,*string)
}

#PrefixParameters: {
	// Default prefix used to replace the incoming route prefix when rewritten. Valid values: ENABLED, DISABLED.
	// +kubebuilder:validation:Optional
	defaultPrefix?: null | string @go(DefaultPrefix,*string)

	// Value used to replace the incoming route prefix when rewritten.
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

#QueryParameterInitParameters: {
	// Criteria for determining a request match.
	match?: [...#QueryParameterMatchInitParameters] @go(Match,[]QueryParameterMatchInitParameters)

	// Name to use for the gateway route. Must be between 1 and 255 characters in length.
	name?: null | string @go(Name,*string)
}

#QueryParameterMatchInitParameters: {
	// Header value sent by the client must match the specified value exactly.
	exact?: null | string @go(Exact,*string)
}

#QueryParameterMatchObservation: {
	// Header value sent by the client must match the specified value exactly.
	exact?: null | string @go(Exact,*string)
}

#QueryParameterMatchParameters: {
	// Header value sent by the client must match the specified value exactly.
	// +kubebuilder:validation:Optional
	exact?: null | string @go(Exact,*string)
}

#QueryParameterObservation: {
	// Criteria for determining a request match.
	match?: [...#QueryParameterMatchObservation] @go(Match,[]QueryParameterMatchObservation)

	// Name to use for the gateway route. Must be between 1 and 255 characters in length.
	name?: null | string @go(Name,*string)
}

#QueryParameterParameters: {
	// Criteria for determining a request match.
	// +kubebuilder:validation:Optional
	match?: [...#QueryParameterMatchParameters] @go(Match,[]QueryParameterMatchParameters)

	// Name to use for the gateway route. Must be between 1 and 255 characters in length.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)
}

#RangeInitParameters: {
	// End of the range.
	end?: null | float64 @go(End,*float64)

	// (Requited) Start of the range.
	start?: null | float64 @go(Start,*float64)
}

#RangeObservation: {
	// End of the range.
	end?: null | float64 @go(End,*float64)

	// (Requited) Start of the range.
	start?: null | float64 @go(Start,*float64)
}

#RangeParameters: {
	// End of the range.
	// +kubebuilder:validation:Optional
	end?: null | float64 @go(End,*float64)

	// (Requited) Start of the range.
	// +kubebuilder:validation:Optional
	start?: null | float64 @go(Start,*float64)
}

#RewriteHostnameInitParameters: {
	// Default target host name to write to. Valid values: ENABLED, DISABLED.
	defaultTargetHostname?: null | string @go(DefaultTargetHostname,*string)
}

#RewriteHostnameObservation: {
	// Default target host name to write to. Valid values: ENABLED, DISABLED.
	defaultTargetHostname?: null | string @go(DefaultTargetHostname,*string)
}

#RewriteHostnameParameters: {
	// Default target host name to write to. Valid values: ENABLED, DISABLED.
	// +kubebuilder:validation:Optional
	defaultTargetHostname?: null | string @go(DefaultTargetHostname,*string)
}

#RewriteInitParameters: {
	// Host name to rewrite.
	hostname?: [...#HostnameInitParameters] @go(Hostname,[]HostnameInitParameters)

	// Specified beginning characters to rewrite.
	prefix?: [...#PrefixInitParameters] @go(Prefix,[]PrefixInitParameters)
}

#RewriteObservation: {
	// Host name to rewrite.
	hostname?: [...#HostnameObservation] @go(Hostname,[]HostnameObservation)

	// Specified beginning characters to rewrite.
	prefix?: [...#PrefixObservation] @go(Prefix,[]PrefixObservation)
}

#RewriteParameters: {
	// Host name to rewrite.
	// +kubebuilder:validation:Optional
	hostname?: [...#HostnameParameters] @go(Hostname,[]HostnameParameters)

	// Specified beginning characters to rewrite.
	// +kubebuilder:validation:Optional
	prefix?: [...#PrefixParameters] @go(Prefix,[]PrefixParameters)
}

#RewritePrefixInitParameters: {
	// Default prefix used to replace the incoming route prefix when rewritten. Valid values: ENABLED, DISABLED.
	defaultPrefix?: null | string @go(DefaultPrefix,*string)

	// Value used to replace the incoming route prefix when rewritten.
	value?: null | string @go(Value,*string)
}

#RewritePrefixObservation: {
	// Default prefix used to replace the incoming route prefix when rewritten. Valid values: ENABLED, DISABLED.
	defaultPrefix?: null | string @go(DefaultPrefix,*string)

	// Value used to replace the incoming route prefix when rewritten.
	value?: null | string @go(Value,*string)
}

#RewritePrefixParameters: {
	// Default prefix used to replace the incoming route prefix when rewritten. Valid values: ENABLED, DISABLED.
	// +kubebuilder:validation:Optional
	defaultPrefix?: null | string @go(DefaultPrefix,*string)

	// Value used to replace the incoming route prefix when rewritten.
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

#SpecInitParameters: {
	// Specification of a gRPC gateway route.
	grpcRoute?: [...#GRPCRouteInitParameters] @go(GRPCRoute,[]GRPCRouteInitParameters)

	// Specification of an HTTP gateway route.
	httpRoute?: [...#HTTPRouteInitParameters] @go(HTTPRoute,[]HTTPRouteInitParameters)

	// Specification of an HTTP/2 gateway route.
	http2Route?: [...#Http2RouteInitParameters] @go(Http2Route,[]Http2RouteInitParameters)

	// Priority for the gateway route, between 0 and 1000.
	priority?: null | float64 @go(Priority,*float64)
}

#SpecObservation: {
	// Specification of a gRPC gateway route.
	grpcRoute?: [...#GRPCRouteObservation] @go(GRPCRoute,[]GRPCRouteObservation)

	// Specification of an HTTP gateway route.
	httpRoute?: [...#HTTPRouteObservation] @go(HTTPRoute,[]HTTPRouteObservation)

	// Specification of an HTTP/2 gateway route.
	http2Route?: [...#Http2RouteObservation] @go(Http2Route,[]Http2RouteObservation)

	// Priority for the gateway route, between 0 and 1000.
	priority?: null | float64 @go(Priority,*float64)
}

#SpecParameters: {
	// Specification of a gRPC gateway route.
	// +kubebuilder:validation:Optional
	grpcRoute?: [...#GRPCRouteParameters] @go(GRPCRoute,[]GRPCRouteParameters)

	// Specification of an HTTP gateway route.
	// +kubebuilder:validation:Optional
	httpRoute?: [...#HTTPRouteParameters] @go(HTTPRoute,[]HTTPRouteParameters)

	// Specification of an HTTP/2 gateway route.
	// +kubebuilder:validation:Optional
	http2Route?: [...#Http2RouteParameters] @go(Http2Route,[]Http2RouteParameters)

	// Priority for the gateway route, between 0 and 1000.
	// +kubebuilder:validation:Optional
	priority?: null | float64 @go(Priority,*float64)
}

#TargetInitParameters: {
	// The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
	port?: null | float64 @go(Port,*float64)

	// Virtual service gateway route target.
	virtualService?: [...#VirtualServiceInitParameters] @go(VirtualService,[]VirtualServiceInitParameters)
}

#TargetObservation: {
	// The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
	port?: null | float64 @go(Port,*float64)

	// Virtual service gateway route target.
	virtualService?: [...#VirtualServiceObservation] @go(VirtualService,[]VirtualServiceObservation)
}

#TargetParameters: {
	// The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
	// +kubebuilder:validation:Optional
	port?: null | float64 @go(Port,*float64)

	// Virtual service gateway route target.
	// +kubebuilder:validation:Optional
	virtualService: [...#VirtualServiceParameters] @go(VirtualService,[]VirtualServiceParameters)
}

#TargetVirtualServiceInitParameters: {
	// Name of the virtual service that traffic is routed to. Must be between 1 and 255 characters in length.
	virtualServiceName?: null | string @go(VirtualServiceName,*string)
}

#TargetVirtualServiceObservation: {
	// Name of the virtual service that traffic is routed to. Must be between 1 and 255 characters in length.
	virtualServiceName?: null | string @go(VirtualServiceName,*string)
}

#TargetVirtualServiceParameters: {
	// Name of the virtual service that traffic is routed to. Must be between 1 and 255 characters in length.
	// +kubebuilder:validation:Optional
	virtualServiceName?: null | string @go(VirtualServiceName,*string)
}

#VirtualServiceInitParameters: {
	// Name of the virtual service that traffic is routed to. Must be between 1 and 255 characters in length.
	virtualServiceName?: null | string @go(VirtualServiceName,*string)
}

#VirtualServiceObservation: {
	// Name of the virtual service that traffic is routed to. Must be between 1 and 255 characters in length.
	virtualServiceName?: null | string @go(VirtualServiceName,*string)
}

#VirtualServiceParameters: {
	// Name of the virtual service that traffic is routed to. Must be between 1 and 255 characters in length.
	// +kubebuilder:validation:Optional
	virtualServiceName?: null | string @go(VirtualServiceName,*string)
}

// GatewayRouteSpec defines the desired state of GatewayRoute
#GatewayRouteSpec: {
	v1.#ResourceSpec
	forProvider: #GatewayRouteParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #GatewayRouteInitParameters @go(InitProvider)
}

// GatewayRouteStatus defines the observed state of GatewayRoute.
#GatewayRouteStatus: {
	v1.#ResourceStatus
	atProvider?: #GatewayRouteObservation @go(AtProvider)
}

// GatewayRoute is the Schema for the GatewayRoutes API. Provides an AWS App Mesh gateway route resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#GatewayRoute: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.meshName) || (has(self.initProvider) && has(self.initProvider.meshName))",message="spec.forProvider.meshName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.spec) || (has(self.initProvider) && has(self.initProvider.spec))",message="spec.forProvider.spec is a required parameter"
	spec:    #GatewayRouteSpec   @go(Spec)
	status?: #GatewayRouteStatus @go(Status)
}

// GatewayRouteList contains a list of GatewayRoutes
#GatewayRouteList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#GatewayRoute] @go(Items,[]GatewayRoute)
}
