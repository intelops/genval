// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/appmesh/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#SpecListenerPortMappingInitParameters: {
	// Port used for the port mapping.
	port?: null | float64 @go(Port,*float64)

	// Protocol used for the port mapping. Valid values are http,http2, tcp and grpc.
	protocol?: null | string @go(Protocol,*string)
}

#SpecListenerPortMappingObservation: {
	// Port used for the port mapping.
	port?: null | float64 @go(Port,*float64)

	// Protocol used for the port mapping. Valid values are http,http2, tcp and grpc.
	protocol?: null | string @go(Protocol,*string)
}

#SpecListenerPortMappingParameters: {
	// Port used for the port mapping.
	// +kubebuilder:validation:Optional
	port?: null | float64 @go(Port,*float64)

	// Protocol used for the port mapping. Valid values are http,http2, tcp and grpc.
	// +kubebuilder:validation:Optional
	protocol?: null | string @go(Protocol,*string)
}

#VirtualRouterInitParameters: {
	// AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
	meshOwner?: null | string @go(MeshOwner,*string)

	// Name to use for the virtual router. Must be between 1 and 255 characters in length.
	name?: null | string @go(Name,*string)

	// Virtual router specification to apply.
	spec?: [...#VirtualRouterSpecInitParameters] @go(Spec,[]VirtualRouterSpecInitParameters)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#VirtualRouterObservation: {
	// ARN of the virtual router.
	arn?: null | string @go(Arn,*string)

	// Creation date of the virtual router.
	createdDate?: null | string @go(CreatedDate,*string)

	// ID of the virtual router.
	id?: null | string @go(ID,*string)

	// Last update date of the virtual router.
	lastUpdatedDate?: null | string @go(LastUpdatedDate,*string)

	// Name of the service mesh in which to create the virtual router. Must be between 1 and 255 characters in length.
	meshName?: null | string @go(MeshName,*string)

	// AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
	meshOwner?: null | string @go(MeshOwner,*string)

	// Name to use for the virtual router. Must be between 1 and 255 characters in length.
	name?: null | string @go(Name,*string)

	// Resource owner's AWS account ID.
	resourceOwner?: null | string @go(ResourceOwner,*string)

	// Virtual router specification to apply.
	spec?: [...#VirtualRouterSpecObservation] @go(Spec,[]VirtualRouterSpecObservation)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#VirtualRouterParameters: {
	// Name of the service mesh in which to create the virtual router. Must be between 1 and 255 characters in length.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/appmesh/v1beta1.Mesh
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	meshName?: null | string @go(MeshName,*string)

	// Reference to a Mesh in appmesh to populate meshName.
	// +kubebuilder:validation:Optional
	meshNameRef?: null | v1.#Reference @go(MeshNameRef,*v1.Reference)

	// Selector for a Mesh in appmesh to populate meshName.
	// +kubebuilder:validation:Optional
	meshNameSelector?: null | v1.#Selector @go(MeshNameSelector,*v1.Selector)

	// AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
	// +kubebuilder:validation:Optional
	meshOwner?: null | string @go(MeshOwner,*string)

	// Name to use for the virtual router. Must be between 1 and 255 characters in length.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Virtual router specification to apply.
	// +kubebuilder:validation:Optional
	spec?: [...#VirtualRouterSpecParameters] @go(Spec,[]VirtualRouterSpecParameters)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#VirtualRouterSpecInitParameters: {
	// configuration block to the spec argument.
	listener?: [...#VirtualRouterSpecListenerInitParameters] @go(Listener,[]VirtualRouterSpecListenerInitParameters)
}

#VirtualRouterSpecListenerInitParameters: {
	// Port mapping information for the listener.
	portMapping?: [...#SpecListenerPortMappingInitParameters] @go(PortMapping,[]SpecListenerPortMappingInitParameters)
}

#VirtualRouterSpecListenerObservation: {
	// Port mapping information for the listener.
	portMapping?: [...#SpecListenerPortMappingObservation] @go(PortMapping,[]SpecListenerPortMappingObservation)
}

#VirtualRouterSpecListenerParameters: {
	// Port mapping information for the listener.
	// +kubebuilder:validation:Optional
	portMapping: [...#SpecListenerPortMappingParameters] @go(PortMapping,[]SpecListenerPortMappingParameters)
}

#VirtualRouterSpecObservation: {
	// configuration block to the spec argument.
	listener?: [...#VirtualRouterSpecListenerObservation] @go(Listener,[]VirtualRouterSpecListenerObservation)
}

#VirtualRouterSpecParameters: {
	// configuration block to the spec argument.
	// +kubebuilder:validation:Optional
	listener?: [...#VirtualRouterSpecListenerParameters] @go(Listener,[]VirtualRouterSpecListenerParameters)
}

// VirtualRouterSpec defines the desired state of VirtualRouter
#VirtualRouterSpec: {
	v1.#ResourceSpec
	forProvider: #VirtualRouterParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #VirtualRouterInitParameters @go(InitProvider)
}

// VirtualRouterStatus defines the observed state of VirtualRouter.
#VirtualRouterStatus: {
	v1.#ResourceStatus
	atProvider?: #VirtualRouterObservation @go(AtProvider)
}

// VirtualRouter is the Schema for the VirtualRouters API. Provides an AWS App Mesh virtual router resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#VirtualRouter: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.spec) || (has(self.initProvider) && has(self.initProvider.spec))",message="spec.forProvider.spec is a required parameter"
	spec:    #VirtualRouterSpec   @go(Spec)
	status?: #VirtualRouterStatus @go(Status)
}

// VirtualRouterList contains a list of VirtualRouters
#VirtualRouterList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#VirtualRouter] @go(Items,[]VirtualRouter)
}
