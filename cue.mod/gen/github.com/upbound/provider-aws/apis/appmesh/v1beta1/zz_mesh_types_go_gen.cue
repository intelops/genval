// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/appmesh/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#EgressFilterInitParameters: {
	// Egress filter type. By default, the type is DROP_ALL.
	// Valid values are ALLOW_ALL and DROP_ALL.
	type?: null | string @go(Type,*string)
}

#EgressFilterObservation: {
	// Egress filter type. By default, the type is DROP_ALL.
	// Valid values are ALLOW_ALL and DROP_ALL.
	type?: null | string @go(Type,*string)
}

#EgressFilterParameters: {
	// Egress filter type. By default, the type is DROP_ALL.
	// Valid values are ALLOW_ALL and DROP_ALL.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

#MeshInitParameters: {
	// Service mesh specification to apply.
	spec?: [...#MeshSpecInitParameters] @go(Spec,[]MeshSpecInitParameters)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#MeshObservation: {
	// ARN of the service mesh.
	arn?: null | string @go(Arn,*string)

	// Creation date of the service mesh.
	createdDate?: null | string @go(CreatedDate,*string)

	// ID of the service mesh.
	id?: null | string @go(ID,*string)

	// Last update date of the service mesh.
	lastUpdatedDate?: null | string @go(LastUpdatedDate,*string)

	// AWS account ID of the service mesh's owner.
	meshOwner?: null | string @go(MeshOwner,*string)

	// Resource owner's AWS account ID.
	resourceOwner?: null | string @go(ResourceOwner,*string)

	// Service mesh specification to apply.
	spec?: [...#MeshSpecObservation] @go(Spec,[]MeshSpecObservation)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#MeshParameters: {
	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Service mesh specification to apply.
	// +kubebuilder:validation:Optional
	spec?: [...#MeshSpecParameters] @go(Spec,[]MeshSpecParameters)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#MeshSpecInitParameters: {
	// Egress filter rules for the service mesh.
	egressFilter?: [...#EgressFilterInitParameters] @go(EgressFilter,[]EgressFilterInitParameters)
}

#MeshSpecObservation: {
	// Egress filter rules for the service mesh.
	egressFilter?: [...#EgressFilterObservation] @go(EgressFilter,[]EgressFilterObservation)
}

#MeshSpecParameters: {
	// Egress filter rules for the service mesh.
	// +kubebuilder:validation:Optional
	egressFilter?: [...#EgressFilterParameters] @go(EgressFilter,[]EgressFilterParameters)
}

// MeshSpec defines the desired state of Mesh
#MeshSpec: {
	v1.#ResourceSpec
	forProvider: #MeshParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #MeshInitParameters @go(InitProvider)
}

// MeshStatus defines the observed state of Mesh.
#MeshStatus: {
	v1.#ResourceStatus
	atProvider?: #MeshObservation @go(AtProvider)
}

// Mesh is the Schema for the Meshs API. Provides an AWS App Mesh service mesh resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Mesh: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec:      #MeshSpec          @go(Spec)
	status?:   #MeshStatus        @go(Status)
}

// MeshList contains a list of Meshs
#MeshList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Mesh] @go(Items,[]Mesh)
}
