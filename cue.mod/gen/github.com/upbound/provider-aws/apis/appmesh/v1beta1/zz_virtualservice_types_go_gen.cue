// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/appmesh/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#ProviderInitParameters: {
	// Virtual node associated with a virtual service.
	virtualNode?: [...#ProviderVirtualNodeInitParameters] @go(VirtualNode,[]ProviderVirtualNodeInitParameters)

	// Virtual router associated with a virtual service.
	virtualRouter?: [...#ProviderVirtualRouterInitParameters] @go(VirtualRouter,[]ProviderVirtualRouterInitParameters)
}

#ProviderObservation: {
	// Virtual node associated with a virtual service.
	virtualNode?: [...#ProviderVirtualNodeObservation] @go(VirtualNode,[]ProviderVirtualNodeObservation)

	// Virtual router associated with a virtual service.
	virtualRouter?: [...#ProviderVirtualRouterObservation] @go(VirtualRouter,[]ProviderVirtualRouterObservation)
}

#ProviderParameters: {
	// Virtual node associated with a virtual service.
	// +kubebuilder:validation:Optional
	virtualNode?: [...#ProviderVirtualNodeParameters] @go(VirtualNode,[]ProviderVirtualNodeParameters)

	// Virtual router associated with a virtual service.
	// +kubebuilder:validation:Optional
	virtualRouter?: [...#ProviderVirtualRouterParameters] @go(VirtualRouter,[]ProviderVirtualRouterParameters)
}

#ProviderVirtualNodeInitParameters: {
}

#ProviderVirtualNodeObservation: {
	// Name of the virtual node that is acting as a service provider. Must be between 1 and 255 characters in length.
	virtualNodeName?: null | string @go(VirtualNodeName,*string)
}

#ProviderVirtualNodeParameters: {
	// Name of the virtual node that is acting as a service provider. Must be between 1 and 255 characters in length.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/appmesh/v1beta1.VirtualNode
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("name",false)
	// +kubebuilder:validation:Optional
	virtualNodeName?: null | string @go(VirtualNodeName,*string)

	// Reference to a VirtualNode in appmesh to populate virtualNodeName.
	// +kubebuilder:validation:Optional
	virtualNodeNameRef?: null | v1.#Reference @go(VirtualNodeNameRef,*v1.Reference)

	// Selector for a VirtualNode in appmesh to populate virtualNodeName.
	// +kubebuilder:validation:Optional
	virtualNodeNameSelector?: null | v1.#Selector @go(VirtualNodeNameSelector,*v1.Selector)
}

#ProviderVirtualRouterInitParameters: {
}

#ProviderVirtualRouterObservation: {
	// Name of the virtual router that is acting as a service provider. Must be between 1 and 255 characters in length.
	virtualRouterName?: null | string @go(VirtualRouterName,*string)
}

#ProviderVirtualRouterParameters: {
	// Name of the virtual router that is acting as a service provider. Must be between 1 and 255 characters in length.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/appmesh/v1beta1.VirtualRouter
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("name",false)
	// +kubebuilder:validation:Optional
	virtualRouterName?: null | string @go(VirtualRouterName,*string)

	// Reference to a VirtualRouter in appmesh to populate virtualRouterName.
	// +kubebuilder:validation:Optional
	virtualRouterNameRef?: null | v1.#Reference @go(VirtualRouterNameRef,*v1.Reference)

	// Selector for a VirtualRouter in appmesh to populate virtualRouterName.
	// +kubebuilder:validation:Optional
	virtualRouterNameSelector?: null | v1.#Selector @go(VirtualRouterNameSelector,*v1.Selector)
}

#VirtualServiceInitParameters_2: {
	// AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
	meshOwner?: null | string @go(MeshOwner,*string)

	// Name to use for the virtual service. Must be between 1 and 255 characters in length.
	name?: null | string @go(Name,*string)

	// Virtual service specification to apply.
	spec?: [...#VirtualServiceSpecInitParameters] @go(Spec,[]VirtualServiceSpecInitParameters)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#VirtualServiceObservation_2: {
	// ARN of the virtual service.
	arn?: null | string @go(Arn,*string)

	// Creation date of the virtual service.
	createdDate?: null | string @go(CreatedDate,*string)

	// ID of the virtual service.
	id?: null | string @go(ID,*string)

	// Last update date of the virtual service.
	lastUpdatedDate?: null | string @go(LastUpdatedDate,*string)

	// Name of the service mesh in which to create the virtual service. Must be between 1 and 255 characters in length.
	meshName?: null | string @go(MeshName,*string)

	// AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
	meshOwner?: null | string @go(MeshOwner,*string)

	// Name to use for the virtual service. Must be between 1 and 255 characters in length.
	name?: null | string @go(Name,*string)

	// Resource owner's AWS account ID.
	resourceOwner?: null | string @go(ResourceOwner,*string)

	// Virtual service specification to apply.
	spec?: [...#VirtualServiceSpecObservation] @go(Spec,[]VirtualServiceSpecObservation)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#VirtualServiceParameters_2: {
	// Name of the service mesh in which to create the virtual service. Must be between 1 and 255 characters in length.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/appmesh/v1beta1.Mesh
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	meshName?: null | string @go(MeshName,*string)

	// Reference to a Mesh in appmesh to populate meshName.
	// +kubebuilder:validation:Optional
	meshNameRef?: null | v1.#Reference @go(MeshNameRef,*v1.Reference)

	// Selector for a Mesh in appmesh to populate meshName.
	// +kubebuilder:validation:Optional
	meshNameSelector?: null | v1.#Selector @go(MeshNameSelector,*v1.Selector)

	// AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
	// +kubebuilder:validation:Optional
	meshOwner?: null | string @go(MeshOwner,*string)

	// Name to use for the virtual service. Must be between 1 and 255 characters in length.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Virtual service specification to apply.
	// +kubebuilder:validation:Optional
	spec?: [...#VirtualServiceSpecParameters] @go(Spec,[]VirtualServiceSpecParameters)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#VirtualServiceSpecInitParameters: {
	// App Mesh object that is acting as the provider for a virtual service. You can specify a single virtual node or virtual router.
	provider?: [...#ProviderInitParameters] @go(Provider,[]ProviderInitParameters)
}

#VirtualServiceSpecObservation: {
	// App Mesh object that is acting as the provider for a virtual service. You can specify a single virtual node or virtual router.
	provider?: [...#ProviderObservation] @go(Provider,[]ProviderObservation)
}

#VirtualServiceSpecParameters: {
	// App Mesh object that is acting as the provider for a virtual service. You can specify a single virtual node or virtual router.
	// +kubebuilder:validation:Optional
	provider?: [...#ProviderParameters] @go(Provider,[]ProviderParameters)
}

// VirtualServiceSpec defines the desired state of VirtualService
#VirtualServiceSpec: {
	v1.#ResourceSpec
	forProvider: #VirtualServiceParameters_2 @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #VirtualServiceInitParameters_2 @go(InitProvider)
}

// VirtualServiceStatus defines the observed state of VirtualService.
#VirtualServiceStatus: {
	v1.#ResourceStatus
	atProvider?: #VirtualServiceObservation_2 @go(AtProvider)
}

// VirtualService is the Schema for the VirtualServices API. Provides an AWS App Mesh virtual service resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#VirtualService: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.spec) || (has(self.initProvider) && has(self.initProvider.spec))",message="spec.forProvider.spec is a required parameter"
	spec:    #VirtualServiceSpec   @go(Spec)
	status?: #VirtualServiceStatus @go(Status)
}

// VirtualServiceList contains a list of VirtualServices
#VirtualServiceList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#VirtualService] @go(Items,[]VirtualService)
}
