// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/ssoadmin/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#PermissionSetInlinePolicyInitParameters: {
	// The IAM inline policy to attach to a Permission Set.
	inlinePolicy?: null | string @go(InlinePolicy,*string)
}

#PermissionSetInlinePolicyObservation: {
	// The Amazon Resource Names (ARNs) of the Permission Set and SSO Instance, separated by a comma (,).
	id?: null | string @go(ID,*string)

	// The IAM inline policy to attach to a Permission Set.
	inlinePolicy?: null | string @go(InlinePolicy,*string)

	// The Amazon Resource Name (ARN) of the SSO Instance under which the operation will be executed.
	instanceArn?: null | string @go(InstanceArn,*string)

	// The Amazon Resource Name (ARN) of the Permission Set.
	permissionSetArn?: null | string @go(PermissionSetArn,*string)
}

#PermissionSetInlinePolicyParameters: {
	// The IAM inline policy to attach to a Permission Set.
	// +kubebuilder:validation:Optional
	inlinePolicy?: null | string @go(InlinePolicy,*string)

	// The Amazon Resource Name (ARN) of the SSO Instance under which the operation will be executed.
	// +kubebuilder:validation:Required
	instanceArn?: null | string @go(InstanceArn,*string)

	// The Amazon Resource Name (ARN) of the Permission Set.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ssoadmin/v1beta1.PermissionSet
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	permissionSetArn?: null | string @go(PermissionSetArn,*string)

	// Reference to a PermissionSet in ssoadmin to populate permissionSetArn.
	// +kubebuilder:validation:Optional
	permissionSetArnRef?: null | v1.#Reference @go(PermissionSetArnRef,*v1.Reference)

	// Selector for a PermissionSet in ssoadmin to populate permissionSetArn.
	// +kubebuilder:validation:Optional
	permissionSetArnSelector?: null | v1.#Selector @go(PermissionSetArnSelector,*v1.Selector)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)
}

// PermissionSetInlinePolicySpec defines the desired state of PermissionSetInlinePolicy
#PermissionSetInlinePolicySpec: {
	v1.#ResourceSpec
	forProvider: #PermissionSetInlinePolicyParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #PermissionSetInlinePolicyInitParameters @go(InitProvider)
}

// PermissionSetInlinePolicyStatus defines the observed state of PermissionSetInlinePolicy.
#PermissionSetInlinePolicyStatus: {
	v1.#ResourceStatus
	atProvider?: #PermissionSetInlinePolicyObservation @go(AtProvider)
}

// PermissionSetInlinePolicy is the Schema for the PermissionSetInlinePolicys API. Manages an IAM inline policy for a Single Sign-On (SSO) Permission Set
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#PermissionSetInlinePolicy: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.inlinePolicy) || (has(self.initProvider) && has(self.initProvider.inlinePolicy))",message="spec.forProvider.inlinePolicy is a required parameter"
	spec:    #PermissionSetInlinePolicySpec   @go(Spec)
	status?: #PermissionSetInlinePolicyStatus @go(Status)
}

// PermissionSetInlinePolicyList contains a list of PermissionSetInlinePolicys
#PermissionSetInlinePolicyList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#PermissionSetInlinePolicy] @go(Items,[]PermissionSetInlinePolicy)
}
