// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/guardduty/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#MemberInitParameters: {
	// Boolean whether an email notification is sent to the accounts. Defaults to false.
	disableEmailNotification?: null | bool @go(DisableEmailNotification,*bool)

	// Email address for member account.
	email?: null | string @go(Email,*string)

	// Message for invitation.
	invitationMessage?: null | string @go(InvitationMessage,*string)

	// Boolean whether to invite the account to GuardDuty as a member. Defaults to false.
	invite?: null | bool @go(Invite,*bool)
}

#MemberObservation: {
	// AWS account ID for member account.
	accountId?: null | string @go(AccountID,*string)

	// The detector ID of the GuardDuty account where you want to create member accounts.
	detectorId?: null | string @go(DetectorID,*string)

	// Boolean whether an email notification is sent to the accounts. Defaults to false.
	disableEmailNotification?: null | bool @go(DisableEmailNotification,*bool)

	// Email address for member account.
	email?: null | string @go(Email,*string)

	// The ID of the GuardDuty member
	id?: null | string @go(ID,*string)

	// Message for invitation.
	invitationMessage?: null | string @go(InvitationMessage,*string)

	// Boolean whether to invite the account to GuardDuty as a member. Defaults to false.
	invite?: null | bool @go(Invite,*bool)

	// The status of the relationship between the member account and its primary account. More information can be found in Amazon GuardDuty API Reference.
	relationshipStatus?: null | string @go(RelationshipStatus,*string)
}

#MemberParameters: {
	// AWS account ID for member account.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/guardduty/v1beta1.Detector
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("account_id",true)
	// +kubebuilder:validation:Optional
	accountId?: null | string @go(AccountID,*string)

	// Reference to a Detector in guardduty to populate accountId.
	// +kubebuilder:validation:Optional
	accountIdRef?: null | v1.#Reference @go(AccountIDRef,*v1.Reference)

	// Selector for a Detector in guardduty to populate accountId.
	// +kubebuilder:validation:Optional
	accountIdSelector?: null | v1.#Selector @go(AccountIDSelector,*v1.Selector)

	// The detector ID of the GuardDuty account where you want to create member accounts.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/guardduty/v1beta1.Detector
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	detectorId?: null | string @go(DetectorID,*string)

	// Reference to a Detector in guardduty to populate detectorId.
	// +kubebuilder:validation:Optional
	detectorIdRef?: null | v1.#Reference @go(DetectorIDRef,*v1.Reference)

	// Selector for a Detector in guardduty to populate detectorId.
	// +kubebuilder:validation:Optional
	detectorIdSelector?: null | v1.#Selector @go(DetectorIDSelector,*v1.Selector)

	// Boolean whether an email notification is sent to the accounts. Defaults to false.
	// +kubebuilder:validation:Optional
	disableEmailNotification?: null | bool @go(DisableEmailNotification,*bool)

	// Email address for member account.
	// +kubebuilder:validation:Optional
	email?: null | string @go(Email,*string)

	// Message for invitation.
	// +kubebuilder:validation:Optional
	invitationMessage?: null | string @go(InvitationMessage,*string)

	// Boolean whether to invite the account to GuardDuty as a member. Defaults to false.
	// +kubebuilder:validation:Optional
	invite?: null | bool @go(Invite,*bool)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)
}

// MemberSpec defines the desired state of Member
#MemberSpec: {
	v1.#ResourceSpec
	forProvider: #MemberParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #MemberInitParameters @go(InitProvider)
}

// MemberStatus defines the observed state of Member.
#MemberStatus: {
	v1.#ResourceStatus
	atProvider?: #MemberObservation @go(AtProvider)
}

// Member is the Schema for the Members API. Provides a resource to manage a GuardDuty member
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Member: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.email) || (has(self.initProvider) && has(self.initProvider.email))",message="spec.forProvider.email is a required parameter"
	spec:    #MemberSpec   @go(Spec)
	status?: #MemberStatus @go(Status)
}

// MemberList contains a list of Members
#MemberList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Member] @go(Items,[]Member)
}
