// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/servicediscovery/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#PrivateDNSNamespaceInitParameters: {
	// The description that you specify for the namespace when you create it.
	description?: null | string @go(Description,*string)

	// The name of the namespace.
	name?: null | string @go(Name,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#PrivateDNSNamespaceObservation: {
	// The ARN that Amazon Route 53 assigns to the namespace when you create it.
	arn?: null | string @go(Arn,*string)

	// The description that you specify for the namespace when you create it.
	description?: null | string @go(Description,*string)

	// The ID for the hosted zone that Amazon Route 53 creates when you create a namespace.
	hostedZone?: null | string @go(HostedZone,*string)

	// The ID of a namespace.
	id?: null | string @go(ID,*string)

	// The name of the namespace.
	name?: null | string @go(Name,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// The ID of VPC that you want to associate the namespace with.
	vpc?: null | string @go(VPC,*string)
}

#PrivateDNSNamespaceParameters: {
	// The description that you specify for the namespace when you create it.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// The name of the namespace.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// The ID of VPC that you want to associate the namespace with.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.VPC
	// +kubebuilder:validation:Optional
	vpc?: null | string @go(VPC,*string)

	// Reference to a VPC in ec2 to populate vpc.
	// +kubebuilder:validation:Optional
	vpcRef?: null | v1.#Reference @go(VPCRef,*v1.Reference)

	// Selector for a VPC in ec2 to populate vpc.
	// +kubebuilder:validation:Optional
	vpcSelector?: null | v1.#Selector @go(VPCSelector,*v1.Selector)
}

// PrivateDNSNamespaceSpec defines the desired state of PrivateDNSNamespace
#PrivateDNSNamespaceSpec: {
	v1.#ResourceSpec
	forProvider: #PrivateDNSNamespaceParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #PrivateDNSNamespaceInitParameters @go(InitProvider)
}

// PrivateDNSNamespaceStatus defines the observed state of PrivateDNSNamespace.
#PrivateDNSNamespaceStatus: {
	v1.#ResourceStatus
	atProvider?: #PrivateDNSNamespaceObservation @go(AtProvider)
}

// PrivateDNSNamespace is the Schema for the PrivateDNSNamespaces API. Provides a Service Discovery Private DNS Namespace resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#PrivateDNSNamespace: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	spec:    #PrivateDNSNamespaceSpec   @go(Spec)
	status?: #PrivateDNSNamespaceStatus @go(Status)
}

// PrivateDNSNamespaceList contains a list of PrivateDNSNamespaces
#PrivateDNSNamespaceList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#PrivateDNSNamespace] @go(Items,[]PrivateDNSNamespace)
}
