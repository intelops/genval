// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/cloudwatchevents/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#ConditionInitParameters: {
	// Key for the condition. Valid values: aws:PrincipalOrgID.
	key?: null | string @go(Key,*string)

	// Type of condition. Value values: StringEquals.
	type?: null | string @go(Type,*string)
}

#ConditionObservation: {
	// Key for the condition. Valid values: aws:PrincipalOrgID.
	key?: null | string @go(Key,*string)

	// Type of condition. Value values: StringEquals.
	type?: null | string @go(Type,*string)

	// Value for the key.
	value?: null | string @go(Value,*string)
}

#ConditionParameters: {
	// Key for the condition. Valid values: aws:PrincipalOrgID.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)

	// Type of condition. Value values: StringEquals.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)

	// Value for the key.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/organizations/v1beta1.Organization
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)

	// Reference to a Organization in organizations to populate value.
	// +kubebuilder:validation:Optional
	valueRef?: null | v1.#Reference @go(ValueRef,*v1.Reference)

	// Selector for a Organization in organizations to populate value.
	// +kubebuilder:validation:Optional
	valueSelector?: null | v1.#Selector @go(ValueSelector,*v1.Selector)
}

#PermissionInitParameters: {
	// The action that you are enabling the other account to perform. Defaults to events:PutEvents.
	action?: null | string @go(Action,*string)

	// Configuration block to limit the event bus permissions you are granting to only accounts that fulfill the condition. Specified below.
	condition?: [...#ConditionInitParameters] @go(Condition,[]ConditionInitParameters)

	// The 12-digit AWS account ID that you are permitting to put events to your default event bus. Specify * to permit any account to put events to your default event bus, optionally limited by condition.
	principal?: null | string @go(Principal,*string)

	// An identifier string for the external account that you are granting permissions to.
	statementId?: null | string @go(StatementID,*string)
}

#PermissionObservation: {
	// The action that you are enabling the other account to perform. Defaults to events:PutEvents.
	action?: null | string @go(Action,*string)

	// Configuration block to limit the event bus permissions you are granting to only accounts that fulfill the condition. Specified below.
	condition?: [...#ConditionObservation] @go(Condition,[]ConditionObservation)

	// The name of the event bus to set the permissions on.
	// If you omit this, the permissions are set on the default event bus.
	eventBusName?: null | string @go(EventBusName,*string)

	// The statement ID of the EventBridge permission.
	id?: null | string @go(ID,*string)

	// The 12-digit AWS account ID that you are permitting to put events to your default event bus. Specify * to permit any account to put events to your default event bus, optionally limited by condition.
	principal?: null | string @go(Principal,*string)

	// An identifier string for the external account that you are granting permissions to.
	statementId?: null | string @go(StatementID,*string)
}

#PermissionParameters: {
	// The action that you are enabling the other account to perform. Defaults to events:PutEvents.
	// +kubebuilder:validation:Optional
	action?: null | string @go(Action,*string)

	// Configuration block to limit the event bus permissions you are granting to only accounts that fulfill the condition. Specified below.
	// +kubebuilder:validation:Optional
	condition?: [...#ConditionParameters] @go(Condition,[]ConditionParameters)

	// The name of the event bus to set the permissions on.
	// If you omit this, the permissions are set on the default event bus.
	// +crossplane:generate:reference:type=Bus
	// +kubebuilder:validation:Optional
	eventBusName?: null | string @go(EventBusName,*string)

	// Reference to a Bus to populate eventBusName.
	// +kubebuilder:validation:Optional
	eventBusNameRef?: null | v1.#Reference @go(EventBusNameRef,*v1.Reference)

	// Selector for a Bus to populate eventBusName.
	// +kubebuilder:validation:Optional
	eventBusNameSelector?: null | v1.#Selector @go(EventBusNameSelector,*v1.Selector)

	// The 12-digit AWS account ID that you are permitting to put events to your default event bus. Specify * to permit any account to put events to your default event bus, optionally limited by condition.
	// +kubebuilder:validation:Optional
	principal?: null | string @go(Principal,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// An identifier string for the external account that you are granting permissions to.
	// +kubebuilder:validation:Optional
	statementId?: null | string @go(StatementID,*string)
}

// PermissionSpec defines the desired state of Permission
#PermissionSpec: {
	v1.#ResourceSpec
	forProvider: #PermissionParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #PermissionInitParameters @go(InitProvider)
}

// PermissionStatus defines the observed state of Permission.
#PermissionStatus: {
	v1.#ResourceStatus
	atProvider?: #PermissionObservation @go(AtProvider)
}

// Permission is the Schema for the Permissions API. Provides a resource to create an EventBridge permission to support cross-account events in the current account default event bus.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Permission: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.principal) || (has(self.initProvider) && has(self.initProvider.principal))",message="spec.forProvider.principal is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.statementId) || (has(self.initProvider) && has(self.initProvider.statementId))",message="spec.forProvider.statementId is a required parameter"
	spec:    #PermissionSpec   @go(Spec)
	status?: #PermissionStatus @go(Status)
}

// PermissionList contains a list of Permissions
#PermissionList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Permission] @go(Items,[]Permission)
}
