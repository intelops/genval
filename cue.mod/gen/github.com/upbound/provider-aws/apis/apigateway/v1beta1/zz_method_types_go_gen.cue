// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/apigateway/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#MethodInitParameters: {
	// Specify if the method requires an API key
	apiKeyRequired?: null | bool @go(APIKeyRequired,*bool)

	// Type of authorization used for the method (NONE, CUSTOM, AWS_IAM, COGNITO_USER_POOLS)
	authorization?: null | string @go(Authorization,*string)

	// Authorization scopes used when the authorization is COGNITO_USER_POOLS
	authorizationScopes?: [...null | string] @go(AuthorizationScopes,[]*string)

	// HTTP Method (GET, POST, PUT, DELETE, HEAD, OPTIONS, ANY)
	httpMethod?: null | string @go(HTTPMethod,*string)

	// Function name that will be given to the method when generating an SDK through API Gateway. If omitted, API Gateway will generate a function name based on the resource path and HTTP verb.
	operationName?: null | string @go(OperationName,*string)

	// Map of the API models used for the request's content type
	// where key is the content type (e.g., application/json)
	// and value is either Error, Empty (built-in models) or aws_api_gateway_model's name.
	requestModels?: {[string]: null | string} @go(RequestModels,map[string]*string)

	// Map of request parameters (from the path, query string and headers) that should be passed to the integration. The boolean value indicates whether the parameter is required (true) or optional (false).
	// For example: request_parameters = {"method.request.header.X-Some-Header" = true "method.request.querystring.some-query-param" = true} would define that the header X-Some-Header and the query string some-query-param must be provided in the request.
	requestParameters?: {[string]: null | bool} @go(RequestParameters,map[string]*bool)

	// ID of a aws_api_gateway_request_validator
	requestValidatorId?: null | string @go(RequestValidatorID,*string)
}

#MethodObservation: {
	// Specify if the method requires an API key
	apiKeyRequired?: null | bool @go(APIKeyRequired,*bool)

	// Type of authorization used for the method (NONE, CUSTOM, AWS_IAM, COGNITO_USER_POOLS)
	authorization?: null | string @go(Authorization,*string)

	// Authorization scopes used when the authorization is COGNITO_USER_POOLS
	authorizationScopes?: [...null | string] @go(AuthorizationScopes,[]*string)

	// Authorizer id to be used when the authorization is CUSTOM or COGNITO_USER_POOLS
	authorizerId?: null | string @go(AuthorizerID,*string)

	// HTTP Method (GET, POST, PUT, DELETE, HEAD, OPTIONS, ANY)
	httpMethod?: null | string @go(HTTPMethod,*string)
	id?:         null | string @go(ID,*string)

	// Function name that will be given to the method when generating an SDK through API Gateway. If omitted, API Gateway will generate a function name based on the resource path and HTTP verb.
	operationName?: null | string @go(OperationName,*string)

	// Map of the API models used for the request's content type
	// where key is the content type (e.g., application/json)
	// and value is either Error, Empty (built-in models) or aws_api_gateway_model's name.
	requestModels?: {[string]: null | string} @go(RequestModels,map[string]*string)

	// Map of request parameters (from the path, query string and headers) that should be passed to the integration. The boolean value indicates whether the parameter is required (true) or optional (false).
	// For example: request_parameters = {"method.request.header.X-Some-Header" = true "method.request.querystring.some-query-param" = true} would define that the header X-Some-Header and the query string some-query-param must be provided in the request.
	requestParameters?: {[string]: null | bool} @go(RequestParameters,map[string]*bool)

	// ID of a aws_api_gateway_request_validator
	requestValidatorId?: null | string @go(RequestValidatorID,*string)

	// API resource ID
	resourceId?: null | string @go(ResourceID,*string)

	// ID of the associated REST API
	restApiId?: null | string @go(RestAPIID,*string)
}

#MethodParameters: {
	// Specify if the method requires an API key
	// +kubebuilder:validation:Optional
	apiKeyRequired?: null | bool @go(APIKeyRequired,*bool)

	// Type of authorization used for the method (NONE, CUSTOM, AWS_IAM, COGNITO_USER_POOLS)
	// +kubebuilder:validation:Optional
	authorization?: null | string @go(Authorization,*string)

	// Authorization scopes used when the authorization is COGNITO_USER_POOLS
	// +kubebuilder:validation:Optional
	authorizationScopes?: [...null | string] @go(AuthorizationScopes,[]*string)

	// Authorizer id to be used when the authorization is CUSTOM or COGNITO_USER_POOLS
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/apigateway/v1beta1.Authorizer
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	authorizerId?: null | string @go(AuthorizerID,*string)

	// Reference to a Authorizer in apigateway to populate authorizerId.
	// +kubebuilder:validation:Optional
	authorizerIdRef?: null | v1.#Reference @go(AuthorizerIDRef,*v1.Reference)

	// Selector for a Authorizer in apigateway to populate authorizerId.
	// +kubebuilder:validation:Optional
	authorizerIdSelector?: null | v1.#Selector @go(AuthorizerIDSelector,*v1.Selector)

	// HTTP Method (GET, POST, PUT, DELETE, HEAD, OPTIONS, ANY)
	// +kubebuilder:validation:Optional
	httpMethod?: null | string @go(HTTPMethod,*string)

	// Function name that will be given to the method when generating an SDK through API Gateway. If omitted, API Gateway will generate a function name based on the resource path and HTTP verb.
	// +kubebuilder:validation:Optional
	operationName?: null | string @go(OperationName,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Map of the API models used for the request's content type
	// where key is the content type (e.g., application/json)
	// and value is either Error, Empty (built-in models) or aws_api_gateway_model's name.
	// +kubebuilder:validation:Optional
	requestModels?: {[string]: null | string} @go(RequestModels,map[string]*string)

	// Map of request parameters (from the path, query string and headers) that should be passed to the integration. The boolean value indicates whether the parameter is required (true) or optional (false).
	// For example: request_parameters = {"method.request.header.X-Some-Header" = true "method.request.querystring.some-query-param" = true} would define that the header X-Some-Header and the query string some-query-param must be provided in the request.
	// +kubebuilder:validation:Optional
	requestParameters?: {[string]: null | bool} @go(RequestParameters,map[string]*bool)

	// ID of a aws_api_gateway_request_validator
	// +kubebuilder:validation:Optional
	requestValidatorId?: null | string @go(RequestValidatorID,*string)

	// API resource ID
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/apigateway/v1beta1.Resource
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	resourceId?: null | string @go(ResourceID,*string)

	// Reference to a Resource in apigateway to populate resourceId.
	// +kubebuilder:validation:Optional
	resourceIdRef?: null | v1.#Reference @go(ResourceIDRef,*v1.Reference)

	// Selector for a Resource in apigateway to populate resourceId.
	// +kubebuilder:validation:Optional
	resourceIdSelector?: null | v1.#Selector @go(ResourceIDSelector,*v1.Selector)

	// ID of the associated REST API
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/apigateway/v1beta1.RestAPI
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	restApiId?: null | string @go(RestAPIID,*string)

	// Reference to a RestAPI in apigateway to populate restApiId.
	// +kubebuilder:validation:Optional
	restApiIdRef?: null | v1.#Reference @go(RestAPIIDRef,*v1.Reference)

	// Selector for a RestAPI in apigateway to populate restApiId.
	// +kubebuilder:validation:Optional
	restApiIdSelector?: null | v1.#Selector @go(RestAPIIDSelector,*v1.Selector)
}

// MethodSpec defines the desired state of Method
#MethodSpec: {
	v1.#ResourceSpec
	forProvider: #MethodParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #MethodInitParameters @go(InitProvider)
}

// MethodStatus defines the observed state of Method.
#MethodStatus: {
	v1.#ResourceStatus
	atProvider?: #MethodObservation @go(AtProvider)
}

// Method is the Schema for the Methods API. Provides a HTTP Method for an API Gateway Resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Method: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.authorization) || (has(self.initProvider) && has(self.initProvider.authorization))",message="spec.forProvider.authorization is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.httpMethod) || (has(self.initProvider) && has(self.initProvider.httpMethod))",message="spec.forProvider.httpMethod is a required parameter"
	spec:    #MethodSpec   @go(Spec)
	status?: #MethodStatus @go(Status)
}

// MethodList contains a list of Methods
#MethodList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Method] @go(Items,[]Method)
}
