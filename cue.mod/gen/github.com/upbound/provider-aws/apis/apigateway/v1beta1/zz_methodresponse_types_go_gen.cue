// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/apigateway/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#MethodResponseInitParameters: {
	// Map of the API models used for the response's content type
	responseModels?: {[string]: null | string} @go(ResponseModels,map[string]*string)

	// Map of response parameters that can be sent to the caller.
	// For example: response_parameters = { "method.response.header.X-Some-Header" = true }
	// would define that the header X-Some-Header can be provided on the response.
	responseParameters?: {[string]: null | bool} @go(ResponseParameters,map[string]*bool)

	// HTTP status code
	statusCode?: null | string @go(StatusCode,*string)
}

#MethodResponseObservation: {
	// HTTP Method (GET, POST, PUT, DELETE, HEAD, OPTIONS, ANY)
	httpMethod?: null | string @go(HTTPMethod,*string)
	id?:         null | string @go(ID,*string)

	// API resource ID
	resourceId?: null | string @go(ResourceID,*string)

	// Map of the API models used for the response's content type
	responseModels?: {[string]: null | string} @go(ResponseModels,map[string]*string)

	// Map of response parameters that can be sent to the caller.
	// For example: response_parameters = { "method.response.header.X-Some-Header" = true }
	// would define that the header X-Some-Header can be provided on the response.
	responseParameters?: {[string]: null | bool} @go(ResponseParameters,map[string]*bool)

	// ID of the associated REST API
	restApiId?: null | string @go(RestAPIID,*string)

	// HTTP status code
	statusCode?: null | string @go(StatusCode,*string)
}

#MethodResponseParameters: {
	// HTTP Method (GET, POST, PUT, DELETE, HEAD, OPTIONS, ANY)
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/apigateway/v1beta1.Method
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("http_method",false)
	// +kubebuilder:validation:Optional
	httpMethod?: null | string @go(HTTPMethod,*string)

	// Reference to a Method in apigateway to populate httpMethod.
	// +kubebuilder:validation:Optional
	httpMethodRef?: null | v1.#Reference @go(HTTPMethodRef,*v1.Reference)

	// Selector for a Method in apigateway to populate httpMethod.
	// +kubebuilder:validation:Optional
	httpMethodSelector?: null | v1.#Selector @go(HTTPMethodSelector,*v1.Selector)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// API resource ID
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/apigateway/v1beta1.Resource
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	resourceId?: null | string @go(ResourceID,*string)

	// Reference to a Resource in apigateway to populate resourceId.
	// +kubebuilder:validation:Optional
	resourceIdRef?: null | v1.#Reference @go(ResourceIDRef,*v1.Reference)

	// Selector for a Resource in apigateway to populate resourceId.
	// +kubebuilder:validation:Optional
	resourceIdSelector?: null | v1.#Selector @go(ResourceIDSelector,*v1.Selector)

	// Map of the API models used for the response's content type
	// +kubebuilder:validation:Optional
	responseModels?: {[string]: null | string} @go(ResponseModels,map[string]*string)

	// Map of response parameters that can be sent to the caller.
	// For example: response_parameters = { "method.response.header.X-Some-Header" = true }
	// would define that the header X-Some-Header can be provided on the response.
	// +kubebuilder:validation:Optional
	responseParameters?: {[string]: null | bool} @go(ResponseParameters,map[string]*bool)

	// ID of the associated REST API
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/apigateway/v1beta1.RestAPI
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	restApiId?: null | string @go(RestAPIID,*string)

	// Reference to a RestAPI in apigateway to populate restApiId.
	// +kubebuilder:validation:Optional
	restApiIdRef?: null | v1.#Reference @go(RestAPIIDRef,*v1.Reference)

	// Selector for a RestAPI in apigateway to populate restApiId.
	// +kubebuilder:validation:Optional
	restApiIdSelector?: null | v1.#Selector @go(RestAPIIDSelector,*v1.Selector)

	// HTTP status code
	// +kubebuilder:validation:Optional
	statusCode?: null | string @go(StatusCode,*string)
}

// MethodResponseSpec defines the desired state of MethodResponse
#MethodResponseSpec: {
	v1.#ResourceSpec
	forProvider: #MethodResponseParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #MethodResponseInitParameters @go(InitProvider)
}

// MethodResponseStatus defines the observed state of MethodResponse.
#MethodResponseStatus: {
	v1.#ResourceStatus
	atProvider?: #MethodResponseObservation @go(AtProvider)
}

// MethodResponse is the Schema for the MethodResponses API. Provides an HTTP Method Response for an API Gateway Resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#MethodResponse: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.statusCode) || (has(self.initProvider) && has(self.initProvider.statusCode))",message="spec.forProvider.statusCode is a required parameter"
	spec:    #MethodResponseSpec   @go(Spec)
	status?: #MethodResponseStatus @go(Status)
}

// MethodResponseList contains a list of MethodResponses
#MethodResponseList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#MethodResponse] @go(Items,[]MethodResponse)
}
