// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/apigateway/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#MethodSettingsInitParameters: {
	// Method path defined as {resource_path}/{http_method} for an individual method override, or */* for overriding all methods in the stage. Ensure to trim any leading forward slashes in the path (e.g., trimprefix(aws_api_gateway_resource.example.path, "/")).
	methodPath?: null | string @go(MethodPath,*string)

	// Settings block, see below.
	settings?: [...#SettingsInitParameters] @go(Settings,[]SettingsInitParameters)
}

#MethodSettingsObservation: {
	id?: null | string @go(ID,*string)

	// Method path defined as {resource_path}/{http_method} for an individual method override, or */* for overriding all methods in the stage. Ensure to trim any leading forward slashes in the path (e.g., trimprefix(aws_api_gateway_resource.example.path, "/")).
	methodPath?: null | string @go(MethodPath,*string)

	// ID of the REST API
	restApiId?: null | string @go(RestAPIID,*string)

	// Settings block, see below.
	settings?: [...#SettingsObservation] @go(Settings,[]SettingsObservation)

	// Name of the stage
	stageName?: null | string @go(StageName,*string)
}

#MethodSettingsParameters: {
	// Method path defined as {resource_path}/{http_method} for an individual method override, or */* for overriding all methods in the stage. Ensure to trim any leading forward slashes in the path (e.g., trimprefix(aws_api_gateway_resource.example.path, "/")).
	// +kubebuilder:validation:Optional
	methodPath?: null | string @go(MethodPath,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// ID of the REST API
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/apigateway/v1beta1.RestAPI
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	restApiId?: null | string @go(RestAPIID,*string)

	// Reference to a RestAPI in apigateway to populate restApiId.
	// +kubebuilder:validation:Optional
	restApiIdRef?: null | v1.#Reference @go(RestAPIIDRef,*v1.Reference)

	// Selector for a RestAPI in apigateway to populate restApiId.
	// +kubebuilder:validation:Optional
	restApiIdSelector?: null | v1.#Selector @go(RestAPIIDSelector,*v1.Selector)

	// Settings block, see below.
	// +kubebuilder:validation:Optional
	settings?: [...#SettingsParameters] @go(Settings,[]SettingsParameters)

	// Name of the stage
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/apigateway/v1beta1.Stage
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("stage_name",false)
	// +kubebuilder:validation:Optional
	stageName?: null | string @go(StageName,*string)

	// Reference to a Stage in apigateway to populate stageName.
	// +kubebuilder:validation:Optional
	stageNameRef?: null | v1.#Reference @go(StageNameRef,*v1.Reference)

	// Selector for a Stage in apigateway to populate stageName.
	// +kubebuilder:validation:Optional
	stageNameSelector?: null | v1.#Selector @go(StageNameSelector,*v1.Selector)
}

#SettingsInitParameters: {
	// Whether the cached responses are encrypted.
	cacheDataEncrypted?: null | bool @go(CacheDataEncrypted,*bool)

	// Time to live (TTL), in seconds, for cached responses. The higher the TTL, the longer the response will be cached.
	cacheTtlInSeconds?: null | float64 @go(CacheTTLInSeconds,*float64)

	// Whether responses should be cached and returned for requests. A cache cluster must be enabled on the stage for responses to be cached.
	cachingEnabled?: null | bool @go(CachingEnabled,*bool)

	// Whether data trace logging is enabled for this method, which effects the log entries pushed to Amazon CloudWatch Logs.
	dataTraceEnabled?: null | bool @go(DataTraceEnabled,*bool)

	// Logging level for this method, which effects the log entries pushed to Amazon CloudWatch Logs. The available levels are OFF, ERROR, and INFO.
	loggingLevel?: null | string @go(LoggingLevel,*string)

	// Whether Amazon CloudWatch metrics are enabled for this method.
	metricsEnabled?: null | bool @go(MetricsEnabled,*bool)

	// Whether authorization is required for a cache invalidation request.
	requireAuthorizationForCacheControl?: null | bool @go(RequireAuthorizationForCacheControl,*bool)

	// Throttling burst limit. Default: -1 (throttling disabled).
	throttlingBurstLimit?: null | float64 @go(ThrottlingBurstLimit,*float64)

	// Throttling rate limit. Default: -1 (throttling disabled).
	throttlingRateLimit?: null | float64 @go(ThrottlingRateLimit,*float64)

	// How to handle unauthorized requests for cache invalidation. The available values are FAIL_WITH_403, SUCCEED_WITH_RESPONSE_HEADER, SUCCEED_WITHOUT_RESPONSE_HEADER.
	unauthorizedCacheControlHeaderStrategy?: null | string @go(UnauthorizedCacheControlHeaderStrategy,*string)
}

#SettingsObservation: {
	// Whether the cached responses are encrypted.
	cacheDataEncrypted?: null | bool @go(CacheDataEncrypted,*bool)

	// Time to live (TTL), in seconds, for cached responses. The higher the TTL, the longer the response will be cached.
	cacheTtlInSeconds?: null | float64 @go(CacheTTLInSeconds,*float64)

	// Whether responses should be cached and returned for requests. A cache cluster must be enabled on the stage for responses to be cached.
	cachingEnabled?: null | bool @go(CachingEnabled,*bool)

	// Whether data trace logging is enabled for this method, which effects the log entries pushed to Amazon CloudWatch Logs.
	dataTraceEnabled?: null | bool @go(DataTraceEnabled,*bool)

	// Logging level for this method, which effects the log entries pushed to Amazon CloudWatch Logs. The available levels are OFF, ERROR, and INFO.
	loggingLevel?: null | string @go(LoggingLevel,*string)

	// Whether Amazon CloudWatch metrics are enabled for this method.
	metricsEnabled?: null | bool @go(MetricsEnabled,*bool)

	// Whether authorization is required for a cache invalidation request.
	requireAuthorizationForCacheControl?: null | bool @go(RequireAuthorizationForCacheControl,*bool)

	// Throttling burst limit. Default: -1 (throttling disabled).
	throttlingBurstLimit?: null | float64 @go(ThrottlingBurstLimit,*float64)

	// Throttling rate limit. Default: -1 (throttling disabled).
	throttlingRateLimit?: null | float64 @go(ThrottlingRateLimit,*float64)

	// How to handle unauthorized requests for cache invalidation. The available values are FAIL_WITH_403, SUCCEED_WITH_RESPONSE_HEADER, SUCCEED_WITHOUT_RESPONSE_HEADER.
	unauthorizedCacheControlHeaderStrategy?: null | string @go(UnauthorizedCacheControlHeaderStrategy,*string)
}

#SettingsParameters: {
	// Whether the cached responses are encrypted.
	// +kubebuilder:validation:Optional
	cacheDataEncrypted?: null | bool @go(CacheDataEncrypted,*bool)

	// Time to live (TTL), in seconds, for cached responses. The higher the TTL, the longer the response will be cached.
	// +kubebuilder:validation:Optional
	cacheTtlInSeconds?: null | float64 @go(CacheTTLInSeconds,*float64)

	// Whether responses should be cached and returned for requests. A cache cluster must be enabled on the stage for responses to be cached.
	// +kubebuilder:validation:Optional
	cachingEnabled?: null | bool @go(CachingEnabled,*bool)

	// Whether data trace logging is enabled for this method, which effects the log entries pushed to Amazon CloudWatch Logs.
	// +kubebuilder:validation:Optional
	dataTraceEnabled?: null | bool @go(DataTraceEnabled,*bool)

	// Logging level for this method, which effects the log entries pushed to Amazon CloudWatch Logs. The available levels are OFF, ERROR, and INFO.
	// +kubebuilder:validation:Optional
	loggingLevel?: null | string @go(LoggingLevel,*string)

	// Whether Amazon CloudWatch metrics are enabled for this method.
	// +kubebuilder:validation:Optional
	metricsEnabled?: null | bool @go(MetricsEnabled,*bool)

	// Whether authorization is required for a cache invalidation request.
	// +kubebuilder:validation:Optional
	requireAuthorizationForCacheControl?: null | bool @go(RequireAuthorizationForCacheControl,*bool)

	// Throttling burst limit. Default: -1 (throttling disabled).
	// +kubebuilder:validation:Optional
	throttlingBurstLimit?: null | float64 @go(ThrottlingBurstLimit,*float64)

	// Throttling rate limit. Default: -1 (throttling disabled).
	// +kubebuilder:validation:Optional
	throttlingRateLimit?: null | float64 @go(ThrottlingRateLimit,*float64)

	// How to handle unauthorized requests for cache invalidation. The available values are FAIL_WITH_403, SUCCEED_WITH_RESPONSE_HEADER, SUCCEED_WITHOUT_RESPONSE_HEADER.
	// +kubebuilder:validation:Optional
	unauthorizedCacheControlHeaderStrategy?: null | string @go(UnauthorizedCacheControlHeaderStrategy,*string)
}

// MethodSettingsSpec defines the desired state of MethodSettings
#MethodSettingsSpec: {
	v1.#ResourceSpec
	forProvider: #MethodSettingsParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #MethodSettingsInitParameters @go(InitProvider)
}

// MethodSettingsStatus defines the observed state of MethodSettings.
#MethodSettingsStatus: {
	v1.#ResourceStatus
	atProvider?: #MethodSettingsObservation @go(AtProvider)
}

// MethodSettings is the Schema for the MethodSettingss API. Manages API Gateway Stage Method Settings
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#MethodSettings: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.methodPath) || (has(self.initProvider) && has(self.initProvider.methodPath))",message="spec.forProvider.methodPath is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.settings) || (has(self.initProvider) && has(self.initProvider.settings))",message="spec.forProvider.settings is a required parameter"
	spec:    #MethodSettingsSpec   @go(Spec)
	status?: #MethodSettingsStatus @go(Status)
}

// MethodSettingsList contains a list of MethodSettingss
#MethodSettingsList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#MethodSettings] @go(Items,[]MethodSettings)
}
