// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/apigateway/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#AccountInitParameters: {
}

#AccountObservation: {
	// ARN of an IAM role for CloudWatch (to allow logging & monitoring). See more in AWS Docs. Logging & monitoring can be enabled/disabled and otherwise tuned on the API Gateway Stage level.
	cloudwatchRoleArn?: null | string @go(CloudwatchRoleArn,*string)
	id?:                null | string @go(ID,*string)

	// Account-Level throttle settings. See exported fields below.
	throttleSettings?: [...#ThrottleSettingsObservation] @go(ThrottleSettings,[]ThrottleSettingsObservation)
}

#AccountParameters: {
	// ARN of an IAM role for CloudWatch (to allow logging & monitoring). See more in AWS Docs. Logging & monitoring can be enabled/disabled and otherwise tuned on the API Gateway Stage level.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	cloudwatchRoleArn?: null | string @go(CloudwatchRoleArn,*string)

	// Reference to a Role in iam to populate cloudwatchRoleArn.
	// +kubebuilder:validation:Optional
	cloudwatchRoleArnRef?: null | v1.#Reference @go(CloudwatchRoleArnRef,*v1.Reference)

	// Selector for a Role in iam to populate cloudwatchRoleArn.
	// +kubebuilder:validation:Optional
	cloudwatchRoleArnSelector?: null | v1.#Selector @go(CloudwatchRoleArnSelector,*v1.Selector)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)
}

#ThrottleSettingsInitParameters: {
}

#ThrottleSettingsObservation: {
	// Absolute maximum number of times API Gateway allows the API to be called per second (RPS).
	burstLimit?: null | float64 @go(BurstLimit,*float64)

	// Number of times API Gateway allows the API to be called per second on average (RPS).
	rateLimit?: null | float64 @go(RateLimit,*float64)
}

#ThrottleSettingsParameters: {
}

// AccountSpec defines the desired state of Account
#AccountSpec: {
	v1.#ResourceSpec
	forProvider: #AccountParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #AccountInitParameters @go(InitProvider)
}

// AccountStatus defines the observed state of Account.
#AccountStatus: {
	v1.#ResourceStatus
	atProvider?: #AccountObservation @go(AtProvider)
}

// Account is the Schema for the Accounts API. Provides a settings of an API Gateway Account.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Account: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec:      #AccountSpec       @go(Spec)
	status?:   #AccountStatus     @go(Status)
}

// AccountList contains a list of Accounts
#AccountList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Account] @go(Items,[]Account)
}
