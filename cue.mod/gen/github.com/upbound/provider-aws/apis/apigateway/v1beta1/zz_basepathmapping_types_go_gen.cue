// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/apigateway/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#BasePathMappingInitParameters: {
	// Path segment that must be prepended to the path when accessing the API via this mapping. If omitted, the API is exposed at the root of the given domain.
	basePath?: null | string @go(BasePath,*string)
}

#BasePathMappingObservation: {
	// ID of the API to connect.
	apiId?: null | string @go(APIID,*string)

	// Path segment that must be prepended to the path when accessing the API via this mapping. If omitted, the API is exposed at the root of the given domain.
	basePath?: null | string @go(BasePath,*string)

	// Already-registered domain name to connect the API to.
	domainName?: null | string @go(DomainName,*string)
	id?:         null | string @go(ID,*string)

	// Name of a specific deployment stage to expose at the given path. If omitted, callers may select any stage by including its name as a path element after the base path.
	stageName?: null | string @go(StageName,*string)
}

#BasePathMappingParameters: {
	// ID of the API to connect.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/apigateway/v1beta1.RestAPI
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	apiId?: null | string @go(APIID,*string)

	// Reference to a RestAPI in apigateway to populate apiId.
	// +kubebuilder:validation:Optional
	apiIdRef?: null | v1.#Reference @go(APIIDRef,*v1.Reference)

	// Selector for a RestAPI in apigateway to populate apiId.
	// +kubebuilder:validation:Optional
	apiIdSelector?: null | v1.#Selector @go(APIIDSelector,*v1.Selector)

	// Path segment that must be prepended to the path when accessing the API via this mapping. If omitted, the API is exposed at the root of the given domain.
	// +kubebuilder:validation:Optional
	basePath?: null | string @go(BasePath,*string)

	// Already-registered domain name to connect the API to.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/apigateway/v1beta1.DomainName
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("domain_name",false)
	// +kubebuilder:validation:Optional
	domainName?: null | string @go(DomainName,*string)

	// Reference to a DomainName in apigateway to populate domainName.
	// +kubebuilder:validation:Optional
	domainNameRef?: null | v1.#Reference @go(DomainNameRef,*v1.Reference)

	// Selector for a DomainName in apigateway to populate domainName.
	// +kubebuilder:validation:Optional
	domainNameSelector?: null | v1.#Selector @go(DomainNameSelector,*v1.Selector)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Name of a specific deployment stage to expose at the given path. If omitted, callers may select any stage by including its name as a path element after the base path.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/apigateway/v1beta1.Stage
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("stage_name",false)
	// +kubebuilder:validation:Optional
	stageName?: null | string @go(StageName,*string)

	// Reference to a Stage in apigateway to populate stageName.
	// +kubebuilder:validation:Optional
	stageNameRef?: null | v1.#Reference @go(StageNameRef,*v1.Reference)

	// Selector for a Stage in apigateway to populate stageName.
	// +kubebuilder:validation:Optional
	stageNameSelector?: null | v1.#Selector @go(StageNameSelector,*v1.Selector)
}

// BasePathMappingSpec defines the desired state of BasePathMapping
#BasePathMappingSpec: {
	v1.#ResourceSpec
	forProvider: #BasePathMappingParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #BasePathMappingInitParameters @go(InitProvider)
}

// BasePathMappingStatus defines the observed state of BasePathMapping.
#BasePathMappingStatus: {
	v1.#ResourceStatus
	atProvider?: #BasePathMappingObservation @go(AtProvider)
}

// BasePathMapping is the Schema for the BasePathMappings API. Connects a custom domain with a deployed API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#BasePathMapping: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta     @go(ObjectMeta)
	spec:      #BasePathMappingSpec   @go(Spec)
	status?:   #BasePathMappingStatus @go(Status)
}

// BasePathMappingList contains a list of BasePathMappings
#BasePathMappingList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#BasePathMapping] @go(Items,[]BasePathMapping)
}
