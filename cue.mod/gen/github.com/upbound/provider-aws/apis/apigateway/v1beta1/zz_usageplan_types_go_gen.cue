// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/apigateway/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#APIStagesInitParameters: {
	// The throttling limits of the usage plan.
	throttle?: [...#ThrottleInitParameters] @go(Throttle,[]ThrottleInitParameters)
}

#APIStagesObservation: {
	// API Id of the associated API stage in a usage plan.
	apiId?: null | string @go(APIID,*string)

	// API stage name of the associated API stage in a usage plan.
	stage?: null | string @go(Stage,*string)

	// The throttling limits of the usage plan.
	throttle?: [...#ThrottleObservation] @go(Throttle,[]ThrottleObservation)
}

#APIStagesParameters: {
	// API Id of the associated API stage in a usage plan.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/apigateway/v1beta1.RestAPI
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	apiId?: null | string @go(APIID,*string)

	// Reference to a RestAPI in apigateway to populate apiId.
	// +kubebuilder:validation:Optional
	apiIdRef?: null | v1.#Reference @go(APIIDRef,*v1.Reference)

	// Selector for a RestAPI in apigateway to populate apiId.
	// +kubebuilder:validation:Optional
	apiIdSelector?: null | v1.#Selector @go(APIIDSelector,*v1.Selector)

	// API stage name of the associated API stage in a usage plan.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/apigateway/v1beta1.Stage
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("stage_name",false)
	// +kubebuilder:validation:Optional
	stage?: null | string @go(Stage,*string)

	// Reference to a Stage in apigateway to populate stage.
	// +kubebuilder:validation:Optional
	stageRef?: null | v1.#Reference @go(StageRef,*v1.Reference)

	// Selector for a Stage in apigateway to populate stage.
	// +kubebuilder:validation:Optional
	stageSelector?: null | v1.#Selector @go(StageSelector,*v1.Selector)

	// The throttling limits of the usage plan.
	// +kubebuilder:validation:Optional
	throttle?: [...#ThrottleParameters] @go(Throttle,[]ThrottleParameters)
}

#QuotaSettingsInitParameters: {
	// Maximum number of requests that can be made in a given time period.
	limit?: null | float64 @go(Limit,*float64)

	// Number of requests subtracted from the given limit in the initial time period.
	offset?: null | float64 @go(Offset,*float64)

	// Time period in which the limit applies. Valid values are "DAY", "WEEK" or "MONTH".
	period?: null | string @go(Period,*string)
}

#QuotaSettingsObservation: {
	// Maximum number of requests that can be made in a given time period.
	limit?: null | float64 @go(Limit,*float64)

	// Number of requests subtracted from the given limit in the initial time period.
	offset?: null | float64 @go(Offset,*float64)

	// Time period in which the limit applies. Valid values are "DAY", "WEEK" or "MONTH".
	period?: null | string @go(Period,*string)
}

#QuotaSettingsParameters: {
	// Maximum number of requests that can be made in a given time period.
	// +kubebuilder:validation:Optional
	limit?: null | float64 @go(Limit,*float64)

	// Number of requests subtracted from the given limit in the initial time period.
	// +kubebuilder:validation:Optional
	offset?: null | float64 @go(Offset,*float64)

	// Time period in which the limit applies. Valid values are "DAY", "WEEK" or "MONTH".
	// +kubebuilder:validation:Optional
	period?: null | string @go(Period,*string)
}

#ThrottleInitParameters: {
	// The API request burst limit, the maximum rate limit over a time ranging from one to a few seconds, depending upon whether the underlying token bucket is at its full capacity.
	burstLimit?: null | float64 @go(BurstLimit,*float64)

	// Method to apply the throttle settings for. Specfiy the path and method, for example /test/GET.
	path?: null | string @go(Path,*string)

	// The API request steady-state rate limit.
	rateLimit?: null | float64 @go(RateLimit,*float64)
}

#ThrottleObservation: {
	// The API request burst limit, the maximum rate limit over a time ranging from one to a few seconds, depending upon whether the underlying token bucket is at its full capacity.
	burstLimit?: null | float64 @go(BurstLimit,*float64)

	// Method to apply the throttle settings for. Specfiy the path and method, for example /test/GET.
	path?: null | string @go(Path,*string)

	// The API request steady-state rate limit.
	rateLimit?: null | float64 @go(RateLimit,*float64)
}

#ThrottleParameters: {
	// The API request burst limit, the maximum rate limit over a time ranging from one to a few seconds, depending upon whether the underlying token bucket is at its full capacity.
	// +kubebuilder:validation:Optional
	burstLimit?: null | float64 @go(BurstLimit,*float64)

	// Method to apply the throttle settings for. Specfiy the path and method, for example /test/GET.
	// +kubebuilder:validation:Optional
	path?: null | string @go(Path,*string)

	// The API request steady-state rate limit.
	// +kubebuilder:validation:Optional
	rateLimit?: null | float64 @go(RateLimit,*float64)
}

#UsagePlanInitParameters: {
	// Associated API stages of the usage plan.
	apiStages?: [...#APIStagesInitParameters] @go(APIStages,[]APIStagesInitParameters)

	// Description of a usage plan.
	description?: null | string @go(Description,*string)

	// Name of the usage plan.
	name?: null | string @go(Name,*string)

	// AWS Marketplace product identifier to associate with the usage plan as a SaaS product on AWS Marketplace.
	productCode?: null | string @go(ProductCode,*string)

	// The quota settings of the usage plan.
	quotaSettings?: [...#QuotaSettingsInitParameters] @go(QuotaSettings,[]QuotaSettingsInitParameters)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// The throttling limits of the usage plan.
	throttleSettings?: [...#UsagePlanThrottleSettingsInitParameters] @go(ThrottleSettings,[]UsagePlanThrottleSettingsInitParameters)
}

#UsagePlanObservation: {
	// Associated API stages of the usage plan.
	apiStages?: [...#APIStagesObservation] @go(APIStages,[]APIStagesObservation)

	// ARN
	arn?: null | string @go(Arn,*string)

	// Description of a usage plan.
	description?: null | string @go(Description,*string)

	// ID of the API resource
	id?: null | string @go(ID,*string)

	// Name of the usage plan.
	name?: null | string @go(Name,*string)

	// AWS Marketplace product identifier to associate with the usage plan as a SaaS product on AWS Marketplace.
	productCode?: null | string @go(ProductCode,*string)

	// The quota settings of the usage plan.
	quotaSettings?: [...#QuotaSettingsObservation] @go(QuotaSettings,[]QuotaSettingsObservation)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// The throttling limits of the usage plan.
	throttleSettings?: [...#UsagePlanThrottleSettingsObservation] @go(ThrottleSettings,[]UsagePlanThrottleSettingsObservation)
}

#UsagePlanParameters: {
	// Associated API stages of the usage plan.
	// +kubebuilder:validation:Optional
	apiStages?: [...#APIStagesParameters] @go(APIStages,[]APIStagesParameters)

	// Description of a usage plan.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Name of the usage plan.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// AWS Marketplace product identifier to associate with the usage plan as a SaaS product on AWS Marketplace.
	// +kubebuilder:validation:Optional
	productCode?: null | string @go(ProductCode,*string)

	// The quota settings of the usage plan.
	// +kubebuilder:validation:Optional
	quotaSettings?: [...#QuotaSettingsParameters] @go(QuotaSettings,[]QuotaSettingsParameters)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// The throttling limits of the usage plan.
	// +kubebuilder:validation:Optional
	throttleSettings?: [...#UsagePlanThrottleSettingsParameters] @go(ThrottleSettings,[]UsagePlanThrottleSettingsParameters)
}

#UsagePlanThrottleSettingsInitParameters: {
	// The API request burst limit, the maximum rate limit over a time ranging from one to a few seconds, depending upon whether the underlying token bucket is at its full capacity.
	burstLimit?: null | float64 @go(BurstLimit,*float64)

	// The API request steady-state rate limit.
	rateLimit?: null | float64 @go(RateLimit,*float64)
}

#UsagePlanThrottleSettingsObservation: {
	// The API request burst limit, the maximum rate limit over a time ranging from one to a few seconds, depending upon whether the underlying token bucket is at its full capacity.
	burstLimit?: null | float64 @go(BurstLimit,*float64)

	// The API request steady-state rate limit.
	rateLimit?: null | float64 @go(RateLimit,*float64)
}

#UsagePlanThrottleSettingsParameters: {
	// The API request burst limit, the maximum rate limit over a time ranging from one to a few seconds, depending upon whether the underlying token bucket is at its full capacity.
	// +kubebuilder:validation:Optional
	burstLimit?: null | float64 @go(BurstLimit,*float64)

	// The API request steady-state rate limit.
	// +kubebuilder:validation:Optional
	rateLimit?: null | float64 @go(RateLimit,*float64)
}

// UsagePlanSpec defines the desired state of UsagePlan
#UsagePlanSpec: {
	v1.#ResourceSpec
	forProvider: #UsagePlanParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #UsagePlanInitParameters @go(InitProvider)
}

// UsagePlanStatus defines the observed state of UsagePlan.
#UsagePlanStatus: {
	v1.#ResourceStatus
	atProvider?: #UsagePlanObservation @go(AtProvider)
}

// UsagePlan is the Schema for the UsagePlans API. Provides an API Gateway Usage Plan.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#UsagePlan: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	spec:    #UsagePlanSpec   @go(Spec)
	status?: #UsagePlanStatus @go(Status)
}

// UsagePlanList contains a list of UsagePlans
#UsagePlanList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#UsagePlan] @go(Items,[]UsagePlan)
}
