// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/gamelift/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#BuildInitParameters: {
	// Name of the build
	name?: null | string @go(Name,*string)

	// Operating system that the game server binaries are built to run onE.g., WINDOWS_2012, AMAZON_LINUX or AMAZON_LINUX_2.
	operatingSystem?: null | string @go(OperatingSystem,*string)

	// Information indicating where your game build files are stored. See below.
	storageLocation?: [...#StorageLocationInitParameters] @go(StorageLocation,[]StorageLocationInitParameters)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Version that is associated with this build.
	version?: null | string @go(Version,*string)
}

#BuildObservation: {
	// GameLift Build ARN.
	arn?: null | string @go(Arn,*string)

	// GameLift Build ID.
	id?: null | string @go(ID,*string)

	// Name of the build
	name?: null | string @go(Name,*string)

	// Operating system that the game server binaries are built to run onE.g., WINDOWS_2012, AMAZON_LINUX or AMAZON_LINUX_2.
	operatingSystem?: null | string @go(OperatingSystem,*string)

	// Information indicating where your game build files are stored. See below.
	storageLocation?: [...#StorageLocationObservation] @go(StorageLocation,[]StorageLocationObservation)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// Version that is associated with this build.
	version?: null | string @go(Version,*string)
}

#BuildParameters: {
	// Name of the build
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Operating system that the game server binaries are built to run onE.g., WINDOWS_2012, AMAZON_LINUX or AMAZON_LINUX_2.
	// +kubebuilder:validation:Optional
	operatingSystem?: null | string @go(OperatingSystem,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Information indicating where your game build files are stored. See below.
	// +kubebuilder:validation:Optional
	storageLocation?: [...#StorageLocationParameters] @go(StorageLocation,[]StorageLocationParameters)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Version that is associated with this build.
	// +kubebuilder:validation:Optional
	version?: null | string @go(Version,*string)
}

#StorageLocationInitParameters: {
	// A specific version of the file. If not set, the latest version of the file is retrieved.
	objectVersion?: null | string @go(ObjectVersion,*string)
}

#StorageLocationObservation: {
	// Name of your S3 bucket.
	bucket?: null | string @go(Bucket,*string)

	// Name of the zip file containing your build files.
	key?: null | string @go(Key,*string)

	// A specific version of the file. If not set, the latest version of the file is retrieved.
	objectVersion?: null | string @go(ObjectVersion,*string)

	// ARN of the access role that allows Amazon GameLift to access your S3 bucket.
	roleArn?: null | string @go(RoleArn,*string)
}

#StorageLocationParameters: {
	// Name of your S3 bucket.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/s3/v1beta1.Bucket
	// +kubebuilder:validation:Optional
	bucket?: null | string @go(Bucket,*string)

	// Reference to a Bucket in s3 to populate bucket.
	// +kubebuilder:validation:Optional
	bucketRef?: null | v1.#Reference @go(BucketRef,*v1.Reference)

	// Selector for a Bucket in s3 to populate bucket.
	// +kubebuilder:validation:Optional
	bucketSelector?: null | v1.#Selector @go(BucketSelector,*v1.Selector)

	// Name of the zip file containing your build files.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/s3/v1beta1.Object
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("key",false)
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)

	// Reference to a Object in s3 to populate key.
	// +kubebuilder:validation:Optional
	keyRef?: null | v1.#Reference @go(KeyRef,*v1.Reference)

	// Selector for a Object in s3 to populate key.
	// +kubebuilder:validation:Optional
	keySelector?: null | v1.#Selector @go(KeySelector,*v1.Selector)

	// A specific version of the file. If not set, the latest version of the file is retrieved.
	// +kubebuilder:validation:Optional
	objectVersion?: null | string @go(ObjectVersion,*string)

	// ARN of the access role that allows Amazon GameLift to access your S3 bucket.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	roleArn?: null | string @go(RoleArn,*string)

	// Reference to a Role in iam to populate roleArn.
	// +kubebuilder:validation:Optional
	roleArnRef?: null | v1.#Reference @go(RoleArnRef,*v1.Reference)

	// Selector for a Role in iam to populate roleArn.
	// +kubebuilder:validation:Optional
	roleArnSelector?: null | v1.#Selector @go(RoleArnSelector,*v1.Selector)
}

// BuildSpec defines the desired state of Build
#BuildSpec: {
	v1.#ResourceSpec
	forProvider: #BuildParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #BuildInitParameters @go(InitProvider)
}

// BuildStatus defines the observed state of Build.
#BuildStatus: {
	v1.#ResourceStatus
	atProvider?: #BuildObservation @go(AtProvider)
}

// Build is the Schema for the Builds API. Provides a GameLift Build resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Build: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.operatingSystem) || (has(self.initProvider) && has(self.initProvider.operatingSystem))",message="spec.forProvider.operatingSystem is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.storageLocation) || (has(self.initProvider) && has(self.initProvider.storageLocation))",message="spec.forProvider.storageLocation is a required parameter"
	spec:    #BuildSpec   @go(Spec)
	status?: #BuildStatus @go(Status)
}

// BuildList contains a list of Builds
#BuildList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Build] @go(Items,[]Build)
}
