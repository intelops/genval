// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/gamelift/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#GameSessionQueueInitParameters: {
	// Information to be added to all events that are related to this game session queue.
	customEventData?: null | string @go(CustomEventData,*string)

	// List of fleet/alias ARNs used by session queue for placing game sessions.
	destinations?: [...null | string] @go(Destinations,[]*string)

	// One or more policies used to choose fleet based on player latency. See below.
	playerLatencyPolicy?: [...#PlayerLatencyPolicyInitParameters] @go(PlayerLatencyPolicy,[]PlayerLatencyPolicyInitParameters)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Maximum time a game session request can remain in the queue.
	timeoutInSeconds?: null | float64 @go(TimeoutInSeconds,*float64)
}

#GameSessionQueueObservation: {
	// Game Session Queue ARN.
	arn?: null | string @go(Arn,*string)

	// Information to be added to all events that are related to this game session queue.
	customEventData?: null | string @go(CustomEventData,*string)

	// List of fleet/alias ARNs used by session queue for placing game sessions.
	destinations?: [...null | string] @go(Destinations,[]*string)
	id?: null | string @go(ID,*string)

	// An SNS topic ARN that is set up to receive game session placement notifications.
	notificationTarget?: null | string @go(NotificationTarget,*string)

	// One or more policies used to choose fleet based on player latency. See below.
	playerLatencyPolicy?: [...#PlayerLatencyPolicyObservation] @go(PlayerLatencyPolicy,[]PlayerLatencyPolicyObservation)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// Maximum time a game session request can remain in the queue.
	timeoutInSeconds?: null | float64 @go(TimeoutInSeconds,*float64)
}

#GameSessionQueueParameters: {
	// Information to be added to all events that are related to this game session queue.
	// +kubebuilder:validation:Optional
	customEventData?: null | string @go(CustomEventData,*string)

	// List of fleet/alias ARNs used by session queue for placing game sessions.
	// +kubebuilder:validation:Optional
	destinations?: [...null | string] @go(Destinations,[]*string)

	// An SNS topic ARN that is set up to receive game session placement notifications.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/sns/v1beta1.Topic
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	notificationTarget?: null | string @go(NotificationTarget,*string)

	// Reference to a Topic in sns to populate notificationTarget.
	// +kubebuilder:validation:Optional
	notificationTargetRef?: null | v1.#Reference @go(NotificationTargetRef,*v1.Reference)

	// Selector for a Topic in sns to populate notificationTarget.
	// +kubebuilder:validation:Optional
	notificationTargetSelector?: null | v1.#Selector @go(NotificationTargetSelector,*v1.Selector)

	// One or more policies used to choose fleet based on player latency. See below.
	// +kubebuilder:validation:Optional
	playerLatencyPolicy?: [...#PlayerLatencyPolicyParameters] @go(PlayerLatencyPolicy,[]PlayerLatencyPolicyParameters)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Maximum time a game session request can remain in the queue.
	// +kubebuilder:validation:Optional
	timeoutInSeconds?: null | float64 @go(TimeoutInSeconds,*float64)
}

#PlayerLatencyPolicyInitParameters: {
	// Maximum latency value that is allowed for any player.
	maximumIndividualPlayerLatencyMilliseconds?: null | float64 @go(MaximumIndividualPlayerLatencyMilliseconds,*float64)

	// Length of time that the policy is enforced while placing a new game session. Absence of value for this attribute means that the policy is enforced until the queue times out.
	policyDurationSeconds?: null | float64 @go(PolicyDurationSeconds,*float64)
}

#PlayerLatencyPolicyObservation: {
	// Maximum latency value that is allowed for any player.
	maximumIndividualPlayerLatencyMilliseconds?: null | float64 @go(MaximumIndividualPlayerLatencyMilliseconds,*float64)

	// Length of time that the policy is enforced while placing a new game session. Absence of value for this attribute means that the policy is enforced until the queue times out.
	policyDurationSeconds?: null | float64 @go(PolicyDurationSeconds,*float64)
}

#PlayerLatencyPolicyParameters: {
	// Maximum latency value that is allowed for any player.
	// +kubebuilder:validation:Optional
	maximumIndividualPlayerLatencyMilliseconds?: null | float64 @go(MaximumIndividualPlayerLatencyMilliseconds,*float64)

	// Length of time that the policy is enforced while placing a new game session. Absence of value for this attribute means that the policy is enforced until the queue times out.
	// +kubebuilder:validation:Optional
	policyDurationSeconds?: null | float64 @go(PolicyDurationSeconds,*float64)
}

// GameSessionQueueSpec defines the desired state of GameSessionQueue
#GameSessionQueueSpec: {
	v1.#ResourceSpec
	forProvider: #GameSessionQueueParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #GameSessionQueueInitParameters @go(InitProvider)
}

// GameSessionQueueStatus defines the observed state of GameSessionQueue.
#GameSessionQueueStatus: {
	v1.#ResourceStatus
	atProvider?: #GameSessionQueueObservation @go(AtProvider)
}

// GameSessionQueue is the Schema for the GameSessionQueues API. Provides a GameLift Game Session Queue resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#GameSessionQueue: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta      @go(ObjectMeta)
	spec:      #GameSessionQueueSpec   @go(Spec)
	status?:   #GameSessionQueueStatus @go(Status)
}

// GameSessionQueueList contains a list of GameSessionQueues
#GameSessionQueueList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#GameSessionQueue] @go(Items,[]GameSessionQueue)
}
