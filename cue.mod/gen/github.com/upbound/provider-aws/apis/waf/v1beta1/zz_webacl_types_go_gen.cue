// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/waf/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#ActionInitParameters: {
	// valid values are: BLOCK, ALLOW, or COUNT
	type?: null | string @go(Type,*string)
}

#ActionObservation: {
	// valid values are: BLOCK, ALLOW, or COUNT
	type?: null | string @go(Type,*string)
}

#ActionParameters: {
	// valid values are: BLOCK, ALLOW, or COUNT
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

#DefaultActionInitParameters: {
	// Specifies how you want AWS WAF to respond to requests that don't match the criteria in any of the rules.
	// e.g., ALLOW or BLOCK
	type?: null | string @go(Type,*string)
}

#DefaultActionObservation: {
	// Specifies how you want AWS WAF to respond to requests that don't match the criteria in any of the rules.
	// e.g., ALLOW or BLOCK
	type?: null | string @go(Type,*string)
}

#DefaultActionParameters: {
	// Specifies how you want AWS WAF to respond to requests that don't match the criteria in any of the rules.
	// e.g., ALLOW or BLOCK
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

#LoggingConfigurationInitParameters: {
	// Configuration block containing parts of the request that you want redacted from the logs. Detailed below.
	redactedFields?: [...#RedactedFieldsInitParameters] @go(RedactedFields,[]RedactedFieldsInitParameters)
}

#LoggingConfigurationObservation: {
	// Amazon Resource Name (ARN) of Kinesis Firehose Delivery Stream
	logDestination?: null | string @go(LogDestination,*string)

	// Configuration block containing parts of the request that you want redacted from the logs. Detailed below.
	redactedFields?: [...#RedactedFieldsObservation] @go(RedactedFields,[]RedactedFieldsObservation)
}

#LoggingConfigurationParameters: {
	// Amazon Resource Name (ARN) of Kinesis Firehose Delivery Stream
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/firehose/v1beta1.DeliveryStream
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",false)
	// +kubebuilder:validation:Optional
	logDestination?: null | string @go(LogDestination,*string)

	// Reference to a DeliveryStream in firehose to populate logDestination.
	// +kubebuilder:validation:Optional
	logDestinationRef?: null | v1.#Reference @go(LogDestinationRef,*v1.Reference)

	// Selector for a DeliveryStream in firehose to populate logDestination.
	// +kubebuilder:validation:Optional
	logDestinationSelector?: null | v1.#Selector @go(LogDestinationSelector,*v1.Selector)

	// Configuration block containing parts of the request that you want redacted from the logs. Detailed below.
	// +kubebuilder:validation:Optional
	redactedFields?: [...#RedactedFieldsParameters] @go(RedactedFields,[]RedactedFieldsParameters)
}

#OverrideActionInitParameters: {
	// valid values are: BLOCK, ALLOW, or COUNT
	type?: null | string @go(Type,*string)
}

#OverrideActionObservation: {
	// valid values are: BLOCK, ALLOW, or COUNT
	type?: null | string @go(Type,*string)
}

#OverrideActionParameters: {
	// valid values are: BLOCK, ALLOW, or COUNT
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

#RedactedFieldsFieldToMatchInitParameters: {
	// When the value of type is HEADER, enter the name of the header that you want the WAF to search, for example, User-Agent or Referer. If the value of type is any other value, omit data.
	data?: null | string @go(Data,*string)

	// valid values are: BLOCK, ALLOW, or COUNT
	type?: null | string @go(Type,*string)
}

#RedactedFieldsFieldToMatchObservation: {
	// When the value of type is HEADER, enter the name of the header that you want the WAF to search, for example, User-Agent or Referer. If the value of type is any other value, omit data.
	data?: null | string @go(Data,*string)

	// valid values are: BLOCK, ALLOW, or COUNT
	type?: null | string @go(Type,*string)
}

#RedactedFieldsFieldToMatchParameters: {
	// When the value of type is HEADER, enter the name of the header that you want the WAF to search, for example, User-Agent or Referer. If the value of type is any other value, omit data.
	// +kubebuilder:validation:Optional
	data?: null | string @go(Data,*string)

	// valid values are: BLOCK, ALLOW, or COUNT
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

#RedactedFieldsInitParameters: {
	// Set of configuration blocks for fields to redact. Detailed below.
	fieldToMatch?: [...#RedactedFieldsFieldToMatchInitParameters] @go(FieldToMatch,[]RedactedFieldsFieldToMatchInitParameters)
}

#RedactedFieldsObservation: {
	// Set of configuration blocks for fields to redact. Detailed below.
	fieldToMatch?: [...#RedactedFieldsFieldToMatchObservation] @go(FieldToMatch,[]RedactedFieldsFieldToMatchObservation)
}

#RedactedFieldsParameters: {
	// Set of configuration blocks for fields to redact. Detailed below.
	// +kubebuilder:validation:Optional
	fieldToMatch: [...#RedactedFieldsFieldToMatchParameters] @go(FieldToMatch,[]RedactedFieldsFieldToMatchParameters)
}

#RulesInitParameters: {
	// The action that CloudFront or AWS WAF takes when a web request matches the conditions in the rule. Not used if type is GROUP.
	action?: [...#ActionInitParameters] @go(Action,[]ActionInitParameters)

	// Override the action that a group requests CloudFront or AWS WAF takes when a web request matches the conditions in the rule. Only used if type is GROUP.
	overrideAction?: [...#OverrideActionInitParameters] @go(OverrideAction,[]OverrideActionInitParameters)

	// Specifies the order in which the rules in a WebACL are evaluated.
	// Rules with a lower value are evaluated before rules with a higher value.
	priority?: null | float64 @go(Priority,*float64)

	// The rule type, either REGULAR, as defined by Rule, RATE_BASED, as defined by RateBasedRule, or GROUP, as defined by RuleGroup. The default is REGULAR. If you add a RATE_BASED rule, you need to set type as RATE_BASED. If you add a GROUP rule, you need to set type as GROUP.
	type?: null | string @go(Type,*string)
}

#RulesObservation: {
	// The action that CloudFront or AWS WAF takes when a web request matches the conditions in the rule. Not used if type is GROUP.
	action?: [...#ActionObservation] @go(Action,[]ActionObservation)

	// Override the action that a group requests CloudFront or AWS WAF takes when a web request matches the conditions in the rule. Only used if type is GROUP.
	overrideAction?: [...#OverrideActionObservation] @go(OverrideAction,[]OverrideActionObservation)

	// Specifies the order in which the rules in a WebACL are evaluated.
	// Rules with a lower value are evaluated before rules with a higher value.
	priority?: null | float64 @go(Priority,*float64)

	// ID of the associated WAF (Global) rule (e.g., aws_waf_rule). WAF (Regional) rules cannot be used.
	ruleId?: null | string @go(RuleID,*string)

	// The rule type, either REGULAR, as defined by Rule, RATE_BASED, as defined by RateBasedRule, or GROUP, as defined by RuleGroup. The default is REGULAR. If you add a RATE_BASED rule, you need to set type as RATE_BASED. If you add a GROUP rule, you need to set type as GROUP.
	type?: null | string @go(Type,*string)
}

#RulesParameters: {
	// The action that CloudFront or AWS WAF takes when a web request matches the conditions in the rule. Not used if type is GROUP.
	// +kubebuilder:validation:Optional
	action?: [...#ActionParameters] @go(Action,[]ActionParameters)

	// Override the action that a group requests CloudFront or AWS WAF takes when a web request matches the conditions in the rule. Only used if type is GROUP.
	// +kubebuilder:validation:Optional
	overrideAction?: [...#OverrideActionParameters] @go(OverrideAction,[]OverrideActionParameters)

	// Specifies the order in which the rules in a WebACL are evaluated.
	// Rules with a lower value are evaluated before rules with a higher value.
	// +kubebuilder:validation:Optional
	priority?: null | float64 @go(Priority,*float64)

	// ID of the associated WAF (Global) rule (e.g., aws_waf_rule). WAF (Regional) rules cannot be used.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/waf/v1beta1.Rule
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ruleId?: null | string @go(RuleID,*string)

	// Reference to a Rule in waf to populate ruleId.
	// +kubebuilder:validation:Optional
	ruleIdRef?: null | v1.#Reference @go(RuleIDRef,*v1.Reference)

	// Selector for a Rule in waf to populate ruleId.
	// +kubebuilder:validation:Optional
	ruleIdSelector?: null | v1.#Selector @go(RuleIDSelector,*v1.Selector)

	// The rule type, either REGULAR, as defined by Rule, RATE_BASED, as defined by RateBasedRule, or GROUP, as defined by RuleGroup. The default is REGULAR. If you add a RATE_BASED rule, you need to set type as RATE_BASED. If you add a GROUP rule, you need to set type as GROUP.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

#WebACLInitParameters: {
	// Configuration block with action that you want AWS WAF to take when a request doesn't match the criteria in any of the rules that are associated with the web ACL. Detailed below.
	defaultAction?: [...#DefaultActionInitParameters] @go(DefaultAction,[]DefaultActionInitParameters)

	// Configuration block to enable WAF logging. Detailed below.
	loggingConfiguration?: [...#LoggingConfigurationInitParameters] @go(LoggingConfiguration,[]LoggingConfigurationInitParameters)

	// The name or description for the Amazon CloudWatch metric of this web ACL.
	metricName?: null | string @go(MetricName,*string)

	// The name or description of the web ACL.
	name?: null | string @go(Name,*string)

	// Configuration blocks containing rules to associate with the web ACL and the settings for each rule. Detailed below.
	rules?: [...#RulesInitParameters] @go(Rules,[]RulesInitParameters)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#WebACLObservation: {
	// The ARN of the WAF WebACL.
	arn?: null | string @go(Arn,*string)

	// Configuration block with action that you want AWS WAF to take when a request doesn't match the criteria in any of the rules that are associated with the web ACL. Detailed below.
	defaultAction?: [...#DefaultActionObservation] @go(DefaultAction,[]DefaultActionObservation)

	// The ID of the WAF WebACL.
	id?: null | string @go(ID,*string)

	// Configuration block to enable WAF logging. Detailed below.
	loggingConfiguration?: [...#LoggingConfigurationObservation] @go(LoggingConfiguration,[]LoggingConfigurationObservation)

	// The name or description for the Amazon CloudWatch metric of this web ACL.
	metricName?: null | string @go(MetricName,*string)

	// The name or description of the web ACL.
	name?: null | string @go(Name,*string)

	// Configuration blocks containing rules to associate with the web ACL and the settings for each rule. Detailed below.
	rules?: [...#RulesObservation] @go(Rules,[]RulesObservation)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#WebACLParameters: {
	// Configuration block with action that you want AWS WAF to take when a request doesn't match the criteria in any of the rules that are associated with the web ACL. Detailed below.
	// +kubebuilder:validation:Optional
	defaultAction?: [...#DefaultActionParameters] @go(DefaultAction,[]DefaultActionParameters)

	// Configuration block to enable WAF logging. Detailed below.
	// +kubebuilder:validation:Optional
	loggingConfiguration?: [...#LoggingConfigurationParameters] @go(LoggingConfiguration,[]LoggingConfigurationParameters)

	// The name or description for the Amazon CloudWatch metric of this web ACL.
	// +kubebuilder:validation:Optional
	metricName?: null | string @go(MetricName,*string)

	// The name or description of the web ACL.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Configuration blocks containing rules to associate with the web ACL and the settings for each rule. Detailed below.
	// +kubebuilder:validation:Optional
	rules?: [...#RulesParameters] @go(Rules,[]RulesParameters)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// WebACLSpec defines the desired state of WebACL
#WebACLSpec: {
	v1.#ResourceSpec
	forProvider: #WebACLParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #WebACLInitParameters @go(InitProvider)
}

// WebACLStatus defines the observed state of WebACL.
#WebACLStatus: {
	v1.#ResourceStatus
	atProvider?: #WebACLObservation @go(AtProvider)
}

// WebACL is the Schema for the WebACLs API. Provides a AWS WAF web access control group (ACL) resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#WebACL: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.defaultAction) || (has(self.initProvider) && has(self.initProvider.defaultAction))",message="spec.forProvider.defaultAction is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.metricName) || (has(self.initProvider) && has(self.initProvider.metricName))",message="spec.forProvider.metricName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	spec:    #WebACLSpec   @go(Spec)
	status?: #WebACLStatus @go(Status)
}

// WebACLList contains a list of WebACLs
#WebACLList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#WebACL] @go(Items,[]WebACL)
}
