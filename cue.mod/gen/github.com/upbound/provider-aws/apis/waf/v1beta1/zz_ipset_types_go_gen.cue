// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/waf/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#IPSetDescriptorsInitParameters: {
	// Type of the IP address - IPV4 or IPV6.
	type?: null | string @go(Type,*string)

	// An IPv4 or IPv6 address specified via CIDR notationE.g., 192.0.2.44/32 or 1111:0000:0000:0000:0000:0000:0000:0000/64
	value?: null | string @go(Value,*string)
}

#IPSetDescriptorsObservation: {
	// Type of the IP address - IPV4 or IPV6.
	type?: null | string @go(Type,*string)

	// An IPv4 or IPv6 address specified via CIDR notationE.g., 192.0.2.44/32 or 1111:0000:0000:0000:0000:0000:0000:0000/64
	value?: null | string @go(Value,*string)
}

#IPSetDescriptorsParameters: {
	// Type of the IP address - IPV4 or IPV6.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)

	// An IPv4 or IPv6 address specified via CIDR notationE.g., 192.0.2.44/32 or 1111:0000:0000:0000:0000:0000:0000:0000/64
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

#IPSetInitParameters: {
	// One or more pairs specifying the IP address type (IPV4 or IPV6) and the IP address range (in CIDR format) from which web requests originate.
	ipSetDescriptors?: [...#IPSetDescriptorsInitParameters] @go(IPSetDescriptors,[]IPSetDescriptorsInitParameters)

	// The name or description of the IPSet.
	name?: null | string @go(Name,*string)
}

#IPSetObservation: {
	// The ARN of the WAF IPSet.
	arn?: null | string @go(Arn,*string)

	// The ID of the WAF IPSet.
	id?: null | string @go(ID,*string)

	// One or more pairs specifying the IP address type (IPV4 or IPV6) and the IP address range (in CIDR format) from which web requests originate.
	ipSetDescriptors?: [...#IPSetDescriptorsObservation] @go(IPSetDescriptors,[]IPSetDescriptorsObservation)

	// The name or description of the IPSet.
	name?: null | string @go(Name,*string)
}

#IPSetParameters: {
	// One or more pairs specifying the IP address type (IPV4 or IPV6) and the IP address range (in CIDR format) from which web requests originate.
	// +kubebuilder:validation:Optional
	ipSetDescriptors?: [...#IPSetDescriptorsParameters] @go(IPSetDescriptors,[]IPSetDescriptorsParameters)

	// The name or description of the IPSet.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)
}

// IPSetSpec defines the desired state of IPSet
#IPSetSpec: {
	v1.#ResourceSpec
	forProvider: #IPSetParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #IPSetInitParameters @go(InitProvider)
}

// IPSetStatus defines the observed state of IPSet.
#IPSetStatus: {
	v1.#ResourceStatus
	atProvider?: #IPSetObservation @go(AtProvider)
}

// IPSet is the Schema for the IPSets API. Provides a AWS WAF IPSet resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#IPSet: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	spec:    #IPSetSpec   @go(Spec)
	status?: #IPSetStatus @go(Status)
}

// IPSetList contains a list of IPSets
#IPSetList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#IPSet] @go(Items,[]IPSet)
}
