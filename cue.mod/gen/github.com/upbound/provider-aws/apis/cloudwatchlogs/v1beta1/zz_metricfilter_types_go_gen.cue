// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/cloudwatchlogs/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#MetricFilterInitParameters: {
	// A block defining collection of information needed to define how metric data gets emitted. See below.
	metricTransformation?: [...#MetricTransformationInitParameters] @go(MetricTransformation,[]MetricTransformationInitParameters)

	// A valid CloudWatch Logs filter pattern
	// for extracting metric data out of ingested log events.
	pattern?: null | string @go(Pattern,*string)
}

#MetricFilterObservation: {
	// The name of the metric filter.
	id?: null | string @go(ID,*string)

	// The name of the log group to associate the metric filter with.
	logGroupName?: null | string @go(LogGroupName,*string)

	// A block defining collection of information needed to define how metric data gets emitted. See below.
	metricTransformation?: [...#MetricTransformationObservation] @go(MetricTransformation,[]MetricTransformationObservation)

	// A valid CloudWatch Logs filter pattern
	// for extracting metric data out of ingested log events.
	pattern?: null | string @go(Pattern,*string)
}

#MetricFilterParameters: {
	// The name of the log group to associate the metric filter with.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/cloudwatchlogs/v1beta1.Group
	// +kubebuilder:validation:Optional
	logGroupName?: null | string @go(LogGroupName,*string)

	// Reference to a Group in cloudwatchlogs to populate logGroupName.
	// +kubebuilder:validation:Optional
	logGroupNameRef?: null | v1.#Reference @go(LogGroupNameRef,*v1.Reference)

	// Selector for a Group in cloudwatchlogs to populate logGroupName.
	// +kubebuilder:validation:Optional
	logGroupNameSelector?: null | v1.#Selector @go(LogGroupNameSelector,*v1.Selector)

	// A block defining collection of information needed to define how metric data gets emitted. See below.
	// +kubebuilder:validation:Optional
	metricTransformation?: [...#MetricTransformationParameters] @go(MetricTransformation,[]MetricTransformationParameters)

	// A valid CloudWatch Logs filter pattern
	// for extracting metric data out of ingested log events.
	// +kubebuilder:validation:Optional
	pattern?: null | string @go(Pattern,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)
}

#MetricTransformationInitParameters: {
	// The value to emit when a filter pattern does not match a log event. Conflicts with dimensions.
	defaultValue?: null | string @go(DefaultValue,*string)

	// Map of fields to use as dimensions for the metric. Up to 3 dimensions are allowed. Conflicts with default_value.
	dimensions?: {[string]: null | string} @go(Dimensions,map[string]*string)

	// The name of the CloudWatch metric to which the monitored log information should be published (e.g., ErrorCount)
	name?: null | string @go(Name,*string)

	// The destination namespace of the CloudWatch metric.
	namespace?: null | string @go(Namespace,*string)

	// The unit to assign to the metric. If you omit this, the unit is set as None.
	unit?: null | string @go(Unit,*string)

	// What to publish to the metric. For example, if you're counting the occurrences of a particular term like "Error", the value will be "1" for each occurrence. If you're counting the bytes transferred the published value will be the value in the log event.
	value?: null | string @go(Value,*string)
}

#MetricTransformationObservation: {
	// The value to emit when a filter pattern does not match a log event. Conflicts with dimensions.
	defaultValue?: null | string @go(DefaultValue,*string)

	// Map of fields to use as dimensions for the metric. Up to 3 dimensions are allowed. Conflicts with default_value.
	dimensions?: {[string]: null | string} @go(Dimensions,map[string]*string)

	// The name of the CloudWatch metric to which the monitored log information should be published (e.g., ErrorCount)
	name?: null | string @go(Name,*string)

	// The destination namespace of the CloudWatch metric.
	namespace?: null | string @go(Namespace,*string)

	// The unit to assign to the metric. If you omit this, the unit is set as None.
	unit?: null | string @go(Unit,*string)

	// What to publish to the metric. For example, if you're counting the occurrences of a particular term like "Error", the value will be "1" for each occurrence. If you're counting the bytes transferred the published value will be the value in the log event.
	value?: null | string @go(Value,*string)
}

#MetricTransformationParameters: {
	// The value to emit when a filter pattern does not match a log event. Conflicts with dimensions.
	// +kubebuilder:validation:Optional
	defaultValue?: null | string @go(DefaultValue,*string)

	// Map of fields to use as dimensions for the metric. Up to 3 dimensions are allowed. Conflicts with default_value.
	// +kubebuilder:validation:Optional
	dimensions?: {[string]: null | string} @go(Dimensions,map[string]*string)

	// The name of the CloudWatch metric to which the monitored log information should be published (e.g., ErrorCount)
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The destination namespace of the CloudWatch metric.
	// +kubebuilder:validation:Optional
	namespace?: null | string @go(Namespace,*string)

	// The unit to assign to the metric. If you omit this, the unit is set as None.
	// +kubebuilder:validation:Optional
	unit?: null | string @go(Unit,*string)

	// What to publish to the metric. For example, if you're counting the occurrences of a particular term like "Error", the value will be "1" for each occurrence. If you're counting the bytes transferred the published value will be the value in the log event.
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

// MetricFilterSpec defines the desired state of MetricFilter
#MetricFilterSpec: {
	v1.#ResourceSpec
	forProvider: #MetricFilterParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #MetricFilterInitParameters @go(InitProvider)
}

// MetricFilterStatus defines the observed state of MetricFilter.
#MetricFilterStatus: {
	v1.#ResourceStatus
	atProvider?: #MetricFilterObservation @go(AtProvider)
}

// MetricFilter is the Schema for the MetricFilters API. Provides a CloudWatch Log Metric Filter resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#MetricFilter: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.metricTransformation) || (has(self.initProvider) && has(self.initProvider.metricTransformation))",message="spec.forProvider.metricTransformation is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.pattern) || (has(self.initProvider) && has(self.initProvider.pattern))",message="spec.forProvider.pattern is a required parameter"
	spec:    #MetricFilterSpec   @go(Spec)
	status?: #MetricFilterStatus @go(Status)
}

// MetricFilterList contains a list of MetricFilters
#MetricFilterList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#MetricFilter] @go(Items,[]MetricFilter)
}
