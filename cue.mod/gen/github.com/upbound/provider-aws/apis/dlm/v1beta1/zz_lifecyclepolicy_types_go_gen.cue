// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/dlm/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#ActionInitParameters: {
	// The rule for copying shared snapshots across Regions. See the cross_region_copy configuration block.
	crossRegionCopy?: [...#CrossRegionCopyInitParameters] @go(CrossRegionCopy,[]CrossRegionCopyInitParameters)

	// A descriptive name for the action.
	name?: null | string @go(Name,*string)
}

#ActionObservation: {
	// The rule for copying shared snapshots across Regions. See the cross_region_copy configuration block.
	crossRegionCopy?: [...#CrossRegionCopyObservation] @go(CrossRegionCopy,[]CrossRegionCopyObservation)

	// A descriptive name for the action.
	name?: null | string @go(Name,*string)
}

#ActionParameters: {
	// The rule for copying shared snapshots across Regions. See the cross_region_copy configuration block.
	// +kubebuilder:validation:Optional
	crossRegionCopy: [...#CrossRegionCopyParameters] @go(CrossRegionCopy,[]CrossRegionCopyParameters)

	// A descriptive name for the action.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)
}

#CreateRuleInitParameters: {
	// The schedule, as a Cron expression. The schedule interval must be between 1 hour and 1 year.
	cronExpression?: null | string @go(CronExpression,*string)

	// How often this lifecycle policy should be evaluated. 1, 2,3,4,6,8,12 or 24 are valid values.
	interval?: null | float64 @go(Interval,*float64)

	// The unit for how often the lifecycle policy should be evaluated. HOURS is currently the only allowed value and also the default value.
	intervalUnit?: null | string @go(IntervalUnit,*string)

	// Specifies the destination for snapshots created by the policy. To create snapshots in the same Region as the source resource, specify CLOUD. To create snapshots on the same Outpost as the source resource, specify OUTPOST_LOCAL. If you omit this parameter, CLOUD is used by default. If the policy targets resources in an AWS Region, then you must create snapshots in the same Region as the source resource. If the policy targets resources on an Outpost, then you can create snapshots on the same Outpost as the source resource, or in the Region of that Outpost. Valid values are CLOUD and OUTPOST_LOCAL.
	location?: null | string @go(Location,*string)

	// A list of times in 24 hour clock format that sets when the lifecycle policy should be evaluated. Max of 1.
	times?: [...null | string] @go(Times,[]*string)
}

#CreateRuleObservation: {
	// The schedule, as a Cron expression. The schedule interval must be between 1 hour and 1 year.
	cronExpression?: null | string @go(CronExpression,*string)

	// How often this lifecycle policy should be evaluated. 1, 2,3,4,6,8,12 or 24 are valid values.
	interval?: null | float64 @go(Interval,*float64)

	// The unit for how often the lifecycle policy should be evaluated. HOURS is currently the only allowed value and also the default value.
	intervalUnit?: null | string @go(IntervalUnit,*string)

	// Specifies the destination for snapshots created by the policy. To create snapshots in the same Region as the source resource, specify CLOUD. To create snapshots on the same Outpost as the source resource, specify OUTPOST_LOCAL. If you omit this parameter, CLOUD is used by default. If the policy targets resources in an AWS Region, then you must create snapshots in the same Region as the source resource. If the policy targets resources on an Outpost, then you can create snapshots on the same Outpost as the source resource, or in the Region of that Outpost. Valid values are CLOUD and OUTPOST_LOCAL.
	location?: null | string @go(Location,*string)

	// A list of times in 24 hour clock format that sets when the lifecycle policy should be evaluated. Max of 1.
	times?: [...null | string] @go(Times,[]*string)
}

#CreateRuleParameters: {
	// The schedule, as a Cron expression. The schedule interval must be between 1 hour and 1 year.
	// +kubebuilder:validation:Optional
	cronExpression?: null | string @go(CronExpression,*string)

	// How often this lifecycle policy should be evaluated. 1, 2,3,4,6,8,12 or 24 are valid values.
	// +kubebuilder:validation:Optional
	interval?: null | float64 @go(Interval,*float64)

	// The unit for how often the lifecycle policy should be evaluated. HOURS is currently the only allowed value and also the default value.
	// +kubebuilder:validation:Optional
	intervalUnit?: null | string @go(IntervalUnit,*string)

	// Specifies the destination for snapshots created by the policy. To create snapshots in the same Region as the source resource, specify CLOUD. To create snapshots on the same Outpost as the source resource, specify OUTPOST_LOCAL. If you omit this parameter, CLOUD is used by default. If the policy targets resources in an AWS Region, then you must create snapshots in the same Region as the source resource. If the policy targets resources on an Outpost, then you can create snapshots on the same Outpost as the source resource, or in the Region of that Outpost. Valid values are CLOUD and OUTPOST_LOCAL.
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// A list of times in 24 hour clock format that sets when the lifecycle policy should be evaluated. Max of 1.
	// +kubebuilder:validation:Optional
	times?: [...null | string] @go(Times,[]*string)
}

#CrossRegionCopyInitParameters: {
	// The encryption settings for the copied snapshot. See the encryption_configuration block. Max of 1 per action.
	encryptionConfiguration?: [...#EncryptionConfigurationInitParameters] @go(EncryptionConfiguration,[]EncryptionConfigurationInitParameters)

	// Specifies the retention rule for cross-Region snapshot copies. See the retain_rule block. Max of 1 per action.
	retainRule?: [...#RetainRuleInitParameters] @go(RetainRule,[]RetainRuleInitParameters)

	// The target Region or the Amazon Resource Name (ARN) of the target Outpost for the snapshot copies.
	target?: null | string @go(Target,*string)
}

#CrossRegionCopyObservation: {
	// The encryption settings for the copied snapshot. See the encryption_configuration block. Max of 1 per action.
	encryptionConfiguration?: [...#EncryptionConfigurationObservation] @go(EncryptionConfiguration,[]EncryptionConfigurationObservation)

	// Specifies the retention rule for cross-Region snapshot copies. See the retain_rule block. Max of 1 per action.
	retainRule?: [...#RetainRuleObservation] @go(RetainRule,[]RetainRuleObservation)

	// The target Region or the Amazon Resource Name (ARN) of the target Outpost for the snapshot copies.
	target?: null | string @go(Target,*string)
}

#CrossRegionCopyParameters: {
	// The encryption settings for the copied snapshot. See the encryption_configuration block. Max of 1 per action.
	// +kubebuilder:validation:Optional
	encryptionConfiguration: [...#EncryptionConfigurationParameters] @go(EncryptionConfiguration,[]EncryptionConfigurationParameters)

	// Specifies the retention rule for cross-Region snapshot copies. See the retain_rule block. Max of 1 per action.
	// +kubebuilder:validation:Optional
	retainRule?: [...#RetainRuleParameters] @go(RetainRule,[]RetainRuleParameters)

	// The target Region or the Amazon Resource Name (ARN) of the target Outpost for the snapshot copies.
	// +kubebuilder:validation:Optional
	target?: null | string @go(Target,*string)
}

#CrossRegionCopyRuleInitParameters: {
	// Copy all user-defined tags on a source volume to snapshots of the volume created by this policy.
	copyTags?: null | bool @go(CopyTags,*bool)

	// See the deprecate_rule block. Max of 1 per schedule.
	deprecateRule?: [...#DeprecateRuleInitParameters] @go(DeprecateRule,[]DeprecateRuleInitParameters)

	// To encrypt a copy of an unencrypted snapshot when encryption by default is not enabled, enable encryption using this parameter. Copies of encrypted snapshots are encrypted, even if this parameter is false or when encryption by default is not enabled.
	encrypted?: null | bool @go(Encrypted,*bool)

	// Specifies the retention rule for cross-Region snapshot copies. See the retain_rule block. Max of 1 per action.
	retainRule?: [...#CrossRegionCopyRuleRetainRuleInitParameters] @go(RetainRule,[]CrossRegionCopyRuleRetainRuleInitParameters)

	// The target Region or the Amazon Resource Name (ARN) of the target Outpost for the snapshot copies.
	target?: null | string @go(Target,*string)
}

#CrossRegionCopyRuleObservation: {
	// The Amazon Resource Name (ARN) of the AWS KMS key to use for EBS encryption. If this parameter is not specified, the default KMS key for the account is used.
	cmkArn?: null | string @go(CmkArn,*string)

	// Copy all user-defined tags on a source volume to snapshots of the volume created by this policy.
	copyTags?: null | bool @go(CopyTags,*bool)

	// See the deprecate_rule block. Max of 1 per schedule.
	deprecateRule?: [...#DeprecateRuleObservation] @go(DeprecateRule,[]DeprecateRuleObservation)

	// To encrypt a copy of an unencrypted snapshot when encryption by default is not enabled, enable encryption using this parameter. Copies of encrypted snapshots are encrypted, even if this parameter is false or when encryption by default is not enabled.
	encrypted?: null | bool @go(Encrypted,*bool)

	// Specifies the retention rule for cross-Region snapshot copies. See the retain_rule block. Max of 1 per action.
	retainRule?: [...#CrossRegionCopyRuleRetainRuleObservation] @go(RetainRule,[]CrossRegionCopyRuleRetainRuleObservation)

	// The target Region or the Amazon Resource Name (ARN) of the target Outpost for the snapshot copies.
	target?: null | string @go(Target,*string)
}

#CrossRegionCopyRuleParameters: {
	// The Amazon Resource Name (ARN) of the AWS KMS key to use for EBS encryption. If this parameter is not specified, the default KMS key for the account is used.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/kms/v1beta1.Key
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	cmkArn?: null | string @go(CmkArn,*string)

	// Reference to a Key in kms to populate cmkArn.
	// +kubebuilder:validation:Optional
	cmkArnRef?: null | v1.#Reference @go(CmkArnRef,*v1.Reference)

	// Selector for a Key in kms to populate cmkArn.
	// +kubebuilder:validation:Optional
	cmkArnSelector?: null | v1.#Selector @go(CmkArnSelector,*v1.Selector)

	// Copy all user-defined tags on a source volume to snapshots of the volume created by this policy.
	// +kubebuilder:validation:Optional
	copyTags?: null | bool @go(CopyTags,*bool)

	// See the deprecate_rule block. Max of 1 per schedule.
	// +kubebuilder:validation:Optional
	deprecateRule?: [...#DeprecateRuleParameters] @go(DeprecateRule,[]DeprecateRuleParameters)

	// To encrypt a copy of an unencrypted snapshot when encryption by default is not enabled, enable encryption using this parameter. Copies of encrypted snapshots are encrypted, even if this parameter is false or when encryption by default is not enabled.
	// +kubebuilder:validation:Optional
	encrypted?: null | bool @go(Encrypted,*bool)

	// Specifies the retention rule for cross-Region snapshot copies. See the retain_rule block. Max of 1 per action.
	// +kubebuilder:validation:Optional
	retainRule?: [...#CrossRegionCopyRuleRetainRuleParameters] @go(RetainRule,[]CrossRegionCopyRuleRetainRuleParameters)

	// The target Region or the Amazon Resource Name (ARN) of the target Outpost for the snapshot copies.
	// +kubebuilder:validation:Optional
	target?: null | string @go(Target,*string)
}

#CrossRegionCopyRuleRetainRuleInitParameters: {
	// How often this lifecycle policy should be evaluated. 1, 2,3,4,6,8,12 or 24 are valid values.
	interval?: null | float64 @go(Interval,*float64)

	// The unit for how often the lifecycle policy should be evaluated. HOURS is currently the only allowed value and also the default value.
	intervalUnit?: null | string @go(IntervalUnit,*string)
}

#CrossRegionCopyRuleRetainRuleObservation: {
	// How often this lifecycle policy should be evaluated. 1, 2,3,4,6,8,12 or 24 are valid values.
	interval?: null | float64 @go(Interval,*float64)

	// The unit for how often the lifecycle policy should be evaluated. HOURS is currently the only allowed value and also the default value.
	intervalUnit?: null | string @go(IntervalUnit,*string)
}

#CrossRegionCopyRuleRetainRuleParameters: {
	// How often this lifecycle policy should be evaluated. 1, 2,3,4,6,8,12 or 24 are valid values.
	// +kubebuilder:validation:Optional
	interval?: null | float64 @go(Interval,*float64)

	// The unit for how often the lifecycle policy should be evaluated. HOURS is currently the only allowed value and also the default value.
	// +kubebuilder:validation:Optional
	intervalUnit?: null | string @go(IntervalUnit,*string)
}

#DeprecateRuleInitParameters: {
	// How often this lifecycle policy should be evaluated. 1, 2,3,4,6,8,12 or 24 are valid values.
	interval?: null | float64 @go(Interval,*float64)

	// The unit for how often the lifecycle policy should be evaluated. HOURS is currently the only allowed value and also the default value.
	intervalUnit?: null | string @go(IntervalUnit,*string)
}

#DeprecateRuleObservation: {
	// How often this lifecycle policy should be evaluated. 1, 2,3,4,6,8,12 or 24 are valid values.
	interval?: null | float64 @go(Interval,*float64)

	// The unit for how often the lifecycle policy should be evaluated. HOURS is currently the only allowed value and also the default value.
	intervalUnit?: null | string @go(IntervalUnit,*string)
}

#DeprecateRuleParameters: {
	// How often this lifecycle policy should be evaluated. 1, 2,3,4,6,8,12 or 24 are valid values.
	// +kubebuilder:validation:Optional
	interval?: null | float64 @go(Interval,*float64)

	// The unit for how often the lifecycle policy should be evaluated. HOURS is currently the only allowed value and also the default value.
	// +kubebuilder:validation:Optional
	intervalUnit?: null | string @go(IntervalUnit,*string)
}

#EncryptionConfigurationInitParameters: {
	// The Amazon Resource Name (ARN) of the AWS KMS key to use for EBS encryption. If this parameter is not specified, the default KMS key for the account is used.
	cmkArn?: null | string @go(CmkArn,*string)

	// To encrypt a copy of an unencrypted snapshot when encryption by default is not enabled, enable encryption using this parameter. Copies of encrypted snapshots are encrypted, even if this parameter is false or when encryption by default is not enabled.
	encrypted?: null | bool @go(Encrypted,*bool)
}

#EncryptionConfigurationObservation: {
	// The Amazon Resource Name (ARN) of the AWS KMS key to use for EBS encryption. If this parameter is not specified, the default KMS key for the account is used.
	cmkArn?: null | string @go(CmkArn,*string)

	// To encrypt a copy of an unencrypted snapshot when encryption by default is not enabled, enable encryption using this parameter. Copies of encrypted snapshots are encrypted, even if this parameter is false or when encryption by default is not enabled.
	encrypted?: null | bool @go(Encrypted,*bool)
}

#EncryptionConfigurationParameters: {
	// The Amazon Resource Name (ARN) of the AWS KMS key to use for EBS encryption. If this parameter is not specified, the default KMS key for the account is used.
	// +kubebuilder:validation:Optional
	cmkArn?: null | string @go(CmkArn,*string)

	// To encrypt a copy of an unencrypted snapshot when encryption by default is not enabled, enable encryption using this parameter. Copies of encrypted snapshots are encrypted, even if this parameter is false or when encryption by default is not enabled.
	// +kubebuilder:validation:Optional
	encrypted?: null | bool @go(Encrypted,*bool)
}

#EventSourceInitParameters: {
	// A set of optional parameters for snapshot and AMI lifecycle policies. See the parameters configuration block.
	parameters?: [...#ParametersInitParameters] @go(Parameters,[]ParametersInitParameters)

	// The source of the event. Currently only managed CloudWatch Events rules are supported. Valid values are MANAGED_CWE.
	type?: null | string @go(Type,*string)
}

#EventSourceObservation: {
	// A set of optional parameters for snapshot and AMI lifecycle policies. See the parameters configuration block.
	parameters?: [...#ParametersObservation] @go(Parameters,[]ParametersObservation)

	// The source of the event. Currently only managed CloudWatch Events rules are supported. Valid values are MANAGED_CWE.
	type?: null | string @go(Type,*string)
}

#EventSourceParameters: {
	// A set of optional parameters for snapshot and AMI lifecycle policies. See the parameters configuration block.
	// +kubebuilder:validation:Optional
	parameters: [...#ParametersParameters] @go(Parameters,[]ParametersParameters)

	// The source of the event. Currently only managed CloudWatch Events rules are supported. Valid values are MANAGED_CWE.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

#FastRestoreRuleInitParameters: {
	// The Availability Zones in which to enable fast snapshot restore.
	availabilityZones?: [...null | string] @go(AvailabilityZones,[]*string)

	// Specifies the number of oldest AMIs to deprecate. Must be an integer between 1 and 1000.
	count?: null | float64 @go(Count,*float64)

	// How often this lifecycle policy should be evaluated. 1, 2,3,4,6,8,12 or 24 are valid values.
	interval?: null | float64 @go(Interval,*float64)

	// The unit for how often the lifecycle policy should be evaluated. HOURS is currently the only allowed value and also the default value.
	intervalUnit?: null | string @go(IntervalUnit,*string)
}

#FastRestoreRuleObservation: {
	// The Availability Zones in which to enable fast snapshot restore.
	availabilityZones?: [...null | string] @go(AvailabilityZones,[]*string)

	// Specifies the number of oldest AMIs to deprecate. Must be an integer between 1 and 1000.
	count?: null | float64 @go(Count,*float64)

	// How often this lifecycle policy should be evaluated. 1, 2,3,4,6,8,12 or 24 are valid values.
	interval?: null | float64 @go(Interval,*float64)

	// The unit for how often the lifecycle policy should be evaluated. HOURS is currently the only allowed value and also the default value.
	intervalUnit?: null | string @go(IntervalUnit,*string)
}

#FastRestoreRuleParameters: {
	// The Availability Zones in which to enable fast snapshot restore.
	// +kubebuilder:validation:Optional
	availabilityZones: [...null | string] @go(AvailabilityZones,[]*string)

	// Specifies the number of oldest AMIs to deprecate. Must be an integer between 1 and 1000.
	// +kubebuilder:validation:Optional
	count?: null | float64 @go(Count,*float64)

	// How often this lifecycle policy should be evaluated. 1, 2,3,4,6,8,12 or 24 are valid values.
	// +kubebuilder:validation:Optional
	interval?: null | float64 @go(Interval,*float64)

	// The unit for how often the lifecycle policy should be evaluated. HOURS is currently the only allowed value and also the default value.
	// +kubebuilder:validation:Optional
	intervalUnit?: null | string @go(IntervalUnit,*string)
}

#LifecyclePolicyInitParameters: {
	// A description for the DLM lifecycle policy.
	description?: null | string @go(Description,*string)

	// See the policy_details configuration block. Max of 1.
	policyDetails?: [...#PolicyDetailsInitParameters] @go(PolicyDetails,[]PolicyDetailsInitParameters)

	// Whether the lifecycle policy should be enabled or disabled. ENABLED or DISABLED are valid values. Defaults to ENABLED.
	state?: null | string @go(State,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#LifecyclePolicyObservation: {
	// Amazon Resource Name (ARN) of the DLM Lifecycle Policy.
	arn?: null | string @go(Arn,*string)

	// A description for the DLM lifecycle policy.
	description?: null | string @go(Description,*string)

	// The ARN of an IAM role that is able to be assumed by the DLM service.
	executionRoleArn?: null | string @go(ExecutionRoleArn,*string)

	// Identifier of the DLM Lifecycle Policy.
	id?: null | string @go(ID,*string)

	// See the policy_details configuration block. Max of 1.
	policyDetails?: [...#PolicyDetailsObservation] @go(PolicyDetails,[]PolicyDetailsObservation)

	// Whether the lifecycle policy should be enabled or disabled. ENABLED or DISABLED are valid values. Defaults to ENABLED.
	state?: null | string @go(State,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#LifecyclePolicyParameters: {
	// A description for the DLM lifecycle policy.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// The ARN of an IAM role that is able to be assumed by the DLM service.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	executionRoleArn?: null | string @go(ExecutionRoleArn,*string)

	// Reference to a Role in iam to populate executionRoleArn.
	// +kubebuilder:validation:Optional
	executionRoleArnRef?: null | v1.#Reference @go(ExecutionRoleArnRef,*v1.Reference)

	// Selector for a Role in iam to populate executionRoleArn.
	// +kubebuilder:validation:Optional
	executionRoleArnSelector?: null | v1.#Selector @go(ExecutionRoleArnSelector,*v1.Selector)

	// See the policy_details configuration block. Max of 1.
	// +kubebuilder:validation:Optional
	policyDetails?: [...#PolicyDetailsParameters] @go(PolicyDetails,[]PolicyDetailsParameters)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Whether the lifecycle policy should be enabled or disabled. ENABLED or DISABLED are valid values. Defaults to ENABLED.
	// +kubebuilder:validation:Optional
	state?: null | string @go(State,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#ParametersInitParameters: {
	// The snapshot description that can trigger the policy. The description pattern is specified using a regular expression. The policy runs only if a snapshot with a description that matches the specified pattern is shared with your account.
	descriptionRegex?: null | string @go(DescriptionRegex,*string)

	// The type of event. Currently, only shareSnapshot events are supported.
	eventType?: null | string @go(EventType,*string)

	// The IDs of the AWS accounts that can trigger policy by sharing snapshots with your account. The policy only runs if one of the specified AWS accounts shares a snapshot with your account.
	snapshotOwner?: [...null | string] @go(SnapshotOwner,[]*string)
}

#ParametersObservation: {
	// The snapshot description that can trigger the policy. The description pattern is specified using a regular expression. The policy runs only if a snapshot with a description that matches the specified pattern is shared with your account.
	descriptionRegex?: null | string @go(DescriptionRegex,*string)

	// The type of event. Currently, only shareSnapshot events are supported.
	eventType?: null | string @go(EventType,*string)

	// The IDs of the AWS accounts that can trigger policy by sharing snapshots with your account. The policy only runs if one of the specified AWS accounts shares a snapshot with your account.
	snapshotOwner?: [...null | string] @go(SnapshotOwner,[]*string)
}

#ParametersParameters: {
	// The snapshot description that can trigger the policy. The description pattern is specified using a regular expression. The policy runs only if a snapshot with a description that matches the specified pattern is shared with your account.
	// +kubebuilder:validation:Optional
	descriptionRegex?: null | string @go(DescriptionRegex,*string)

	// The type of event. Currently, only shareSnapshot events are supported.
	// +kubebuilder:validation:Optional
	eventType?: null | string @go(EventType,*string)

	// The IDs of the AWS accounts that can trigger policy by sharing snapshots with your account. The policy only runs if one of the specified AWS accounts shares a snapshot with your account.
	// +kubebuilder:validation:Optional
	snapshotOwner: [...null | string] @go(SnapshotOwner,[]*string)
}

#PolicyDetailsInitParameters: {
	// The actions to be performed when the event-based policy is triggered. You can specify only one action per policy. This parameter is required for event-based policies only. If you are creating a snapshot or AMI policy, omit this parameter. See the action configuration block.
	action?: [...#ActionInitParameters] @go(Action,[]ActionInitParameters)

	// The event that triggers the event-based policy. This parameter is required for event-based policies only. If you are creating a snapshot or AMI policy, omit this parameter. See the event_source configuration block.
	eventSource?: [...#EventSourceInitParameters] @go(EventSource,[]EventSourceInitParameters)

	// A set of optional parameters for snapshot and AMI lifecycle policies. See the parameters configuration block.
	parameters?: [...#PolicyDetailsParametersInitParameters] @go(Parameters,[]PolicyDetailsParametersInitParameters)

	// The valid target resource types and actions a policy can manage. Specify EBS_SNAPSHOT_MANAGEMENT to create a lifecycle policy that manages the lifecycle of Amazon EBS snapshots. Specify IMAGE_MANAGEMENT to create a lifecycle policy that manages the lifecycle of EBS-backed AMIs. Specify EVENT_BASED_POLICY to create an event-based policy that performs specific actions when a defined event occurs in your AWS account. Default value is EBS_SNAPSHOT_MANAGEMENT.
	policyType?: null | string @go(PolicyType,*string)

	// The location of the resources to backup. If the source resources are located in an AWS Region, specify CLOUD. If the source resources are located on an Outpost in your account, specify OUTPOST. If you specify OUTPOST, Amazon Data Lifecycle Manager backs up all resources of the specified type with matching target tags across all of the Outposts in your account. Valid values are CLOUD and OUTPOST.
	resourceLocations?: [...null | string] @go(ResourceLocations,[]*string)

	// A list of resource types that should be targeted by the lifecycle policy. Valid values are VOLUME and INSTANCE.
	resourceTypes?: [...null | string] @go(ResourceTypes,[]*string)

	// See the schedule configuration block.
	schedule?: [...#ScheduleInitParameters] @go(Schedule,[]ScheduleInitParameters)

	// A map of tag keys and their values. Any resources that match the resource_types and are tagged with any of these tags will be targeted.
	targetTags?: {[string]: null | string} @go(TargetTags,map[string]*string)
}

#PolicyDetailsObservation: {
	// The actions to be performed when the event-based policy is triggered. You can specify only one action per policy. This parameter is required for event-based policies only. If you are creating a snapshot or AMI policy, omit this parameter. See the action configuration block.
	action?: [...#ActionObservation] @go(Action,[]ActionObservation)

	// The event that triggers the event-based policy. This parameter is required for event-based policies only. If you are creating a snapshot or AMI policy, omit this parameter. See the event_source configuration block.
	eventSource?: [...#EventSourceObservation] @go(EventSource,[]EventSourceObservation)

	// A set of optional parameters for snapshot and AMI lifecycle policies. See the parameters configuration block.
	parameters?: [...#PolicyDetailsParametersObservation] @go(Parameters,[]PolicyDetailsParametersObservation)

	// The valid target resource types and actions a policy can manage. Specify EBS_SNAPSHOT_MANAGEMENT to create a lifecycle policy that manages the lifecycle of Amazon EBS snapshots. Specify IMAGE_MANAGEMENT to create a lifecycle policy that manages the lifecycle of EBS-backed AMIs. Specify EVENT_BASED_POLICY to create an event-based policy that performs specific actions when a defined event occurs in your AWS account. Default value is EBS_SNAPSHOT_MANAGEMENT.
	policyType?: null | string @go(PolicyType,*string)

	// The location of the resources to backup. If the source resources are located in an AWS Region, specify CLOUD. If the source resources are located on an Outpost in your account, specify OUTPOST. If you specify OUTPOST, Amazon Data Lifecycle Manager backs up all resources of the specified type with matching target tags across all of the Outposts in your account. Valid values are CLOUD and OUTPOST.
	resourceLocations?: [...null | string] @go(ResourceLocations,[]*string)

	// A list of resource types that should be targeted by the lifecycle policy. Valid values are VOLUME and INSTANCE.
	resourceTypes?: [...null | string] @go(ResourceTypes,[]*string)

	// See the schedule configuration block.
	schedule?: [...#ScheduleObservation] @go(Schedule,[]ScheduleObservation)

	// A map of tag keys and their values. Any resources that match the resource_types and are tagged with any of these tags will be targeted.
	targetTags?: {[string]: null | string} @go(TargetTags,map[string]*string)
}

#PolicyDetailsParameters: {
	// The actions to be performed when the event-based policy is triggered. You can specify only one action per policy. This parameter is required for event-based policies only. If you are creating a snapshot or AMI policy, omit this parameter. See the action configuration block.
	// +kubebuilder:validation:Optional
	action?: [...#ActionParameters] @go(Action,[]ActionParameters)

	// The event that triggers the event-based policy. This parameter is required for event-based policies only. If you are creating a snapshot or AMI policy, omit this parameter. See the event_source configuration block.
	// +kubebuilder:validation:Optional
	eventSource?: [...#EventSourceParameters] @go(EventSource,[]EventSourceParameters)

	// A set of optional parameters for snapshot and AMI lifecycle policies. See the parameters configuration block.
	// +kubebuilder:validation:Optional
	parameters?: [...#PolicyDetailsParametersParameters] @go(Parameters,[]PolicyDetailsParametersParameters)

	// The valid target resource types and actions a policy can manage. Specify EBS_SNAPSHOT_MANAGEMENT to create a lifecycle policy that manages the lifecycle of Amazon EBS snapshots. Specify IMAGE_MANAGEMENT to create a lifecycle policy that manages the lifecycle of EBS-backed AMIs. Specify EVENT_BASED_POLICY to create an event-based policy that performs specific actions when a defined event occurs in your AWS account. Default value is EBS_SNAPSHOT_MANAGEMENT.
	// +kubebuilder:validation:Optional
	policyType?: null | string @go(PolicyType,*string)

	// The location of the resources to backup. If the source resources are located in an AWS Region, specify CLOUD. If the source resources are located on an Outpost in your account, specify OUTPOST. If you specify OUTPOST, Amazon Data Lifecycle Manager backs up all resources of the specified type with matching target tags across all of the Outposts in your account. Valid values are CLOUD and OUTPOST.
	// +kubebuilder:validation:Optional
	resourceLocations?: [...null | string] @go(ResourceLocations,[]*string)

	// A list of resource types that should be targeted by the lifecycle policy. Valid values are VOLUME and INSTANCE.
	// +kubebuilder:validation:Optional
	resourceTypes?: [...null | string] @go(ResourceTypes,[]*string)

	// See the schedule configuration block.
	// +kubebuilder:validation:Optional
	schedule?: [...#ScheduleParameters] @go(Schedule,[]ScheduleParameters)

	// A map of tag keys and their values. Any resources that match the resource_types and are tagged with any of these tags will be targeted.
	// +kubebuilder:validation:Optional
	targetTags?: {[string]: null | string} @go(TargetTags,map[string]*string)
}

#PolicyDetailsParametersInitParameters: {
	// Indicates whether to exclude the root volume from snapshots created using CreateSnapshots. The default is false.
	excludeBootVolume?: null | bool @go(ExcludeBootVolume,*bool)

	// Applies to AMI lifecycle policies only. Indicates whether targeted instances are rebooted when the lifecycle policy runs. true indicates that targeted instances are not rebooted when the policy runs. false indicates that target instances are rebooted when the policy runs. The default is true (instances are not rebooted).
	noReboot?: null | bool @go(NoReboot,*bool)
}

#PolicyDetailsParametersObservation: {
	// Indicates whether to exclude the root volume from snapshots created using CreateSnapshots. The default is false.
	excludeBootVolume?: null | bool @go(ExcludeBootVolume,*bool)

	// Applies to AMI lifecycle policies only. Indicates whether targeted instances are rebooted when the lifecycle policy runs. true indicates that targeted instances are not rebooted when the policy runs. false indicates that target instances are rebooted when the policy runs. The default is true (instances are not rebooted).
	noReboot?: null | bool @go(NoReboot,*bool)
}

#PolicyDetailsParametersParameters: {
	// Indicates whether to exclude the root volume from snapshots created using CreateSnapshots. The default is false.
	// +kubebuilder:validation:Optional
	excludeBootVolume?: null | bool @go(ExcludeBootVolume,*bool)

	// Applies to AMI lifecycle policies only. Indicates whether targeted instances are rebooted when the lifecycle policy runs. true indicates that targeted instances are not rebooted when the policy runs. false indicates that target instances are rebooted when the policy runs. The default is true (instances are not rebooted).
	// +kubebuilder:validation:Optional
	noReboot?: null | bool @go(NoReboot,*bool)
}

#RetainRuleInitParameters: {
	// How often this lifecycle policy should be evaluated. 1, 2,3,4,6,8,12 or 24 are valid values.
	interval?: null | float64 @go(Interval,*float64)

	// The unit for how often the lifecycle policy should be evaluated. HOURS is currently the only allowed value and also the default value.
	intervalUnit?: null | string @go(IntervalUnit,*string)
}

#RetainRuleObservation: {
	// How often this lifecycle policy should be evaluated. 1, 2,3,4,6,8,12 or 24 are valid values.
	interval?: null | float64 @go(Interval,*float64)

	// The unit for how often the lifecycle policy should be evaluated. HOURS is currently the only allowed value and also the default value.
	intervalUnit?: null | string @go(IntervalUnit,*string)
}

#RetainRuleParameters: {
	// How often this lifecycle policy should be evaluated. 1, 2,3,4,6,8,12 or 24 are valid values.
	// +kubebuilder:validation:Optional
	interval?: null | float64 @go(Interval,*float64)

	// The unit for how often the lifecycle policy should be evaluated. HOURS is currently the only allowed value and also the default value.
	// +kubebuilder:validation:Optional
	intervalUnit?: null | string @go(IntervalUnit,*string)
}

#ScheduleDeprecateRuleInitParameters: {
	// Specifies the number of oldest AMIs to deprecate. Must be an integer between 1 and 1000.
	count?: null | float64 @go(Count,*float64)

	// How often this lifecycle policy should be evaluated. 1, 2,3,4,6,8,12 or 24 are valid values.
	interval?: null | float64 @go(Interval,*float64)

	// The unit for how often the lifecycle policy should be evaluated. HOURS is currently the only allowed value and also the default value.
	intervalUnit?: null | string @go(IntervalUnit,*string)
}

#ScheduleDeprecateRuleObservation: {
	// Specifies the number of oldest AMIs to deprecate. Must be an integer between 1 and 1000.
	count?: null | float64 @go(Count,*float64)

	// How often this lifecycle policy should be evaluated. 1, 2,3,4,6,8,12 or 24 are valid values.
	interval?: null | float64 @go(Interval,*float64)

	// The unit for how often the lifecycle policy should be evaluated. HOURS is currently the only allowed value and also the default value.
	intervalUnit?: null | string @go(IntervalUnit,*string)
}

#ScheduleDeprecateRuleParameters: {
	// Specifies the number of oldest AMIs to deprecate. Must be an integer between 1 and 1000.
	// +kubebuilder:validation:Optional
	count?: null | float64 @go(Count,*float64)

	// How often this lifecycle policy should be evaluated. 1, 2,3,4,6,8,12 or 24 are valid values.
	// +kubebuilder:validation:Optional
	interval?: null | float64 @go(Interval,*float64)

	// The unit for how often the lifecycle policy should be evaluated. HOURS is currently the only allowed value and also the default value.
	// +kubebuilder:validation:Optional
	intervalUnit?: null | string @go(IntervalUnit,*string)
}

#ScheduleInitParameters: {
	// Copy all user-defined tags on a source volume to snapshots of the volume created by this policy.
	copyTags?: null | bool @go(CopyTags,*bool)

	// See the create_rule block. Max of 1 per schedule.
	createRule?: [...#CreateRuleInitParameters] @go(CreateRule,[]CreateRuleInitParameters)

	// See the cross_region_copy_rule block. Max of 3 per schedule.
	crossRegionCopyRule?: [...#CrossRegionCopyRuleInitParameters] @go(CrossRegionCopyRule,[]CrossRegionCopyRuleInitParameters)

	// See the deprecate_rule block. Max of 1 per schedule.
	deprecateRule?: [...#ScheduleDeprecateRuleInitParameters] @go(DeprecateRule,[]ScheduleDeprecateRuleInitParameters)

	// See the fast_restore_rule block. Max of 1 per schedule.
	fastRestoreRule?: [...#FastRestoreRuleInitParameters] @go(FastRestoreRule,[]FastRestoreRuleInitParameters)

	// A descriptive name for the action.
	name?: null | string @go(Name,*string)

	// Specifies the retention rule for cross-Region snapshot copies. See the retain_rule block. Max of 1 per action.
	retainRule?: [...#ScheduleRetainRuleInitParameters] @go(RetainRule,[]ScheduleRetainRuleInitParameters)

	// See the share_rule block. Max of 1 per schedule.
	shareRule?: [...#ShareRuleInitParameters] @go(ShareRule,[]ShareRuleInitParameters)

	// A map of tag keys and their values. DLM lifecycle policies will already tag the snapshot with the tags on the volume. This configuration adds extra tags on top of these.
	tagsToAdd?: {[string]: null | string} @go(TagsToAdd,map[string]*string)

	// A map of tag keys and variable values, where the values are determined when the policy is executed. Only $(instance-id) or $(timestamp) are valid values. Can only be used when resource_types is INSTANCE.
	variableTags?: {[string]: null | string} @go(VariableTags,map[string]*string)
}

#ScheduleObservation: {
	// Copy all user-defined tags on a source volume to snapshots of the volume created by this policy.
	copyTags?: null | bool @go(CopyTags,*bool)

	// See the create_rule block. Max of 1 per schedule.
	createRule?: [...#CreateRuleObservation] @go(CreateRule,[]CreateRuleObservation)

	// See the cross_region_copy_rule block. Max of 3 per schedule.
	crossRegionCopyRule?: [...#CrossRegionCopyRuleObservation] @go(CrossRegionCopyRule,[]CrossRegionCopyRuleObservation)

	// See the deprecate_rule block. Max of 1 per schedule.
	deprecateRule?: [...#ScheduleDeprecateRuleObservation] @go(DeprecateRule,[]ScheduleDeprecateRuleObservation)

	// See the fast_restore_rule block. Max of 1 per schedule.
	fastRestoreRule?: [...#FastRestoreRuleObservation] @go(FastRestoreRule,[]FastRestoreRuleObservation)

	// A descriptive name for the action.
	name?: null | string @go(Name,*string)

	// Specifies the retention rule for cross-Region snapshot copies. See the retain_rule block. Max of 1 per action.
	retainRule?: [...#ScheduleRetainRuleObservation] @go(RetainRule,[]ScheduleRetainRuleObservation)

	// See the share_rule block. Max of 1 per schedule.
	shareRule?: [...#ShareRuleObservation] @go(ShareRule,[]ShareRuleObservation)

	// A map of tag keys and their values. DLM lifecycle policies will already tag the snapshot with the tags on the volume. This configuration adds extra tags on top of these.
	tagsToAdd?: {[string]: null | string} @go(TagsToAdd,map[string]*string)

	// A map of tag keys and variable values, where the values are determined when the policy is executed. Only $(instance-id) or $(timestamp) are valid values. Can only be used when resource_types is INSTANCE.
	variableTags?: {[string]: null | string} @go(VariableTags,map[string]*string)
}

#ScheduleParameters: {
	// Copy all user-defined tags on a source volume to snapshots of the volume created by this policy.
	// +kubebuilder:validation:Optional
	copyTags?: null | bool @go(CopyTags,*bool)

	// See the create_rule block. Max of 1 per schedule.
	// +kubebuilder:validation:Optional
	createRule: [...#CreateRuleParameters] @go(CreateRule,[]CreateRuleParameters)

	// See the cross_region_copy_rule block. Max of 3 per schedule.
	// +kubebuilder:validation:Optional
	crossRegionCopyRule?: [...#CrossRegionCopyRuleParameters] @go(CrossRegionCopyRule,[]CrossRegionCopyRuleParameters)

	// See the deprecate_rule block. Max of 1 per schedule.
	// +kubebuilder:validation:Optional
	deprecateRule?: [...#ScheduleDeprecateRuleParameters] @go(DeprecateRule,[]ScheduleDeprecateRuleParameters)

	// See the fast_restore_rule block. Max of 1 per schedule.
	// +kubebuilder:validation:Optional
	fastRestoreRule?: [...#FastRestoreRuleParameters] @go(FastRestoreRule,[]FastRestoreRuleParameters)

	// A descriptive name for the action.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Specifies the retention rule for cross-Region snapshot copies. See the retain_rule block. Max of 1 per action.
	// +kubebuilder:validation:Optional
	retainRule: [...#ScheduleRetainRuleParameters] @go(RetainRule,[]ScheduleRetainRuleParameters)

	// See the share_rule block. Max of 1 per schedule.
	// +kubebuilder:validation:Optional
	shareRule?: [...#ShareRuleParameters] @go(ShareRule,[]ShareRuleParameters)

	// A map of tag keys and their values. DLM lifecycle policies will already tag the snapshot with the tags on the volume. This configuration adds extra tags on top of these.
	// +kubebuilder:validation:Optional
	tagsToAdd?: {[string]: null | string} @go(TagsToAdd,map[string]*string)

	// A map of tag keys and variable values, where the values are determined when the policy is executed. Only $(instance-id) or $(timestamp) are valid values. Can only be used when resource_types is INSTANCE.
	// +kubebuilder:validation:Optional
	variableTags?: {[string]: null | string} @go(VariableTags,map[string]*string)
}

#ScheduleRetainRuleInitParameters: {
	// Specifies the number of oldest AMIs to deprecate. Must be an integer between 1 and 1000.
	count?: null | float64 @go(Count,*float64)

	// How often this lifecycle policy should be evaluated. 1, 2,3,4,6,8,12 or 24 are valid values.
	interval?: null | float64 @go(Interval,*float64)

	// The unit for how often the lifecycle policy should be evaluated. HOURS is currently the only allowed value and also the default value.
	intervalUnit?: null | string @go(IntervalUnit,*string)
}

#ScheduleRetainRuleObservation: {
	// Specifies the number of oldest AMIs to deprecate. Must be an integer between 1 and 1000.
	count?: null | float64 @go(Count,*float64)

	// How often this lifecycle policy should be evaluated. 1, 2,3,4,6,8,12 or 24 are valid values.
	interval?: null | float64 @go(Interval,*float64)

	// The unit for how often the lifecycle policy should be evaluated. HOURS is currently the only allowed value and also the default value.
	intervalUnit?: null | string @go(IntervalUnit,*string)
}

#ScheduleRetainRuleParameters: {
	// Specifies the number of oldest AMIs to deprecate. Must be an integer between 1 and 1000.
	// +kubebuilder:validation:Optional
	count?: null | float64 @go(Count,*float64)

	// How often this lifecycle policy should be evaluated. 1, 2,3,4,6,8,12 or 24 are valid values.
	// +kubebuilder:validation:Optional
	interval?: null | float64 @go(Interval,*float64)

	// The unit for how often the lifecycle policy should be evaluated. HOURS is currently the only allowed value and also the default value.
	// +kubebuilder:validation:Optional
	intervalUnit?: null | string @go(IntervalUnit,*string)
}

#ShareRuleInitParameters: {
	// The IDs of the AWS accounts with which to share the snapshots.
	targetAccounts?: [...null | string] @go(TargetAccounts,[]*string)

	// How often this lifecycle policy should be evaluated. 1, 2,3,4,6,8,12 or 24 are valid values.
	unshareInterval?: null | float64 @go(UnshareInterval,*float64)

	// The unit for how often the lifecycle policy should be evaluated. HOURS is currently the only allowed value and also the default value.
	unshareIntervalUnit?: null | string @go(UnshareIntervalUnit,*string)
}

#ShareRuleObservation: {
	// The IDs of the AWS accounts with which to share the snapshots.
	targetAccounts?: [...null | string] @go(TargetAccounts,[]*string)

	// How often this lifecycle policy should be evaluated. 1, 2,3,4,6,8,12 or 24 are valid values.
	unshareInterval?: null | float64 @go(UnshareInterval,*float64)

	// The unit for how often the lifecycle policy should be evaluated. HOURS is currently the only allowed value and also the default value.
	unshareIntervalUnit?: null | string @go(UnshareIntervalUnit,*string)
}

#ShareRuleParameters: {
	// The IDs of the AWS accounts with which to share the snapshots.
	// +kubebuilder:validation:Optional
	targetAccounts: [...null | string] @go(TargetAccounts,[]*string)

	// How often this lifecycle policy should be evaluated. 1, 2,3,4,6,8,12 or 24 are valid values.
	// +kubebuilder:validation:Optional
	unshareInterval?: null | float64 @go(UnshareInterval,*float64)

	// The unit for how often the lifecycle policy should be evaluated. HOURS is currently the only allowed value and also the default value.
	// +kubebuilder:validation:Optional
	unshareIntervalUnit?: null | string @go(UnshareIntervalUnit,*string)
}

// LifecyclePolicySpec defines the desired state of LifecyclePolicy
#LifecyclePolicySpec: {
	v1.#ResourceSpec
	forProvider: #LifecyclePolicyParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #LifecyclePolicyInitParameters @go(InitProvider)
}

// LifecyclePolicyStatus defines the observed state of LifecyclePolicy.
#LifecyclePolicyStatus: {
	v1.#ResourceStatus
	atProvider?: #LifecyclePolicyObservation @go(AtProvider)
}

// LifecyclePolicy is the Schema for the LifecyclePolicys API. Provides a Data Lifecycle Manager (DLM) lifecycle policy for managing snapshots.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#LifecyclePolicy: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.description) || (has(self.initProvider) && has(self.initProvider.description))",message="spec.forProvider.description is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.policyDetails) || (has(self.initProvider) && has(self.initProvider.policyDetails))",message="spec.forProvider.policyDetails is a required parameter"
	spec:    #LifecyclePolicySpec   @go(Spec)
	status?: #LifecyclePolicyStatus @go(Status)
}

// LifecyclePolicyList contains a list of LifecyclePolicys
#LifecyclePolicyList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#LifecyclePolicy] @go(Items,[]LifecyclePolicy)
}
