// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/rum/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#MetricsDestinationInitParameters: {
	// Defines the destination to send the metrics to. Valid values are CloudWatch and Evidently. If you specify Evidently, you must also specify the ARN of the CloudWatchEvidently experiment that is to be the destination and an IAM role that has permission to write to the experiment.
	destination?: null | string @go(Destination,*string)

	// Use this parameter only if Destination is Evidently. This parameter specifies the ARN of the Evidently experiment that will receive the extended metrics.
	destinationArn?: null | string @go(DestinationArn,*string)
}

#MetricsDestinationObservation: {
	// The name of the CloudWatch RUM app monitor that will send the metrics.
	appMonitorName?: null | string @go(AppMonitorName,*string)

	// Defines the destination to send the metrics to. Valid values are CloudWatch and Evidently. If you specify Evidently, you must also specify the ARN of the CloudWatchEvidently experiment that is to be the destination and an IAM role that has permission to write to the experiment.
	destination?: null | string @go(Destination,*string)

	// Use this parameter only if Destination is Evidently. This parameter specifies the ARN of the Evidently experiment that will receive the extended metrics.
	destinationArn?: null | string @go(DestinationArn,*string)

	// This parameter is required if Destination is Evidently. If Destination is CloudWatch, do not use this parameter.
	iamRoleArn?: null | string @go(IAMRoleArn,*string)

	// The name of the CloudWatch RUM app monitor that will send the metrics.
	id?: null | string @go(ID,*string)
}

#MetricsDestinationParameters: {
	// The name of the CloudWatch RUM app monitor that will send the metrics.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/rum/v1beta1.AppMonitor
	// +kubebuilder:validation:Optional
	appMonitorName?: null | string @go(AppMonitorName,*string)

	// Reference to a AppMonitor in rum to populate appMonitorName.
	// +kubebuilder:validation:Optional
	appMonitorNameRef?: null | v1.#Reference @go(AppMonitorNameRef,*v1.Reference)

	// Selector for a AppMonitor in rum to populate appMonitorName.
	// +kubebuilder:validation:Optional
	appMonitorNameSelector?: null | v1.#Selector @go(AppMonitorNameSelector,*v1.Selector)

	// Defines the destination to send the metrics to. Valid values are CloudWatch and Evidently. If you specify Evidently, you must also specify the ARN of the CloudWatchEvidently experiment that is to be the destination and an IAM role that has permission to write to the experiment.
	// +kubebuilder:validation:Optional
	destination?: null | string @go(Destination,*string)

	// Use this parameter only if Destination is Evidently. This parameter specifies the ARN of the Evidently experiment that will receive the extended metrics.
	// +kubebuilder:validation:Optional
	destinationArn?: null | string @go(DestinationArn,*string)

	// This parameter is required if Destination is Evidently. If Destination is CloudWatch, do not use this parameter.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	iamRoleArn?: null | string @go(IAMRoleArn,*string)

	// Reference to a Role in iam to populate iamRoleArn.
	// +kubebuilder:validation:Optional
	iamRoleArnRef?: null | v1.#Reference @go(IAMRoleArnRef,*v1.Reference)

	// Selector for a Role in iam to populate iamRoleArn.
	// +kubebuilder:validation:Optional
	iamRoleArnSelector?: null | v1.#Selector @go(IAMRoleArnSelector,*v1.Selector)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)
}

// MetricsDestinationSpec defines the desired state of MetricsDestination
#MetricsDestinationSpec: {
	v1.#ResourceSpec
	forProvider: #MetricsDestinationParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #MetricsDestinationInitParameters @go(InitProvider)
}

// MetricsDestinationStatus defines the observed state of MetricsDestination.
#MetricsDestinationStatus: {
	v1.#ResourceStatus
	atProvider?: #MetricsDestinationObservation @go(AtProvider)
}

// MetricsDestination is the Schema for the MetricsDestinations API. Provides a CloudWatch RUM Metrics Destination resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#MetricsDestination: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.destination) || (has(self.initProvider) && has(self.initProvider.destination))",message="spec.forProvider.destination is a required parameter"
	spec:    #MetricsDestinationSpec   @go(Spec)
	status?: #MetricsDestinationStatus @go(Status)
}

// MetricsDestinationList contains a list of MetricsDestinations
#MetricsDestinationList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#MetricsDestination] @go(Items,[]MetricsDestination)
}
