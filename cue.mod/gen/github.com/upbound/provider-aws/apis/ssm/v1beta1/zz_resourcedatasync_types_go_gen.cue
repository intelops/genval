// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/ssm/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#ResourceDataSyncInitParameters: {
	// Amazon S3 configuration details for the sync.
	s3Destination?: [...#S3DestinationInitParameters] @go(S3Destination,[]S3DestinationInitParameters)
}

#ResourceDataSyncObservation: {
	id?: null | string @go(ID,*string)

	// Amazon S3 configuration details for the sync.
	s3Destination?: [...#S3DestinationObservation] @go(S3Destination,[]S3DestinationObservation)
}

#ResourceDataSyncParameters: {
	// Region with the bucket targeted by the Resource Data Sync.
	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Amazon S3 configuration details for the sync.
	// +kubebuilder:validation:Optional
	s3Destination?: [...#S3DestinationParameters] @go(S3Destination,[]S3DestinationParameters)
}

#S3DestinationInitParameters: {
	// ARN of an encryption key for a destination in Amazon S3.
	kmsKeyArn?: null | string @go(KMSKeyArn,*string)

	// Prefix for the bucket.
	prefix?: null | string @go(Prefix,*string)

	// A supported sync format. Only JsonSerDe is currently supported. Defaults to JsonSerDe.
	syncFormat?: null | string @go(SyncFormat,*string)
}

#S3DestinationObservation: {
	// Name of S3 bucket where the aggregated data is stored.
	bucketName?: null | string @go(BucketName,*string)

	// ARN of an encryption key for a destination in Amazon S3.
	kmsKeyArn?: null | string @go(KMSKeyArn,*string)

	// Prefix for the bucket.
	prefix?: null | string @go(Prefix,*string)

	// Region with the bucket targeted by the Resource Data Sync.
	region?: null | string @go(Region,*string)

	// A supported sync format. Only JsonSerDe is currently supported. Defaults to JsonSerDe.
	syncFormat?: null | string @go(SyncFormat,*string)
}

#S3DestinationParameters: {
	// Name of S3 bucket where the aggregated data is stored.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/s3/v1beta1.Bucket
	// +kubebuilder:validation:Optional
	bucketName?: null | string @go(BucketName,*string)

	// Reference to a Bucket in s3 to populate bucketName.
	// +kubebuilder:validation:Optional
	bucketNameRef?: null | v1.#Reference @go(BucketNameRef,*v1.Reference)

	// Selector for a Bucket in s3 to populate bucketName.
	// +kubebuilder:validation:Optional
	bucketNameSelector?: null | v1.#Selector @go(BucketNameSelector,*v1.Selector)

	// ARN of an encryption key for a destination in Amazon S3.
	// +kubebuilder:validation:Optional
	kmsKeyArn?: null | string @go(KMSKeyArn,*string)

	// Prefix for the bucket.
	// +kubebuilder:validation:Optional
	prefix?: null | string @go(Prefix,*string)

	// Region with the bucket targeted by the Resource Data Sync.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/s3/v1beta1.Bucket
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("region",false)
	// +kubebuilder:validation:Optional
	region?: null | string @go(Region,*string)

	// Reference to a Bucket in s3 to populate region.
	// +kubebuilder:validation:Optional
	regionRef?: null | v1.#Reference @go(RegionRef,*v1.Reference)

	// Selector for a Bucket in s3 to populate region.
	// +kubebuilder:validation:Optional
	regionSelector?: null | v1.#Selector @go(RegionSelector,*v1.Selector)

	// A supported sync format. Only JsonSerDe is currently supported. Defaults to JsonSerDe.
	// +kubebuilder:validation:Optional
	syncFormat?: null | string @go(SyncFormat,*string)
}

// ResourceDataSyncSpec defines the desired state of ResourceDataSync
#ResourceDataSyncSpec: {
	v1.#ResourceSpec
	forProvider: #ResourceDataSyncParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ResourceDataSyncInitParameters @go(InitProvider)
}

// ResourceDataSyncStatus defines the observed state of ResourceDataSync.
#ResourceDataSyncStatus: {
	v1.#ResourceStatus
	atProvider?: #ResourceDataSyncObservation @go(AtProvider)
}

// ResourceDataSync is the Schema for the ResourceDataSyncs API. Provides a SSM resource data sync.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#ResourceDataSync: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.s3Destination) || (has(self.initProvider) && has(self.initProvider.s3Destination))",message="spec.forProvider.s3Destination is a required parameter"
	spec:    #ResourceDataSyncSpec   @go(Spec)
	status?: #ResourceDataSyncStatus @go(Status)
}

// ResourceDataSyncList contains a list of ResourceDataSyncs
#ResourceDataSyncList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#ResourceDataSync] @go(Items,[]ResourceDataSync)
}
