// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/ssm/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#AutomationParametersInitParameters: {
	// The version of an Automation document to use during task execution.
	documentVersion?: null | string @go(DocumentVersion,*string)

	// The parameters for the RUN_COMMAND task execution. Documented below.
	parameter?: [...#AutomationParametersParameterInitParameters] @go(Parameter,[]AutomationParametersParameterInitParameters)
}

#AutomationParametersObservation: {
	// The version of an Automation document to use during task execution.
	documentVersion?: null | string @go(DocumentVersion,*string)

	// The parameters for the RUN_COMMAND task execution. Documented below.
	parameter?: [...#AutomationParametersParameterObservation] @go(Parameter,[]AutomationParametersParameterObservation)
}

#AutomationParametersParameterInitParameters: {
	// The name of the maintenance window task.
	name?: null | string @go(Name,*string)

	// The array of strings.
	values?: [...null | string] @go(Values,[]*string)
}

#AutomationParametersParameterObservation: {
	// The name of the maintenance window task.
	name?: null | string @go(Name,*string)

	// The array of strings.
	values?: [...null | string] @go(Values,[]*string)
}

#AutomationParametersParameterParameters: {
	// The name of the maintenance window task.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The array of strings.
	// +kubebuilder:validation:Optional
	values: [...null | string] @go(Values,[]*string)
}

#AutomationParametersParameters: {
	// The version of an Automation document to use during task execution.
	// +kubebuilder:validation:Optional
	documentVersion?: null | string @go(DocumentVersion,*string)

	// The parameters for the RUN_COMMAND task execution. Documented below.
	// +kubebuilder:validation:Optional
	parameter?: [...#AutomationParametersParameterParameters] @go(Parameter,[]AutomationParametersParameterParameters)
}

#CloudwatchConfigInitParameters: {
	// The name of the CloudWatch log group where you want to send command output. If you don't specify a group name, Systems Manager automatically creates a log group for you. The log group uses the following naming format: aws/ssm/SystemsManagerDocumentName.
	cloudwatchLogGroupName?: null | string @go(CloudwatchLogGroupName,*string)

	// Enables Systems Manager to send command output to CloudWatch Logs.
	cloudwatchOutputEnabled?: null | bool @go(CloudwatchOutputEnabled,*bool)
}

#CloudwatchConfigObservation: {
	// The name of the CloudWatch log group where you want to send command output. If you don't specify a group name, Systems Manager automatically creates a log group for you. The log group uses the following naming format: aws/ssm/SystemsManagerDocumentName.
	cloudwatchLogGroupName?: null | string @go(CloudwatchLogGroupName,*string)

	// Enables Systems Manager to send command output to CloudWatch Logs.
	cloudwatchOutputEnabled?: null | bool @go(CloudwatchOutputEnabled,*bool)
}

#CloudwatchConfigParameters: {
	// The name of the CloudWatch log group where you want to send command output. If you don't specify a group name, Systems Manager automatically creates a log group for you. The log group uses the following naming format: aws/ssm/SystemsManagerDocumentName.
	// +kubebuilder:validation:Optional
	cloudwatchLogGroupName?: null | string @go(CloudwatchLogGroupName,*string)

	// Enables Systems Manager to send command output to CloudWatch Logs.
	// +kubebuilder:validation:Optional
	cloudwatchOutputEnabled?: null | bool @go(CloudwatchOutputEnabled,*bool)
}

#LambdaParametersInitParameters: {
	// Pass client-specific information to the Lambda function that you are invoking.
	clientContext?: null | string @go(ClientContext,*string)

	// Specify a Lambda function version or alias name.
	qualifier?: null | string @go(Qualifier,*string)
}

#LambdaParametersObservation: {
	// Pass client-specific information to the Lambda function that you are invoking.
	clientContext?: null | string @go(ClientContext,*string)

	// Specify a Lambda function version or alias name.
	qualifier?: null | string @go(Qualifier,*string)
}

#LambdaParametersParameters: {
	// Pass client-specific information to the Lambda function that you are invoking.
	// +kubebuilder:validation:Optional
	clientContext?: null | string @go(ClientContext,*string)

	// JSON to provide to your Lambda function as input.
	// +kubebuilder:validation:Optional
	payloadSecretRef?: null | v1.#SecretKeySelector @go(PayloadSecretRef,*v1.SecretKeySelector)

	// Specify a Lambda function version or alias name.
	// +kubebuilder:validation:Optional
	qualifier?: null | string @go(Qualifier,*string)
}

#MaintenanceWindowTaskInitParameters: {
	// Indicates whether tasks should continue to run after the cutoff time specified in the maintenance windows is reached. Valid values are CONTINUE_TASK and CANCEL_TASK.
	cutoffBehavior?: null | string @go(CutoffBehavior,*string)

	// The description of the maintenance window task.
	description?: null | string @go(Description,*string)

	// The maximum number of targets this task can be run for in parallel.
	maxConcurrency?: null | string @go(MaxConcurrency,*string)

	// The maximum number of errors allowed before this task stops being scheduled.
	maxErrors?: null | string @go(MaxErrors,*string)

	// The name of the maintenance window task.
	name?: null | string @go(Name,*string)

	// The priority of the task in the Maintenance Window, the lower the number the higher the priority. Tasks in a Maintenance Window are scheduled in priority order with tasks that have the same priority scheduled in parallel.
	priority?: null | float64 @go(Priority,*float64)

	// The targets (either instances or window target ids). Instances are specified using Key=InstanceIds,Values=instanceid1,instanceid2. Window target ids are specified using Key=WindowTargetIds,Values=window target id1, window target id2.
	targets?: [...#MaintenanceWindowTaskTargetsInitParameters] @go(Targets,[]MaintenanceWindowTaskTargetsInitParameters)

	// Configuration block with parameters for task execution.
	taskInvocationParameters?: [...#TaskInvocationParametersInitParameters] @go(TaskInvocationParameters,[]TaskInvocationParametersInitParameters)

	// The type of task being registered. Valid values: AUTOMATION, LAMBDA, RUN_COMMAND or STEP_FUNCTIONS.
	taskType?: null | string @go(TaskType,*string)
}

#MaintenanceWindowTaskObservation: {
	// The ARN of the maintenance window task.
	arn?: null | string @go(Arn,*string)

	// Indicates whether tasks should continue to run after the cutoff time specified in the maintenance windows is reached. Valid values are CONTINUE_TASK and CANCEL_TASK.
	cutoffBehavior?: null | string @go(CutoffBehavior,*string)

	// The description of the maintenance window task.
	description?: null | string @go(Description,*string)

	// The ID of the maintenance window task.
	id?: null | string @go(ID,*string)

	// The maximum number of targets this task can be run for in parallel.
	maxConcurrency?: null | string @go(MaxConcurrency,*string)

	// The maximum number of errors allowed before this task stops being scheduled.
	maxErrors?: null | string @go(MaxErrors,*string)

	// The name of the maintenance window task.
	name?: null | string @go(Name,*string)

	// The priority of the task in the Maintenance Window, the lower the number the higher the priority. Tasks in a Maintenance Window are scheduled in priority order with tasks that have the same priority scheduled in parallel.
	priority?: null | float64 @go(Priority,*float64)

	// The role that should be assumed when executing the task. If a role is not provided, Systems Manager uses your account's service-linked role. If no service-linked role for Systems Manager exists in your account, it is created for you.
	serviceRoleArn?: null | string @go(ServiceRoleArn,*string)

	// The targets (either instances or window target ids). Instances are specified using Key=InstanceIds,Values=instanceid1,instanceid2. Window target ids are specified using Key=WindowTargetIds,Values=window target id1, window target id2.
	targets?: [...#MaintenanceWindowTaskTargetsObservation] @go(Targets,[]MaintenanceWindowTaskTargetsObservation)

	// The ARN of the task to execute.
	taskArn?: null | string @go(TaskArn,*string)

	// Configuration block with parameters for task execution.
	taskInvocationParameters?: [...#TaskInvocationParametersObservation] @go(TaskInvocationParameters,[]TaskInvocationParametersObservation)

	// The type of task being registered. Valid values: AUTOMATION, LAMBDA, RUN_COMMAND or STEP_FUNCTIONS.
	taskType?: null | string @go(TaskType,*string)

	// The Id of the maintenance window to register the task with.
	windowId?: null | string @go(WindowID,*string)

	// The ID of the maintenance window task.
	windowTaskId?: null | string @go(WindowTaskID,*string)
}

#MaintenanceWindowTaskParameters: {
	// Indicates whether tasks should continue to run after the cutoff time specified in the maintenance windows is reached. Valid values are CONTINUE_TASK and CANCEL_TASK.
	// +kubebuilder:validation:Optional
	cutoffBehavior?: null | string @go(CutoffBehavior,*string)

	// The description of the maintenance window task.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// The maximum number of targets this task can be run for in parallel.
	// +kubebuilder:validation:Optional
	maxConcurrency?: null | string @go(MaxConcurrency,*string)

	// The maximum number of errors allowed before this task stops being scheduled.
	// +kubebuilder:validation:Optional
	maxErrors?: null | string @go(MaxErrors,*string)

	// The name of the maintenance window task.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The priority of the task in the Maintenance Window, the lower the number the higher the priority. Tasks in a Maintenance Window are scheduled in priority order with tasks that have the same priority scheduled in parallel.
	// +kubebuilder:validation:Optional
	priority?: null | float64 @go(Priority,*float64)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The role that should be assumed when executing the task. If a role is not provided, Systems Manager uses your account's service-linked role. If no service-linked role for Systems Manager exists in your account, it is created for you.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	serviceRoleArn?: null | string @go(ServiceRoleArn,*string)

	// Reference to a Role in iam to populate serviceRoleArn.
	// +kubebuilder:validation:Optional
	serviceRoleArnRef?: null | v1.#Reference @go(ServiceRoleArnRef,*v1.Reference)

	// Selector for a Role in iam to populate serviceRoleArn.
	// +kubebuilder:validation:Optional
	serviceRoleArnSelector?: null | v1.#Selector @go(ServiceRoleArnSelector,*v1.Selector)

	// The targets (either instances or window target ids). Instances are specified using Key=InstanceIds,Values=instanceid1,instanceid2. Window target ids are specified using Key=WindowTargetIds,Values=window target id1, window target id2.
	// +kubebuilder:validation:Optional
	targets?: [...#MaintenanceWindowTaskTargetsParameters] @go(Targets,[]MaintenanceWindowTaskTargetsParameters)

	// The ARN of the task to execute.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/lambda/v1beta1.Function
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	taskArn?: null | string @go(TaskArn,*string)

	// Reference to a Function in lambda to populate taskArn.
	// +kubebuilder:validation:Optional
	taskArnRef?: null | v1.#Reference @go(TaskArnRef,*v1.Reference)

	// Selector for a Function in lambda to populate taskArn.
	// +kubebuilder:validation:Optional
	taskArnSelector?: null | v1.#Selector @go(TaskArnSelector,*v1.Selector)

	// Configuration block with parameters for task execution.
	// +kubebuilder:validation:Optional
	taskInvocationParameters?: [...#TaskInvocationParametersParameters] @go(TaskInvocationParameters,[]TaskInvocationParametersParameters)

	// The type of task being registered. Valid values: AUTOMATION, LAMBDA, RUN_COMMAND or STEP_FUNCTIONS.
	// +kubebuilder:validation:Optional
	taskType?: null | string @go(TaskType,*string)

	// The Id of the maintenance window to register the task with.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ssm/v1beta1.MaintenanceWindow
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	windowId?: null | string @go(WindowID,*string)

	// Reference to a MaintenanceWindow in ssm to populate windowId.
	// +kubebuilder:validation:Optional
	windowIdRef?: null | v1.#Reference @go(WindowIDRef,*v1.Reference)

	// Selector for a MaintenanceWindow in ssm to populate windowId.
	// +kubebuilder:validation:Optional
	windowIdSelector?: null | v1.#Selector @go(WindowIDSelector,*v1.Selector)
}

#MaintenanceWindowTaskTargetsInitParameters: {
	key?: null | string @go(Key,*string)

	// The array of strings.
	values?: [...null | string] @go(Values,[]*string)
}

#MaintenanceWindowTaskTargetsObservation: {
	key?: null | string @go(Key,*string)

	// The array of strings.
	values?: [...null | string] @go(Values,[]*string)
}

#MaintenanceWindowTaskTargetsParameters: {
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)

	// The array of strings.
	// +kubebuilder:validation:Optional
	values: [...null | string] @go(Values,[]*string)
}

#NotificationConfigInitParameters: {
	// The different events for which you can receive notifications. Valid values: All, InProgress, Success, TimedOut, Cancelled, and Failed
	notificationEvents?: [...null | string] @go(NotificationEvents,[]*string)

	// When specified with Command, receive notification when the status of a command changes. When specified with Invocation, for commands sent to multiple instances, receive notification on a per-instance basis when the status of a command changes. Valid values: Command and Invocation
	notificationType?: null | string @go(NotificationType,*string)
}

#NotificationConfigObservation: {
	// An Amazon Resource Name (ARN) for a Simple Notification Service (SNS) topic. Run Command pushes notifications about command status changes to this topic.
	notificationArn?: null | string @go(NotificationArn,*string)

	// The different events for which you can receive notifications. Valid values: All, InProgress, Success, TimedOut, Cancelled, and Failed
	notificationEvents?: [...null | string] @go(NotificationEvents,[]*string)

	// When specified with Command, receive notification when the status of a command changes. When specified with Invocation, for commands sent to multiple instances, receive notification on a per-instance basis when the status of a command changes. Valid values: Command and Invocation
	notificationType?: null | string @go(NotificationType,*string)
}

#NotificationConfigParameters: {
	// An Amazon Resource Name (ARN) for a Simple Notification Service (SNS) topic. Run Command pushes notifications about command status changes to this topic.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/sns/v1beta1.Topic
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	notificationArn?: null | string @go(NotificationArn,*string)

	// Reference to a Topic in sns to populate notificationArn.
	// +kubebuilder:validation:Optional
	notificationArnRef?: null | v1.#Reference @go(NotificationArnRef,*v1.Reference)

	// Selector for a Topic in sns to populate notificationArn.
	// +kubebuilder:validation:Optional
	notificationArnSelector?: null | v1.#Selector @go(NotificationArnSelector,*v1.Selector)

	// The different events for which you can receive notifications. Valid values: All, InProgress, Success, TimedOut, Cancelled, and Failed
	// +kubebuilder:validation:Optional
	notificationEvents?: [...null | string] @go(NotificationEvents,[]*string)

	// When specified with Command, receive notification when the status of a command changes. When specified with Invocation, for commands sent to multiple instances, receive notification on a per-instance basis when the status of a command changes. Valid values: Command and Invocation
	// +kubebuilder:validation:Optional
	notificationType?: null | string @go(NotificationType,*string)
}

#RunCommandParametersInitParameters: {
	// Configuration options for sending command output to CloudWatch Logs. Documented below.
	cloudwatchConfig?: [...#CloudwatchConfigInitParameters] @go(CloudwatchConfig,[]CloudwatchConfigInitParameters)

	// Information about the command(s) to execute.
	comment?: null | string @go(Comment,*string)

	// The SHA-256 or SHA-1 hash created by the system when the document was created. SHA-1 hashes have been deprecated.
	documentHash?: null | string @go(DocumentHash,*string)

	// SHA-256 or SHA-1. SHA-1 hashes have been deprecated. Valid values: Sha256 and Sha1
	documentHashType?: null | string @go(DocumentHashType,*string)

	// The version of an Automation document to use during task execution.
	documentVersion?: null | string @go(DocumentVersion,*string)

	// Configurations for sending notifications about command status changes on a per-instance basis. Documented below.
	notificationConfig?: [...#NotificationConfigInitParameters] @go(NotificationConfig,[]NotificationConfigInitParameters)

	// The Amazon S3 bucket subfolder.
	outputS3KeyPrefix?: null | string @go(OutputS3KeyPrefix,*string)

	// The parameters for the RUN_COMMAND task execution. Documented below.
	parameter?: [...#RunCommandParametersParameterInitParameters] @go(Parameter,[]RunCommandParametersParameterInitParameters)

	// If this time is reached and the command has not already started executing, it doesn't run.
	timeoutSeconds?: null | float64 @go(TimeoutSeconds,*float64)
}

#RunCommandParametersObservation: {
	// Configuration options for sending command output to CloudWatch Logs. Documented below.
	cloudwatchConfig?: [...#CloudwatchConfigObservation] @go(CloudwatchConfig,[]CloudwatchConfigObservation)

	// Information about the command(s) to execute.
	comment?: null | string @go(Comment,*string)

	// The SHA-256 or SHA-1 hash created by the system when the document was created. SHA-1 hashes have been deprecated.
	documentHash?: null | string @go(DocumentHash,*string)

	// SHA-256 or SHA-1. SHA-1 hashes have been deprecated. Valid values: Sha256 and Sha1
	documentHashType?: null | string @go(DocumentHashType,*string)

	// The version of an Automation document to use during task execution.
	documentVersion?: null | string @go(DocumentVersion,*string)

	// Configurations for sending notifications about command status changes on a per-instance basis. Documented below.
	notificationConfig?: [...#NotificationConfigObservation] @go(NotificationConfig,[]NotificationConfigObservation)

	// The name of the Amazon S3 bucket.
	outputS3Bucket?: null | string @go(OutputS3Bucket,*string)

	// The Amazon S3 bucket subfolder.
	outputS3KeyPrefix?: null | string @go(OutputS3KeyPrefix,*string)

	// The parameters for the RUN_COMMAND task execution. Documented below.
	parameter?: [...#RunCommandParametersParameterObservation] @go(Parameter,[]RunCommandParametersParameterObservation)

	// The role that should be assumed when executing the task. If a role is not provided, Systems Manager uses your account's service-linked role. If no service-linked role for Systems Manager exists in your account, it is created for you.
	serviceRoleArn?: null | string @go(ServiceRoleArn,*string)

	// If this time is reached and the command has not already started executing, it doesn't run.
	timeoutSeconds?: null | float64 @go(TimeoutSeconds,*float64)
}

#RunCommandParametersParameterInitParameters: {
	// The name of the maintenance window task.
	name?: null | string @go(Name,*string)

	// The array of strings.
	values?: [...null | string] @go(Values,[]*string)
}

#RunCommandParametersParameterObservation: {
	// The name of the maintenance window task.
	name?: null | string @go(Name,*string)

	// The array of strings.
	values?: [...null | string] @go(Values,[]*string)
}

#RunCommandParametersParameterParameters: {
	// The name of the maintenance window task.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The array of strings.
	// +kubebuilder:validation:Optional
	values: [...null | string] @go(Values,[]*string)
}

#RunCommandParametersParameters: {
	// Configuration options for sending command output to CloudWatch Logs. Documented below.
	// +kubebuilder:validation:Optional
	cloudwatchConfig?: [...#CloudwatchConfigParameters] @go(CloudwatchConfig,[]CloudwatchConfigParameters)

	// Information about the command(s) to execute.
	// +kubebuilder:validation:Optional
	comment?: null | string @go(Comment,*string)

	// The SHA-256 or SHA-1 hash created by the system when the document was created. SHA-1 hashes have been deprecated.
	// +kubebuilder:validation:Optional
	documentHash?: null | string @go(DocumentHash,*string)

	// SHA-256 or SHA-1. SHA-1 hashes have been deprecated. Valid values: Sha256 and Sha1
	// +kubebuilder:validation:Optional
	documentHashType?: null | string @go(DocumentHashType,*string)

	// The version of an Automation document to use during task execution.
	// +kubebuilder:validation:Optional
	documentVersion?: null | string @go(DocumentVersion,*string)

	// Configurations for sending notifications about command status changes on a per-instance basis. Documented below.
	// +kubebuilder:validation:Optional
	notificationConfig?: [...#NotificationConfigParameters] @go(NotificationConfig,[]NotificationConfigParameters)

	// The name of the Amazon S3 bucket.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/s3/v1beta1.Bucket
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	outputS3Bucket?: null | string @go(OutputS3Bucket,*string)

	// Reference to a Bucket in s3 to populate outputS3Bucket.
	// +kubebuilder:validation:Optional
	outputS3BucketRef?: null | v1.#Reference @go(OutputS3BucketRef,*v1.Reference)

	// Selector for a Bucket in s3 to populate outputS3Bucket.
	// +kubebuilder:validation:Optional
	outputS3BucketSelector?: null | v1.#Selector @go(OutputS3BucketSelector,*v1.Selector)

	// The Amazon S3 bucket subfolder.
	// +kubebuilder:validation:Optional
	outputS3KeyPrefix?: null | string @go(OutputS3KeyPrefix,*string)

	// The parameters for the RUN_COMMAND task execution. Documented below.
	// +kubebuilder:validation:Optional
	parameter?: [...#RunCommandParametersParameterParameters] @go(Parameter,[]RunCommandParametersParameterParameters)

	// The role that should be assumed when executing the task. If a role is not provided, Systems Manager uses your account's service-linked role. If no service-linked role for Systems Manager exists in your account, it is created for you.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	serviceRoleArn?: null | string @go(ServiceRoleArn,*string)

	// Reference to a Role in iam to populate serviceRoleArn.
	// +kubebuilder:validation:Optional
	serviceRoleArnRef?: null | v1.#Reference @go(ServiceRoleArnRef,*v1.Reference)

	// Selector for a Role in iam to populate serviceRoleArn.
	// +kubebuilder:validation:Optional
	serviceRoleArnSelector?: null | v1.#Selector @go(ServiceRoleArnSelector,*v1.Selector)

	// If this time is reached and the command has not already started executing, it doesn't run.
	// +kubebuilder:validation:Optional
	timeoutSeconds?: null | float64 @go(TimeoutSeconds,*float64)
}

#StepFunctionsParametersInitParameters: {
	// The name of the maintenance window task.
	name?: null | string @go(Name,*string)
}

#StepFunctionsParametersObservation: {
	// The name of the maintenance window task.
	name?: null | string @go(Name,*string)
}

#StepFunctionsParametersParameters: {
	// The inputs for the STEP_FUNCTION task.
	// +kubebuilder:validation:Optional
	inputSecretRef?: null | v1.#SecretKeySelector @go(InputSecretRef,*v1.SecretKeySelector)

	// The name of the maintenance window task.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)
}

#TaskInvocationParametersInitParameters: {
	// The parameters for an AUTOMATION task type. Documented below.
	automationParameters?: [...#AutomationParametersInitParameters] @go(AutomationParameters,[]AutomationParametersInitParameters)

	// The parameters for a LAMBDA task type. Documented below.
	lambdaParameters?: [...#LambdaParametersInitParameters] @go(LambdaParameters,[]LambdaParametersInitParameters)

	// The parameters for a RUN_COMMAND task type. Documented below.
	runCommandParameters?: [...#RunCommandParametersInitParameters] @go(RunCommandParameters,[]RunCommandParametersInitParameters)

	// The parameters for a STEP_FUNCTIONS task type. Documented below.
	stepFunctionsParameters?: [...#StepFunctionsParametersInitParameters] @go(StepFunctionsParameters,[]StepFunctionsParametersInitParameters)
}

#TaskInvocationParametersObservation: {
	// The parameters for an AUTOMATION task type. Documented below.
	automationParameters?: [...#AutomationParametersObservation] @go(AutomationParameters,[]AutomationParametersObservation)

	// The parameters for a LAMBDA task type. Documented below.
	lambdaParameters?: [...#LambdaParametersObservation] @go(LambdaParameters,[]LambdaParametersObservation)

	// The parameters for a RUN_COMMAND task type. Documented below.
	runCommandParameters?: [...#RunCommandParametersObservation] @go(RunCommandParameters,[]RunCommandParametersObservation)

	// The parameters for a STEP_FUNCTIONS task type. Documented below.
	stepFunctionsParameters?: [...#StepFunctionsParametersObservation] @go(StepFunctionsParameters,[]StepFunctionsParametersObservation)
}

#TaskInvocationParametersParameters: {
	// The parameters for an AUTOMATION task type. Documented below.
	// +kubebuilder:validation:Optional
	automationParameters?: [...#AutomationParametersParameters] @go(AutomationParameters,[]AutomationParametersParameters)

	// The parameters for a LAMBDA task type. Documented below.
	// +kubebuilder:validation:Optional
	lambdaParameters?: [...#LambdaParametersParameters] @go(LambdaParameters,[]LambdaParametersParameters)

	// The parameters for a RUN_COMMAND task type. Documented below.
	// +kubebuilder:validation:Optional
	runCommandParameters?: [...#RunCommandParametersParameters] @go(RunCommandParameters,[]RunCommandParametersParameters)

	// The parameters for a STEP_FUNCTIONS task type. Documented below.
	// +kubebuilder:validation:Optional
	stepFunctionsParameters?: [...#StepFunctionsParametersParameters] @go(StepFunctionsParameters,[]StepFunctionsParametersParameters)
}

// MaintenanceWindowTaskSpec defines the desired state of MaintenanceWindowTask
#MaintenanceWindowTaskSpec: {
	v1.#ResourceSpec
	forProvider: #MaintenanceWindowTaskParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #MaintenanceWindowTaskInitParameters @go(InitProvider)
}

// MaintenanceWindowTaskStatus defines the observed state of MaintenanceWindowTask.
#MaintenanceWindowTaskStatus: {
	v1.#ResourceStatus
	atProvider?: #MaintenanceWindowTaskObservation @go(AtProvider)
}

// MaintenanceWindowTask is the Schema for the MaintenanceWindowTasks API. Provides an SSM Maintenance Window Task resource
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#MaintenanceWindowTask: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.taskType) || (has(self.initProvider) && has(self.initProvider.taskType))",message="spec.forProvider.taskType is a required parameter"
	spec:    #MaintenanceWindowTaskSpec   @go(Spec)
	status?: #MaintenanceWindowTaskStatus @go(Status)
}

// MaintenanceWindowTaskList contains a list of MaintenanceWindowTasks
#MaintenanceWindowTaskList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#MaintenanceWindowTask] @go(Items,[]MaintenanceWindowTask)
}
