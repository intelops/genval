// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/dms/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#EventSubscriptionInitParameters: {
	// Whether the event subscription should be enabled.
	enabled?: null | bool @go(Enabled,*bool)

	// List of event categories to listen for, see DescribeEventCategories for a canonical list.
	eventCategories?: [...null | string] @go(EventCategories,[]*string)

	// Ids of sources to listen to.
	sourceIds?: [...null | string] @go(SourceIds,[]*string)

	// Type of source for events. Valid values: replication-instance or replication-task
	sourceType?: null | string @go(SourceType,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#EventSubscriptionObservation: {
	// Amazon Resource Name (ARN) of the DMS Event Subscription.
	arn?: null | string @go(Arn,*string)

	// Whether the event subscription should be enabled.
	enabled?: null | bool @go(Enabled,*bool)

	// List of event categories to listen for, see DescribeEventCategories for a canonical list.
	eventCategories?: [...null | string] @go(EventCategories,[]*string)
	id?: null | string @go(ID,*string)

	// SNS topic arn to send events on.
	snsTopicArn?: null | string @go(SnsTopicArn,*string)

	// Ids of sources to listen to.
	sourceIds?: [...null | string] @go(SourceIds,[]*string)

	// Type of source for events. Valid values: replication-instance or replication-task
	sourceType?: null | string @go(SourceType,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#EventSubscriptionParameters: {
	// Whether the event subscription should be enabled.
	// +kubebuilder:validation:Optional
	enabled?: null | bool @go(Enabled,*bool)

	// List of event categories to listen for, see DescribeEventCategories for a canonical list.
	// +kubebuilder:validation:Optional
	eventCategories?: [...null | string] @go(EventCategories,[]*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// SNS topic arn to send events on.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/sns/v1beta1.Topic
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	snsTopicArn?: null | string @go(SnsTopicArn,*string)

	// Reference to a Topic in sns to populate snsTopicArn.
	// +kubebuilder:validation:Optional
	snsTopicArnRef?: null | v1.#Reference @go(SnsTopicArnRef,*v1.Reference)

	// Selector for a Topic in sns to populate snsTopicArn.
	// +kubebuilder:validation:Optional
	snsTopicArnSelector?: null | v1.#Selector @go(SnsTopicArnSelector,*v1.Selector)

	// Ids of sources to listen to.
	// +kubebuilder:validation:Optional
	sourceIds?: [...null | string] @go(SourceIds,[]*string)

	// Type of source for events. Valid values: replication-instance or replication-task
	// +kubebuilder:validation:Optional
	sourceType?: null | string @go(SourceType,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// EventSubscriptionSpec defines the desired state of EventSubscription
#EventSubscriptionSpec: {
	v1.#ResourceSpec
	forProvider: #EventSubscriptionParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #EventSubscriptionInitParameters @go(InitProvider)
}

// EventSubscriptionStatus defines the observed state of EventSubscription.
#EventSubscriptionStatus: {
	v1.#ResourceStatus
	atProvider?: #EventSubscriptionObservation @go(AtProvider)
}

// EventSubscription is the Schema for the EventSubscriptions API. Provides a DMS (Data Migration Service) event subscription resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#EventSubscription: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.eventCategories) || (has(self.initProvider) && has(self.initProvider.eventCategories))",message="spec.forProvider.eventCategories is a required parameter"
	spec:    #EventSubscriptionSpec   @go(Spec)
	status?: #EventSubscriptionStatus @go(Status)
}

// EventSubscriptionList contains a list of EventSubscriptions
#EventSubscriptionList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#EventSubscription] @go(Items,[]EventSubscription)
}
