// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/route53/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#TrafficPolicyInstanceInitParameters: {
	// Domain name for which Amazon Route 53 responds to DNS queries by using the resource record sets that Route 53 creates for this traffic policy instance.
	name?: null | string @go(Name,*string)

	// TTL that you want Amazon Route 53 to assign to all the resource record sets that it creates in the specified hosted zone.
	ttl?: null | float64 @go(TTL,*float64)

	// Version of the traffic policy
	trafficPolicyVersion?: null | float64 @go(TrafficPolicyVersion,*float64)
}

#TrafficPolicyInstanceObservation: {
	// ID of the hosted zone that you want Amazon Route 53 to create resource record sets in by using the configuration in a traffic policy.
	hostedZoneId?: null | string @go(HostedZoneID,*string)

	// ID of traffic policy instance.
	id?: null | string @go(ID,*string)

	// Domain name for which Amazon Route 53 responds to DNS queries by using the resource record sets that Route 53 creates for this traffic policy instance.
	name?: null | string @go(Name,*string)

	// TTL that you want Amazon Route 53 to assign to all the resource record sets that it creates in the specified hosted zone.
	ttl?: null | float64 @go(TTL,*float64)

	// ID of the traffic policy that you want to use to create resource record sets in the specified hosted zone.
	trafficPolicyId?: null | string @go(TrafficPolicyID,*string)

	// Version of the traffic policy
	trafficPolicyVersion?: null | float64 @go(TrafficPolicyVersion,*float64)
}

#TrafficPolicyInstanceParameters: {
	// ID of the hosted zone that you want Amazon Route 53 to create resource record sets in by using the configuration in a traffic policy.
	// +crossplane:generate:reference:type=Zone
	// +kubebuilder:validation:Optional
	hostedZoneId?: null | string @go(HostedZoneID,*string)

	// Reference to a Zone to populate hostedZoneId.
	// +kubebuilder:validation:Optional
	hostedZoneIdRef?: null | v1.#Reference @go(HostedZoneIDRef,*v1.Reference)

	// Selector for a Zone to populate hostedZoneId.
	// +kubebuilder:validation:Optional
	hostedZoneIdSelector?: null | v1.#Selector @go(HostedZoneIDSelector,*v1.Selector)

	// Domain name for which Amazon Route 53 responds to DNS queries by using the resource record sets that Route 53 creates for this traffic policy instance.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// TTL that you want Amazon Route 53 to assign to all the resource record sets that it creates in the specified hosted zone.
	// +kubebuilder:validation:Optional
	ttl?: null | float64 @go(TTL,*float64)

	// ID of the traffic policy that you want to use to create resource record sets in the specified hosted zone.
	// +crossplane:generate:reference:type=TrafficPolicy
	// +kubebuilder:validation:Optional
	trafficPolicyId?: null | string @go(TrafficPolicyID,*string)

	// Reference to a TrafficPolicy to populate trafficPolicyId.
	// +kubebuilder:validation:Optional
	trafficPolicyIdRef?: null | v1.#Reference @go(TrafficPolicyIDRef,*v1.Reference)

	// Selector for a TrafficPolicy to populate trafficPolicyId.
	// +kubebuilder:validation:Optional
	trafficPolicyIdSelector?: null | v1.#Selector @go(TrafficPolicyIDSelector,*v1.Selector)

	// Version of the traffic policy
	// +kubebuilder:validation:Optional
	trafficPolicyVersion?: null | float64 @go(TrafficPolicyVersion,*float64)
}

// TrafficPolicyInstanceSpec defines the desired state of TrafficPolicyInstance
#TrafficPolicyInstanceSpec: {
	v1.#ResourceSpec
	forProvider: #TrafficPolicyInstanceParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #TrafficPolicyInstanceInitParameters @go(InitProvider)
}

// TrafficPolicyInstanceStatus defines the observed state of TrafficPolicyInstance.
#TrafficPolicyInstanceStatus: {
	v1.#ResourceStatus
	atProvider?: #TrafficPolicyInstanceObservation @go(AtProvider)
}

// TrafficPolicyInstance is the Schema for the TrafficPolicyInstances API. Provides a Route53 traffic policy instance resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#TrafficPolicyInstance: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.trafficPolicyVersion) || (has(self.initProvider) && has(self.initProvider.trafficPolicyVersion))",message="spec.forProvider.trafficPolicyVersion is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.ttl) || (has(self.initProvider) && has(self.initProvider.ttl))",message="spec.forProvider.ttl is a required parameter"
	spec:    #TrafficPolicyInstanceSpec   @go(Spec)
	status?: #TrafficPolicyInstanceStatus @go(Status)
}

// TrafficPolicyInstanceList contains a list of TrafficPolicyInstances
#TrafficPolicyInstanceList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#TrafficPolicyInstance] @go(Items,[]TrafficPolicyInstance)
}
