// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/route53/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#ZoneAssociationInitParameters: {
	// The VPC's region. Defaults to the region of the AWS provider.
	vpcRegion?: null | string @go(VPCRegion,*string)
}

#ZoneAssociationObservation: {
	// The calculated unique identifier for the association.
	id?: null | string @go(ID,*string)

	// The account ID of the account that created the hosted zone.
	owningAccount?: null | string @go(OwningAccount,*string)

	// The VPC to associate with the private hosted zone.
	vpcId?: null | string @go(VPCID,*string)

	// The VPC's region. Defaults to the region of the AWS provider.
	vpcRegion?: null | string @go(VPCRegion,*string)

	// The private hosted zone to associate.
	zoneId?: null | string @go(ZoneID,*string)
}

#ZoneAssociationParameters: {
	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The VPC to associate with the private hosted zone.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.VPC
	// +kubebuilder:validation:Optional
	vpcId?: null | string @go(VPCID,*string)

	// Reference to a VPC in ec2 to populate vpcId.
	// +kubebuilder:validation:Optional
	vpcIdRef?: null | v1.#Reference @go(VPCIDRef,*v1.Reference)

	// Selector for a VPC in ec2 to populate vpcId.
	// +kubebuilder:validation:Optional
	vpcIdSelector?: null | v1.#Selector @go(VPCIDSelector,*v1.Selector)

	// The VPC's region. Defaults to the region of the AWS provider.
	// +kubebuilder:validation:Optional
	vpcRegion?: null | string @go(VPCRegion,*string)

	// The private hosted zone to associate.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/route53/v1beta1.Zone
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("zone_id",true)
	// +kubebuilder:validation:Optional
	zoneId?: null | string @go(ZoneID,*string)

	// Reference to a Zone in route53 to populate zoneId.
	// +kubebuilder:validation:Optional
	zoneIdRef?: null | v1.#Reference @go(ZoneIDRef,*v1.Reference)

	// Selector for a Zone in route53 to populate zoneId.
	// +kubebuilder:validation:Optional
	zoneIdSelector?: null | v1.#Selector @go(ZoneIDSelector,*v1.Selector)
}

// ZoneAssociationSpec defines the desired state of ZoneAssociation
#ZoneAssociationSpec: {
	v1.#ResourceSpec
	forProvider: #ZoneAssociationParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ZoneAssociationInitParameters @go(InitProvider)
}

// ZoneAssociationStatus defines the observed state of ZoneAssociation.
#ZoneAssociationStatus: {
	v1.#ResourceStatus
	atProvider?: #ZoneAssociationObservation @go(AtProvider)
}

// ZoneAssociation is the Schema for the ZoneAssociations API. Manages a Route53 Hosted Zone VPC association
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#ZoneAssociation: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta     @go(ObjectMeta)
	spec:      #ZoneAssociationSpec   @go(Spec)
	status?:   #ZoneAssociationStatus @go(Status)
}

// ZoneAssociationList contains a list of ZoneAssociations
#ZoneAssociationList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#ZoneAssociation] @go(Items,[]ZoneAssociation)
}
